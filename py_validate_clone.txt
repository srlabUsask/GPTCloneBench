$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
Gpt3D_Clone0_0.py 1 14
Gpt3D_Clone0_0.py 16 33

----------------------------------------

def second_largest(numbers) :
	count = 0
	m1 = m2 = float('-inf')
	for x in numbers :
		count += 1
		if x > m2 :
			if x > = m1 :
				m1, m2 = x, m1
			else :
				m2 = x
	return m2 if count > = 2 else None
----------------------------------------

def second_largest(numbers) :
	second_largest_number = float('-inf')
	largest_number = float('-inf')
	number_count = 0
	for number in numbers :
		number_count += 1
		if number > largest_number :
			second_largest_number = largest_number
			largest_number = number
		elif number > second_largest_number :
			second_largest_number = number
	if number_count >= 2 :
		return second_largest_number
	else :
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
101
0
Gpt3D_Clone101_0.py 1 10
Gpt3D_Clone101_0.py 12 21

----------------------------------------

def num_input(prompt, error) :
	while True :
		result = raw_input(prompt)
		for candidate in (int, float) :
			try : return candidate(result)
			except ValueError : pass
		print error
----------------------------------------

def num_input(prompt, error):
  while True:
    result = input(prompt)
    for candidate in (int, float):
      try:
        return candidte(result)
      except ValueError:
        pass
    print(error)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
103
1
Gpt3D_Clone103_1.py 1 9
Gpt3D_Clone103_1.py 11 17

----------------------------------------

def num_input(s) :
	while True :
		try :
			return decimal.Decimal(raw_input(s))
		except decimal.InvalidOperation, e :
			print e.message
----------------------------------------

def num_input(s):
    while True:
        try:
            return int(input(s))
        except ValueError as e:
            print(e.message)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
103
3
Gpt3D_Clone103_3.py 1 9
Gpt3D_Clone103_3.py 11 17

----------------------------------------

def num_input(s) :
	while True :
		try :
			return decimal.Decimal(raw_input(s))
		except decimal.InvalidOperation, e :
			print e.message
----------------------------------------

def num_input(s):
    while True:
        try:
            return float(input(s))
        except ValueError as e:
            print(e.message)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
0
Gpt3D_Clone106_0.py 1 13
Gpt3D_Clone106_0.py 15 22

----------------------------------------

def is_less(a, b) :
	i = 0
	while i < len(a) :
		if a [i] < b [i] :
			return True
		else :
			if a [i] > b [i] :
				return False
		i += 1
	return False
----------------------------------------

def is_less(a,b):
    for i in range(len(a)):
        if a[i] < b[i]:
            return True
        elif a[i] > b[i]:
            return False
    return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
1
Gpt3D_Clone106_1.py 1 13
Gpt3D_Clone106_1.py 15 22

----------------------------------------

def is_less(a, b) :
	i = 0
	while i < len(a) :
		if a [i] < b [i] :
			return True
		else :
			if a [i] > b [i] :
				return False
		i += 1
	return False
----------------------------------------

def is_less(a, b) :
	for i, _ in enumerate(a) :
		if a [i] < b [i] :
			return True
		elif a [i] > b [i] :
			return False
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
2
Gpt3D_Clone106_2.py 1 13
Gpt3D_Clone106_2.py 15 22

----------------------------------------

def is_less(a, b) :
	i = 0
	while i < len(a) :
		if a [i] < b [i] :
			return True
		else :
			if a [i] > b [i] :
				return False
		i += 1
	return False
----------------------------------------

def is_less(a, b) :
	for i in range(len(a)) :
		if a [i] < b [i] :
			return True
		elif a [i] > b [i] :
			return False
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
1
Gpt3D_Clone107_1.py 1 14
Gpt3D_Clone107_1.py 16 24

----------------------------------------

def main() :
	q = Queue()
	p1 = Process(target = f1, args = (q,))
	p1.start()
	p2 = Process(target = f2, args = (q,))
	p2.start()
	while True :
		try :
			print q.get()
		except :
			break
----------------------------------------

def main4() :
  q = Queue()
  p1 = Process(target = f1, args = (q,))
  p2 = Process(target = f2, args = (q,))
  p1.start()
  p2.start()
  for data in q.queue:
    print data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
109
3
Gpt3D_Clone109_3.py 1 8
Gpt3D_Clone109_3.py 10 16

----------------------------------------

def Compare(left, ops, comparators) :
	for x, op, y in zip([left] + comparators [: - 1], ops, comparators) :
		if not op(x, y) :
			return False
	return True
----------------------------------------

def Compare(left, ops, comparators):
	for i in range(len(comparators)-1):
		x, y = comparators[i], comparators[i+1]
		if not ops[i](x, y):
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
1
Gpt3D_Clone113_1.py 1 14
Gpt3D_Clone113_1.py 16 28

----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] ! = _tree.TREE_UNDEFINED :
		name = feature_name [node]
		threshold = tree_.threshold [node]
		print "{}if {} <= {}:".format(indent, name, threshold)
		recurse(tree_.children_left [node], depth + 1)
		print "{}else:  # if {} > {}".format(indent, name, threshold)
		recurse(tree_.children_right [node], depth + 1)
	else :
		print "{}return {}".format(indent, tree_.value [node])
----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_[node] != _tree.TREE_UNDEFINED :
		name = feature_name[node]
		threshold = tree_[node]
		print("{}if {} <= {}:".format(indent, name, threshold))
		recurse(tree_[node], depth + 1)
		print("{}else:  # if {} > {}".format(indent, name, threshold))
		recurse(tree_[node], depth + 1)
	else :
		print("{}return {}".format(indent, tree_[node]))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
3
Gpt3D_Clone113_3.py 1 14
Gpt3D_Clone113_3.py 16 27

----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] ! = _tree.TREE_UNDEFINED :
		name = feature_name [node]
		threshold = tree_.threshold [node]
		print "{}if {} <= {}:".format(indent, name, threshold)
		recurse(tree_.children_left [node], depth + 1)
		print "{}else:  # if {} > {}".format(indent, name, threshold)
		recurse(tree_.children_right [node], depth + 1)
	else :
		print "{}return {}".format(indent, tree_.value [node])
----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree[node] != _tree.TREE_UNDEFINED :
		name = feature_name[node]
		threshold = tree[node]
		print("{}if {} >= {}:".format(indent, name, threshold))
		recurse(tree[node], depth + 1)
		print("{}else:  # if {} < {}".format(indent, name, threshold))
		recurse(tree[node], depth + 1)
	else :
		print("{}return {}".format(indent, tree[node]))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
0
Gpt3D_Clone11_0.py 1 10
Gpt3D_Clone11_0.py 12 22

----------------------------------------

def shift_n_letters(letter, n) :
	result = ord(letter) + n
	while result > ord('z') :
		result -= 26
	while result < ord('a') :
		result += 26
	return chr(result)
----------------------------------------

def shift_n_letters(letter, n) :
	remainder = ord(letter) + n % 26
	
	if remainder > ord('z') :
		return chr(remainder -26)
	elif remainder < ord('a') :
		return chr(remainder + 26)
	else :
		return chr(remainder)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
3
Gpt3D_Clone11_3.py 1 10
Gpt3D_Clone11_3.py 12 17

----------------------------------------

def shift_n_letters(letter, n) :
	result = ord(letter) + n
	while result > ord('z') :
		result -= 26
	while result < ord('a') :
		result += 26
	return chr(result)
----------------------------------------

def shift_n_letters(letter, n) :
	shifted_value = ord(letter) + n
	loop_count = shifted_value // 26
	result = shifted_value - (loop_count * 26)
	return chr(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
4
Gpt3D_Clone11_4.py 1 10
Gpt3D_Clone11_4.py 12 17

----------------------------------------

def shift_n_letters(letter, n) :
	result = ord(letter) + n
	while result > ord('z') :
		result -= 26
	while result < ord('a') :
		result += 26
	return chr(result)
----------------------------------------

def shift_n_letters(letter, n):
    result = ord(letter) + n
    result = result - 26 if result > ord('z') else result
    result = result + 26 if result < ord('a') else result
    return chr(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
2
Gpt3D_Clone122_2.py 1 10
Gpt3D_Clone122_2.py 12 19

----------------------------------------

def __init__(self, pos, angle = 0) :
	super().__init__()
	self.image_inactive = pg.transform.rotate(CHECKPOINT_IMG, angle)
	self.image_active = pg.transform.rotate(CHECKPOINT2_IMG, angle)
	self.image = self.image_inactive
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
----------------------------------------

def __init__(self) :
	super().__init__()
	self.image_inactive = pg.transform.rotate(CHECKPOINT_IMG, 0)
	self.image_active = pg.transform.rotate(CHECKPOINT2_IMG, 0)
	self.image = self.image_inactive
	self.rect = self.image.get_rect(center = (0, 0))
	self.mask = pg.mask.from_surface(self.image)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
0
Gpt3D_Clone129_0.py 1 8
Gpt3D_Clone129_0.py 10 16

----------------------------------------

def __getattr__(self, key) :
	try :
		return self [key]
	except KeyError :
		raise AttributeError(key)
----------------------------------------

def __hasattr__(obj, key): 
	if key in obj:
		return True
	else:
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
1
Gpt3D_Clone129_1.py 1 8
Gpt3D_Clone129_1.py 10 15

----------------------------------------

def __getattr__(self, key) :
	try :
		return self [key]
	except KeyError :
		raise AttributeError(key)
----------------------------------------

def __getattr__(self, key): 
	if key in self:
		return self[key]
	else:
		raiseAttributeError(key)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
0
Gpt3D_Clone131_0.py 1 8
Gpt3D_Clone131_0.py 10 18

----------------------------------------

def find_nth(string, substring, n) :
	if (n == 1) :
		return string.find(substring)
	else :
		return string.find(substring, find_nth(string, substring, n - 1) + 1)
----------------------------------------

def findNth(s, x, n) :
    offset = 0
    for i in range(n) :
        index = s.find(x, offset) 
        if index == -1 :
            break
        offset = index + 1
    return index
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
1
Gpt3D_Clone131_1.py 1 8
Gpt3D_Clone131_1.py 10 17

----------------------------------------

def find_nth(string, substring, n) :
	if (n == 1) :
		return string.find(substring)
	else :
		return string.find(substring, find_nth(string, substring, n - 1) + 1)
----------------------------------------

def find_nth(string, substring, n) :
	if (n == 1) :
		position = 0
	else:
		position = find_nth(string, substring, n - 1) + 1
	return string.find(substring, position)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
2
Gpt3D_Clone131_2.py 1 8
Gpt3D_Clone131_2.py 10 15

----------------------------------------

def find_nth(string, substring, n) :
	if (n == 1) :
		return string.find(substring)
	else :
		return string.find(substring, find_nth(string, substring, n - 1) + 1)
----------------------------------------

def find_nth(string, substring, n) :
	start = 0
	for i in range(n) :
		start = string.find(substring, start) + 1
	return start - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
3
Gpt3D_Clone131_3.py 1 8
Gpt3D_Clone131_3.py 10 15

----------------------------------------

def find_nth(string, substring, n) :
	if (n == 1) :
		return string.find(substring)
	else :
		return string.find(substring, find_nth(string, substring, n - 1) + 1)
----------------------------------------

def find_nth(string, substring, n) :
	position = 0
	for _ in range(n) :
		position = string.find(substring, position) + 1
	return position
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
132
0
Gpt3D_Clone132_0.py 1 8
Gpt3D_Clone132_0.py 10 16

----------------------------------------

def find_nth(string, substring, n) :
	if (n == 1) :
		return string.find(substring)
	else :
		return string.find(substring, find_nth(string, substring, n - 1) + 1)
----------------------------------------

def find_nth(string, substring, n): 
    length = len(substring) 
    start = 0
    for i in range(n): 
        start = string.find(substring, start) + length
    return start
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
132
1
Gpt3D_Clone132_1.py 1 8
Gpt3D_Clone132_1.py 10 16

----------------------------------------

def find_nth(string, substring, n) :
	if (n == 1) :
		return string.find(substring)
	else :
		return string.find(substring, find_nth(string, substring, n - 1) + 1)
----------------------------------------

def find_nth(string, substring, n): 
	start = string.find(substring) 
	while n > 1: 
	    start = string.find(substring, start + len(substring)) 
	    n -= 1
	return start 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
133
1
Gpt3D_Clone133_1.py 1 13
Gpt3D_Clone133_1.py 15 22

----------------------------------------

def find_nth(haystack, needle, n = 1) :
	if (hasattr(needle, 'finditer')) :
		matches = needle.finditer(haystack)
	else :
		matches = re.finditer(re.escape(needle), haystack)
	start_here = itertools.dropwhile(lambda x : x [0] < n, enumerate(matches, 1))
	try :
		return next(start_here) [1].start()
	except StopIteration :
		return - 1
----------------------------------------

def find_nth(haystack, needle, n= 1):
    matcher = re.compile(needle)
    matches = matcher.findall(haystack, n)
    try:
        return matches[0].start()
    except StopIteration :
		return - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
135
0
Gpt3D_Clone135_0.py 1 9
Gpt3D_Clone135_0.py 11 23

----------------------------------------

def find_nth(s, substr, n) :
	i = 0
	while n > = 0 :
		n -= 1
		i = s.find(substr, i + 1)
	return i
----------------------------------------

def find_nth(string, substring, n):
    indices = []
    start = 0
    while n > 0:
        index = string.find(substring, start)
        if index == -1:
             break
        indices.append(index)
        start = index + len(substring)
        n -= 1
    return indices[n]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
135
1
Gpt3D_Clone135_1.py 1 9
Gpt3D_Clone135_1.py 11 22

----------------------------------------

def find_nth(s, substr, n) :
	i = 0
	while n > = 0 :
		n -= 1
		i = s.find(substr, i + 1)
	return i
----------------------------------------

def find_nth(string, substring, n):
    indices = []
    start = 0
    while n > 0:
        index = string.find(substring, start)
        if index == -1:
             break
        indices.append(index)
        start = index + 1
        n -= 1
    return indices[n]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
0
Gpt3D_Clone139_0.py 1 7
Gpt3D_Clone139_0.py 9 15

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	idx = 0
	while idx < self.pops :
		stack.pop()
		idx += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
1
Gpt3D_Clone139_1.py 1 7
Gpt3D_Clone139_1.py 9 15

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	idx = self.pops
	while idx > 0 :
		stack.append(stack.pop())
		idx -= 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
2
Gpt3D_Clone139_2.py 1 7
Gpt3D_Clone139_2.py 9 18

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	idx = self.pops
	while idx > 0 :
		stack.pop()
		idx -= 1
# TYPE 4
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
3
Gpt3D_Clone139_3.py 1 7
Gpt3D_Clone139_3.py 9 15

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame):
	assert self.pushes == 0
	idx = len(stack) - self.pops
	while idx < len(stack):
		stack.pop()
		idx += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
5
Gpt3D_Clone139_5.py 1 7
Gpt3D_Clone139_5.py 9 12

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	deq = [stack.pop() for _ in range(self.pops)]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
140
0
Gpt3D_Clone140_0.py 1 7
Gpt3D_Clone140_0.py 9 15

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	count = self.pops
	while(count > 0) :
		stack.pop()
		count -= 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
2
Gpt3D_Clone141_2.py 1 9
Gpt3D_Clone141_2.py 11 17

----------------------------------------

def touch_value(self, stack, frame) :
	TOS1, TOS = stack [- 2 :]
	print (TOS1, TOS)
	if abs(TOS1) > BadValue.MAX_ALLOWED_VALUE or abs(TOS) > BadValue.MAX_ALLOWED_VALUE :
		raise BadValue("The value for exponent was too big")
	stack [- 2 :] = [TOS1 ** TOS]
----------------------------------------

def touch_value_T4(self, stack, frame):
      TOS1, TOS = stack [- 2 :]
      if (abs(TOS1) > BadValue.MAX_ALLOWED_VALUE) or (abs(TOS) > BadValue.MAX_ALLOWED_VALUE):
            raise BadValue("The value for exponent was too big")
                        
      stack [- 2 :] = [TOS1 ** float(TOS)]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
3
Gpt3D_Clone141_3.py 1 9
Gpt3D_Clone141_3.py 11 17

----------------------------------------

def touch_value(self, stack, frame) :
	TOS1, TOS = stack [- 2 :]
	print (TOS1, TOS)
	if abs(TOS1) > BadValue.MAX_ALLOWED_VALUE or abs(TOS) > BadValue.MAX_ALLOWED_VALUE :
		raise BadValue("The value for exponent was too big")
	stack [- 2 :] = [TOS1 ** TOS]
----------------------------------------

def touch_value_T3(self, stack, frame):
      TOS1, TOS = stack [- 2 :]
      if (abs(TOS1) > BadValue.MAX_ALLOWED_VALUE) or (abs(TOS) > BadValue.MAX_ALLOWED_VALUE):
            raise BadValue("The value for exponent was too big")
                        
      stack [- 2 :] = [math.pow(TOS1, TOS)]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
0
Gpt3D_Clone142_0.py 1 8
Gpt3D_Clone142_0.py 10 18

----------------------------------------

def touch_value(self, stack, frame) :
	name = self.get_arg()
	if name not in frame :
		raise UnknownSymbol("Does not know symbol {}".format(name))
	stack.append(frame [name])
----------------------------------------

def touch_value(self, stack, frame):
	name = self.get_arg()
	if name in frame:
		val = frame[name]
		stack.append(val)
	else:
		err = "Does not know symbol {}".format(name)
		raise UnknownSymbol(err)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
1
Gpt3D_Clone142_1.py 1 8
Gpt3D_Clone142_1.py 10 17

----------------------------------------

def touch_value(self, stack, frame) :
	name = self.get_arg()
	if name not in frame :
		raise UnknownSymbol("Does not know symbol {}".format(name))
	stack.append(frame [name])
----------------------------------------

def touch_value(self, stack, frame):
	name = self.get_arg()
	if name in frame:
		stack.append(frame[name])
	else:
		raise UnknownSymbol("Does not know symbol {}".format(name))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
0
Gpt3D_Clone144_0.py 1 15
Gpt3D_Clone144_0.py 17 27

----------------------------------------

def contains(sub, pri) :
	M, N = len(pri), len(sub)
	i, LAST = 0, M - N + 1
	while True :
		try :
			found = pri.index(sub [0], i, LAST)
		except ValueError :
			return False
		if pri [found : found + N] == sub :
			return [found, found + N - 1]
		else :
			i = found + 1
----------------------------------------

def contains(sub, pri):
        M, N = len(pri), len(sub)
        if M < N:
            return False
        i = 0
        while i < M - N + 1:
                if pri[i:i+N] == sub:
                        return [i, i+N-1]
                i += 1
        return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
1
Gpt3D_Clone144_1.py 1 15
Gpt3D_Clone144_1.py 17 25

----------------------------------------

def contains(sub, pri) :
	M, N = len(pri), len(sub)
	i, LAST = 0, M - N + 1
	while True :
		try :
			found = pri.index(sub [0], i, LAST)
		except ValueError :
			return False
		if pri [found : found + N] == sub :
			return [found, found + N - 1]
		else :
			i = found + 1
----------------------------------------

def contains(sub, pri):
	M, N = len(pri), len(sub)
	i, LAST = 0, M - N + 1
	while i < LAST:
		if pri[i:i+N] == sub:
	 		return [i, i+N-1]
		i += 1
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
2
Gpt3D_Clone144_2.py 1 15
Gpt3D_Clone144_2.py 17 25

----------------------------------------

def contains(sub, pri) :
	M, N = len(pri), len(sub)
	i, LAST = 0, M - N + 1
	while True :
		try :
			found = pri.index(sub [0], i, LAST)
		except ValueError :
			return False
		if pri [found : found + N] == sub :
			return [found, found + N - 1]
		else :
			i = found + 1
----------------------------------------

def sub_str_match(pri, sub, x, y) :
	i, j=x, 0 
	while i < y and j < len(sub) :
		if pri[i] != sub[j] :
			return False
		i = i + 1
		j = j + 1
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
3
Gpt3D_Clone144_3.py 1 15
Gpt3D_Clone144_3.py 17 23

----------------------------------------

def contains(sub, pri) :
	M, N = len(pri), len(sub)
	i, LAST = 0, M - N + 1
	while True :
		try :
			found = pri.index(sub [0], i, LAST)
		except ValueError :
			return False
		if pri [found : found + N] == sub :
			return [found, found + N - 1]
		else :
			i = found + 1
----------------------------------------

def contiguous_check(pri, sub, x, y) :
	for i in range (x, y) :
		if pri[i] != sub[i-x] :
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
146
2
Gpt3D_Clone146_2.py 1 11
Gpt3D_Clone146_2.py 13 19

----------------------------------------

def contains(small, big) :
	for i in xrange(len(big) - len(small) + 1) :
		for j in xrange(len(small)) :
			if big [i + j] ! = small [j] :
				break
		else :
			return i, i + len(small)
	return False
----------------------------------------

def contains(small, big) :
	for i in range(len(big)-len(small)+1) :
		subString = big[i : i + len(small)]
		if small == substring :
			return i, i + len(small)
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
149
1
Gpt3D_Clone149_1.py 1 21
Gpt3D_Clone149_1.py 23 42

----------------------------------------

def main() :
	principle = decimal.Decimal(raw_input('Please enter your loan amount:'))
	rate = decimal.Decimal(raw_input('Please enter rate of interest (percent):')) / 100
	term = decimal.Decimal(raw_input('Please enter loan period (years):')) * 12
	interest = (principle * rate).quantize(decimal.Decimal('.01'), rounding = decimal.ROUND_HALF_EVEN)
	balance = principle + interest
	payment = (balance / term).quantize(decimal.Decimal('.01'), rounding = decimal.ROUND_CEILING)
	print "Payment\t\tAmount Paid\t\tRem.Bal."
	for count in range(1 + term) :
		if count == 0 :
			print count, "\t\t0.00\t\t\t", balance
		elif count == term :
			payment = balance
			balance -= payment
			print count, "\t\t", payment, "\t\t\t", balance
		else :
			balance -= payment
			print count, "\t\t", payment, "\t\t\t", balance
----------------------------------------

def main() :
	principle = float(input('Please enter your loan amount:'))
	rate = float(input('Please enter rate of interest (percent):')) / 100
	term = float(input('Please enter loan period (years):')) * 12
	interest = round(principle * rate, 2)
	balance = principle + interest
	payment = round(balance / term, 2)
	print("Payment\t\tAmount Paid\t\tRem.Bal.")
	for count in range(1 + term) :
		if count == 0 :
			print(count, "\t\t0.00\t\t\t", balance)
		elif count == term :
			payment = balance
			balance -= payment
			print(count, "\t\t", payment, "\t\t\t", balance)
		else :
			balance -= payment
			print(count, "\t\t", payment, "\t\t\t", balance)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
149
2
Gpt3D_Clone149_2.py 1 21
Gpt3D_Clone149_2.py 23 41

----------------------------------------

def main() :
	principle = decimal.Decimal(raw_input('Please enter your loan amount:'))
	rate = decimal.Decimal(raw_input('Please enter rate of interest (percent):')) / 100
	term = decimal.Decimal(raw_input('Please enter loan period (years):')) * 12
	interest = (principle * rate).quantize(decimal.Decimal('.01'), rounding = decimal.ROUND_HALF_EVEN)
	balance = principle + interest
	payment = (balance / term).quantize(decimal.Decimal('.01'), rounding = decimal.ROUND_CEILING)
	print "Payment\t\tAmount Paid\t\tRem.Bal."
	for count in range(1 + term) :
		if count == 0 :
			print count, "\t\t0.00\t\t\t", balance
		elif count == term :
			payment = balance
			balance -= payment
			print count, "\t\t", payment, "\t\t\t", balance
		else :
			balance -= payment
			print count, "\t\t", payment, "\t\t\t", balance
----------------------------------------

def main() :
	principle = float(input('Please enter your loan amount:'))
	rate = float(input('Please enter rate of interest (percent):')) / 100
	term = float(input('Please enter loan period (years):')) * 12
	interest = round(principle * rate, 4)
	balance = round(principle + interest, 4)
	payment = round(balance / term, 4)
	print("Payment\t\tAmount Paid\t\tRem.Bal.")
	for count in range(1 + term) :
		if count == 0 :
			print(count, "\t\t0.00\t\t\t", balance)
		elif count == term :
			payment = round(balance, 4)
			balance -= round(payment, 4)
			print(count, "\t\t", payment, "\t\t\t", balance)
		else :
			balance -= round(payment, 4)
			print(count, "\t\t", payment, "\t\t\t", balance)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
14
0
Gpt3D_Clone14_0.py 1 13
Gpt3D_Clone14_0.py 15 34

----------------------------------------

def check_all_conditions() :
	x = check_size()
	if x : return x
	x = check_color()
	if x : return x
	x = check_tone()
	if x : return x
	x = check_flavor()
	if x : return x
	return None
----------------------------------------

def check_all_conditions():
	x = check_size()
	if not x :
		x = check_color()
		if not x :
			x = check_tone()
			if not x :
				x = check_flavor()
				if not x :
					return None
				else:
					return x
			else:
				return x
		else:
			return x
	else:
		return x
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
14
1
Gpt3D_Clone14_1.py 1 13
Gpt3D_Clone14_1.py 15 29

----------------------------------------

def check_all_conditions() :
	x = check_size()
	if x : return x
	x = check_color()
	if x : return x
	x = check_tone()
	if x : return x
	x = check_flavor()
	if x : return x
	return None
----------------------------------------

def check_all_conditions():
	x = check_size()
	if not x:
		x = check_color()
		if not x:
			x = check_tone()
			if not x:
				return check_flavor()
			else:
				return x
		else:
			return x
	else:
		return x
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
14
3
Gpt3D_Clone14_3.py 1 13
Gpt3D_Clone14_3.py 15 20

----------------------------------------

def check_all_conditions() :
	x = check_size()
	if x : return x
	x = check_color()
	if x : return x
	x = check_tone()
	if x : return x
	x = check_flavor()
	if x : return x
	return None
----------------------------------------

def check_all_conditions() :
	conditions = [check_size(), check_color(), check_tone(), check_flavor()]
	for c in conditions:
		if c: return c
	return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
0
Gpt3D_Clone15_0.py 1 13
Gpt3D_Clone15_0.py 15 26

----------------------------------------

def check_all_conditions() :
	x = check_size()
	if x : return x
	x = check_color()
	if x : return x
	x = check_tone()
	if x : return x
	x = check_flavor()
	if x : return x
	return None
----------------------------------------

def check_all_conditions() :
	if check_size() :
		return check_size()
	elif check_color() :
		return check_color() 
	elif check_tone() :
		return check_tone()
	elif check_flavor() :
		return check_flavor()
	else :
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
0
Gpt3D_Clone166_0.py 1 9
Gpt3D_Clone166_0.py 11 14

----------------------------------------

def addToInventory(inventory, addedItems) :
	for v in addedItems :
		if v in inventory.keys() :
			inventory [v] += 1
		else :
			inventory [v] = 1
----------------------------------------

def addToInventory(inventory,addedItems):
	for v in addedItems:
		inventory[v] = 1 if v not in inventory else inventory[v] + 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
1
Gpt3D_Clone166_1.py 1 9
Gpt3D_Clone166_1.py 11 14

----------------------------------------

def addToInventory(inventory, addedItems) :
	for v in addedItems :
		if v in inventory.keys() :
			inventory [v] += 1
		else :
			inventory [v] = 1
----------------------------------------

def addToInventory(inventory,addedItems):
	for v in addedItems:
		inventory[v] = inventory.get(v,0) + 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
0
Gpt3D_Clone167_0.py 1 16
Gpt3D_Clone167_0.py 18 34

----------------------------------------

def get_most_ooo_word(lines) :
	k = - 1
	most_o = []
	for line in lines :
		phrase_words = line.split()
		for word in phrase_words :
			c = word.count('o')
			if c > k :
				k = c
				most_o = [word]
			elif c == k :
				most_o.append(word)
	return most_o
----------------------------------------

def get_most_common_word(lines):
	k = -1
	most_common = []
	frequency = {}
	for line in lines: 
		phrase_words = line.split()
		for word in phrase_words: 
			if word not in frequency: 
				frequency[word] = 1
			else: 
				frequency[word] += 1
	most_frequent = max(frequency.values())
	for word in frequency: 
		if frequency[word] == most_frequent: 
			most_common.append(word)
	return most_common
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
1
Gpt3D_Clone169_1.py 1 12
Gpt3D_Clone169_1.py 14 26

----------------------------------------

def get_most_ooo_word(words) :
	words = words [0].split()
	most = [words [0]]
	for word in words [1 :] :
		if word.count('o') > most [0].count('o') :
			most = [word]
		elif word.count('o') == most [0].count('o') :
			most.append(word)
	return most
----------------------------------------

def get_most_ooo_strings(words):
	words = words[0].split()
	most_strings=[]
	max_o_num=0
	for word in words [1:]:
		o_num = word.count('o')
		if o_num > max_o_num:
			most_strings = [word]
			max_o_num =o_num
		elif o_num == max_o_num:
			most_strings.append(word)
	return most_strings
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
2
Gpt3D_Clone169_2.py 1 12
Gpt3D_Clone169_2.py 14 27

----------------------------------------

def get_most_ooo_word(words) :
	words = words [0].split()
	most = [words [0]]
	for word in words [1 :] :
		if word.count('o') > most [0].count('o') :
			most = [word]
		elif word.count('o') == most [0].count('o') :
			most.append(word)
	return most
----------------------------------------

def get_most_ooo_words(words):
	words = words[0].split()
	most_words=[]
	max_o_cnt=0
	for word in words [1:]:
		o_cnt = word.count('o')
		if o_cnt > max_o_cnt:
			most_words = [word]
			max_o_cnt =o_cnt
		elif o_cnt == max_o_cnt:
			most_words.append(word)
	return most_words
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
172
1
Gpt3D_Clone172_1.py 1 13
Gpt3D_Clone172_1.py 15 25

----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	with open(path) as f :
		for line in f :
			if word in line :
				print "Word found"
				return 1
	print "Word not found"
	return 0
----------------------------------------

def searchWordlist() :
	path = input(PATH)
	word = input(WORD)
	f = open(path, "r")	
	for line in f :
		if word in line :
			print("Word found")
			return 1
	print("Word not found")
	return 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
172
2
Gpt3D_Clone172_2.py 1 13
Gpt3D_Clone172_2.py 15 24

----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	with open(path) as f :
		for line in f :
			if word in line :
				print "Word found"
				return 1
	print "Word not found"
	return 0
----------------------------------------

def searchWordlist() :
	path = raw_input(PATH)
	word = raw_input(WORD)
	for lines in open(path, 'r'):
		if (word in lines):
			print "Word found"
			return 1
	print "Word not found"
	return 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
1
Gpt3D_Clone174_1.py 1 21
Gpt3D_Clone174_1.py 23 41

----------------------------------------

def get_cost(x) :
	t_zone = 720
	max_rate = 5.5
	rate = 0.0208
	duration = x ['t1']
	if duration < t_zone :
		if (duration * rate) > = max_rate :
			return max_rate
		else :
			return (duration * rate)
	else :
		if duration > = 720 :
			x = int(duration / 720)
			y = ((duration % 720) * rate)
			if y > = max_rate :
				return ((x * max_rate) + max_rate)
			else :
				return ((x * max_rate) + y)
----------------------------------------

def get_cost(x):
	t_zone = 720
	max_rate = 5.5
	rate = 0.0208
	duration = x ['t1']
	if duration >= t_zone:
		x = int(duration/t_zone)
		y = ((duration % t_zone) * rate)
		cost = (x * max_rate) 
		if y >= max_rate :
			cost+= max_rate
		else :
			cost+= y
		return cost
	elif duration * rate >= max_rate :
		return max_rate
	else :
		return (duration * rate)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
179
0
Gpt3D_Clone179_0.py 1 18
Gpt3D_Clone179_0.py 20 34

----------------------------------------

def __init__(self, a = None, b = None, ** kwargs) :
	self.relations = {
	"e" : {"req" : ["a", "b"], "func" : lambda a, b : a + b},
	"C" : {"req" : ["e", "a"], "func" : lambda e, a : e * 1 / (a * b)},
	"A" : {"req" : ["C", "e"], "func" : lambda e, C : cmplx_func_A(e, C)},
	"a" : {"req" : ["e", "b"], "func" : lambda e, b : e / b},
	"b" : {"req" : ["e", "a"], "func" : lambda e, a : e / a}}
	self.a = a
	self.b = b
	self.e = None
	self.C = None
	self.A = None
	if kwargs :
		for key in kwargs :
			setattr(self, key, kwargs [key])
----------------------------------------

def setup_relations(self): 
	self.relations = {
	"e" : {"req" : ["a", "b"], "func" : lambda a, b : a + b},
	"C" : {"req" : ["e", "a"], "func" : lambda e, a : e * 1 / (a * b)},
	"A" : {"req" : ["C", "e"], "func" : lambda e, C : cmplx_func_A(e, C)},
	"a" : {"req" : ["e", "b"], "func" : lambda e, b : e / b},
	"b" : {"req" : ["e", "a"], "func" : lambda e, a : e / a}}
	
	for key in self.relations: 
		req_indicators = self.relations[key]["req"]
		req_params = [getattr(self, req_ind) for req_ind in req_indicators]
		func = self.relations[key]["func"]
		result = func(*req_params)
		setattr(self, key, result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
184
0
Gpt3D_Clone184_0.py 1 10
Gpt3D_Clone184_0.py 12 22

----------------------------------------

def calculate_speed(radius) :
	global speeds, speed_idx
	t1 = time.time()
	speeds [speed_idx] = radius / (t1 - t0)
	print (sum(speeds) / iterations, 'mm/sek')
	speed_idx += 1
	speed_idx %= iterations
----------------------------------------

def caculate_speed():
	radius = float(input())
	t1 = time.time()
	speeds [speed_idx] = radius / (t1 - t0)
	average = sum(speeds) / iterations
	print (average, 'mm/sek')
	speed_idx += 1
	speed_idx %= iterations
caculate_speed()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
18
2
Gpt3D_Clone18_2.py 1 4
Gpt3D_Clone18_2.py 6 9

----------------------------------------

def __init__(self, a) :
	self.a = a
	self.li = []
----------------------------------------

def __init__(self, a, li = []) :
	self.a = a
	self.li = li
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
0
Gpt3D_Clone190_0.py 1 20
Gpt3D_Clone190_0.py 22 42

----------------------------------------

def display_list(A, B) :
	data = [("01", "02", "03", "04", "05", "06", "07"),
	("08", "09", "10", "11", "12", "13", "14"),
	("15", "16", "17", "18", "19", "20", "21")]
	result = []
	for sublist in data :
		tmp_result = []
		for element in sublist :
			value = int(element)
			if value == A :
				tmp_result.append("A")
			elif value == B :
				tmp_result.append("B")
			else :
				tmp_result.append(element)
		result.append(tuple(tmp_result))
	return result
----------------------------------------

def display_list(A: int, B: int) -> list():
	data = [("01", "02", "03", "04", "05", "06", "07"),
	("08", "09", "10", "11", "12", "13", "14"),
	("15", "16", "17", "18", "19", "20", "21")]
	result = [tuple()]*3
	for i in range(3):
		for j in range(7):
			value = int(data[i][j])
			if value == A:
				result[i] += ("A",)
			elif value == B:
				result[i] += ("B",)
			else:
				result[i] += (data[i][j],)
			
	for entry in result:
		for i in range(7):
			print(entry[i], end=" ")
		print("\n")
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
1
Gpt3D_Clone190_1.py 1 20
Gpt3D_Clone190_1.py 22 37

----------------------------------------

def display_list(A, B) :
	data = [("01", "02", "03", "04", "05", "06", "07"),
	("08", "09", "10", "11", "12", "13", "14"),
	("15", "16", "17", "18", "19", "20", "21")]
	result = []
	for sublist in data :
		tmp_result = []
		for element in sublist :
			value = int(element)
			if value == A :
				tmp_result.append("A")
			elif value == B :
				tmp_result.append("B")
			else :
				tmp_result.append(element)
		result.append(tuple(tmp_result))
	return result
----------------------------------------

def display_list(A: int, B: int) -> list():
	data = [("01", "02", "03", "04", "05", "06", "07"),
	("08", "09", "10", "11", "12", "13", "14"),
	("15", "16", "17", "18", "19", "20", "21")]
	result = [tuple()]*3
	for i in range(3):
		for j in range(7):
			value = int(data[i][j])
			if value == A:
				result[i] += ("A",)
			elif value == B:
				result[i] += ("B",)
			else:
				result[i] += (data[i][j],)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
0
Gpt3D_Clone191_0.py 1 11
Gpt3D_Clone191_0.py 13 29

----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			return d.replace(day = day).replace(year = d.year + int(months) / / 12).replace(month = (d.month + int(months)) % 12)
		except :
			pass
	raise Exception("should not happen")
----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			temp = d.replace(day = day).replace(year = d.year + int(months) // 12)
			month_portion = (d.month + int(months)) % 12
			if month_portion > 0 :
				return temp.replace(month = month_portion)
			else : 
				if d.year == 0 :
					return temp.replace(month = 12, day = d.day - 1)
				else :
					return temp.replace(year = d.year - 1, month = 12 + month_portion, day = d.day - 1)
		except :
			pass
	raise Exception("should not happen")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
1
Gpt3D_Clone191_1.py 1 11
Gpt3D_Clone191_1.py 13 30

----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			return d.replace(day = day).replace(year = d.year + int(months) / / 12).replace(month = (d.month + int(months)) % 12)
		except :
			pass
	raise Exception("should not happen")
----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			temp = d.replace(day = day).replace(year = d.year + int(months) // 12)
			month_portion = (d.month + int(months)) % 12
			if month_portion > 0 :
				return temp.replace(month = month_portion)
			else : 
				if d.year == 0 :
					return temp.replace(month = 12)
				else :
					return temp.replace(year = d.year - 1, month = 12 + month_portion)
		except :
			pass
	raise Exception("should not happen")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
2
Gpt3D_Clone191_2.py 1 11
Gpt3D_Clone191_2.py 13 21

----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			return d.replace(day = day).replace(year = d.year + int(months) / / 12).replace(month = (d.month + int(months)) % 12)
		except :
			pass
	raise Exception("should not happen")
----------------------------------------

def add_months(d, months):
	for i in range(4):
		day = d.day - i
		if d.day > i:
			d = d.replace(day = day).replace(year = d.year + int(months) // 12).\
							    replace(month = (d.month + int(months)) % 12)
			return d
	raise Exception("should not happen.")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
3
Gpt3D_Clone191_3.py 1 11
Gpt3D_Clone191_3.py 13 22

----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			return d.replace(day = day).replace(year = d.year + int(months) / / 12).replace(month = (d.month + int(months)) % 12)
		except :
			pass
	raise Exception("should not happen")
----------------------------------------

def add_months(d, months):
	for i in range(4):
		day = d.day - i
		if d.day > i:
			d.replace(day = day).replace(year = d.year + int(months) // 12).\
							    replace(month = (d.month + int(months)) % 12)
			return d
	raise Exception("should not happen.")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
0
Gpt3D_Clone196_0.py 1 16
Gpt3D_Clone196_0.py 18 28

----------------------------------------

def factorize(n) :
	divisors = itertools.count(2)
	divisor = divisors.next()
	while True :
		if divisor ** 2 > n :
			yield n
			break
		a, b = divmod(n, divisor)
		if b == 0 :
			yield divisor
			n = a
		else :
			divisor = divisors.next()
----------------------------------------

def factorize(n):
	divisor = 2
	while divisor <= math.sqrt(n):
		if n % divisor == 0:
			yield divisor
			n = n//divisor
		else:
			divisor += 1
	if n > 1:
		yield n
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
1
Gpt3D_Clone196_1.py 1 16
Gpt3D_Clone196_1.py 18 32

----------------------------------------

def factorize(n) :
	divisors = itertools.count(2)
	divisor = divisors.next()
	while True :
		if divisor ** 2 > n :
			yield n
			break
		a, b = divmod(n, divisor)
		if b == 0 :
			yield divisor
			n = a
		else :
			divisor = divisors.next()
----------------------------------------

def factorize(n) :
	div = 2
	while div * div <= n:
		while n % div == 0 :
			yield div 
			n = n//div	
		div += 1
	if n > 1 : 
		yield n
# Type 4
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
198
0
Gpt3D_Clone198_0.py 1 9
Gpt3D_Clone198_0.py 11 24

----------------------------------------

def transformFactorList(factorList) :
	twos = [x for x in factorList if x == 2]
	rest = [x for x in factorList if x ! = 2]
	if twos :
		rest.insert(0, 2 if len(twos) == 1 else "2 ^ %d" % len(twos))
	return rest
----------------------------------------

def transformFactorList(factorList) :
	twos = []
	rest = []
	for x in factorList:
		if x == 2:
			twos.append(x)
		else:
			rest.append(x)
	if twos :
		rest.insert(0, 2 if len(twos) == 1 else "2 ^ %d" % len(twos))
		return rest
	else:
		return factorList
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
0
Gpt3D_Clone19_0.py 1 8
Gpt3D_Clone19_0.py 10 18

----------------------------------------

def collatz(starting_value) :
	value = starting_value
	while value ! = 1 :
		value = (3 * value + 1) if value % 2 else (value / / 2)
		yield value
----------------------------------------

def collatz(starting_value) :
	value = starting_value
	while value != 1 :
		if value %2 == 0 :
			value = value // 2
		else :
			value = 3 * value + 1
		yield value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
1
Gpt3D_Clone19_1.py 1 8
Gpt3D_Clone19_1.py 10 18

----------------------------------------

def collatz(starting_value) :
	value = starting_value
	while value ! = 1 :
		value = (3 * value + 1) if value % 2 else (value / / 2)
		yield value
----------------------------------------

def collatz_4(starting_value):
        value = starting_value
        while value != 1:
            if (value % 2 == 0):
               value = value // 2 
            else:
               value = 3 * value + 1 
            yield value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
2
Gpt3D_Clone19_2.py 1 8
Gpt3D_Clone19_2.py 10 18

----------------------------------------

def collatz(starting_value) :
	value = starting_value
	while value ! = 1 :
		value = (3 * value + 1) if value % 2 else (value / / 2)
		yield value
----------------------------------------

def collatz_3(starting_value):
        value = starting_value
        while value != 1:
            if (value % 2):
                value = 3 * value + 1
            else:
                value = value // 2
            yield value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
3
Gpt3D_Clone19_3.py 1 8
Gpt3D_Clone19_3.py 10 18

----------------------------------------

def collatz(starting_value) :
	value = starting_value
	while value ! = 1 :
		value = (3 * value + 1) if value % 2 else (value / / 2)
		yield value
----------------------------------------

def collatz(starting_value) :
	value = starting_value
	while value != 1 :
		if value % 2 != 0 :
			value = 3 * value + 1
		else :
			value = value // 2
		yield value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
0
Gpt3D_Clone203_0.py 1 11
Gpt3D_Clone203_0.py 13 25

----------------------------------------

def minimum(lst, current_min = None) :
	if not lst :
		return current_min
	if current_min is None :
		current_min = lst [0]
	elif lst [0] < current_min :
		current_min = lst [0]
	return minimum(lst [1 :], current_min)
----------------------------------------

def minimum(lst, current_min = None):
    if current_min is None and lst:
        current_min = lst[0]
    if lst and lst[0] < current_min:
        current_min = lst[0]
    if lst:    
        return minimum(lst[1:], current_min)
    else:
        return current_min
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
1
Gpt3D_Clone203_1.py 1 11
Gpt3D_Clone203_1.py 13 22

----------------------------------------

def minimum(lst, current_min = None) :
	if not lst :
		return current_min
	if current_min is None :
		current_min = lst [0]
	elif lst [0] < current_min :
		current_min = lst [0]
	return minimum(lst [1 :], current_min)
----------------------------------------

def minimum(lst, current_min = None):
    if not lst and current_min is None:
        return None
    elif not lst:
        return current_min
    if current_min is None or lst[0] < current_min:
        current_min = lst[0]
    return minimum(lst[1:], current_min)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
204
1
Gpt3D_Clone204_1.py 1 13
Gpt3D_Clone204_1.py 15 23

----------------------------------------

def minimum(lst) :
	if len(lst) == 1 :
		return lst [0]
	first = lst [0]
	rest = lst [1 :]
	min_of_rest = minimum(rest)
	if first < min_of_rest :
		return first
	else :
		return min_of_rest
----------------------------------------

def min4(lst):
	if len(lst) == 1:
		return lst[0]
	smallest = lst[0]
	for i in range(1, len(lst)):
		if lst[i] < smallest:
			smallest = lst[i]
	return smallest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
204
2
Gpt3D_Clone204_2.py 1 13
Gpt3D_Clone204_2.py 15 21

----------------------------------------

def minimum(lst) :
	if len(lst) == 1 :
		return lst [0]
	first = lst [0]
	rest = lst [1 :]
	min_of_rest = minimum(rest)
	if first < min_of_rest :
		return first
	else :
		return min_of_rest
----------------------------------------

def minimum3(lst):
	if len(lst) == 1:
		return lst[0]
	rest = lst[1:]
	min_of_rest = minimum3(rest)
	return min(lst[0], min_of_rest)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
1
Gpt3D_Clone206_1.py 1 12
Gpt3D_Clone206_1.py 14 22

----------------------------------------

def greet(lines, cheers) :
	for i in range(lines) :
		output = (" ") * i + "Go"
		for j in range(cheers) :
			if cheers == 1 :
				print output
				break
			output += "Budddy Go"
		print output
----------------------------------------

def greet(lines, cheers):
	for i in range(lines):
		output = (" ")* i
		if cheers != 1:
			output += "Buddy Go"
			for j in range(cheers-1):
				output += "Buddy Go"
		print output + "Go"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
0
Gpt3D_Clone20_0.py 1 8
Gpt3D_Clone20_0.py 10 16

----------------------------------------

def print_data(items) :
	i = 0
	while i < len(items) :
		print items [i]
		i += 1
----------------------------------------

def print_data_type_3(items) :
	l = len(items)
	for i in range(l) :
		print items [i]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
1
Gpt3D_Clone20_1.py 1 8
Gpt3D_Clone20_1.py 10 13

----------------------------------------

def print_data(items) :
	i = 0
	while i < len(items) :
		print items [i]
		i += 1
----------------------------------------

def print_data(items):
	for x in range(len(items)):
		print items[x]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
2
Gpt3D_Clone20_2.py 1 8
Gpt3D_Clone20_2.py 10 13

----------------------------------------

def print_data(items) :
	i = 0
	while i < len(items) :
		print items [i]
		i += 1
----------------------------------------

def print_data_type_4(items) :
	for eachItem in items :
		print eachItem
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
3
Gpt3D_Clone20_3.py 1 8
Gpt3D_Clone20_3.py 10 15

----------------------------------------

def print_data(items) :
	i = 0
	while i < len(items) :
		print items [i]
		i += 1
----------------------------------------

def print_data(items):
	for item in items:
		print item
# Type 3 Code Clone
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
0
Gpt3D_Clone210_0.py 1 15
Gpt3D_Clone210_0.py 17 33

----------------------------------------

def longestSubstringFinder(string1, string2) :
	answer = ""
	len1, len2 = len(string1), len(string2)
	for i in range(len1) :
		match = ""
		for j in range(len2) :
			if (i + j < len1 and string1 [i + j] == string2 [j]) :
				match += string2 [j]
			else :
				if (len(match) > len(answer)) : answer = match
				match = ""
	return answer
----------------------------------------

def longestSubstringFinder(string1, string2 ) :
	answer = ""
	len1, len2 = len (string1 ), len (string2 )
	idx1, idx2 = 0, 0
	while idx1 < len1 and idx2 < len2 :
		if string1 [idx1] == string2 [idx2] :
			answer += string2 [idx2]
			idx1 += 1
			idx2 += 1
		else :
			if (len(answer) > len(answer)) : 
				answer = match
				match = ""
			idx2 += 1
	return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
0
Gpt3D_Clone212_0.py 1 8
Gpt3D_Clone212_0.py 10 22

----------------------------------------

def checkio(data) :
	for index in range(len(data) - 1, - 1, - 1) :
		if data.count(data [index]) == 1 :
			del data [index]
	return data
----------------------------------------

def checkio(data) :
	for i in range(len(data) - 1, - 1, - 1) :
		unique = True
		for j in range(len(data)) :
			if i == j :
				continue
			elif data[i] == data[j] :
				unique = False
				break
		if unique :
			del data[i]
	return data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
1
Gpt3D_Clone212_1.py 1 8
Gpt3D_Clone212_1.py 10 22

----------------------------------------

def checkio(data) :
	for index in range(len(data) - 1, - 1, - 1) :
		if data.count(data [index]) == 1 :
			del data [index]
	return data
----------------------------------------

def checkio(data) :
	for i in reversed(range(len(data))) :
		unique = True
		for j in range(len(data)) :
			if i == j :
				continue
			elif data[i] == data[j] :
				unique = False
				break
		if unique :
			del data[i]
	return data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
213
0
Gpt3D_Clone213_0.py 1 8
Gpt3D_Clone213_0.py 10 18

----------------------------------------

def checkio(data) :
	for index in range(len(data) - 1, - 1, - 1) :
		if data.count(data [index]) == 1 :
			del data [index]
	return data
----------------------------------------

def checkio_4(data): 
	data_rev = list(reversed(data))
	divergence_index = len(data_rev) 
	for index in range(len(data_rev)): 
		if data_rev.count(data_rev[index]) > 1: 
			divergence_index = index 
			break 
	return data[0:len(data_rev)-divergence_index]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
0
Gpt3D_Clone214_0.py 1 13
Gpt3D_Clone214_0.py 15 26

----------------------------------------

def checkio(data) :
	elements = []
	duplicates = []
	for i in data :
		if i not in elements :
			elements.append(i)
		else :
			if i not in duplicates :
				duplicates.append(i)
	return duplicates
----------------------------------------

def checkio(data):
  elements = set()
  duplicates = set()
  for entry in data:
    if entry in elements:
      duplicates.add(entry)
    else:
      elements.add(entry)
  return list(duplicates)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
0
Gpt3D_Clone215_0.py 1 8
Gpt3D_Clone215_0.py 10 22

----------------------------------------

def mode(arr) :
	if arr == [] :
		return None
	else :
		return max(set(arr), key = arr.count)
----------------------------------------

def mode4(arr):
	if arr == []:
		return None
	else:
		dict_ = {}
		for i in arr:
			if i in dict_:
				dict_[i] +=1
			else:
				dict_[i] = 1
		freq, el = max( (v,k) for k,v in dict_.items() )
		return el
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
1
Gpt3D_Clone215_1.py 1 8
Gpt3D_Clone215_1.py 10 21

----------------------------------------

def mode(arr) :
	if arr == [] :
		return None
	else :
		return max(set(arr), key = arr.count)
----------------------------------------

def mode(arr):
	if not arr:
		return None
	mode_key = None
	max_count = 0
	for element in set(arr):
		count = arr.count(element)
		if count >= max_count:
			mode_key = element
			max_count = count
	return mode_key
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
2
Gpt3D_Clone215_2.py 1 8
Gpt3D_Clone215_2.py 10 16

----------------------------------------

def mode(arr) :
	if arr == [] :
		return None
	else :
		return max(set(arr), key = arr.count)
----------------------------------------

def mode(arr):
	if not arr:
		return None
	else:
		mode_key = max(set(arr), key=arr.count) 
		return mode_key
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
218
0
Gpt3D_Clone218_0.py 1 8
Gpt3D_Clone218_0.py 10 22

----------------------------------------

def is_rotation(a1, a2) :
	if len(a1) ! = len(a2) :
		return False
	double_array = a1 + a1
	return check_sublist(double_array, a2)
----------------------------------------

def is_rotation(a1, a2) :
	if len(a1)!=len(a2) :
		return False
	for i in range(len(a1)) :
		flag = True
		for j in range(len(a2)) :
			if a1[(i+j) % len(a1)] != a2[j] :
				flag = False
				break
		if flag :
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
218
1
Gpt3D_Clone218_1.py 1 8
Gpt3D_Clone218_1.py 10 24

----------------------------------------

def is_rotation(a1, a2) :
	if len(a1) ! = len(a2) :
		return False
	double_array = a1 + a1
	return check_sublist(double_array, a2)
----------------------------------------

def is_rotation_4(a1, a2) :
	if len(a1) != len(a2) :
		return False
		
	double_array = a1 + a1
	is_sublist = False
	
	for i in range(len(a2)):
		if a2[i] == double_array[0]:
			if a2[0:len(a1)] == double_array[i:i+len(a1)]:
				is_sublist = True
				break
			
	return is_sublist
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
218
2
Gpt3D_Clone218_2.py 1 8
Gpt3D_Clone218_2.py 10 18

----------------------------------------

def is_rotation(a1, a2) :
	if len(a1) ! = len(a2) :
		return False
	double_array = a1 + a1
	return check_sublist(double_array, a2)
----------------------------------------

def is_rotation(a1, a2) :
	if len(a1)!=len(a2) :
		return False
	temp = a1[0]
	for i in range(len(a2)) :
		if temp == a2[i] :
			if is_identical(a1, a2[i:]+a2[:i]):
				return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
218
3
Gpt3D_Clone218_3.py 1 8
Gpt3D_Clone218_3.py 10 16

----------------------------------------

def is_rotation(a1, a2) :
	if len(a1) ! = len(a2) :
		return False
	double_array = a1 + a1
	return check_sublist(double_array, a2)
----------------------------------------

def is_identical(a1,a2):
	for i in range(len(a1)) :
		if a1[i] != a2[i] :
			return False
	return True 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
1
Gpt3D_Clone224_1.py 1 14
Gpt3D_Clone224_1.py 16 22

----------------------------------------

def insert(self, btreeNode) :
	if self.data > btreeNode.data :
		if self.lChild == None :
			self.lChild = btreeNode
		else :
			self.lChild.insert(btreeNode)
	else :
		if self.rChild == None :
			self.rChild = btreeNode
		else :
			self.rChild.insert(btreeNode)
----------------------------------------

def insertRightChild(self, btreeNode):
	if self.rChild == None :
		self.rChild = btreeNode
	else :
		self.rChild.insert(btreeNode)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
0
Gpt3D_Clone226_0.py 1 9
Gpt3D_Clone226_0.py 11 32

----------------------------------------

def insert(self, data) :
	if self.root :
		return self.root._insert(data)
	else :
		self.root = Node(data)
		return True
----------------------------------------

def insert(self, data) :
	if self.root :
		current = self.root
		while current :
			if data == current.data :
				return False
			elif data < current.data :
				if current.leftChild :
					current = current.leftChild
				else :
					current.leftChild = Node(data)
					return True
			elif data > current.data :
				if current.rightChild :
					current = current.rightChild
				else :
					current.rightChild = Node(data)
					return True
	else :
		self.root = Node(data)
		return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
1
Gpt3D_Clone226_1.py 1 9
Gpt3D_Clone226_1.py 11 31

----------------------------------------

def insert(self, data) :
	if self.root :
		return self.root._insert(data)
	else :
		self.root = Node(data)
		return True
----------------------------------------

def insert(self, data) :
	if self.root :
		current = self.root
		while current :
			if data < current.data :
				if current.leftChild :
					current = current.leftChild
				else :
					current.leftChild = Node(data)
					return True
			elif data > current.data :
				if current.rightChild :
					current = current.rightChild
				else :
					current.rightChild = Node(data)
					return True
	else :
		self.root = Node(data)
		return True
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
228
0
Gpt3D_Clone228_0.py 1 8
Gpt3D_Clone228_0.py 10 16

----------------------------------------

def main() :
	n = int(raw_input())
	for i in range(0, 1 < < n) :
		gray = i ^ (i >> 1)
		print "{0:0{1}b}".format(gray, n),
----------------------------------------

def main():
  n = int(input())
  for i in range(2**n):
    gray = i ^ (i//2)
    binary = bin(gray).replace("0b", "").zfill(n)
    print(binary, end="")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
228
4
Gpt3D_Clone228_4.py 1 8
Gpt3D_Clone228_4.py 10 14

----------------------------------------

def main() :
	n = int(raw_input())
	for i in range(0, 1 < < n) :
		gray = i ^ (i >> 1)
		print "{0:0{1}b}".format(gray, n),
----------------------------------------

def main():
	n = int(input())
	for i in range(2**n):
		gray = i^(i//2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
0
Gpt3D_Clone230_0.py 1 12
Gpt3D_Clone230_0.py 14 20

----------------------------------------

def getName(self, name) :
	listy = []
	splitName = name.split(' ')
	for i in range(len(splitName)) :
		if i == (len(splitName) - 1) :
			listy.append('Surname: ' + splitName [i])
		else :
			listy.append('Name: ' + splitName [i])
	return listy
----------------------------------------

def getName(self, name) :
	listy = []
	splitName = name.rsplit(' ', 1)
	listy.append('Name: ' + splitName[0])
	listy.append('Surname: ' + splitName[1])
	return listy
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
1
Gpt3D_Clone230_1.py 1 12
Gpt3D_Clone230_1.py 14 20

----------------------------------------

def getName(self, name) :
	listy = []
	splitName = name.split(' ')
	for i in range(len(splitName)) :
		if i == (len(splitName) - 1) :
			listy.append('Surname: ' + splitName [i])
		else :
			listy.append('Name: ' + splitName [i])
	return listy
----------------------------------------

def getName(self, name) :
	listy = []
	firstName, lastName = name.rsplit(' ', 1)
	listy.append('Name: ' + firstName)
	listy.append('Surname: ' + lastName)
	return listy
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
231
1
Gpt3D_Clone231_1.py 1 12
Gpt3D_Clone231_1.py 14 22

----------------------------------------

def getName(self, name) :
	listy = []
	splitName = name.split(' ')
	for i in range(len(splitName)) :
		if i == (len(splitName) - 1) :
			listy.append('Surname: ' + splitName [i])
		else :
			listy.append('Name: ' + splitName [i])
	return listy
----------------------------------------

def getName2(self, fullname) :
	names = []
	for n in fullname.split(' ') :
		if n == fullname.split(' ')[-1] :
			names.append('Surname: ' + n)
		else :
			names.append('Name: ' +n)
	return names
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
1
Gpt3D_Clone240_1.py 1 17
Gpt3D_Clone240_1.py 19 27

----------------------------------------

def flatten(TheList) :
	listIsNested = True
	while listIsNested :
		keepChecking = False
		Temp = []
		for element in TheList :
			if isinstance(element, list) :
				Temp.extend(element)
				keepChecking = True
			else :
				Temp.append(element)
		listIsNested = keepChecking
		TheList = Temp [:]
	return TheList
----------------------------------------

def flatten_3(TheList):
  new_list = []
  for element in TheList:
    if isinstance(element, list):
      new_list.extend(flatten_3(element))
    else:
      new_list.append(element)
  return new_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
0
Gpt3D_Clone242_0.py 1 10
Gpt3D_Clone242_0.py 12 20

----------------------------------------

def flatten_list(seq) :
	if not seq :
		return []
	elif isinstance(seq [0], list) :
		return (flatten_list(seq [0]) + flatten_list(seq [1 :]))
	else :
		return [seq [0]] + flatten_list(seq [1 :])
----------------------------------------

def flatten_list(seq) :
	if seq == [] :
		return []
	else :
		if isinstance(seq [0], list) :
			return flatten_list(seq [0]) + flatten_list(seq [1 :])
		else :
			return [ seq [0] ] + flatten_list(seq [1 :])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
0
Gpt3D_Clone24_0.py 1 24
Gpt3D_Clone24_0.py 26 42

----------------------------------------

def most_common(iterable) :
	lst = [(x, i) for i, x in enumerate(iterable)]
	lst.sort()
	lst_final = []
	itr = iter(lst)
	count = 1
	tup = next(itr)
	x_cur, i_cur = tup
	for tup in itr :
		if x_cur == tup [0] :
			count += 1
		else :
			t = (- count, i_cur, x_cur)
			lst_final.append(t)
			x_cur, i_cur = tup
			count = 1
	t = (- count, i_cur, x_cur)
	lst_final.append(t)
	lst_final.sort()
	answer = lst_final [0] [2]
	return answer
----------------------------------------

def most_common(iterable) :
	lst = [(x, i) for i, x in enumerate(iterable)]
	lst.sort()
	counts = {}
	for x, _ in lst:
		counts[x] = counts.get(x, 0) + 1 
	
	lst_final = []
	for x, _ in lst:
		t = (-counts[x], x)
		lst_final.append(t)
	
	lst_final.sort()
	answer = lst_final[0][1] 
	return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
1
Gpt3D_Clone24_1.py 1 24
Gpt3D_Clone24_1.py 26 40

----------------------------------------

def most_common(iterable) :
	lst = [(x, i) for i, x in enumerate(iterable)]
	lst.sort()
	lst_final = []
	itr = iter(lst)
	count = 1
	tup = next(itr)
	x_cur, i_cur = tup
	for tup in itr :
		if x_cur == tup [0] :
			count += 1
		else :
			t = (- count, i_cur, x_cur)
			lst_final.append(t)
			x_cur, i_cur = tup
			count = 1
	t = (- count, i_cur, x_cur)
	lst_final.append(t)
	lst_final.sort()
	answer = lst_final [0] [2]
	return answer
----------------------------------------

def most_common(iterable):
	lst = [(x, i) for i, x in enumerate(iterable)]
	lst.sort()
	counts = {}
	for x, _ in lst:
		counts[x] = counts.get(x, 0) + 1 
	
	lst_final = []
	for x, _ in counts.items():
		t = (-counts[x], x)
		lst_final.append(t)
	
	lst_final.sort()
	return lst_final[0][1]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
253
3
Gpt3D_Clone253_3.py 1 15
Gpt3D_Clone253_3.py 17 26

----------------------------------------

def bmi_risk(bmi, age) :
	if bmi < 22 and age < 45 :
		risk = "Low"
	elif bmi < 22 and age > = 45 :
		risk = "Medium"
	elif bmi > = 22 and age < 45 :
		risk = "Medium"
	elif bmi > = 22 and age > = 45 :
		risk = "High"
	else :
		risk = "Unknown"
	return risk
----------------------------------------

def bmi_risk(bmi, age) :
	risk = "Unknown"
	if (bmi < 22 and age < 45) or (bmi > = 22 and age > = 45) :
		risk = "Medium"
	elif bmi < 22 or age > = 45 :
		risk = "Low"
	elif bmi > = 22 or age < 45 :
		risk = "High"
	return risk
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
1
Gpt3D_Clone267_1.py 1 14
Gpt3D_Clone267_1.py 16 28

----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] ! = _tree.TREE_UNDEFINED :
		name = feature_name [node]
		threshold = tree_.threshold [node]
		print "{}if {} <= {}:".format(indent, name, threshold)
		recurse(tree_.children_left [node], depth + 1)
		print "{}else:  # if {} > {}".format(indent, name, threshold)
		recurse(tree_.children_right [node], depth + 1)
	else :
		print "{}return {}".format(indent, tree_.value [node])
----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] != _tree.TREE_UNDEFINED :
		name = feature_name[node]
		threshold = tree_.threshold [node]
		result = "{}if {} <= {}:\n".format(indent, name, threshold)
		result += recurse(tree_.children_left [node], depth + 1)
		result += "{}else:  # if {} > {}\n".format(indent, name, threshold)
		result += recurse(tree_.children_right [node], depth + 1)
	else :
		result = "{}return {}\n".format(indent, tree_.value [node])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
0
Gpt3D_Clone268_0.py 1 13
Gpt3D_Clone268_0.py 15 26

----------------------------------------

def __init__(self) :
	wx.Frame.__init__(self, None, wx.ID_ANY,
	"Text Validation Tutorial")
	panel = wx.Panel(self)
	textOne = wx.TextCtrl(panel, validator = CharValidator('no-alpha'))
	textTwo = wx.TextCtrl(panel, validator = CharValidator('no-digit'))
	sizer = wx.BoxSizer(wx.VERTICAL)
	sizer.Add(textOne, 0, wx.ALL, 5)
	sizer.Add(textTwo, 0, wx.ALL, 5)
	panel.SetSizer(sizer)
----------------------------------------

def __init__(self) :
	wx.Frame.__init__(self, None, wx.ID_ANY,
	"Text Validation Tutorial")
	panel = wx.Panel(self) 
	textOne = wx.TextCtrl(parent = panel, validator = CharValidator('no-alpha'))
	textTwo = wx.TextCtrl(parent = panel, validator = CharValidator('no-digit'))
	sizer = wx.BoxSizer(orient = wx.VERTICAL)
	sizer.AddWindow(window = textOne, proportion = 0, flag = wx.ALL, border = 5)
	sizer.AddWindow(window = textTwo, proportion = 0, flag = wx.ALL, border = 5)
	panel.SetSizer(sizer = sizer)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
1
Gpt3D_Clone268_1.py 1 13
Gpt3D_Clone268_1.py 15 24

----------------------------------------

def __init__(self) :
	wx.Frame.__init__(self, None, wx.ID_ANY,
	"Text Validation Tutorial")
	panel = wx.Panel(self)
	textOne = wx.TextCtrl(panel, validator = CharValidator('no-alpha'))
	textTwo = wx.TextCtrl(panel, validator = CharValidator('no-digit'))
	sizer = wx.BoxSizer(wx.VERTICAL)
	sizer.Add(textOne, 0, wx.ALL, 5)
	sizer.Add(textTwo, 0, wx.ALL, 5)
	panel.SetSizer(sizer)
----------------------------------------

def __init__(self) :
	wx.Frame.__init__(self, parent = None, id = wx.ID_ANY, title = "Text Validation Tutorial")
	panel = wx.Panel(self)
	textOne = wx.TextCtrl(panel, validator = CharValidator('no-alpha'))
	textTwo = wx.TextCtrl(panel, validator = CharValidator('no-digit'))
	sizer = wx.BoxSizer(wx.VERTICAL)
	sizer.Add(item = textOne, proportion = 0, flag = wx.ALL, border = 5)
	sizer.Add(item = textTwo, proportion = 0, flag = wx.ALL, border = 5)
	panel.SetSizer(sizer = sizer)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
269
0
Gpt3D_Clone269_0.py 1 8
Gpt3D_Clone269_0.py 10 22

----------------------------------------

def DnaCheck() :
	if any(c in squence_str for c in ['A', 'C', 'T', 'G']) :
		return "yes"
	else :
		return "no"
----------------------------------------

def DnaCheck() :
	nucleotides = ['A', 'C', 'T', 'G']
	yesOrNo = False
	for n in nucleotides :
		if n in sequence_str :
			yesOrNo = True
			break
	
	if yesOrNo :
		return "yes"
	else :
		return "no"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
26
0
Gpt3D_Clone26_0.py 1 24
Gpt3D_Clone26_0.py 26 38

----------------------------------------

def most_common(iterable) :
	lst = [(x, i) for i, x in enumerate(iterable)]
	lst.sort()
	lst_final = []
	itr = iter(lst)
	count = 1
	tup = next(itr)
	x_cur, i_cur = tup
	for tup in itr :
		if x_cur == tup [0] :
			count += 1
		else :
			t = (- count, i_cur, x_cur)
			lst_final.append(t)
			x_cur, i_cur = tup
			count = 1
	t = (- count, i_cur, x_cur)
	lst_final.append(t)
	lst_final.sort()
	answer = lst_final [0] [2]
	return answer
----------------------------------------

def most_common(iterable) :
	dct = {}
	for i in iterable :
		if i not in dct :
			dct[i] = 0 
		dct[i] += 1 
	a = max(dct, key=dct.get) 
	return a 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
26
1
Gpt3D_Clone26_1.py 1 24
Gpt3D_Clone26_1.py 26 33

----------------------------------------

def most_common(iterable) :
	lst = [(x, i) for i, x in enumerate(iterable)]
	lst.sort()
	lst_final = []
	itr = iter(lst)
	count = 1
	tup = next(itr)
	x_cur, i_cur = tup
	for tup in itr :
		if x_cur == tup [0] :
			count += 1
		else :
			t = (- count, i_cur, x_cur)
			lst_final.append(t)
			x_cur, i_cur = tup
			count = 1
	t = (- count, i_cur, x_cur)
	lst_final.append(t)
	lst_final.sort()
	answer = lst_final [0] [2]
	return answer
----------------------------------------

def most_common(iterable):
	from collections import Counter
	count = Counter() 
	for item in iterable:
		count[item] += 1
	answer = count.most_common(1)[0]
	return answer[0]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
270
0
Gpt3D_Clone270_0.py 1 8
Gpt3D_Clone270_0.py 10 21

----------------------------------------

def DnaCheck() :
	if any(c in squence_str for c in ['A', 'C', 'T', 'G']) :
		return "yes"
	else :
		return "no"
----------------------------------------

def DnaCheck_3() : 
	has_char = False
	for c in squence_str : 
		if c in ['A', 'C', 'T', 'G'] :
			has_char = True
			break
	if has_char :
		return "yes"
	else :
		return "no"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
270
1
Gpt3D_Clone270_1.py 1 8
Gpt3D_Clone270_1.py 10 19

----------------------------------------

def DnaCheck() :
	if any(c in squence_str for c in ['A', 'C', 'T', 'G']) :
		return "yes"
	else :
		return "no"
----------------------------------------

def DnaCheck_4() : 
	flag = False
	for c in squence_str : 
		if c in ['A', 'C', 'T', 'G'] :
			flag = True
	if flag :
		return "yes"
	else :
		return "no"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
0
Gpt3D_Clone271_0.py 1 8
Gpt3D_Clone271_0.py 10 19

----------------------------------------

def find_nearest(array, values) :
	array = np.asarray(array)
	values = np.expand_dims(values, axis = - 1)
	indices = np.abs(array - values).argmin(axis = - 1)
	return array [indices]
----------------------------------------

def find_nearest_4(arr, values):
	list = np.asarray(arr)
	value_list = np.expand_dims(values, axis=-1)
	result_array = np.empty_like(value_list)
	for i, val in enumerate(value_list):
		diff_array = np.subtract(list, val)
		min_difference = np.argmin(diff_array, axis=-1)
		result_array[i] = list[min_difference]
	return result_array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
284
2
Gpt3D_Clone284_2.py 1 11
Gpt3D_Clone284_2.py 13 20

----------------------------------------

def div3() :
	divlist = []
	num = range(1, 10)
	for n in num :
		if n % 3 == 0 :
			for _ in xrange(20) :
				divlist.append(random.randint(0, 10))
	print divlist
----------------------------------------

def div3():
	divlist = []
	start, end = 1, 10
	for n in range(start, end):
		if n % 3 == 0:
            divlist.extend([random.randint(0, 10) for _ in range(20)])
	print(divlist)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
284
3
Gpt3D_Clone284_3.py 1 11
Gpt3D_Clone284_3.py 13 17

----------------------------------------

def div3() :
	divlist = []
	num = range(1, 10)
	for n in num :
		if n % 3 == 0 :
			for _ in xrange(20) :
				divlist.append(random.randint(0, 10))
	print divlist
----------------------------------------

def div3() :
	num = range(1, 10)
	divlist = map(lambda n: [random.randint(0, 10) for _ in xrange(20)]	if n % 3 == 0 else [], num)
	print [item for sublist in divlist for item in sublist]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
0
Gpt3D_Clone285_0.py 1 9
Gpt3D_Clone285_0.py 11 22

----------------------------------------

def is_sequence_same(list_a, list_b) :
	if list_a and list_a [0] in list_b :
		first = list_b.index(list_a [0])
	else :
		return False
	return list_a == (list_b [first :] + list_b [: first])
----------------------------------------

def is_sequence_same(list_a, list_b) :
	found = False
	if list_a and list_b :
		for idx, val in enumerate(list_b) :
			if list_a [0] == val :
				first = idx
				found = True
				break;
	if found == False :
		return False
	return list_a == (list_b [first :] + list_b [: first])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
3
Gpt3D_Clone285_3.py 1 9
Gpt3D_Clone285_3.py 11 18

----------------------------------------

def is_sequence_same(list_a, list_b) :
	if list_a and list_a [0] in list_b :
		first = list_b.index(list_a [0])
	else :
		return False
	return list_a == (list_b [first :] + list_b [: first])
----------------------------------------

def is_sequence_same(list_a, list_b) :
	if list_a and list_b and list_a [0] in list_b :
		first = list_b.index(list_a [0])
		if list_a == list_b [first :] + list_b [: first] :
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
286
0
Gpt3D_Clone286_0.py 1 8
Gpt3D_Clone286_0.py 10 20

----------------------------------------

def pattern_match(sequence, patterns) :
	if len(sequence) == len(patterns) :
		return all(item in my_set for item, my_set in zip(sequence, patterns))
	else :
		return False
----------------------------------------

def pattern_match(sequence, patterns) :
	hasMatch = True
	if len(sequence) == len(patterns) :
		for index in range(len(sequence)):
			if sequence[index] not in patterns[index]:
				hasMatch = False
				break
		return hasMatch
	else :
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
286
1
Gpt3D_Clone286_1.py 1 8
Gpt3D_Clone286_1.py 10 18

----------------------------------------

def pattern_match(sequence, patterns) :
	if len(sequence) == len(patterns) :
		return all(item in my_set for item, my_set in zip(sequence, patterns))
	else :
		return False
----------------------------------------

def pattern_match(sequence, patterns) :
	if len(sequence) == len(patterns) :
		for pair in zip(sequence, patterns):
			if pair[0] not in pair[1]:
				return False
		return True
	else :
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
286
2
Gpt3D_Clone286_2.py 1 8
Gpt3D_Clone286_2.py 10 14

----------------------------------------

def pattern_match(sequence, patterns) :
	if len(sequence) == len(patterns) :
		return all(item in my_set for item, my_set in zip(sequence, patterns))
	else :
		return False
----------------------------------------

def pattern_match(str_sequence, patterns):
	if len(str_sequence) != len(patterns) :
		return False
	return (x in my_set for x, my_set in zip(str_sequence, patterns))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
291
0
Gpt3D_Clone291_0.py 1 8
Gpt3D_Clone291_0.py 10 18

----------------------------------------

def formatTime(self, record, datefmt = None) :
	arrow_time = Arrow.fromtimestamp(record.created)
	if datefmt :
		arrow_time = arrow_time.format(datefmt)
	return str(arrow_time)
----------------------------------------

def formatTime(self, record, datefmt = None) :
	import time
	time_epoch = record.created
	if datefmt :
		formatted_time = time.strftime(datefmt, time.localtime(time_epoch))
	else:
		formatted_time = time.ctime(time_epoch)
	return str(formatted_time)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
291
1
Gpt3D_Clone291_1.py 1 8
Gpt3D_Clone291_1.py 10 17

----------------------------------------

def formatTime(self, record, datefmt = None) :
	arrow_time = Arrow.fromtimestamp(record.created)
	if datefmt :
		arrow_time = arrow_time.format(datefmt)
	return str(arrow_time)
----------------------------------------

def formatTime(self, record, datefmt = None) :
	time_epoch = record.created
	if datefmt :
		formatted_time = datetime.datetime.fromtimestamp(time_epoch).strftime(datefmt)
	else:
		formatted_time = datetime.datetime.fromtimestamp(time_epoch)
	return str(formatted_time)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
0
Gpt3D_Clone293_0.py 1 11
Gpt3D_Clone293_0.py 13 22

----------------------------------------

def get_file_list(directory = '.') :
	files = []
	for i in os.listdir(directory) :
		if os.path.isdir(i) :
			files.extend(get_file_list(i))
		else :
			files.append(i)
	return files
----------------------------------------

def get_file_list(directory = '.', result=None) :
    result = result or []
    for i in os.listdir(directory) :
        if os.path.isdir(i) :
            sub_dir = os.path.join(directory, i)
            get_file_list(sub_dir, result)
        else :
            result.append(os.path.join(directory, i))
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
0
Gpt3D_Clone294_0.py 1 10
Gpt3D_Clone294_0.py 12 30

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString(string1, string2) :
	if len(string1) < len(string2) :
		string1, string2 = string2, string1
	str1=list(string1)
	str2=[]
	result=""
	if len(string1) == len(string2) :
		for i in range(0, len(str1)):
			str2.append(string1[i])
			str2.append(string2[i])
	else:
		for i in range(0, len(string2)):
			str2.append(string2[i])
			str2.append(string1[i])
		str2.append(string1[-1])
	for j in str2:
		result += j
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
1
Gpt3D_Clone294_1.py 1 10
Gpt3D_Clone294_1.py 12 22

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString(string1, string2) :
	longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
	shorter = shorter + shorter[-1] * (len(longer) - len(shorter))
	count = 0
	result = ""
	while count < len(longer):
		result += shorter[count]
		result += longer[count]
		count += 1
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
2
Gpt3D_Clone294_2.py 1 10
Gpt3D_Clone294_2.py 12 22

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedStringVariant(string1, string2) :
	sameLength = len(string1) == len(string2)
	longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
	resultStr = ""
	if sameLength :
		resultStr = "".join(i for j in zip(string1, string2) for i in j)
	else :
		shorterStr = shorter + shorter [- 1] * (len(longer) - len(shorter))
		resultStr = "".join(i for j in zip(shorterStr, longer) for i in j)
	return resultStr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
3
Gpt3D_Clone294_3.py 1 10
Gpt3D_Clone294_3.py 12 20

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedStringVariant(string1, string2) :
	sameLength = len(string1) == len(string2)
	longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
	sameLengthStr = "".join(i for j in zip(string1, string2) for i in j)
	shorterStr = shorter + shorter [- 1] * (len(longer) - len(shorter))
	differentLengthStr = "".join(i for j in zip(shorterStr, longer) for i in j)
	return sameLengthStr if sameLength else differentLengthStr
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
0
Gpt3D_Clone295_0.py 1 10
Gpt3D_Clone295_0.py 12 27

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString(str1, str2):
  if len(str1) == len(str2):
    res = ""
    for i, j in zip(str1, str2):
      res += i
      res += j
    return res
  else :
    longer, shorter = (str1, str2) if len(str1) > len(str2) else (str2, str1)
    shorter += shorter [- 1] * (len(longer) - len(shorter))
    res = ""
    for i, j in zip(shorter, longer):
      res += i
      res += j
    return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
3
Gpt3D_Clone295_3.py 1 10
Gpt3D_Clone295_3.py 12 19

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString(stringA, stringB):
 if len(stringA) == len(stringB):
   return ''.join('{}{}'.format(x,y) for x,y in zip(stringA, stringB))
 else:
   (longer, shorter) = (stringA, stringB) if len(stringA) > len(stringB) else (stringB, stringA)
   shorter += shorter[-1]*(len(longer) - len(shorter))
   return ''.join('{}{}'.format(x,y) for x,y in zip(shorter, longer))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
296
2
Gpt3D_Clone296_2.py 1 10
Gpt3D_Clone296_2.py 12 16

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString(string1, string2) :
	longStr, shortStr = (string1, string2) if len(string1) >= len(string2) else (string2, string1)
	shortStr = shortStr + shortStr [- 1] * (len(longStr) - len(shortStr))
	return "".join(c for pair in zip(shortStr, longStr) for c in pair)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
296
3
Gpt3D_Clone296_3.py 1 10
Gpt3D_Clone296_3.py 12 15

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString4(string1, string2) :
	shorter = string2 + string2 [- 1] * max(0, len(string1) - len(string2))
	return "".join(i for j in zip(shorter, string1) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
297
0
Gpt3D_Clone297_0.py 1 11
Gpt3D_Clone297_0.py 13 26

----------------------------------------

def extendedString(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x [- 1] * (len(y) - len(x))
	elif len(x) > len(y) :
		y = y + y [- 1] * (len(x) - len(y))
	return "".join(i for j in zip(x, y) for i in j)
----------------------------------------

def extendedString3(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		diff = len(y) - len(x)
		for i in range(diff):
			x += x[-1]
	elif len(x) > len(y) :
		diff = len(x) - len(y)
		for i in range(diff):
			y += y[-1]
	return "".join(i for j in zip(x, y) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
297
2
Gpt3D_Clone297_2.py 1 11
Gpt3D_Clone297_2.py 13 24

----------------------------------------

def extendedString(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x [- 1] * (len(y) - len(x))
	elif len(x) > len(y) :
		y = y + y [- 1] * (len(x) - len(y))
	return "".join(i for j in zip(x, y) for i in j)
----------------------------------------

def extendedString(word1, word2):
	s1 = word1
	s2 = word2 
	dif = len(s1) - len(s2)
	if dif < 0:
		s1 += s1[-1] * -dif
	elif dif > 0:
		s2 += s2[-1] * dif
	return "".join(i for j in zip(s1, s2) for i in j)
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
297
3
Gpt3D_Clone297_3.py 1 11
Gpt3D_Clone297_3.py 13 20

----------------------------------------

def extendedString(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x [- 1] * (len(y) - len(x))
	elif len(x) > len(y) :
		y = y + y [- 1] * (len(x) - len(y))
	return "".join(i for j in zip(x, y) for i in j)
----------------------------------------

def extend_string(str1, str2):
	if len(str1) > len(str2):
		str2 += str2[-1] * (len(str1) - len(str2))
	elif len(str2) > len(str1):
		str1 += str1[-1] * (len(str2) - len(str1))
    
	return "".join(i for j in zip(str1, str2) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
0
Gpt3D_Clone298_0.py 1 11
Gpt3D_Clone298_0.py 13 33

----------------------------------------

def extendedString(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x [- 1] * (len(y) - len(x))
	elif len(x) > len(y) :
		y = y + y [- 1] * (len(x) - len(y))
	return "".join(i for j in zip(x, y) for i in j)
----------------------------------------

def extendedString(string1, string2):
	new_string = ""
	i, j = 0, 0
	while i < len(string1) and j < len(string2): 
		new_string += string1[i] 
		new_string += string2[j] 
		  
		i += 1
		j += 1
	if len(string1) > len(string2): 
		while i < len(string1): 
			new_string += string1[i] 
			i += 1
	elif len(string2) > len(string1): 
		while j < len(string2): 
			new_string += string2[j] 
			j += 1
	return new_string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
1
Gpt3D_Clone298_1.py 1 11
Gpt3D_Clone298_1.py 13 25

----------------------------------------

def extendedString(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x [- 1] * (len(y) - len(x))
	elif len(x) > len(y) :
		y = y + y [- 1] * (len(x) - len(y))
	return "".join(i for j in zip(x, y) for i in j)
----------------------------------------

def extendedString(string1, string2):
	string3 = '' 
	if len(string1) < len(string2) :
		for i in range(len(string1), len(string2)) :
			string1 += string1 [- 1]
	elif len(string2) < len(string1) :
		for i in range(len(string2), len(string1)) :
			string2 += string2 [- 1]
	for i in range(len(string1)): 
		string3 += string1[i] 
		string3 += string2[i] 
	return string3
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
304
2
Gpt3D_Clone304_2.py 1 9
Gpt3D_Clone304_2.py 11 17

----------------------------------------

def micro_world(bacteria, K) :
	sarg = [i [0] for i in sorted(enumerate(bacteria), key = lambda x : x [1])]
	sortedbac = [bacteria [i] for i in sarg]
	diff = [j - i for i, j in zip(sortedbac [: - 1], sortedbac [1 :])] + [K + 1]
	idx = [i for i, v in enumerate(diff) if v > K]
	return [bacteria [i] for i in sorted([sarg [i] for i in idx])]
----------------------------------------

def micro_world(bacteria, K): 
    sarg = [i[0] for i in sorted(enumerate(bacteria), key = lambda x: x[1])[::1]] 
    sortedbac = [bacteria[i] for i in sarg] 
    diff = [j - i for i, j in reversed(list(zip(sortedbac[: - 1], sortedbac[1 :]))) ]
    idx = [i for i,v in enumerate(diff) if v > K][::1] 
    return [bacteria[i] for i in sorted([sarg[i] for i in idx])]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
1
Gpt3D_Clone305_1.py 1 10
Gpt3D_Clone305_1.py 12 18

----------------------------------------

def fib(n) :
	if n == 1 :
		return (1)
	elif n == 0 :
		return (0)
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n == 1 or n == 0 :
		return (n)
	else :
		return fib(n - 1) + fib(n - 2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
2
Gpt3D_Clone305_2.py 1 10
Gpt3D_Clone305_2.py 12 18

----------------------------------------

def fib(n) :
	if n == 1 :
		return (1)
	elif n == 0 :
		return (0)
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fibonacci(n) :
	first, second = 0, 1
	for i in range(n) :
		first, second = second, first + second
	return (first)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
3
Gpt3D_Clone305_3.py 1 10
Gpt3D_Clone305_3.py 12 17

----------------------------------------

def fib(n) :
	if n == 1 :
		return (1)
	elif n == 0 :
		return (0)
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
        if n <= 1 :
                return n
        else :
                return fib(n - 1) + fib(n - 2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
0
Gpt3D_Clone306_0.py 1 10
Gpt3D_Clone306_0.py 12 20

----------------------------------------

def fib(n) :
	if n == 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	first = 0
	second = 1
	for i in range(2, n + 1) :
		ret = first + second
		first = second
		second = ret
	return ret
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
1
Gpt3D_Clone306_1.py 1 10
Gpt3D_Clone306_1.py 12 17

----------------------------------------

def fib(n) :
	if n == 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n <= 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
2
Gpt3D_Clone306_2.py 1 10
Gpt3D_Clone306_2.py 12 19

----------------------------------------

def fib(n) :
	if n == 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n <= 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
3
Gpt3D_Clone306_3.py 1 10
Gpt3D_Clone306_3.py 12 18

----------------------------------------

def fib(n) :
	if n == 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n == 0 or n == 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
0
Gpt3D_Clone307_0.py 1 10
Gpt3D_Clone307_0.py 12 26

----------------------------------------

def fib(n) :
	global call_count
	call_count = call_count + 1
	if n < = 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fibonacci_4(n):
	global call_count
	call_count = call_count + 1
	if n <= 1:
		return 1
	else:
		if n % 2 == 0:
			return fibonacci_4(n / 2) ** 2 + fibonacci_4(n / 2 - 1) ** 2
		elif n % 2 != 0 and n - 1 > 0 and n - 2 > 0:
			return fibonacci_4(n - 1) + fibonacci_4(n - 2)
		elif n - 2 == 0:
			return fibonacci_4(n - 1) + 1
		else:
			return fibonacci_4(1) + 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
2
Gpt3D_Clone308_2.py 1 10
Gpt3D_Clone308_2.py 12 18

----------------------------------------

def fib(n) :
	global call_count
	call_count = call_count + 1
	if n < = 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n, call_count) :
	if n <= 1 :
		call_count = call_count + 1
		return 1
	else :
		return fib(n - 1, call_count+1) + fib(n - 2, call_count+1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
310
0
Gpt3D_Clone310_0.py 1 23
Gpt3D_Clone310_0.py 25 53

----------------------------------------

def read_relationship(filename) :
	data = []
	with open(filename, 'rb') as f :
		reader = csv.reader(f, delimiter = '\t')
		next(reader, None)
		for row in reader :
			data.append([{
			'source' : {
			'id' : row [0],
			'start' : int(row [2]),
			'end' : int(row [3]),
			},
			'target' : {
			'id' : row [1],
			'start' : int(row [4]),
			'end' : int(row [5]),
			},
			}])
	with open('data/data.txt', 'w') as outfile :
		json.dump(data, outfile)
----------------------------------------

def read_relationship(filename):
	data = []
	with open(filename, 'rb') as f:
		reader = csv.reader(f, delimiter='\t')
		next(reader, None)
		for row in reader:
			source_id = row[0]
			source_start = int(row[2])
			source_end = int(row[3])
			target_id = row[1]
			target_start = int(row[4])
			target_end = int(row[5])
			dic = {
				'source': {
					'id': source_id,
					'start': source_start,
					'end': source_end
				},
				'target': {
					'id': target_id,
					'start': target_start,
					'end': target_end
				}
			}
			data.append(dic)
    
	with open('data/data.txt', 'w') as fout:
		json.dump(data, fout)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
310
1
Gpt3D_Clone310_1.py 1 23
Gpt3D_Clone310_1.py 25 54

----------------------------------------

def read_relationship(filename) :
	data = []
	with open(filename, 'rb') as f :
		reader = csv.reader(f, delimiter = '\t')
		next(reader, None)
		for row in reader :
			data.append([{
			'source' : {
			'id' : row [0],
			'start' : int(row [2]),
			'end' : int(row [3]),
			},
			'target' : {
			'id' : row [1],
			'start' : int(row [4]),
			'end' : int(row [5]),
			},
			}])
	with open('data/data.txt', 'w') as outfile :
		json.dump(data, outfile)
----------------------------------------

def read_relationship(filename):
	data = []
	with open(filename, 'rb') as f:
		reader = csv.reader(f, delimiter='\t')
		curr_index = 0
		for row in reader:
			source_id = row[curr_index]
			source_start = int(row[curr_index+2])
			source_end = int(row[curr_index+3])
			target_id = row[curr_index+1]
			target_start = int(row[curr_index+4])
			target_end = int(row[curr_index+5])
			dic = {
				'source': {
					'id': source_id,
					'start': source_start,
					'end': source_end
				},
				'target': {
					'id': target_id,
					'start': target_start,
					'end': target_end
				}
			}
			data.append(dic)
    
	with open('data/data.txt', 'w') as outfile:
		json.dump(data, outfile)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
0
Gpt3D_Clone314_0.py 1 9
Gpt3D_Clone314_0.py 11 19

----------------------------------------

def get_target_path(pth, mtx) :
	for level in pth :
		mtx = mtx.get(level, None)
		if mtx is None :
			break
	return mtx
----------------------------------------

def get_target_path(pth, mtx):
	for level in pth:
		if level in mtx:
			mtx = mtx.get(level)
		else:
			mtx = None
			break
	return mtx
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
0
Gpt3D_Clone336_0.py 1 12
Gpt3D_Clone336_0.py 14 30

----------------------------------------

def find_word_horizontal(crosswords, word) :
	input_list = list(word)
	output_list = []
	row_index = - 1
	column_index = 0
	for outer_index, sublist in enumerate(crosswords) :
		for inner_index in xrange(0, (len(sublist) - len(input_list) + 1)) :
			if sublist [inner_index : inner_index + len(input_list)] == input_list :
				return [outer_index, inner_index]
----------------------------------------

def find_word_horizontal(crosswords, word) :
	input_list = list(word)
	output_list = []
	found_flag = False
	row_index = 0
	column_index = 0
	for outer_index, sublist in enumerate(crosswords):
		for inner_index in xrange(0, (len(sublist) - len(input_list) + 1)):
			if sublist [inner_index : inner_index + len(input_list)] == input_list:
				found_flag = True
				row_index = outer_index
				column_index = inner_index
				break
		if found_flag :
			break
	return [row_index, column_index]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
337
0
Gpt3D_Clone337_0.py 1 11
Gpt3D_Clone337_0.py 13 23

----------------------------------------

def find(self, key) :
	if key == self.key :
		return self.data
	if key < self.key and self.left :
		return self.left.find(key)
	if key > self.key and self.right :
		return self.right.find(key)
	raise KeyError("No such thing")
----------------------------------------

def find(self, key) :
	current_node = self
	while current_node is not None:
		if key == current_node.key :
			return current_node.data
		elif key < current_node.key:
			current_node = current_node.left
		else:
			current_node = current_node.right
	raise KeyError("No such thing")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
0
Gpt3D_Clone340_0.py 1 11
Gpt3D_Clone340_0.py 13 23

----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a [i - 1] == x :
		return i - 1
	else :
		return - 1
----------------------------------------

def binary_search(a, x, lo=0, hi=-1):
	i = bisect(a, x, lo, hi)
	if i == 0:
		answer = -1
	else:
		if a[i - 1] == x:
			answer = i - 1
		else:
			answer = -1
	return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
0
Gpt3D_Clone350_0.py 1 8
Gpt3D_Clone350_0.py 10 18

----------------------------------------

def powerset(items) :
	combo = []
	for r in range(len(items) + 1) :
		combo.append(list(combinations(items, r)))
	return combo
----------------------------------------

def powerset(items):
	combo = []
	for r in range(len(items) + 1):
		temp_combo = []
		for item in list(combinations(items, r)):
			temp_combo.append(list(item))
		combo.append(temp_combo)
	return combo
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
1
Gpt3D_Clone350_1.py 1 8
Gpt3D_Clone350_1.py 10 18

----------------------------------------

def powerset(items) :
	combo = []
	for r in range(len(items) + 1) :
		combo.append(list(combinations(items, r)))
	return combo
----------------------------------------

def powerset(items):
	combo = []
	for r in range(len(items) + 1):
		temp_combo = []
		for item in combinations(items, r):
			temp_combo.append(list(item))
		combo.append(list(temp_combo))
	return combo
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
2
Gpt3D_Clone350_2.py 1 8
Gpt3D_Clone350_2.py 10 18

----------------------------------------

def powerset(items) :
	combo = []
	for r in range(len(items) + 1) :
		combo.append(list(combinations(items, r)))
	return combo
----------------------------------------

def powerset(items):
	combo = []
	i = 0
	while i <= len(items):
		combos = list(combinations(items, i))
		combo.append(combos)
		i += 1
	return combo
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
2
Gpt3D_Clone351_2.py 1 8
Gpt3D_Clone351_2.py 10 17

----------------------------------------

def powerset(items) :
	combo = []
	for r in range(len(items) + 1) :
		combo.append(list(combinations(items, r)))
	return combo
----------------------------------------

def powerset(items) :
	combo = []
	for r in range(0, len(items) + 1) :
		combos = list(combinations(items, r))
		if combos:
			combo.append(combos)
	return combo
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
356
1
Gpt3D_Clone356_1.py 1 14
Gpt3D_Clone356_1.py 16 28

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist):
	lens = len(midlist)
	midlist.sort()
	if (lens % 2 != 0):
		midl = int(lens / 2)
		res = midlist[midl]
	else:
		odd = int((lens / 2) - 1)
		ev = int(lens / 2)
		res = (midlist[odd] + midlist[ev])/2
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
356
2
Gpt3D_Clone356_2.py 1 14
Gpt3D_Clone356_2.py 16 26

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist):
	lens = len(midlist)
	midlist.sort()
	if(lens % 2 != 0):
		return midlist[math.floor(lens/2)]
	else:
		odd = math.floor(lens/2) - 1
		ev = math.floor(lens/2)
		res = float(midlist[odd] + midlist[ev])/float(2)
		return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
356
3
Gpt3D_Clone356_3.py 1 14
Gpt3D_Clone356_3.py 16 25

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist):
	lens = len(midlist)
	midlist.sort()
	if(lens % 2 != 0):
		return midlist[lens//2]
	else:
		odd = lens // 2 - 1
		ev = lens // 2
		return (midlist[odd] + midlist[ev])/float(2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
358
0
Gpt3D_Clone358_0.py 1 14
Gpt3D_Clone358_0.py 16 32

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist) :
	lens = len(midlist)
	
	if lens % 2 != 0 :
		midl = int(lens / 2)
		midlist.sort()
		res = midlist[midl]
	else :
		index_odd = int((lens / 2) - 1)
		index_even = int(lens / 2)
		odd = midlist[index_odd]
		ev = midlist[index_even]
		res = float(odd + ev) / float(2)
	
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
358
1
Gpt3D_Clone358_1.py 1 14
Gpt3D_Clone358_1.py 16 28

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist):
	midlist.sort()
	lens = len(midlist)
	res = 0
	if lens % 2 == 0:
		odd = (lens // 2) - 1
		ev = (lens // 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	else:
		midl = (lens // 2)
		res = midlist [midl]
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
359
0
Gpt3D_Clone359_0.py 1 9
Gpt3D_Clone359_0.py 11 22

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data):
	list_length = len(data)
	sorted_data = sorted(data)
	middle_index = int(list_length / 2)
	# check if length of list is odd
	if list_length % 2 > 0:
		return sorted_data[middle_index]
	# if length of list is even
	else:
		sum_of_middle_items = sorted_data[middle_index] + sorted_data[middle_index - 1]
		return sum_of_middle_items / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
359
2
Gpt3D_Clone359_2.py 1 9
Gpt3D_Clone359_2.py 11 20

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data):
	sorted_data = sorted(data)
	middle_index = int(len(sorted_data) / 2)
	# check if length of list is odd
	if len(sorted_data) % 2 > 0:
		return sorted_data[middle_index]
	# if length of list is even
	else:
		return (sorted_data[middle_index]  + sorted_data[middle_index - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
359
3
Gpt3D_Clone359_3.py 1 9
Gpt3D_Clone359_3.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) : 
	new_list = sorted(data) 
	length_list = len(new_list) 
	if length_list % 2 > 0 : 
		return new_list[length_list // 2] 
	elif length_list % 2 == 0 : 
		return (new_list[length_list // 2] + new_list[length_list // 2 - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
360
0
Gpt3D_Clone360_0.py 1 9
Gpt3D_Clone360_0.py 11 19

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = sorted(data)
	n = len(new_list)
	if n %2 > 0 :
		return new_list [n / 2]
	elif n % 2 == 0 :
		return (new_list [n / 2] + new_list [n / 2 - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
360
1
Gpt3D_Clone360_1.py 1 9
Gpt3D_Clone360_1.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = sorted(data)
	i  = len(new_list)
	if i % 2 >0 :
		return new_list [i / 2]
	elif i % 2 == 0 :
		return (new_list [i / 2] + new_list [i / 2 - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
360
2
Gpt3D_Clone360_2.py 1 9
Gpt3D_Clone360_2.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = sorted(data, reverse=True)
	if len(new_list) % 2 > 0 :
		return new_list [0]
	elif len(new_list) % 2 == 0 :
		return (new_list [0] + new_list [1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
0
Gpt3D_Clone362_0.py 1 9
Gpt3D_Clone362_0.py 11 20

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data): 
	new_list = sorted(data)
	middle = len(new_list) // 2
	if len(new_list) % 2 == 0: 
		return (new_list[middle - 1] + new_list[middle]) / 2.0
	else: 
		return new_list[middle] 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
1
Gpt3D_Clone362_1.py 1 9
Gpt3D_Clone362_1.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data): 
	new_list = sorted(data)
	middle = len(new_list) // 2
	if len(new_list) % 2 == 0: 
		return (new_list[middle - 1] + new_list[middle]) / 2
	else: 
		return new_list[middle]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
0
Gpt3D_Clone363_0.py 1 9
Gpt3D_Clone363_0.py 11 19

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data):
  sorted_list = sorted(data)
  half_len = len(sorted_list) // 2
  if len(sorted_list) % 2 > 0:
    return sorted_list[half_len]
  else: 
    return (sorted_list[half_len-1] + sorted_list[half_len]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
1
Gpt3D_Clone363_1.py 1 9
Gpt3D_Clone363_1.py 11 17

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data):
  data = sorted(data)
  half_length = len(data) // 2
  if len(data) % 2 > 0:
    return data[half_length]
  return (data[half_length - 1] + data[half_length]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
364
3
Gpt3D_Clone364_3.py 1 9
Gpt3D_Clone364_3.py 11 17

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	if len(data) % 2 > 0 :
		return sorted(data)[len(data) / 2]
	elif len(data) % 2 == 0 :
		return (sorted(data)[(len(data) / 2)] + sorted(data)[(len(data) / 2) - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
1
Gpt3D_Clone365_1.py 1 15
Gpt3D_Clone365_1.py 17 29

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median(x):
	x = sorted(x)
	listlength = len(x)
	if listlength % 2 == 0:
		num = round(listlength / 2)
		middlenum = (x[num] + x[num - 1]) / 2
	else:
		num = round(listlength / 2)
		middlenum = x[num]
	return middlenum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
3
Gpt3D_Clone365_3.py 1 15
Gpt3D_Clone365_3.py 17 29

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median(x):
	length = len(x)
	x = sorted(x)
	
	if length % 2 == 0:
		middle_index = int(length / 2)
		middlenum = (x[middle_index] + x[middle_index - 1]) / 2
	else:
		middle_index = int(length / 2)
		middlenum = x[middle_index]
	return middlenum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
0
Gpt3D_Clone366_0.py 1 15
Gpt3D_Clone366_0.py 17 28

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median_3 (x):  
	n = len(x) 
	x.sort() 
   
	if n % 2 == 0: 
		num1 = x[int(n / 2) - 1] 
		num2 = x[int(n / 2)] 
		middlenum = (num1 + num2) / 2
	else:
		middlenum = x[int(n/2)] 
	return middlenum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
1
Gpt3D_Clone366_1.py 1 15
Gpt3D_Clone366_1.py 17 28

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median(x):
    size = len(x) 
    x.sort()
    if size % 2 == 0:
        mid_1 = int((size - 1) / 2)
        mid_2 = mid_1 + 1
        median = (x[mid_1] + x[mid_2]) / 2
    else: 
        median = x[int(size/2)]
    return median
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
2
Gpt3D_Clone366_2.py 1 15
Gpt3D_Clone366_2.py 17 28

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median_4(x): 
	x.sort() 
  
	if len(x) % 2 == 0:
		ind_1 = int(len(x) // 2 - 1) # left of the middle
		ind_2 = int(len(x) // 2) # right of the middle
		middlenum = (x[ind_1] + x[ind_2]) / 2
	else : 
		middlenum = x[int(len(x) // 2)]
		
	return middlenum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
369
1
Gpt3D_Clone369_1.py 1 10
Gpt3D_Clone369_1.py 12 18

----------------------------------------

def cumulative_sum(l) :
	total = 0
	cumulative = []
	for num in l :
		total += num
		cumulative.append(total)
	return cumulative
----------------------------------------

def cumulative_sum(l):
    cumulative, total = [], 0
    for i in range(len(l)):
        total += l[i]
        cumulative.append(total)
    return cumulative
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
0
Gpt3D_Clone370_0.py 1 9
Gpt3D_Clone370_0.py 11 15

----------------------------------------

def processData(data) :
	mutex.acquire()
	try :
		print ('Do some stuff')
	finally :
		mutex.release()
----------------------------------------

def processData(data) :
	with mutex :
		print ('Do some stuff')
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
2
Gpt3D_Clone371_2.py 1 11
Gpt3D_Clone371_2.py 13 19

----------------------------------------

def mkdir_p(path) :
	try :
		os.makedirs(path)
	except OSError as exc :
		if exc.errno == errno.EEXIST and os.path.isdir(path) :
			pass
		else :
			raise
----------------------------------------

def mkdir_p3(path):
    if not os.path.exists(path):
        os.makedirs(path)
    else:
        if not os.path.isdir(path):
            raise OSError(errno.EEXIST, os.strerror(errno.EEXIST))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
2
Gpt3D_Clone373_2.py 1 10
Gpt3D_Clone373_2.py 12 15

----------------------------------------

def ping(self, host) :
	res = False
	ping_param = "-n 1" if system_name().lower() == "windows" else "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
----------------------------------------

def execute_ping_command(host, ping_param) : 
	command = "ping " + ping_param + " " + host 
	return os.popen(command).read()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
0
Gpt3D_Clone374_0.py 1 10
Gpt3D_Clone374_0.py 12 23

----------------------------------------

def ping(self, host) :
	res = False
	ping_param = "-n 1" if system_name().lower() == "windows" else "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
----------------------------------------

def ping(self, host) :
	res = False
	if system_name().lower() == "windows" : 
		ping_param = "-n 1" 
	else :
		ping_param = "-c 1"
	final = "ping " + ping_param + " " + host
	resultado = os.popen(final).read()
	if "TTL=" in resultado :
		res = True
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
2
Gpt3D_Clone378_2.py 1 8
Gpt3D_Clone378_2.py 10 15

----------------------------------------

def call_api(url, data) :
	for k, value in list(data.items()) :
		url, n = re.subn(r'\{%s\}' % k, ';'.join(str(x) for x in value), url)
		if n :
			del data [k]
----------------------------------------

def call_api(url, data):
    for items in list(data.items()):
        n,new_url = re.subn(r'\{%s\}' % items[0], ';'.join(str(x) for x in items[1]), url)
        if n > 0:
            del data[items[0]]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
382
0
Gpt3D_Clone382_0.py 1 11
Gpt3D_Clone382_0.py 13 21

----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elems :
		if k in res.keys() :
			return dict()
		res [k] = v;
	return res
----------------------------------------

def merge_dicts(d1, d2) :
	all_elements = set(d1.items()) + set(d2.items())
	res = dict()
	for key, value in all_elements:
		if key in res:
			return dict()
		res[key] = value
	return res	 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
387
0
Gpt3D_Clone387_0.py 1 14
Gpt3D_Clone387_0.py 16 26

----------------------------------------

def Names() :
	names_list = ['Ben', 'Thor', 'Zoe', 'Kate']
	Found = False
	PlayerName = str(raw_input("What Player are you looking for? "))
	for name in names_list :
		if name == PlayerName :
			Found = True
	if Found == True :
		print ("Yes, they have a top score.")
	else :
		print ("No, they do not have a top score.")
----------------------------------------

def Names() :
	names_list = ['Ben', 'Thor', 'Zoe', 'Kate']
	print("Which Player are you looking for?")
	PlayerName = str(input())
	if PlayerName in names_list :
		print ("Yes, they have a top score.")
	else :
		print ("No, they do not have a top score.")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
389
0
Gpt3D_Clone389_0.py 1 9
Gpt3D_Clone389_0.py 11 17

----------------------------------------

def __getitem__(self, key) :
	try :
		temp = int(key)
		return "I am a number"
	except ValueError :
		return self.get(key, None)
----------------------------------------

def __getitem__(self, key) :
	if type(key) is int :
		return "I am a number"
	else:
		return self.get(key, None)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
2
Gpt3D_Clone38_2.py 1 12
Gpt3D_Clone38_2.py 14 23

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub) :
	if len(sub) == 0:
		return 1
	elif len (seq) == 0:
		return 0
	result = num_subsequences(seq [:-1], sub)
	if seq [-1] == sub [0]:
		result += num_subsequences(seq [:-1], sub [1:])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
3
Gpt3D_Clone38_3.py 1 12
Gpt3D_Clone38_3.py 14 24

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub) :
	if sub == '':
		return 1
	elif seq == '':
		return 0
	result = num_subsequences(seq [:-1], sub)
	if seq [-1] == sub [-1] :
		result += num_subsequences(seq [:-1], sub [:-1])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
0
Gpt3D_Clone391_0.py 1 10
Gpt3D_Clone391_0.py 12 27

----------------------------------------

def permutations(string, step = 0) :
	if step == len(string) :
		print "".join(string)
	for i in range(step, len(string)) :
		string_copy = [character for character in string]
		string_copy [step], string_copy [i] = string_copy [i], string_copy [step]
		permutations(string_copy, step + 1)
----------------------------------------

def permutations(string, step = 0):
  if step == len(string):
    # Prints all the possible permutations.
    print("".join(string))
  else:
    # Generate a copy of string.
    string_copy = [character for character in string]
    # Loop through the string from 'step' to the last character.
    for i in range(step, len(string)):
      # Create a new string by swapping elements at the current 'step' and 'i' indices.
      swapping_elements = [character if index != step and index != i else string[i] if index == step else string[step] for index, character in enumerate(string_copy)]
      # Continue the permutation process for the new string.
      permutations(swapping_elements, step + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
1
Gpt3D_Clone391_1.py 1 10
Gpt3D_Clone391_1.py 12 27

----------------------------------------

def permutations(string, step = 0) :
	if step == len(string) :
		print "".join(string)
	for i in range(step, len(string)) :
		string_copy = [character for character in string]
		string_copy [step], string_copy [i] = string_copy [i], string_copy [step]
		permutations(string_copy, step + 1)
----------------------------------------

def permutations(string, step):
  if step == len(string):
    # Prints all the possible permutations.
    print("".join(string))
  else:
    # Gener create a copy of string.
    string_copy = [character for character in string]
    # Loop through the string from 'step' to the last character.
    for i in range(step, len(string)):
      # Swap the characters at the current 'step' and 'i' indices.
      string_copy[step], string_copy[i] = string_copy[i], string_copy[step]
      # Continue the permutation process for the string_copy.
      permutations(string_copy, step + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
2
Gpt3D_Clone395_2.py 1 11
Gpt3D_Clone395_2.py 13 21

----------------------------------------

def corr(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = data1.mean()
	mean2 = data2.mean()
	std1 = data1.std()
	std2 = data2.std()
	corr = ((data1 * data2).mean() - mean1 * mean2) / (std1 * std2)
	return corr
----------------------------------------

def correlation(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = np.mean(data1)
	mean2 = np.mean(data2)
	std1 = np.std(data1)
	std2 = np.std(data2)
	corr = (np.multiply(data1, data2).mean() - mean1 * mean2) / (std1 * std2)
	return corr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
3
Gpt3D_Clone395_3.py 1 11
Gpt3D_Clone395_3.py 13 22

----------------------------------------

def corr(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = data1.mean()
	mean2 = data2.mean()
	std1 = data1.std()
	std2 = data2.std()
	corr = ((data1 * data2).mean() - mean1 * mean2) / (std1 * std2)
	return corr
----------------------------------------

def corr(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = np.mean(data1)
	mean2 = np.mean(data2)
	std1 = np.std(data1)
	std2 = np.std(data2)
	corr = (np.mean(data1 * data2) - mean1 * mean2) / (std1 * std2)
	return corr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
0
Gpt3D_Clone397_0.py 1 8
Gpt3D_Clone397_0.py 10 18

----------------------------------------

def subset(l) :
	if not l :
		return [[]]
	rest = subset(l [1 :])
	return rest + [[l [0]] + s for s in rest]
----------------------------------------

def subset(l):
  if not l:
    return [[]]
  a = l[0]
  b = l[1:]
  rest = subset(b)
  more = [[a] + s for s in rest]
  return rest + more
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
1
Gpt3D_Clone397_1.py 1 8
Gpt3D_Clone397_1.py 10 18

----------------------------------------

def subset(l) :
	if not l :
		return [[]]
	rest = subset(l [1 :])
	return rest + [[l [0]] + s for s in rest]
----------------------------------------

def subset4(l):
  if not l:
    return [[]]
  l1 = l[1 :]
  sub = subset4(l1)
  sub_plus = [[l[0]] + s for s in sub] 
  return sub + sub_plus
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
398
1
Gpt3D_Clone398_1.py 1 15
Gpt3D_Clone398_1.py 17 31

----------------------------------------

def do_GET(self) :
	if self.path ! = '/' :
		self.send_error(404, "Object not found")
		return
	self.send_response(200)
	self.send_header('Content-type', 'text/html; charset=utf-8')
	self.end_headers()
	i = 0
	while True :
		self.wfile.write("%i " % i)
		time.sleep(0.1)
		i += 1
----------------------------------------

def do_GET(self) :
	if self.path != '/' :
		self.send_error(404, "Object not found")
		return;
		
	self.send_response(200);
	self.send_header('Content-type', 'text/html; charset=utf-8');
	self.end_headers();
	for x in range(0, 100):
		self.wfile.write("%i " % x)
		time.sleep(0.1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
39
0
Gpt3D_Clone39_0.py 1 12
Gpt3D_Clone39_0.py 14 30

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub) :    
	if not sub and seq :
		return 0
	elif not seq and sub : 
		return 0
	elif not sub :
		return 1
	elif not seq :
		return 0
		
	if seq[0] == sub[0] :
		return num_subsequences(seq[1:], sub[1:]) + num_subsequences(seq[1:], sub)
	elif seq[0] > sub[0] :
		return num_subsequences(seq[1:], sub)
	else :
		return 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
39
1
Gpt3D_Clone39_1.py 1 12
Gpt3D_Clone39_1.py 14 29

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub) :    
	if not sub and seq :
		return 0
	elif not seq and sub :
		return 0	
	elif not sub :
		return 1
	elif not seq :
		return 0
	
	if seq[0] == sub[0] :
		return num_subsequences(seq[1:], sub[1:]) + num_subsequences(seq[1:], sub)
	else :
		return num_subsequences(seq[1:], sub)
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
0
Gpt3D_Clone3_0.py 1 4
Gpt3D_Clone3_0.py 6 18

----------------------------------------

def __new__(meta, name, bases, attrs) :
	nt = namedtuple(name, attrs.pop('fields'))
	struct = attrs.pop('struct')
----------------------------------------

def __create__(meta, name, bases, attrs):
	nt = namedtuple(name, attrs.pop('fields'))
	struct = attrs.pop('struct')
	nt.__create__ = __create__
	attrs['__create__'] = __create__
	nt.struct = struct
	return super(meta, name, bases, attrs).__new__(meta, name, bases, attrs)
	class Meta :
		__new__ = staticmethod(__new__)
		__slots__ = ()
		_struct = struct
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
1
Gpt3D_Clone3_1.py 1 4
Gpt3D_Clone3_1.py 6 15

----------------------------------------

def __new__(meta, name, bases, attrs) :
	nt = namedtuple(name, attrs.pop('fields'))
	struct = attrs.pop('struct')
----------------------------------------

def __new__(meta, name, bases, attrs):
	nt = namedtuple(name, attrs.pop('fields'))
	struct = attrs.pop('struct')
	class InnerMeta: 
		__new__ = staticmethod(__new__)
		__slots__ = ()
		_struct = struct
	class Meta (InnerMeta):
		pass
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
2
Gpt3D_Clone3_2.py 1 4
Gpt3D_Clone3_2.py 6 13

----------------------------------------

def __new__(meta, name, bases, attrs) :
	nt = namedtuple(name, attrs.pop('fields'))
	struct = attrs.pop('struct')
----------------------------------------

def __new__(meta, name, bases, attrs):
	nt = namedtuple(name, attrs.pop('fields'))
	structure = attrs.pop('structure')
	nt.__new__ = __new__
	attrs['__new__'] = __new__
	nt.structure = structure
	return super(meta, name, bases, attrs).__new__(meta, name, bases, attrs) 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
3
Gpt3D_Clone3_3.py 1 4
Gpt3D_Clone3_3.py 6 13

----------------------------------------

def __new__(meta, name, bases, attrs) :
	nt = namedtuple(name, attrs.pop('fields'))
	struct = attrs.pop('struct')
----------------------------------------

def __new__(meta, name, bases, attrs):
	nt = namedtuple(name, attrs.pop('fields'))
	struct = attrs.pop('struct')
	class Meta: 
		__new__ = staticmethod(__new__)
		__slots__ = ()
		_struct = struct
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
0
Gpt3D_Clone403_0.py 1 9
Gpt3D_Clone403_0.py 11 20

----------------------------------------

def now_next(sequence, n = 2) :
	iterators = itertools.tee(iter(sequence), n)
	for i, iterator in enumerate(iterators) :
		for j in range(i) :
			iterator.next()
	return itertools.izip(* iterators)
----------------------------------------

def now_next(sequence, n = 2) : 
	ite_list = [] # Create empty list 
	for i in range(n) : # Create a for loop to make a list
		ite_list.append(iter(sequence)) # Append the iterable sequence 
	for j in range(n) :
		for k in range(j) :
			it_list[j].next() # Iterate through list
	return itertools.izip(* it_list) # Return an iterator of tuples
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
1
Gpt3D_Clone403_1.py 1 9
Gpt3D_Clone403_1.py 11 19

----------------------------------------

def now_next(sequence, n = 2) :
	iterators = itertools.tee(iter(sequence), n)
	for i, iterator in enumerate(iterators) :
		for j in range(i) :
			iterator.next()
	return itertools.izip(* iterators)
----------------------------------------

def now_next(sequence, n = 2) :
	iterator_list = [] # Create empty list 
	for i in range(n) : # Create a for loop to make a list
		iterator_list.append(iter(sequence)) # Append the iterator
	for m in range(n) :
		for j in range(m) :
			iterator_list[m].__next__() # Iterate through list
	return itertools.izip(*iterator_list) # Return an iterator of tuples
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
407
0
Gpt3D_Clone407_0.py 1 9
Gpt3D_Clone407_0.py 11 21

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(the_list, match):
	ignore_list = []
	for item in the_list:
		if item == match:
			ignore_list.append(item)
			break
		else:
			ignore_list.append(item)
	return ignore_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
407
1
Gpt3D_Clone407_1.py 1 9
Gpt3D_Clone407_1.py 11 18

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(the_list, match):
    index = 0
    for item in the_list:
        if item == match:
            break
        index += 1
    return the_list[index:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
408
0
Gpt3D_Clone408_0.py 1 9
Gpt3D_Clone408_0.py 11 20

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(input_list, target_item):
	matches = []
	if target_item in input_list:
		index = input_list.index(target_item)
		while index < len(input_list):
			matches.append(input_list[index])
			index += 1
	return matches 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
408
1
Gpt3D_Clone408_1.py 1 9
Gpt3D_Clone408_1.py 11 19

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(given_list, target_item):
	matches = []
	if target_item in given_list:
		index = given_list.index(target_item)
		for i in range(index, len(given_list)):
			matches.append(given_list[i])
	return matches
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
409
0
Gpt3D_Clone409_0.py 1 9
Gpt3D_Clone409_0.py 11 21

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(the_list, match):
	index = -1
	for i, value in enumerate(the_list):
		if value == match:
			index = i
			break
	if index != -1:
		return the_list[index:]
	else:
		return []
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
409
1
Gpt3D_Clone409_1.py 1 9
Gpt3D_Clone409_1.py 11 19

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(the_list, match):
	for i, value in enumerate(the_list):
		if value != match:
			continue
		else:
			return the_list[i:]
	return []
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
0
Gpt3D_Clone410_0.py 1 9
Gpt3D_Clone410_0.py 11 21

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(the_list, match) :
	index = -1
	for i in range(len(the_list)):
		if the_list[i] == match:
			index = i
			break  
	if index > -1 :
		return the_list[index:]
	else :
		return []
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
1
Gpt3D_Clone410_1.py 1 9
Gpt3D_Clone410_1.py 11 21

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until_3(the_list, match):
  if match in the_list:
    index = 0
    for element in the_list:
      if element == match:
        break
      index += 1
    return the_list[index:]
  else:
    return []
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
3
Gpt3D_Clone410_3.py 1 9
Gpt3D_Clone410_3.py 11 17

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until_4(the_list, match):
  if match not in the_list:
    return []
  else:
    index = the_list.index(match)
    return the_list[index:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
413
0
Gpt3D_Clone413_0.py 1 8
Gpt3D_Clone413_0.py 10 17

----------------------------------------

def __init__(self, * args, ** kwds) :
	super(MyOrderedDict, self).__init__()
	if len(args) > 0 :
		for i in args [0] :
			super(MyOrderedDict, self).__setitem__(i.id, i)
----------------------------------------

def __init__(self, * args, ** kwds) :
	super(MyOrderedDict, self).__init__()
	for arg in args:
		if type(arg) == dict:
			for key, value in arg.items():
    			super(MyOrderedDict, self).__setitem__(key, value)
    			
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
414
3
Gpt3D_Clone414_3.py 1 9
Gpt3D_Clone414_3.py 11 17

----------------------------------------

def __getitem__(self, key) :
	if isinstance(key, int) :
		return super(MyOrderedDict, self).__getitem__(self.keys() [key])
	if isinstance(key, slice) :
		return [super(MyOrderedDict, self).__getitem__(k) for k in self.keys() [key]]
	return super(MyOrderedDict, self).__getitem__(key)
----------------------------------------

def __getitem__(self, key):
  if isinstance(key, int):
    return super(MyOrderedDict, self)[list(self.keys())[key]]
  if isinstance(key, slice):
    return [super(MyOrderedDict, self)[k] for k in self.keys()[key]]
  return super(MyOrderedDict, self)[key]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
0
Gpt3D_Clone417_0.py 1 10
Gpt3D_Clone417_0.py 12 32

----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	loc = locals()
	loc.pop("self")
	self.at = dict((k, v) for k, v in loc.iteritems() if v ! = None)
----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	at = dict()
	if year is not None:
		at['year'] = year
	if month is not None:
		at['month'] = month
	if day is not None:
		at['day'] = day
	if weekday is not None:
		at['weekday'] = weekday
	if hour is not None:
		at['hour'] = hour
	if minute is not None:
		at['minute'] = minute
	if second is not None:
		at['second'] = second
	self.at = at
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
1
Gpt3D_Clone417_1.py 1 10
Gpt3D_Clone417_1.py 12 23

----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	loc = locals()
	loc.pop("self")
	self.at = dict((k, v) for k, v in loc.iteritems() if v ! = None)
----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	at = dict()
	loc = (year, month, day, weekday, hour, minute, second)
	keys = ('year', 'month', 'day', 'weekday', 'hour', 'minute', 'second')
	for i in range(len(loc)) :
		if loc[i] is not None :
			at[keys[i]] = loc[i]
	self.at = at
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
2
Gpt3D_Clone417_2.py 1 10
Gpt3D_Clone417_2.py 12 20

----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	loc = locals()
	loc.pop("self")
	self.at = dict((k, v) for k, v in loc.iteritems() if v ! = None)
----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	arg_list = [year, month, day, weekday, hour, minute, second]
	for i in range(len(arg_list)):
		if arg[i] != None:
			self.at[i] = arg[i]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
0
Gpt3D_Clone418_0.py 1 10
Gpt3D_Clone418_0.py 12 20

----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	loc = locals()
	loc.pop("self")
	self.at = dict((k, v) for k, v in loc.iteritems() if v ! = None)
----------------------------------------

def init (self, year = None, month = None, day = None, 
          weekday = None, hour = None, minute = None,
          second = None) : 
	loc = locals()
	self.at = {}
	for key, value in loc.items() : 
		if key != 'self' and value is not None : 
			self.at[key] = value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
1
Gpt3D_Clone418_1.py 1 10
Gpt3D_Clone418_1.py 12 19

----------------------------------------

def __init__(self, year = None, month = None,
day = None, weekday = None,
hour = None, minute = None,
second = None) :
	loc = locals()
	loc.pop("self")
	self.at = dict((k, v) for k, v in loc.iteritems() if v ! = None)
----------------------------------------

def init (self, year = None, month = None, day = None, 
          weekday = None, hour = None, minute = None,
          second = None) : 
	self.at = {} 
	for k, v in locals().items(): 
		if k != 'self' and v is not None : 
			self.at[k] = v
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
1
Gpt3D_Clone422_1.py 1 14
Gpt3D_Clone422_1.py 16 21

----------------------------------------

def getPrimes(n) :
	i = 2
	while i < n :
		prime = True
		for a in xrange(2, i) :
			if i % a == 0 :
				prime = False
				break
		if prime :
			yield i
		i += 1
----------------------------------------

def getPrimes(n):
	for i in range(2, n):
		if all(i % a != 0 for a in range(2, i)):
			yield i
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
2
Gpt3D_Clone422_2.py 1 14
Gpt3D_Clone422_2.py 16 20

----------------------------------------

def getPrimes(n) :
	i = 2
	while i < n :
		prime = True
		for a in xrange(2, i) :
			if i % a == 0 :
				prime = False
				break
		if prime :
			yield i
		i += 1
----------------------------------------

def getPrimes(n) :
	for i in range(2, n) :
		if all(i % a != 0 for a in range(2, i)) :
			yield i
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
427
0
Gpt3D_Clone427_0.py 1 14
Gpt3D_Clone427_0.py 16 37

----------------------------------------

def mssl(l) :
	best = cur = 0
	curi = starti = besti = 0
	for ind, i in enumerate(l) :
		if cur + i > 0 :
			cur += i
		else :
			cur, curi = 0, ind + 1
		if cur > best :
			starti, besti, best = curi, ind + 1, cur
	return starti, besti, best
----------------------------------------

def mssl(l):
    best = 0
    cur = 0
    curi = 0
    starti = 0
    besti = 0
    length = len(l)
    index = 0
    while index < length:
        current_sum = cur + l[index]
        if current_sum > 0:
            cur = current_sum
        else:
            cur = 0 
            curi = index + 1
        if cur > best:
            starti = curi
            besti = index +1
            best = cur
        index += 1
    return starti, besti, best
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
427
1
Gpt3D_Clone427_1.py 1 14
Gpt3D_Clone427_1.py 16 36

----------------------------------------

def mssl(l) :
	best = cur = 0
	curi = starti = besti = 0
	for ind, i in enumerate(l) :
		if cur + i > 0 :
			cur += i
		else :
			cur, curi = 0, ind + 1
		if cur > best :
			starti, besti, best = curi, ind + 1, cur
	return starti, besti, best
----------------------------------------

def mssl(l):
    best = 0
    cur = 0
    curi = 0
    starti = 0
    besti = 0
    lenL = len(l)
    for i in range(lenL):
        cur_sum = cur + l[i]
        if cur_sum > 0:
            cur = cur_sum
        else:
            cur = 0
            curi = i+1
        if cur > best:
            starti = curi
            besti = i +1
            best = cur
    return starti, besti, best
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
42
0
Gpt3D_Clone42_0.py 1 4
Gpt3D_Clone42_0.py 6 18

----------------------------------------

def num_subsequences(seq, sub) :
	m, n = len(seq) + 1, len(sub) + 1
	table = [[0] * n for i in xrange(m)]
----------------------------------------

def num_subsequences(sequence, sub):
    m, n = len(sequence) + 1, len(sub) + 1
    tab = [[0] * n for i in range(m)]
    # fill the table
    for i in range(1, m):
        for j in range(1, n):
            if sequence[i - 1] == sub[j - 1]:
                tab[i][j] = tab[i - 1][j - 1] + 1
            else:
                tab[i][j] = max(tab[i - 1][j], tab[i][j - 1])
    # return the last element
    return tab[-1][-1]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
42
1
Gpt3D_Clone42_1.py 1 4
Gpt3D_Clone42_1.py 6 15

----------------------------------------

def num_subsequences(seq, sub) :
	m, n = len(seq) + 1, len(sub) + 1
	table = [[0] * n for i in xrange(m)]
----------------------------------------

def num_subsequences(seq, sub) :
	m, n = len(seq) + 1, len(sub) + 1
	table = [[0] * n for i in range(m)]
	for i in range(1 , m) :
 		for j in range(1 , n) :
			if seq[i - 1] == sub[j - 1] :
				table[i][j] = table[i - 1][j - 1] + 1
			else :
				table[i][j] = max(table[i - 1][j], table[i][j - 1])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
42
2
Gpt3D_Clone42_2.py 1 4
Gpt3D_Clone42_2.py 6 15

----------------------------------------

def num_subsequences(seq, sub) :
	m, n = len(seq) + 1, len(sub) + 1
	table = [[0] * n for i in xrange(m)]
----------------------------------------

def num_subsequences(seq, sub) :
	m, n = len(seq) + 1, len(sub) + 1
	table = [[0] * n for _ in range(m)]
	for i in range(1 , m) :
 		for j in range(1 , n) :
			if seq[i - 1] == sub[j - 1] :
				table[i][j] = table[i - 1][j - 1] + 1
			else :
				table[i][j] = max(table[i - 1][j], table[i][j - 1])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
0
Gpt3D_Clone433_0.py 1 10
Gpt3D_Clone433_0.py 12 24

----------------------------------------

def update(self, request, * args, ** kwargs) :
	partial = True
	instance = self.get_object()
	serializer = self.get_serializer(instance, data = request.data, partial = partial)
	serializer.is_valid(raise_exception = True)
	self.perform_update(serializer)
	return Response(serializer.data)
----------------------------------------

def update(self, request, * args, ** kwargs) :
	partial = True
	instance = self.get_object()
	serializer = self.get_serializer(instance, data = request.data, partial = partial)
	if serializer.is_valid():
		try:
			self.perform_update(serializer)
			return Response(serializer.data)
		except Exception as e:
			raise Error(e)
	else:
		raise ValidationError(serializer.errors)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
435
0
Gpt3D_Clone435_0.py 1 14
Gpt3D_Clone435_0.py 16 31

----------------------------------------

def __init__(self, * args, ** kw) :
	super(ModelForm, self).__init__(* args, ** kw)
	self.fields.keyOrder = [
	'super_user',
	'all_districts',
	'multi_district',
	'all_schools',
	'manage_users',
	'direct_login',
	'student_detail',
	'license']
----------------------------------------

def __init_ (self,  * args, ** kw): 
	super(ModelForm, self).__init__ (* args, ** kw)
	
	varList = {
		0 : 'super_user',
		1 : 'all_districts',
		2 : 'multi_district',
		3 : 'all_schools',
		4 : 'manage_users',
		5 : 'direct_login',
		6 : 'student_detail',
		7 : 'license'
	} 
	self.fields.keyOrder = varList
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
435
1
Gpt3D_Clone435_1.py 1 14
Gpt3D_Clone435_1.py 16 24

----------------------------------------

def __init__(self, * args, ** kw) :
	super(ModelForm, self).__init__(* args, ** kw)
	self.fields.keyOrder = [
	'super_user',
	'all_districts',
	'multi_district',
	'all_schools',
	'manage_users',
	'direct_login',
	'student_detail',
	'license']
----------------------------------------

def __init_ (self,  * args, ** kw): 
	super(ModelForm, self).__init__ (* args, ** kw)
	
	varList = ['super_user', 'all_districts', 'multi_district', 'all_schools', 'manage_users',
			'direct_login', 'student_detail', 'license'] 
	self.fields.keyOrder = varList 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
1
Gpt3D_Clone436_1.py 1 14
Gpt3D_Clone436_1.py 16 22

----------------------------------------

def __init__(self, * args, ** kw) :
	super(ModelForm, self).__init__(* args, ** kw)
	self.fields.keyOrder = [
	'super_user',
	'all_districts',
	'multi_district',
	'all_schools',
	'manage_users',
	'direct_login',
	'student_detail',
	'license']
----------------------------------------

def __init__(self, * args, ** kw) :
	super(ModelForm, self).__init__(* args, ** kw)
	field_keys = ['super_user', 'all_districts', 'multi_district', 'all_schools', 
		'manage_users', 'direct_login', 'student_detail', 'license']
	self.fields.keyOrder = field_keys
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
443
1
Gpt3D_Clone443_1.py 1 16
Gpt3D_Clone443_1.py 18 27

----------------------------------------

def almostIncreasingSequence(sequence) :
	for i, x in enumerate(sequence) :
		ret = False
		s = sequence [: i] + sequence [i + 1 :]
		for j, y in enumerate(s [1 :]) :
			if s [j + 1] < = s [j] :
				ret = True
				break
			if ret :
				break
		if not ret :
			return True
	return False
----------------------------------------

def almostIncreasingSequence(sequence) :
	for i, x in enumerate(sequence) :
		for j, y in enumerate(sequence [1 :]) :
			if sequence [j + 1] < = sequence [j] :
				return False
			if sequence [j + 1] > sequence [j] :
				return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
450
0
Gpt3D_Clone450_0.py 1 7
Gpt3D_Clone450_0.py 9 18

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq):
	left, right = [], []
	for i, item in enumerate(seq):
		if pred(item):
			left.append(item)
		else:
			right = seq[i:]
			return left, right
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
450
1
Gpt3D_Clone450_1.py 1 7
Gpt3D_Clone450_1.py 9 17

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq):
	before, after = [], []
	for i, item in enumerate(seq):
		if pred(item):
			before.append(item)
		else:
			after = seq[i:]
			return before, after
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
450
3
Gpt3D_Clone450_3.py 1 7
Gpt3D_Clone450_3.py 9 13

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq) :
	for i in range(len(seq)) :
		if not pred(seq[i]) :
			return seq[:i], seq[i:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
1
Gpt3D_Clone451_1.py 1 7
Gpt3D_Clone451_1.py 9 15

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq):
	i = 0
	for item in seq:
		if not pred(item):
			return seq[:i], seq[i:]
		i += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
3
Gpt3D_Clone451_3.py 1 7
Gpt3D_Clone451_3.py 9 12

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq) :
	index = find_index_of_first_false(pred, seq)
	return seq [: index], seq [index :]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
0
Gpt3D_Clone452_0.py 1 9
Gpt3D_Clone452_0.py 11 22

----------------------------------------

def split_at_first_false(pred, seq) :
	index = 0
	while index < len(seq) :
		if not pred(seq [index]) :
			return seq [: index], seq [index + 1 :]
		index += 1
----------------------------------------

def split_at_first_false(pred, seq):
	res1 = []
	res2 = []
	for rec in seq:
		if pred(rec):
			res1.append(rec)
		else:
			break
	for rem_rec in seq[len(res1)+1:]:
		res2.append(rem_rec)
	return res1, res2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
1
Gpt3D_Clone452_1.py 1 9
Gpt3D_Clone452_1.py 11 21

----------------------------------------

def split_at_first_false(pred, seq) :
	index = 0
	while index < len(seq) :
		if not pred(seq [index]) :
			return seq [: index], seq [index + 1 :]
		index += 1
----------------------------------------

def split_at_first_false(pred, seq):
	res1 = []
	res2 = []
	for i in range(len(seq)):
		if not pred(seq[i]):
			break
		res1.append(seq[i])
	for j in range(i+1, len(seq)):
		res2.append(seq[j])
	return res1, res2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
2
Gpt3D_Clone452_2.py 1 9
Gpt3D_Clone452_2.py 11 16

----------------------------------------

def split_at_first_false(pred, seq) :
	index = 0
	while index < len(seq) :
		if not pred(seq [index]) :
			return seq [: index], seq [index + 1 :]
		index += 1
----------------------------------------

def split_at_first_false(pred, seq):
	for i in range(len(seq)):
		if not pred(seq[i]):
			return seq[:i], seq[i+1:]
	return seq, []
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
1
Gpt3D_Clone453_1.py 1 9
Gpt3D_Clone453_1.py 11 17

----------------------------------------

def split_at_first_false(pred, seq) :
	index = 0
	while index < len(seq) :
		if not pred(seq [index]) :
			return seq [: index], seq [index + 1 :]
		index += 1
----------------------------------------

def split_at_first_false_3(pred, seq):
	i = -1
	for item in seq:
		i += 1
		if not pred(item):
			return seq[:i], seq[i+1:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
460
0
Gpt3D_Clone460_0.py 1 10
Gpt3D_Clone460_0.py 12 22

----------------------------------------

def __call__(self, n) :
	if n not in self.cache :
		if n == 0 :
			self.cache [n] = 1
		else :
			self.cache [n] = n * self.__call__(n - 1)
	return self.cache [n]
----------------------------------------

def __call__(self, n) :
        if n == 0 :
                value = 1
        else :
                if n in self.cache :
                        value = self.cache[n]
                else :
                        value = n * self.__call__(n - 1)
                        self.cache[n] = value
        return value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
460
1
Gpt3D_Clone460_1.py 1 10
Gpt3D_Clone460_1.py 12 23

----------------------------------------

def __call__(self, n) :
	if n not in self.cache :
		if n == 0 :
			self.cache [n] = 1
		else :
			self.cache [n] = n * self.__call__(n - 1)
	return self.cache [n]
----------------------------------------

def __call__(self, n) :
	if n in self.cache :
		return self.cache [n]
	
	if n == 0 :
		result = 1
	else :
		result = n * self.__call__(n - 1)
	
	self.cache [n] = result
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
0
Gpt3D_Clone463_0.py 1 13
Gpt3D_Clone463_0.py 15 24

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang): 
    neighbors = [] 
    for simplex in triang.vertices: 
        if pindex in simplex: 
            for i in range(len(simplex)): 
                if simplex[i] != pindex: 
                    neighbors.append(simplex[i]) 
    return list(set(neighbors)) 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
464
0
Gpt3D_Clone464_0.py 1 13
Gpt3D_Clone464_0.py 15 24

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang):
	neighbors = []
	for simplex in triang.vertices:
		if pindex in simplex:
			for i in range(len(simplex)):
				if simplex[i] != pindex:
					neighbors.append(simplex[i])
	return list(set(neighbors))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
464
3
Gpt3D_Clone464_3.py 1 13
Gpt3D_Clone464_3.py 15 23

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang):
	neighbors = []
	for simplex in triang.vertices:
		if pindex in simplex:
			for i in range(len(simplex)):
				if i != pindex and simplex[i] not in neighbors:
					neighbors.append(simplex[i])
	return neighbors
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
465
0
Gpt3D_Clone465_0.py 1 12
Gpt3D_Clone465_0.py 14 28

----------------------------------------

def find_neighbors(tess, points) :
	neighbors = {}
	for point in range(points.shape [0]) :
		neighbors [point] = []
	for simplex in tess.simplices :
		neighbors [simplex [0]] += [simplex [1], simplex [2]]
		neighbors [simplex [1]] += [simplex [2], simplex [0]]
		neighbors [simplex [2]] += [simplex [0], simplex [1]]
	return neighbors
----------------------------------------

def find_neighbors(tess, points) :
	neighbours = {}
	index = 0
	for point in points.shape[0] :
		neighbours[index] = []
		index += 1
	for simplex in tess.simplices :
		x,y,z = simplex
		neighbours[x] += [y,z]
		neighbours[y] += [z,x]
		neighbours[z] += [x,y]
	return neighbours
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
466
0
Gpt3D_Clone466_0.py 1 11
Gpt3D_Clone466_0.py 13 23

----------------------------------------

def insert_sequence(dna1, dna2, number) :
	result = '';
	for ind, x in enumerate(dna1) :
		if ind == number :
			result = result + dna2 + x
		else :
			result = result + x
	print (result)
----------------------------------------

def insert_sequence(dna1, dna2, number):
    result = ''
    i = 0
    while i < len(dna1):
        if i == number:
            result = result + dna2
        result = result + dna1[i]
        i += 1
    print(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
466
2
Gpt3D_Clone466_2.py 1 11
Gpt3D_Clone466_2.py 13 20

----------------------------------------

def insert_sequence(dna1, dna2, number) :
	result = '';
	for ind, x in enumerate(dna1) :
		if ind == number :
			result = result + dna2 + x
		else :
			result = result + x
	print (result)
----------------------------------------

def insert_sequence(dna1, dna2, number):
    result = []
    for ind, x in enumerate(dna1):
        if ind == number:
            result.append(dna2)
        result.append(x)
    print(''.join(result))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
466
3
Gpt3D_Clone466_3.py 1 11
Gpt3D_Clone466_3.py 13 16

----------------------------------------

def insert_sequence(dna1, dna2, number) :
	result = '';
	for ind, x in enumerate(dna1) :
		if ind == number :
			result = result + dna2 + x
		else :
			result = result + x
	print (result)
----------------------------------------

def insert_sequence3(dna1, dna2, number): 
	result = dna1[:number] + dna2 + dna1[number:] 
	print(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
467
2
Gpt3D_Clone467_2.py 1 12
Gpt3D_Clone467_2.py 14 19

----------------------------------------

def insert_sequence(dna1, dna2, number) :
	index = 0
	result = ''
	for character in dna1 :
		if index == number :
			result = result + dna2
		result = result + character
		index += 1
	print (result)
----------------------------------------

def insert_sequence(dna1, dna2, number):
	result = dna1[:number]
	result += dna2
	result += dna1[number:]
	print (result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
1
Gpt3D_Clone469_1.py 1 18
Gpt3D_Clone469_1.py 20 39

----------------------------------------

def change(amount) :
	if amount < 24 :
		return [0]
	assert (amount > = 24)
	if amount == 24 :
		return [5, 5, 7, 7]
	if amount == 25 :
		return [5, 5, 5, 5, 5]
	if amount == 26 :
		return [5, 7, 7, 7]
	if amount > 1000 :
		return [0]
	coins = change(amount - 5)
	coins.append(5)
	return coins
----------------------------------------

def change(amount) :
	coins = []
	if amount < 24 :
		coins.append(0)
	else:
		assert (amount > = 24)
		if amount == 24 :
			coins = [5, 5, 7, 7]
		elif amount == 25 :
			coins = [5, 5, 5, 5, 5]
		elif amount == 26 :
			coins = [5, 7, 7, 7]
		else:
			if amount > 1000 :
				coins.append(0)
			else:
				coins = change(amount - 5)
				coins.append(5)
	return coins
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
476
0
Gpt3D_Clone476_0.py 1 9
Gpt3D_Clone476_0.py 11 12

----------------------------------------

def __init__(self, *args, **kwargs):
    wx.Frame.__init__(self, *args, **kwargs)
    self.panel = wx.Panel(self)
    self.button = wx.Button(self.panel, label="Test")
    self.sizer = wx.BoxSizer()
    self.sizer.Add(self.button)
    self.panel.SetSizerAndFit(self.sizer)
    self.Show()
----------------------------------------

def OnMouseLeftDown(self, event):
    self.CaptureMouse()
    self.Raise()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
477
2
Gpt3D_Clone477_2.py 1 11
Gpt3D_Clone477_2.py 13 16

----------------------------------------

def __init__(self, * args, ** kwargs) :
	wx.Frame.__init__(self, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer()
	self.sizer.Add(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Show()
----------------------------------------

def addButton(self):
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer.Add(self.button)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
483
1
Gpt3D_Clone483_1.py 1 12
Gpt3D_Clone483_1.py 14 22

----------------------------------------

def sanity_check(b, true_func, false_func) :
	if b :
		logfunc = log.debug
		execfunc = true_func
	else :
		logfunc = log.warning
		execfunc = false_func
	logfunc('exec: %s', execfunc.__name__)
	execfunc()
----------------------------------------

def sanity_check(b, true_func, false_func) :
	if b :
		log.debug('exec: %s', true_func.__name__)
		true_func()
	else :
		log.warning('exec: %s', false_func.__name__)
		false_func()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
486
0
Gpt3D_Clone486_0.py 1 10
Gpt3D_Clone486_0.py 12 18

----------------------------------------

def underscore_to_camelcase(value) :
	capitalized_words = [w.capitalize() if w else '_' for w in value.split('_')]
	for i, word in enumerate(capitalized_words) :
		if word ! = '_' :
			capitalized_words [i] = word.lower()
			break
	return "".join(capitalized_words)
----------------------------------------

def camelize(value):
    result = ''
    for word in value.split('_'):
        if word != '':
            result += word[1:].capitalize()
    return result[:1].lower() + result[1:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
486
1
Gpt3D_Clone486_1.py 1 10
Gpt3D_Clone486_1.py 12 18

----------------------------------------

def underscore_to_camelcase(value) :
	capitalized_words = [w.capitalize() if w else '_' for w in value.split('_')]
	for i, word in enumerate(capitalized_words) :
		if word ! = '_' :
			capitalized_words [i] = word.lower()
			break
	return "".join(capitalized_words)
----------------------------------------

def underscore_to_camelcase(value):
    result = ''
    for word in value.split('_'):
        if word != '_':
            result += word[0].lower() + word[1:]
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
1
Gpt3D_Clone492_1.py 1 9
Gpt3D_Clone492_1.py 11 20

----------------------------------------

def repeat(a, n, already_ran = 0) :
	if n == 0 :
		print (a * (n + already_ran))
	else :
		print (a * (n + already_ran))
		repeat(a, n - 1, already_ran + 1)
----------------------------------------

def repeat(a, n, already_ran=0):
    if n == 0:
        ans = a * (n + already_ran)
        print(ans)
    else:
        ans = a * (n + already_ran)
        print(ans)
        repeat(a, n-1, already_ran + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
3
Gpt3D_Clone492_3.py 1 9
Gpt3D_Clone492_3.py 11 16

----------------------------------------

def repeat(a, n, already_ran = 0) :
	if n == 0 :
		print (a * (n + already_ran))
	else :
		print (a * (n + already_ran))
		repeat(a, n - 1, already_ran + 1)
----------------------------------------

def repeat(a, n, already_ran = 0) :
        print (a * (n + already_ran))
        if n > 0:
            repeat(a, n - 1, already_ran + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
0
Gpt3D_Clone494_0.py 1 15
Gpt3D_Clone494_0.py 17 36

----------------------------------------

def treeToList(node, order = Order.INORDER) :
	if node is None :
		return []
	right = treeToList(node.right, order)
	down = treeToList(node.down, order)
	current = [node.data]
	if order == Order.PREORDER :
		return current + right + down
	if order == Order.INORDER :
		return right + current + down
	if order == Order.POSTORDER :
		return right + down + current
----------------------------------------

def treeToList(node, order = Order.INORDER) :
	if node is None :
		return []
	result = []
	if order == Order.PREORDER :
		result.append(node.data)
		result.extend(treeToList(node.right, order))
		result.extend(treeToList(node.down, order))
	if order == Order.INORDER :
		result.extend(treeToList(node.right, order))
		result.append(node.data)
		result.extend(treeToList(node.down, order))
	if order == Order.POSTORDER :
		result.extend(treeToList(node.right, order))
		result.extend(treeToList(node.down, order))
		result.append(node.data)
		
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
495
1
Gpt3D_Clone495_1.py 1 12
Gpt3D_Clone495_1.py 14 24

----------------------------------------

def device_id_replace(filepath) :
	original_id = input("What device ID are you needing to replace?")
	new_id = input("What is the new device ID?")
	with open(filepath, 'r+') as devicetxt :
		string = devicetxt.read()
		string = string.replace(original_id, new_id)
		devicetxt.truncate(0)
		devicetxt.seek(0)
		devicetxt.write(string)
----------------------------------------

def device_id_replace(filepath) :
	original_id = raw_input("What device ID are you needing to replace?")
	new_id = raw_input("What is the new device ID?")
	source = open(filepath, 'r+')
	destination = open(filepath, "w+")
	for line in source :
		destination.write(line.replace(original_id, new_id))
	source.close()
	destination.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
496
0
Gpt3D_Clone496_0.py 1 19
Gpt3D_Clone496_0.py 21 36

----------------------------------------

def rep_str(s, x, y) :
	result = ""
	skip = False
	if x in s :
		for i in range(len(s)) :
			if skip :
				skip = False
				continue
			if s [i : i + 2] == x :
				result += y
				skip = True
			else :
				result += s [i : i + 1]
		return result
	else :
		return s
----------------------------------------

def rep_str2(s, x, y) :
    result = ""
    skip = False
    if x in s :
        next_char_loc = 0
        while True : 
            loc = s.find(x, next_char_loc)
            if loc == -1 :
                result += s[next_char_loc:]
                break
            result += s[next_char_loc:loc] + y
            next_char_loc = loc + 2
        return result
    else :
        return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
496
1
Gpt3D_Clone496_1.py 1 19
Gpt3D_Clone496_1.py 21 35

----------------------------------------

def rep_str(s, x, y) :
	result = ""
	skip = False
	if x in s :
		for i in range(len(s)) :
			if skip :
				skip = False
				continue
			if s [i : i + 2] == x :
				result += y
				skip = True
			else :
				result += s [i : i + 1]
		return result
	else :
		return s
----------------------------------------

def rep_str(s, x, y):
	if x not in s:
		return s
	result = ""
	i = 0
	while i < len(s):
		if s[i:i + len(x)] == x:
			result += y
			i += len(x)
			continue
		else:
			result += s[i]
		i += 1
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
496
2
Gpt3D_Clone496_2.py 1 19
Gpt3D_Clone496_2.py 21 33

----------------------------------------

def rep_str(s, x, y) :
	result = ""
	skip = False
	if x in s :
		for i in range(len(s)) :
			if skip :
				skip = False
				continue
			if s [i : i + 2] == x :
				result += y
				skip = True
			else :
				result += s [i : i + 1]
		return result
	else :
		return s
----------------------------------------

def rep_str(s, x, y):
	if x not in s:
		return s
	result = ""
	for i in range(len(s)):
		if s[i:i + len(x)] == x:
			result += y
			i += len(x)
			continue
		else:
			result += s[i]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
497
1
Gpt3D_Clone497_1.py 1 19
Gpt3D_Clone497_1.py 21 35

----------------------------------------

def rep_str(s, x, y) :
	result = ""
	skip = False
	if x in s :
		for i in range(len(s)) :
			if skip :
				skip = False
				continue
			if s [i : i + 2] == x :
				result += y
				skip = True
			else :
				result += s [i : i + 1]
		return result
	else :
		return s
----------------------------------------

def rep_str(s, x, y) :
	if x not in s : 
		return s 
	
	i = 0
	result = ""
	while i < len(s) : 
		if s[i : i+2] == x : 
			result += y
			i += 1
		else : 
			result += s[i]
		i += 1
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
497
2
Gpt3D_Clone497_2.py 1 19
Gpt3D_Clone497_2.py 21 29

----------------------------------------

def rep_str(s, x, y) :
	result = ""
	skip = False
	if x in s :
		for i in range(len(s)) :
			if skip :
				skip = False
				continue
			if s [i : i + 2] == x :
				result += y
				skip = True
			else :
				result += s [i : i + 1]
		return result
	else :
		return s
----------------------------------------

def rep_str(s, x, y):
	result = ""
	for i in range(len(s)):
		if s[i:i+len(x)] == x:
			result += y
		else:
			result += s[i:i+1]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
497
3
Gpt3D_Clone497_3.py 1 19
Gpt3D_Clone497_3.py 21 30

----------------------------------------

def rep_str(s, x, y) :
	result = ""
	skip = False
	if x in s :
		for i in range(len(s)) :
			if skip :
				skip = False
				continue
			if s [i : i + 2] == x :
				result += y
				skip = True
			else :
				result += s [i : i + 1]
		return result
	else :
		return s
----------------------------------------

def rep_str(s, x, y):
	result = ""
	for i in range(len(s)):
		if s[i : i + 2] == x:
			result += y
		else:
			result += s[i : i + 1]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
498
0
Gpt3D_Clone498_0.py 1 7
Gpt3D_Clone498_0.py 9 19

----------------------------------------

def rep_str(s, x, y) :
	while x in s :
		s = s [: s.index(x)] + y + s [s.index(x) + len(x) :]
	return s
----------------------------------------

def rep_str_4(s, x, y):
    result = ''
    idx = 0
    while x in s[idx:]:
        cur_idx = s.index(x, idx)
        result += s[idx:cur_idx] + y
        idx = cur_idx + len(x)
    else:
        result += s[idx:]
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
498
1
Gpt3D_Clone498_1.py 1 7
Gpt3D_Clone498_1.py 9 17

----------------------------------------

def rep_str(s, x, y) :
	while x in s :
		s = s [: s.index(x)] + y + s [s.index(x) + len(x) :]
	return s
----------------------------------------

def rep_str_3(s, x, y):
    idx = 0
    while x in s[idx:]:
        cur_idx = s.find(x, idx)
        s = s[:cur_idx] + y + s[cur_idx+len(x):]
        idx = cur_idx + 1
    return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
499
0
Gpt3D_Clone499_0.py 1 16
Gpt3D_Clone499_0.py 18 30

----------------------------------------

def matched(str) :
	ope = []
	clo = []
	for i in range(0, len(str)) :
		l = str [i]
		if l == "(" :
			ope = ope + ["("]
		elif l == ")" :
			clo = clo + [")"]
	if len(ope) == len(clo) :
		return True
	else :
		return False
----------------------------------------

def matches(string):
	open_bracket_count = 0
	close_bracket_count = 0
	for symbol in string:
		if symbol == '(':
			open_bracket_count +=1
		elif symbol == ')':
			close_bracket_count +=1
	if open_bracket_count == close_bracket_count:
		return True
	else:
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
0
Gpt3D_Clone4_0.py 1 13
Gpt3D_Clone4_0.py 15 22

----------------------------------------

def calculate_age(born) :
	today = date.today()
	try :
		birthday = born.replace(year = today.year)
	except ValueError :
		birthday = born.replace(year = today.year, month = born.month + 1, day = 1)
	if birthday > today :
		return today.year - born.year - 1
	else :
		return today.year - born.year
----------------------------------------

def calculate_age_4(born):
  today = date.today()
 
  if (today.month, today.day) < (born.month, born.day):
    return today.year - born.year - 1
  else: 
    return today.year - born.year
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
1
Gpt3D_Clone4_1.py 1 13
Gpt3D_Clone4_1.py 15 26

----------------------------------------

def calculate_age(born) :
	today = date.today()
	try :
		birthday = born.replace(year = today.year)
	except ValueError :
		birthday = born.replace(year = today.year, month = born.month + 1, day = 1)
	if birthday > today :
		return today.year - born.year - 1
	else :
		return today.year - born.year
----------------------------------------

def calculate_age_3(born):
  today = date.today()
 
  year_diff = today.year - born.year
 
  # If the birthday has not passed yet, subtract one
  # from the year diff
  if (today.month, today.day) < (born.month, born.day): 
    year_diff -= 1
 
  return year_diff
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
501
1
Gpt3D_Clone501_1.py 1 17
Gpt3D_Clone501_1.py 19 32

----------------------------------------

def matched(s) :
	p_list = []
	for i in range(0, len(s)) :
		if s [i] == '(' :
			p_list.append('(')
		elif s [i] == ')' :
			if not p_list :
				return False
			else :
				p_list.pop()
	if not p_list :
		return True
	else :
		return False
----------------------------------------

def valid_parentheses(s):
    stack_parentheses = []
    for char in s:
        if char == '(':
            stack_parentheses.append(char)
        elif char == ')':
            if len(stack_parentheses) == 0:
                return False
            else:
                stack_parentheses.pop()
    if len(stack_parentheses) == 0:
        return True
    return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
0
Gpt3D_Clone505_0.py 1 11
Gpt3D_Clone505_0.py 13 24

----------------------------------------

def execute(cmd) :
	popen = subprocess.Popen(cmd, stdout = subprocess.PIPE, universal_newlines = True)
	for stdout_line in iter(popen.stdout.readline, "") :
		yield stdout_line
	popen.stdout.close()
	return_code = popen.wait()
	if return_code :
		raise subprocess.CalledProcessError(return_code, cmd)
----------------------------------------

def execute(cmd) :
	popen = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr =subprocess.PIPE, universal_newlines = True)
	for stdout_line in iter(stdout_line, ""):
		print (stdout_line)
	for stderr_line in iter(stderr_line, ""):
		sys.stderr.write(stderr_line)
	popen.stderr.close()
	popen.stdout.close()
	return_code = popen.wait()
	if return_code :
		raise subprocess.CalledProcessError(return_code, cmd)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
0
Gpt3D_Clone508_0.py 1 8
Gpt3D_Clone508_0.py 10 18

----------------------------------------

def prime(n) :
	for x in range(2, int(math.sqrt(n)) + 1) :
		if n % x == 0 :
			print n / x
			return prime(n / x)
----------------------------------------

def prime(n):
	n_sqrt = int(math.sqrt(n))
	num = 2
	while num <= n_sqrt:
		if n % num == 0:
			print n / num
			return prime(n / num)
		num += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
50
3
Gpt3D_Clone50_3.py 1 15
Gpt3D_Clone50_3.py 17 27

----------------------------------------

def palindrome(x, y) :
	lis = []
	for i in range(x, 317, - 1) :
		for a in range(y, 317, - 1) :
			s = str(i * a)
			if s [0] == s [5] and s [1] == s [4] and s [2] == s [3] :
				lis.append(i * a)
	largest = 0
	for i in range(0, len(lis)) :
		if lis [i] > largest :
			largest = lis [i]
	return largest
----------------------------------------

def palindrome(x, y):
    largest = 0
    for i in reversed(range(x, 317)):
        for a in reversed(range(y, 317)):
            s = str(i * a)
            if s[0] == s[5] and s[1] == s[4] and s[2] == s[3]:
                if i * a > largest:
                    largest = i * a
    return largest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
516
0
Gpt3D_Clone516_0.py 1 10
Gpt3D_Clone516_0.py 12 27

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge(dict1, dict2) :
	diff_dict1_dict2_keys = dict1.keys() - dict2.keys()
	diff_dict2_dict1_keys = dict2.keys() - dict1.keys()
	intersect_keys = dict1.keys() & dict2.keys()
		
	for k in diff_dict1_dict2_keys :
		yield (k, dict1 [k])
		
	for k in diff_dict2_dict1_keys :
		yield (k, dict2 [k])
	
	for k in intersect_keys :
		merged_dicts = dict(merge(dict1 [k], dict2 [k]))
		yield (k, merged_dicts)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
516
1
Gpt3D_Clone516_1.py 1 10
Gpt3D_Clone516_1.py 12 23

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge(dict1, dict2) :
	keys1 = list(dict1.keys())
	keys2 = list(dict2.keys())
	for k1 in keys1 :
		if k1 not in keys2 :
			yield (k1, dict1[k1])
	for k2 in keys2 :
		if k2 not in keys1 :
			yield (k2, dict2[k2])
	for k1, k2 in zip(keys1, keys2) :
		yield (k1, dict(merge(dict1[k1], dict2[k2])))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
516
2
Gpt3D_Clone516_2.py 1 10
Gpt3D_Clone516_2.py 12 22

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge(dict1, dict2) :
	keys1 = set(dict1.keys())
	keys2 = set(dict2.keys())
	for k in keys1 - keys2 :
		yield (k, dict1[k])
	for k in keys2 - keys1 :
		yield (k, dict2[k])
	for k in keys1 & keys2 :
		yield (k, dict(merge(dict1[k], dict2[k])))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
516
3
Gpt3D_Clone516_3.py 1 10
Gpt3D_Clone516_3.py 12 22

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge_keys(dict1, dict2) : 
	diff_dict1_dict2_keys = dict1.keys() - dict2.keys()
	diff_dict2_dict1_keys = dict2.keys() - dict1.keys()
	intersect_keys = dict1.keys() & dict2.keys()
		
	for k in diff_dict1_dict2_keys :
		yield (k, dict1 [k])
		
	for k in diff_dict2_dict1_keys :
		yield (k, dict2 [k])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
516
4
Gpt3D_Clone516_4.py 1 10
Gpt3D_Clone516_4.py 12 18

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge_vals(dict1, dict2) : 
	intersect_keys = dict1.keys() & dict2.keys()
	
	for k in intersect_keys :
		merged_dicts = dict(merge(dict1 [k], dict2 [k]))
		yield (k, merged_dicts)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
517
0
Gpt3D_Clone517_0.py 1 10
Gpt3D_Clone517_0.py 12 27

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge(dict1, dict2) :
    k_set_dif = dict1.keys() - dict2.keys()
    for k in k_set_dif :
        yield (k, dict1[k])
    t_set_diff = dict2.keys() - dict1.keys()
    for k in t_set_diff :
        yield (k, dict2[k])
    k_intersect = dict1.keys() & dict2.keys()
    for k in k_intersect :
        combined_dict = {}
        combined_dict.update(dict1[k])
        combined_dict.update(dict2[k])
        yield (k, combined_dict)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
517
1
Gpt3D_Clone517_1.py 1 10
Gpt3D_Clone517_1.py 12 24

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge(dict1, dict2):
	result = dict()
	for k1 in dict1:
		if k1 not in dict2:
			result[k1] = dict1[k1]
	for k2 in dict2:
		if k2 not in dict1:
			result[k2] = dict2[k2]
	for k3,v3 in dict1.items():
		if k3 in dict2 and isinstance(v3, dict):
			result[k3] = merge(v3, dict2[k3])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
517
2
Gpt3D_Clone517_2.py 1 10
Gpt3D_Clone517_2.py 12 24

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge(dict1, dict2) :
    k_set_dif = dict1.keys() - dict2.keys()
    for k in k_set_dif :
        yield (k, dict1[k])
    t_set_diff = dict2.keys() - dict1.keys()
    for k in t_set_diff :
        yield (k, dict2[k])
    k_intersect = dict1.keys() & dict2.keys()
    for k in k_intersect :
        yield (k, dict(merge(dict1[k], dict2[k])))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
517
3
Gpt3D_Clone517_3.py 1 10
Gpt3D_Clone517_3.py 12 19

----------------------------------------

def merge(dict1, dict2) :
	for k in dict1.keys() - dict2.keys() :
		yield (k, dict1 [k])
	for k in dict2.keys() - dict1.keys() :
		yield (k, dict2 [k])
	for k in dict1.keys() & dict2.keys() :
		yield (k, dict(merge(dict1 [k], dict2 [k])))
----------------------------------------

def merge(dict1, dict2):
	d3 = dict1.copy()
	d3.update(dict2)
	for k, v in d3.items():
		if isinstance(v, dict):
			d3[k] = merge(dict1.get(k,{}), dict2.get(k,{}))
	return d3
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
0
Gpt3D_Clone520_0.py 1 8
Gpt3D_Clone520_0.py 10 19

----------------------------------------

def seq(start, end, step) :
	if step == 0 :
		raise ValueError("step must not be 0")
	sample_count = int(abs(end - start) / step)
	return itertools.islice(itertools.count(start, step), sample_count)
----------------------------------------

def seq(start, end, step):
    if step == 0:
        raise ValueError("step must not be 0")
    else:
        sample_count = int(abs(end - start) / step)
        curr = start
        while curr < end:
            yield curr
            curr += step
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
0
Gpt3D_Clone524_0.py 1 8
Gpt3D_Clone524_0.py 10 17

----------------------------------------

def __setattr__(self, name, value) :
	if not hasattr(self, name) :
		raise AttributeError("Model instances do not accept arbitrary attributes")
	else :
		object.__setattr__(self, name, value)
----------------------------------------

def __setattr__(self, name, value) :
	if hasattr(self, name) :
		object.__setattr__(self, name, value)
	else :
		raise AttributeError("Model instances do not accept arbitrary attributes")	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
1
Gpt3D_Clone524_1.py 1 8
Gpt3D_Clone524_1.py 10 15

----------------------------------------

def __setattr__(self, name, value) :
	if not hasattr(self, name) :
		raise AttributeError("Model instances do not accept arbitrary attributes")
	else :
		object.__setattr__(self, name, value)
----------------------------------------

def __setattr__(self, name, value) :
	try :
		object.__setattr__(self, name, value)
	except :
		raise AttributeError("Model instances do not accept arbitrary attributes")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
525
0
Gpt3D_Clone525_0.py 1 8
Gpt3D_Clone525_0.py 10 16

----------------------------------------

def __setattr__(self, name, value) :
	if not hasattr(self, name) :
		raise AttributeError("Model instances do not accept arbitrary attributes")
	else :
		object.__setattr__(self, name, value)
----------------------------------------

def __setattr__(self, name, value) :
        try:
            object.__setattr__(self, name, value)
        except AttributeError:
            raise AttributeError("Model instances do not accept arbitrary attributes")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
525
1
Gpt3D_Clone525_1.py 1 8
Gpt3D_Clone525_1.py 10 15

----------------------------------------

def __setattr__(self, name, value) :
	if not hasattr(self, name) :
		raise AttributeError("Model instances do not accept arbitrary attributes")
	else :
		object.__setattr__(self, name, value)
----------------------------------------

def __setattr__(self, name, value) :
        if hasattr(self, name) :
            object.__setattr__(self, name, value)
        else : 
            raise AttributeError("Model instances do not accept arbitrary attributes")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
0
Gpt3D_Clone526_0.py 1 12
Gpt3D_Clone526_0.py 14 23

----------------------------------------

def __setattr__(self, key, value) :
	setIsOK = False
	for item in self.__List :
		if key == item :
			setIsOK = True
	if setIsOK == True :
		object.__setattr__(self, key, value)
	else :
		raise TypeError("%r has no attributes %r" % (self, key))
----------------------------------------

def __setattr__(self, key, value): 
	if key in self.__List :
		try:
			object.__setattr__(self, key, value)
		except TypeError as e:
			print("{} has no attributes {}".format(self, key))
	else :
		raise TypeError("%r has no attributes %r" % (self, key))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
535
0
Gpt3D_Clone535_0.py 1 18
Gpt3D_Clone535_0.py 20 25

----------------------------------------

def __init__(self, parent=None):
    QtGui.QMainWindow.__init__(self)
    self.tab_list = []
    self.setTabShape(QtGui.QTabWidget.Rounded)
    self.centralwidget = QtGui.QWidget(self)
    self.top_level_layout = QtGui.QGridLayout(self.centralwidget)
    self.tabWidget = QtGui.QTabWidget(self.centralwidget)
    self.top_level_layout.addWidget(self.tabWidget, 1, 0, 25, 25)
    process_button = QtGui.QPushButton("Process")
    self.top_level_layout.addWidget(process_button, 0, 1)
    QtCore.QObject.connect(process_button, QtCore.SIGNAL("clicked()"), self.process)
    self.setCentralWidget(self.centralwidget)
    self.centralwidget.setLayout(self.top_level_layout)
    for i in range(0, 10):
        name = "tab" + str(i)
        self.tab_list.append(Tab(self.tabWidget, Worker(name)))
        self.tabWidget.addTab(self.tab_list[-1], name)
----------------------------------------

def add_process_buttons(self, tabObj):
    process_button = QtGui.QPushButton("Process")
    add_process_button = QtGui.QPushButton("Add Process")
    self.top_level_layout.addWidget(add_process_button, 0, 0)
    QtCore.QObject.connect(
        add_process_button, QtCore.SIGNAL("clicked()"), tabObj.add_process
    )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
0
Gpt3D_Clone540_0.py 1 8
Gpt3D_Clone540_0.py 10 15

----------------------------------------

def touch(fname) :
	if os.path.exists(fname) :
		os.utime(fname, None)
	else :
		open(fname, 'a').close()
----------------------------------------

def touch(fname) :
	if not os.path.exists(fname) :
		open(fname, 'a').close()
	elif os.path.exists(fname) :
		os.utime(fname, None)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
1
Gpt3D_Clone540_1.py 1 8
Gpt3D_Clone540_1.py 10 15

----------------------------------------

def touch(fname) :
	if os.path.exists(fname) :
		os.utime(fname, None)
	else :
		open(fname, 'a').close()
----------------------------------------

def touch(fname) :
	if os.path.exists(fname) is False :
		open(fname, 'a').close()
	else :
		os.utime(fname, None)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
2
Gpt3D_Clone540_2.py 1 8
Gpt3D_Clone540_2.py 10 15

----------------------------------------

def touch(fname) :
	if os.path.exists(fname) :
		os.utime(fname, None)
	else :
		open(fname, 'a').close()
----------------------------------------

def touch(fname) :
	if not os.path.exists(fname) :
		open(fname, 'a').close()
	os.utime(fname, None)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
1
Gpt3D_Clone541_1.py 1 8
Gpt3D_Clone541_1.py 10 13

----------------------------------------

def touch(fname) :
	if os.path.exists(fname) :
		os.utime(fname, None)
	else :
		open(fname, 'a').close()
----------------------------------------

def touch(fname):
    with open(fname, 'a'):
        os.utime(fname, None)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
542
0
Gpt3D_Clone542_0.py 1 8
Gpt3D_Clone542_0.py 10 16

----------------------------------------

def touch(fname) :
	if os.path.exists(fname) :
		os.utime(fname, None)
	else :
		open(fname, 'a').close()
----------------------------------------

def touch(fname):
	if path.exists(fname):
		os.utime(fname, (time.time(), time.time()))
	else:
		fd = os.open(fname, os.O_CREAT | os.O_RDWR, 0o644)
		os.close(fd)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
542
1
Gpt3D_Clone542_1.py 1 8
Gpt3D_Clone542_1.py 10 15

----------------------------------------

def touch(fname) :
	if os.path.exists(fname) :
		os.utime(fname, None)
	else :
		open(fname, 'a').close()
----------------------------------------

def touch(fname):
	mode = os.F_OK | os.O_CREAT
	openfile = os.open(fname, mode)
    # open and close to invoke the times set by os.utime
	os.close(openfile)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
0
Gpt3D_Clone544_0.py 1 8
Gpt3D_Clone544_0.py 10 17

----------------------------------------

def touch(fname, mode = 0o666, dir_fd = None, ** kwargs) :
	flags = os.O_CREAT | os.O_APPEND
	with os.fdopen(os.open(fname, flags = flags, mode = mode, dir_fd = dir_fd)) as f :
		os.utime(f.fileno() if os.utime in os.supports_fd else fname,
		dir_fd = None if os.supports_fd else dir_fd, ** kwargs)
----------------------------------------

def touch(fname, mode = 0o666, dir_fd = None, ** kwargs) :
	if os.utime in os.supports_fd:
		with os.fdopen(os.open(fname, flags = os.O_CREAT | os.O_APPEND, mode = mode, dir_fd = dir_fd)) as f :
			os.utime(f.fileno(), dir_fd = None, ** kwargs)
	else:
		with os.fdopen(os.open(fname, flags = os.O_CREAT | os.O_APPEND, mode = mode, dir_fd = dir_fd)) as f :
			os.utime(fname, dir_fd = dir_fd, ** kwargs)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
2
Gpt3D_Clone544_2.py 1 8
Gpt3D_Clone544_2.py 10 14

----------------------------------------

def touch(fname, mode = 0o666, dir_fd = None, ** kwargs) :
	flags = os.O_CREAT | os.O_APPEND
	with os.fdopen(os.open(fname, flags = flags, mode = mode, dir_fd = dir_fd)) as f :
		os.utime(f.fileno() if os.utime in os.supports_fd else fname,
		dir_fd = None if os.supports_fd else dir_fd, ** kwargs)
----------------------------------------

def touch(fname, mode = 0o666, dir_fd = None, ** kwargs) :
	with os.fdopen(os.open(fname, flags = os.O_CREAT | os.O_APPEND, mode = mode, dir_fd = dir_fd)) as f :
		os.utime(fname, dir_fd = dir_fd, ** kwargs)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
0
Gpt3D_Clone548_0.py 1 14
Gpt3D_Clone548_0.py 16 30

----------------------------------------

def is_prime(n) :
	if n < 2 :
		return False;
	if n % 2 == 0 :
		return n == 2
	k = 3
	while k * k < = n :
		if n % k == 0 :
			return False
		k += 2
	return True
----------------------------------------

def is_prime(n) :
	if (n < 2):
		return False
	elif (n == 2):
		return True
	elif (n % 2 == 0):
		return False
	else :
		k = 3
		while (k * k <= n):
			if (n % k == 0):
				return False
			k += 2
		return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
1
Gpt3D_Clone548_1.py 1 14
Gpt3D_Clone548_1.py 16 25

----------------------------------------

def is_prime(n) :
	if n < 2 :
		return False;
	if n % 2 == 0 :
		return n == 2
	k = 3
	while k * k < = n :
		if n % k == 0 :
			return False
		k += 2
	return True
----------------------------------------

def is_prime(n) :
	if (n < 2):
		return False	
	if (n == 2):
		return True	
	for k in range(3, int(n**0.5) + 1, 2) :	
		if (n % k == 0):
			return False	
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
0
Gpt3D_Clone54_0.py 1 8
Gpt3D_Clone54_0.py 10 16

----------------------------------------

def isDecent(n) :
	digits = list(map(int, str(n)))
	for digit in digits :
		if digit ! = 3 and digit ! = 5 : return False
	return True
----------------------------------------

def isDecent3(num):
	number = [int(i) for i in str(num)]
	for i in range(len(number)):
		if number[i] != 3 and number[i] != 5:
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
1
Gpt3D_Clone54_1.py 1 8
Gpt3D_Clone54_1.py 10 14

----------------------------------------

def isDecent(n) :
	digits = list(map(int, str(n)))
	for digit in digits :
		if digit ! = 3 and digit ! = 5 : return False
	return True
----------------------------------------

def isDecent(n):
	for c in str(n):
		if int(c) != 3 and int(c) != 5: return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
2
Gpt3D_Clone54_2.py 1 8
Gpt3D_Clone54_2.py 10 14

----------------------------------------

def isDecent(n) :
	digits = list(map(int, str(n)))
	for digit in digits :
		if digit ! = 3 and digit ! = 5 : return False
	return True
----------------------------------------

def isDecent(n):
	for d in str(n):
		if d not in '35': return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
551
1
Gpt3D_Clone551_1.py 1 9
Gpt3D_Clone551_1.py 11 15

----------------------------------------

def is_member(x) :
	a = [1, 5, 3, 9, 4, 100]
	for i in range(len(a)) :
		if x == a [i] :
			return True
	return False
----------------------------------------

def is_member(x) :
	if x == 1 or x == 5 or x == 3 or x == 9 or x == 4 or x == 100 :
		return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
558
0
Gpt3D_Clone558_0.py 1 8
Gpt3D_Clone558_0.py 10 19

----------------------------------------

def access(obj, indexes) :
	try :
		return reduce(list.__getitem__, indexes, obj)
	except Exception :
		return None
----------------------------------------

def access(obj, indexes) :
	res = []
	for i in indexes :
		try :
			res.append(obj[i])
		except Exception :
			res = None
			break
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
558
1
Gpt3D_Clone558_1.py 1 8
Gpt3D_Clone558_1.py 10 18

----------------------------------------

def access(obj, indexes) :
	try :
		return reduce(list.__getitem__, indexes, obj)
	except Exception :
		return None
----------------------------------------

def access(obj, indexes) :
	try :
		result = obj
		for index in indexes: 
			result = result[index]
		return result
	except Exception :
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
559
0
Gpt3D_Clone559_0.py 1 8
Gpt3D_Clone559_0.py 10 18

----------------------------------------

def access(obj, indexes) :
	try :
		return reduce(list.__getitem__, indexes, obj)
	except Exception :
		return None
----------------------------------------

def access(obj, indexes):
  result = obj
  try:
    for index in indexes:
      result = result[index]
  except Exception:
    result = None
  return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
559
1
Gpt3D_Clone559_1.py 1 8
Gpt3D_Clone559_1.py 10 18

----------------------------------------

def access(obj, indexes) :
	try :
		return reduce(list.__getitem__, indexes, obj)
	except Exception :
		return None
----------------------------------------

def access(obj, indexes):
  try:
    result = obj
    for index in indexes:
      result = result.__getitem__(index)
  except Exception:
    result = None
  return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
55
0
Gpt3D_Clone55_0.py 1 8
Gpt3D_Clone55_0.py 10 18

----------------------------------------

def cumulative_sum(lst) :
	new_lst = []
	for i in range(len(lst)) :
		new_lst.append(sum(lst [: i + 1]))
	return new_lst
----------------------------------------

def cumulative_sum(list):
    result = []
    for i in range(len(list)):
        total = 0
        for j in range(i + 1):
            total += list[j]
        result.append(total)
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
55
1
Gpt3D_Clone55_1.py 1 8
Gpt3D_Clone55_1.py 10 18

----------------------------------------

def cumulative_sum(lst) :
	new_lst = []
	for i in range(len(lst)) :
		new_lst.append(sum(lst [: i + 1]))
	return new_lst
----------------------------------------

def cumulative_sum(lst) :
	new_lst = []
	total_sum = lst[0]
	new_lst.append(total_sum)
	for i in range(1, len(lst)) :
		total_sum += lst[i]
		new_lst.append(total_sum)
	return new_lst
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
55
2
Gpt3D_Clone55_2.py 1 8
Gpt3D_Clone55_2.py 10 18

----------------------------------------

def cumulative_sum(lst) :
	new_lst = []
	for i in range(len(lst)) :
		new_lst.append(sum(lst [: i + 1]))
	return new_lst
----------------------------------------

def cumulative_sum(lst) :
	new_lst = []
	cumulative_value = 0
	for value in lst :
		cumulative_value += value
		new_lst.append(cumulative_value)
	return new_lst
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
55
3
Gpt3D_Clone55_3.py 1 8
Gpt3D_Clone55_3.py 10 17

----------------------------------------

def cumulative_sum(lst) :
	new_lst = []
	for i in range(len(lst)) :
		new_lst.append(sum(lst [: i + 1]))
	return new_lst
----------------------------------------

def cumulative_sum(list): 
    result = []
    acc = 0
    for elem in list:
        acc += elem
        result.append(acc)
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
0
Gpt3D_Clone567_0.py 1 8
Gpt3D_Clone567_0.py 10 19

----------------------------------------

def strtr(strng, replace) :
	if replace and strng :
		s, r = replace.popitem()
		return r.join(strtr(subs, dict(replace)) for subs in strng.split(s))
	return strng
----------------------------------------

def strtr(strng, replace):
	if replace and strng:
		s, r = replace.popitem()
		new_sub = []
		for subs in strng.split(s):
			subs = subs.replace(s, r)
			new_sub.append(subs)
		return r.join(new_sub)
	return strng
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
569
0
Gpt3D_Clone569_0.py 1 8
Gpt3D_Clone569_0.py 10 17

----------------------------------------

def stemming(verb) :
	suffix = ["ing", "ed", "es", "s"]
	for i in suffix :
		verb = verb.replace(i, "")
	return verb
----------------------------------------

def stemming(verb):
	suffix = ["ing", "ed", "es", "s"]
	intLength = len(suffix)
	for i in range(intLength):
		verb = verb.replace(suffix[i], "")
	return verb
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
574
0
Gpt3D_Clone574_0.py 1 8
Gpt3D_Clone574_0.py 10 17

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string):
  rev_str = ""
  n = len(string)
  while n > 0:
    rev_str += string[n - 1]
    n -= 1
  return rev_str
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
574
1
Gpt3D_Clone574_1.py 1 8
Gpt3D_Clone574_1.py 10 18

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(st):
	tmp = ""
	i= len(st)
	while i > 0:
		tmp += st[i-1]
		i = i-1
	return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
575
0
Gpt3D_Clone575_0.py 1 8
Gpt3D_Clone575_0.py 10 17

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string):
  temp = ""
  i=len(string)
  while(i != 0):
    temp += string[i-1]
    i-=1
  return temp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
0
Gpt3D_Clone576_0.py 1 8
Gpt3D_Clone576_0.py 10 17

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) :
	tmp = ""
	i = len(string)-1
	while i >= 0 :
	    tmp += string[i]
	    i -= 1
	return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
1
Gpt3D_Clone576_1.py 1 8
Gpt3D_Clone576_1.py 10 17

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) :
	tmp = ""
	i = len(string) 
	while i > 0 :
	    tmp += string [i-1]
	    i -= 1
	return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
0
Gpt3D_Clone577_0.py 1 8
Gpt3D_Clone577_0.py 10 16

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) :
  tmp = ""
  length = len(string) 
  for i in range(length, 0, -1) :
    tmp += string[i - 1]
  return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
0
Gpt3D_Clone578_0.py 1 8
Gpt3D_Clone578_0.py 10 17

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) :
	tmp = ""
	i = len(string)
	while (i > 0) :
		tmp += string [i-1]
		i -= 1
	return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
1
Gpt3D_Clone578_1.py 1 8
Gpt3D_Clone578_1.py 10 16

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) : 
	tmp = ""
	length = len(string)
	for i in range(length) :
		tmp += string[length - i - 1]
	return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
579
3
Gpt3D_Clone579_3.py 1 12
Gpt3D_Clone579_3.py 14 18

----------------------------------------

def rev(test) :
	test = list(test)
	i = len(test) - 1
	result = []
	print test
	while i > = 0 :
		result.append(test.pop(i))
		i -= 1
	return "".join(result)
----------------------------------------

def rev(test):
	test = list(test)
	print test
	return "".join(test[::-1])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
0
Gpt3D_Clone57_0.py 1 10
Gpt3D_Clone57_0.py 12 22

----------------------------------------

def createfile() :
	var = """\
	#!/bin/sh
	echo ${test}
	"""
	var = textwrap.dedent(var)
	funcToCreateScript(filename, var)
----------------------------------------

def createfile() :
  var = """\
	#!/bin/sh
	echo ${test}
	"""
  var = textwrap.dedent(var)
  fh = open(filename, 'w') 
  fh.write(var) 
  fh.close() 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
1
Gpt3D_Clone57_1.py 1 10
Gpt3D_Clone57_1.py 12 22

----------------------------------------

def createfile() :
	var = """\
	#!/bin/sh
	echo ${test}
	"""
	var = textwrap.dedent(var)
	funcToCreateScript(filename, var)
----------------------------------------

def createfile() :
  var = """\
	#!/bin/sh
	echo ${test}
	"""
  f = open("test.sh","w+")
  f.write("#!/bin/sh\n")
  f.write("echo {test}")
  f.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
2
Gpt3D_Clone57_2.py 1 10
Gpt3D_Clone57_2.py 12 18

----------------------------------------

def createfile() :
	var = """\
	#!/bin/sh
	echo ${test}
	"""
	var = textwrap.dedent(var)
	funcToCreateScript(filename, var)
----------------------------------------

def createfile():
	var = """\
	#!/bin/sh
	echo ${test}
	"""
	funcToCreateScript("script.sh", var)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
0
Gpt3D_Clone580_0.py 1 9
Gpt3D_Clone580_0.py 11 18

----------------------------------------

def reverse(text) :
	answer = ""
	while text :
		answer = text [0] + answer
		text = text [1 :]
	return answer
----------------------------------------

def reverse(text):
    new_string = ""
    index = len(text) - 1
    while index >= 0:
        new_string += text[index]
        index -= 1 
    return new_string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
1
Gpt3D_Clone580_1.py 1 9
Gpt3D_Clone580_1.py 11 17

----------------------------------------

def reverse(text) :
	answer = ""
	while text :
		answer = text [0] + answer
		text = text [1 :]
	return answer
----------------------------------------

def reverse(string): 
    str = "" 
    for i in string: 
        str = i + str
    return str
  
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
2
Gpt3D_Clone580_2.py 1 9
Gpt3D_Clone580_2.py 11 16

----------------------------------------

def reverse(text) :
	answer = ""
	while text :
		answer = text [0] + answer
		text = text [1 :]
	return answer
----------------------------------------

def reverse(s): 
    if len(s) == 0: 
        return s 
    else: 
        return reverse(s[1:]) + s[0]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
3
Gpt3D_Clone580_3.py 1 9
Gpt3D_Clone580_3.py 11 16

----------------------------------------

def reverse(text) :
	answer = ""
	while text :
		answer = text [0] + answer
		text = text [1 :]
	return answer
----------------------------------------

def reverse(text):
    answer = ''
    for character in range(len(text)-1,-1,-1):
        answer += text[character]
    return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
0
Gpt3D_Clone581_0.py 1 9
Gpt3D_Clone581_0.py 11 18

----------------------------------------

def reverse(text) :
	answer = ""
	while text :
		answer = text [0] + answer
		text = text [1 :]
	return answer
----------------------------------------

def reverse(text):
	answer = ""
	i = 0
	while i < len(text):
		answer += text[len(text)-i-1]
		i += 1
	return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
1
Gpt3D_Clone581_1.py 1 9
Gpt3D_Clone581_1.py 11 17

----------------------------------------

def reverse(text) :
	answer = ""
	while text :
		answer = text [0] + answer
		text = text [1 :]
	return answer
----------------------------------------

def reverse(text) :
	answer = ""
	textlen = len(text)
	for i in range(textlen-1, -1, -1) :
		answer += text[i]
	return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
2
Gpt3D_Clone581_2.py 1 9
Gpt3D_Clone581_2.py 11 16

----------------------------------------

def reverse(text) :
	answer = ""
	while text :
		answer = text [0] + answer
		text = text [1 :]
	return answer
----------------------------------------

def reverse(text):
	answer = ""
	for char in text:
		answer = char + answer
	return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
2
Gpt3D_Clone582_2.py 1 10
Gpt3D_Clone582_2.py 12 15

----------------------------------------

def reverse(s) :
	i = len(s) - 1
	sNew = ''
	while i > = 0 :
		sNew = sNew + str(s [i])
		i = i - 1
	return sNew
----------------------------------------

def reverse(s):
	sNew="".join(reversed(s))
	return sNew
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
0
Gpt3D_Clone583_0.py 1 10
Gpt3D_Clone583_0.py 12 20

----------------------------------------

def reverse(s) :
	i = len(s) - 1
	sNew = ''
	while i > = 0 :
		sNew = sNew + str(s [i])
		i = i - 1
	return sNew
----------------------------------------

def reverse_3(s):
  i = 0
  s_rev = ''
  while i < len(s):
    s_rev = s_rev + str(s[len(s) - i - 1])
    i = i + 1
  return s_rev
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
2
Gpt3D_Clone583_2.py 1 10
Gpt3D_Clone583_2.py 12 20

----------------------------------------

def reverse(s) :
	i = len(s) - 1
	sNew = ''
	while i > = 0 :
		sNew = sNew + str(s [i])
		i = i - 1
	return sNew
----------------------------------------

def reverse_chars(s): 
	len_s = len(s)
	str_reversed = ''
	while len_s > 0: 
		str_reversed += s[len_s - 1]
		len_s -= 1
	return str_reversed
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
3
Gpt3D_Clone583_3.py 1 10
Gpt3D_Clone583_3.py 12 17

----------------------------------------

def reverse(s) :
	i = len(s) - 1
	sNew = ''
	while i > = 0 :
		sNew = sNew + str(s [i])
		i = i - 1
	return sNew
----------------------------------------

def reverse_4(s):
  rev_s = ''
  for letter in s:
    rev_s = str(letter) + rev_s
  return rev_s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
0
Gpt3D_Clone584_0.py 1 8
Gpt3D_Clone584_0.py 10 17

----------------------------------------

def reverse(text) :
	reversed_text = ""
	for n in range(len(text)) :
		reversed_text += text [- 1 - n]
	return reversed_text
----------------------------------------

def reverse_four(text): 
	reversed_text = ""
	n = len(text) - 1
	while n > -1 : 
		reversed_text += text[n]
		n -= 1
	return reversed_text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
2
Gpt3D_Clone584_2.py 1 8
Gpt3D_Clone584_2.py 10 16

----------------------------------------

def reverse(text) :
	reversed_text = ""
	for n in range(len(text)) :
		reversed_text += text [- 1 - n]
	return reversed_text
----------------------------------------

def reverse(text) :
	chars = list(text)
	chars.reverse()
	reversed_text = ''.join(chars)
	return reversed_text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
3
Gpt3D_Clone584_3.py 1 8
Gpt3D_Clone584_3.py 10 13

----------------------------------------

def reverse(text) :
	reversed_text = ""
	for n in range(len(text)) :
		reversed_text += text [- 1 - n]
	return reversed_text
----------------------------------------

def reverse(text) :
	reversed_text = "".join(reversed(text))
	return reversed_text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
1
Gpt3D_Clone585_1.py 1 10
Gpt3D_Clone585_1.py 12 19

----------------------------------------

def reverse(s) :
	t = - 1
	s2 = ''
	while abs(t) < len(s) + 1 :
		s2 = s2 + s [t]
		t = t - 1
	return s2
----------------------------------------

def reverse(s):
	t = 0 
	s2 = ''
	while t < len(s):
		s2 = s[t] + s2
		t = t + 1
	return s2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
2
Gpt3D_Clone586_2.py 1 10
Gpt3D_Clone586_2.py 12 19

----------------------------------------

def reverse(s) :
	t = - 1
	s2 = ''
	while abs(t) < len(s) + 1 :
		s2 = s2 + s [t]
		t = t - 1
	return s2
----------------------------------------

def reverse(s):
  t = 0
  s2 = ''
  while t < len(s):
    s2 = s2 + s[len(s) - t - 1]
    t = t + 1
  return s2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
587
0
Gpt3D_Clone587_0.py 1 9
Gpt3D_Clone587_0.py 11 19

----------------------------------------

def reverse(s) :
	rev = [_t for _t in s]
	t = ''
	while len(rev) ! = 0 :
		t += rev.pop()
	return t
----------------------------------------

def reverse(s) :
	t = ''
	idx = len(s)
	while idx != 0 :
		 idx -= 1
		 t += s[idx]
	return t
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
588
0
Gpt3D_Clone588_0.py 1 15
Gpt3D_Clone588_0.py 17 29

----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	if not settings_dict ['HOST'].strip() :
		settings_dict ['HOST'] = 'localhost'
	if settings_dict ['PORT'].strip() :
		dsn = Database.makedsn(settings_dict ['HOST'],
		int(settings_dict ['PORT']),
		settings_dict ['NAME'])
	else :
		dsn = settings_dict ['NAME']
	return "%s/%s@%s" % (settings_dict ['USER'],
	settings_dict ['PASSWORD'], dsn)
----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	host = settings_dict ['HOST'].strip()
	if not host:
		host = 'localhost'
	if settings_dict ['PORT'].strip() :
		host_port = Database.makedsn(host, int(settings_dict['PORT']), settings_dict['NAME'])
	else:
		host_port = settings_dict['NAME']
	
	return "%s/%s@%s" % (settings_dict['USER'], settings_dict['PASSWORD'], host_port)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
588
1
Gpt3D_Clone588_1.py 1 15
Gpt3D_Clone588_1.py 17 26

----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	if not settings_dict ['HOST'].strip() :
		settings_dict ['HOST'] = 'localhost'
	if settings_dict ['PORT'].strip() :
		dsn = Database.makedsn(settings_dict ['HOST'],
		int(settings_dict ['PORT']),
		settings_dict ['NAME'])
	else :
		dsn = settings_dict ['NAME']
	return "%s/%s@%s" % (settings_dict ['USER'],
	settings_dict ['PASSWORD'], dsn)
----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	host = 'localhost' if not settings_dict['HOST'].strip() else settings_dict['HOST']
	if settings_dict['PORT'].strip() :
		dsn = Database.makedsn(host, int(settings_dict['PORT']), settings_dict['NAME'])
	else :
		dsn = settings_dict['NAME']
	return "%s/%s@%s" % (settings_dict['USER'], settings_dict['PASSWORD'], dsn)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
588
2
Gpt3D_Clone588_2.py 1 15
Gpt3D_Clone588_2.py 17 26

----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	if not settings_dict ['HOST'].strip() :
		settings_dict ['HOST'] = 'localhost'
	if settings_dict ['PORT'].strip() :
		dsn = Database.makedsn(settings_dict ['HOST'],
		int(settings_dict ['PORT']),
		settings_dict ['NAME'])
	else :
		dsn = settings_dict ['NAME']
	return "%s/%s@%s" % (settings_dict ['USER'],
	settings_dict ['PASSWORD'], dsn)
----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	host = settings_dict ['HOST'].strip() or 'localhost'
	if settings_dict ['PORT'].strip() :
		host_port = Database.makedsn(host, int(settings_dict['PORT']), settings_dict['NAME'])
	else:
		host_port = settings_dict['NAME']
	
	return "%s/%s@%s" % (settings_dict['USER'], settings_dict['PASSWORD'], host_port)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
588
3
Gpt3D_Clone588_3.py 1 15
Gpt3D_Clone588_3.py 17 25

----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	if not settings_dict ['HOST'].strip() :
		settings_dict ['HOST'] = 'localhost'
	if settings_dict ['PORT'].strip() :
		dsn = Database.makedsn(settings_dict ['HOST'],
		int(settings_dict ['PORT']),
		settings_dict ['NAME'])
	else :
		dsn = settings_dict ['NAME']
	return "%s/%s@%s" % (settings_dict ['USER'],
	settings_dict ['PASSWORD'], dsn)
----------------------------------------

def _connect_string(self) :
	settings_dict = self.settings_dict
	host = settings_dict['HOST'].strip() or 'localhost'
	if settings_dict['PORT'].strip() :
		dsn = Database.makedsn(host, int(settings_dict['PORT']), settings_dict['NAME'])
	else :
		dsn = settings_dict['NAME']
	return "%s/%s@%s" % (settings_dict['USER'], settings_dict['PASSWORD'], dsn)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
589
2
Gpt3D_Clone589_2.py 1 11
Gpt3D_Clone589_2.py 13 19

----------------------------------------

def find(l, elem) :
	for row, i in enumerate(l) :
		try :
			column = i.index(elem)
		except ValueError :
			continue
		return row, column
	return - 1
----------------------------------------

def find(l, elem) : 
	for row, i in enumerate(l) :
		col = l[row].index(elem) if elem in l[row] else - 1
		if col != -1 :
			return row, col
	return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
589
3
Gpt3D_Clone589_3.py 1 11
Gpt3D_Clone589_3.py 13 18

----------------------------------------

def find(l, elem) :
	for row, i in enumerate(l) :
		try :
			column = i.index(elem)
		except ValueError :
			continue
		return row, column
	return - 1
----------------------------------------

def find(l, elem) :
	for row, i in enumerate(l) :
		if elem in i :
			return row, i.index(elem)
	return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
0
Gpt3D_Clone593_0.py 1 8
Gpt3D_Clone593_0.py 10 20

----------------------------------------

def decorator(function) :
	if after :
		return afterDecorator(function, event)
	else :
		return beforeDecorator(function, event)
----------------------------------------

def decorator(function):
    ans = None
    try:
        if after:
            ans =  afterDecorator(function, event)
        else:
            ans = beforeDecorator(function, event)
    except:
        pass
    return ans
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
1
Gpt3D_Clone593_1.py 1 8
Gpt3D_Clone593_1.py 10 18

----------------------------------------

def decorator(function) :
	if after :
		return afterDecorator(function, event)
	else :
		return beforeDecorator(function, event)
----------------------------------------

def decorator(function):
    ans = None
    if after:
        ans =  afterDecorator(function, event)
    else:
        ans = beforeDecorator(function, event)
    return ans
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
2
Gpt3D_Clone593_2.py 1 8
Gpt3D_Clone593_2.py 10 17

----------------------------------------

def decorator(function) :
	if after :
		return afterDecorator(function, event)
	else :
		return beforeDecorator(function, event)
----------------------------------------

def decorator(function):
    if after:
        ans =  afterDecorator(function, event)
    else:
        ans = beforeDecorator(function, event)
    return ans
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
0
Gpt3D_Clone596_0.py 1 9
Gpt3D_Clone596_0.py 11 22

----------------------------------------

def printFigure(rows) :
	for x in range(rows) :
		items = [str(i) for i in range(1, x + 1)]
		if x % 2 == 0 :
			items = items [: : - 1]
		print (''.join(items))
----------------------------------------

def printFigures(rows):
	for x in range(rows):
		items = list()
		for i in range(1, x+1):
			items.append(str(i))
		if x % 2 == 0:
			items.reverse()
		result = ""
		for item in items:
			result += item
		print(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
2
Gpt3D_Clone596_2.py 1 9
Gpt3D_Clone596_2.py 11 25

----------------------------------------

def printFigure(rows) :
	for x in range(rows) :
		items = [str(i) for i in range(1, x + 1)]
		if x % 2 == 0 :
			items = items [: : - 1]
		print (''.join(items))
----------------------------------------

def printFigure4(rows) :
	# Loop through each row
	for x in range(rows) :
		# Create a string filled with the numbers from 1 to x + 1
		line = ""
		for num in range (1, x + 1) :
			line += str(num)
		#Reverse the line if x is even
		if x % 2 == 0 :
			line = line[ : : -1]
		# Prints the line
		print(line)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
599
0
Gpt3D_Clone599_0.py 1 35
Gpt3D_Clone599_0.py 37 53

----------------------------------------

def all_pairs(lst) :
	if not lst :
		yield [tuple()]
	elif len(lst) == 1 :
		yield [tuple(lst)]
	elif len(lst) == 2 :
		yield [tuple(lst)]
	else :
		if len(lst) % 2 :
			for i in (None, True) :
				if i not in lst :
					lst = list(lst) + [i]
					PAD = i
					break
			else :
				while chr(i) in lst :
					i += 1
				PAD = chr(i)
				lst = list(lst) + [PAD]
		else :
			PAD = False
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				rv = [pair] + rest
				if PAD is not False :
					for i, t in enumerate(rv) :
						if PAD in t :
							rv [i] = (t [0],)
							break
				yield rv
----------------------------------------

def all_pairs(lst):
	if not lst:
		yield [tuple()]
	elif len(lst) == 1:
		yield [tuple(lst)]
	elif len(lst) == 2:
		yield [tuple(lst)]
	else:
		a = lst[0]
		for i in range(1, len(lst)):
			pair = (a, lst[i])
			for rest in all_pairs(lst[1:i] + lst[i + 1:]):
				rv = [pair] + rest
				if chr(i) in rv:
					rv[i] = (t[0],)
				yield rv
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
599
1
Gpt3D_Clone599_1.py 1 35
Gpt3D_Clone599_1.py 37 53

----------------------------------------

def all_pairs(lst) :
	if not lst :
		yield [tuple()]
	elif len(lst) == 1 :
		yield [tuple(lst)]
	elif len(lst) == 2 :
		yield [tuple(lst)]
	else :
		if len(lst) % 2 :
			for i in (None, True) :
				if i not in lst :
					lst = list(lst) + [i]
					PAD = i
					break
			else :
				while chr(i) in lst :
					i += 1
				PAD = chr(i)
				lst = list(lst) + [PAD]
		else :
			PAD = False
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				rv = [pair] + rest
				if PAD is not False :
					for i, t in enumerate(rv) :
						if PAD in t :
							rv [i] = (t [0],)
							break
				yield rv
----------------------------------------

def all_pairs(lst):
	if not lst:
		yield [tuple()]
	elif len(lst) == 1:
		yield [tuple(lst)]
	elif len(lst) == 2:
		yield [tuple(lst)]
	else:	
		PAD = False
		a = lst[0]
		for i in range(1, len(lst)):
			pair = (a, lst[i])
			for rest in all_pairs(lst[1:i] + lst[i + 1:]):
				rv = [pair] + rest
				yield rv
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
600
0
Gpt3D_Clone600_0.py 1 35
Gpt3D_Clone600_0.py 37 50

----------------------------------------

def all_pairs(lst) :
	if not lst :
		yield [tuple()]
	elif len(lst) == 1 :
		yield [tuple(lst)]
	elif len(lst) == 2 :
		yield [tuple(lst)]
	else :
		if len(lst) % 2 :
			for i in (None, True) :
				if i not in lst :
					lst = list(lst) + [i]
					PAD = i
					break
			else :
				while chr(i) in lst :
					i += 1
				PAD = chr(i)
				lst = list(lst) + [PAD]
		else :
			PAD = False
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				rv = [pair] + rest
				if PAD is not False :
					for i, t in enumerate(rv) :
						if PAD in t :
							rv [i] = (t [0],)
							break
				yield rv
----------------------------------------

def all_pairs(lst) :
	if not lst :
		yield [tuple()]
	elif len(lst) == 1 :
		yield [tuple(lst)]
	elif len(lst) == 2 :
		yield [tuple(lst)]
	else :
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				yield [pair] + rest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
600
1
Gpt3D_Clone600_1.py 1 35
Gpt3D_Clone600_1.py 37 48

----------------------------------------

def all_pairs(lst) :
	if not lst :
		yield [tuple()]
	elif len(lst) == 1 :
		yield [tuple(lst)]
	elif len(lst) == 2 :
		yield [tuple(lst)]
	else :
		if len(lst) % 2 :
			for i in (None, True) :
				if i not in lst :
					lst = list(lst) + [i]
					PAD = i
					break
			else :
				while chr(i) in lst :
					i += 1
				PAD = chr(i)
				lst = list(lst) + [PAD]
		else :
			PAD = False
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				rv = [pair] + rest
				if PAD is not False :
					for i, t in enumerate(rv) :
						if PAD in t :
							rv [i] = (t [0],)
							break
				yield rv
----------------------------------------

def all_pairs(lst) :
	if not lst :
		yield [tuple()]
	elif len(lst) == 1 :
		yield [tuple(lst)]
	else :
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				yield [pair] + rest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
0
Gpt3D_Clone603_0.py 1 8
Gpt3D_Clone603_0.py 10 19

----------------------------------------

def myfun(my_list, n, par1 = '') :
	new_list = ([my_fun2(i, j) for j in range(n)] for i in range(n))
	if par1 ! = '' :
		new_list = filter(eq(par1), new_list)
	return list(new_list)
----------------------------------------

def myfun(my_list, n, par1 = '') :
	new_list = []
	for i in range(n) : 
		for j in range(n) : 
			new_list.append(my_fun2(i, j))
	if par1 != '' : 
		new_list = [i for i in new_list if eq(par1)(i)]
	return new_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
1
Gpt3D_Clone603_1.py 1 8
Gpt3D_Clone603_1.py 10 13

----------------------------------------

def myfun(my_list, n, par1 = '') :
	new_list = ([my_fun2(i, j) for j in range(n)] for i in range(n))
	if par1 ! = '' :
		new_list = filter(eq(par1), new_list)
	return list(new_list)
----------------------------------------

def myfun(my_list, n) :
	new_list = ([my_fun2(i, j) for j in range(n)] for i in range(n))
	return list(new_list)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
605
0
Gpt3D_Clone605_0.py 1 8
Gpt3D_Clone605_0.py 10 17

----------------------------------------

def __getitem__(self, item) :
	if isinstance(item, slice) :
		if item.step is None :
			return list(range(item.start, item.stop))
		return list(range(item.start, item.stop, item.step))
----------------------------------------

def __getitem__(self, item) :
	if isinstance(item, slice) :
		if item.step is None :
			result = list(range(item.start, item.stop))
		else:
			result = list(range(item.start, item.stop, item.step))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
1
Gpt3D_Clone606_1.py 1 11
Gpt3D_Clone606_1.py 13 17

----------------------------------------

def sigmoid(x) :
	"Numerically-stable sigmoid function."
	if x > = 0 :
		z = exp(- x)
		return 1 / (1 + z)
	else :
		z = exp(x)
		return z / (1 + z)
----------------------------------------

def sigmoid(x):
    "Numerically-stable sigmoid function."
    z = exp(x if x<0 else -x)
    return 1 / (1 + z)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
2
Gpt3D_Clone606_2.py 1 11
Gpt3D_Clone606_2.py 13 17

----------------------------------------

def sigmoid(x) :
	"Numerically-stable sigmoid function."
	if x > = 0 :
		z = exp(- x)
		return 1 / (1 + z)
	else :
		z = exp(x)
		return z / (1 + z)
----------------------------------------

def sigmoid(x):
    "Numerically-stable sigmoid function."
    z = exp(-x if x>=0 else x)
    return z / (1 + z)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
3
Gpt3D_Clone606_3.py 1 11
Gpt3D_Clone606_3.py 13 17

----------------------------------------

def sigmoid(x) :
	"Numerically-stable sigmoid function."
	if x > = 0 :
		z = exp(- x)
		return 1 / (1 + z)
	else :
		z = exp(x)
		return z / (1 + z)
----------------------------------------

def sigmoid(x):
    "Numerically-stable sigmoid function."
    z = exp(-(x*(x>=0)+(x*x<=0)))
    return z / (1 + z)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
4
Gpt3D_Clone606_4.py 1 11
Gpt3D_Clone606_4.py 13 17

----------------------------------------

def sigmoid(x) :
	"Numerically-stable sigmoid function."
	if x > = 0 :
		z = exp(- x)
		return 1 / (1 + z)
	else :
		z = exp(x)
		return z / (1 + z)
----------------------------------------

def sigmoid(x):
    "Numerically-stable sigmoid function."
    z = exp(-(x+((-x)*(x<0))))
    return z / (1 + z)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
2
Gpt3D_Clone607_2.py 1 19
Gpt3D_Clone607_2.py 21 26

----------------------------------------

def some_function(eggs) :
	error_code = 0
	if eggs == 1 :
		do_something_1()
	elif eggs == 2 :
		do_something_2()
	elif eggs == 3 :
		do_something_3()
	else :
		do_error()
		error_code = 1
	if error_code == 0 :
		do_something_4()
		do_something_5()
		do_something_6()
	return
----------------------------------------

def some_function_routine_2(error_code):
	if error_code == 0:
		do_something_4()
		do_something_5()
		do_something_6()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
3
Gpt3D_Clone607_3.py 1 19
Gpt3D_Clone607_3.py 21 26

----------------------------------------

def some_function(eggs) :
	error_code = 0
	if eggs == 1 :
		do_something_1()
	elif eggs == 2 :
		do_something_2()
	elif eggs == 3 :
		do_something_3()
	else :
		do_error()
		error_code = 1
	if error_code == 0 :
		do_something_4()
		do_something_5()
		do_something_6()
	return
----------------------------------------

def some_function(eggs):
	error_code = some_function_routine_1(eggs)
	some_function_routine_2(error_code)
	return
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
1
Gpt3D_Clone60_1.py 1 15
Gpt3D_Clone60_1.py 17 28

----------------------------------------

def arePermsEqualParity(perm0, perm1) :
	perm1 = list(perm1)
	perm1_map = dict((v, i) for i, v in enumerate(perm1))
	transCount = 0
	for loc, p0 in enumerate(perm0) :
		p1 = perm1 [loc]
		if p0 ! = p1 :
			sloc = perm1_map [p0]
			perm1 [loc], perm1 [sloc] = p0, p1
			perm1_map [p0], perm1_map [p1] = loc, sloc
			transCount += 1
	return (transCount % 2) == 0
----------------------------------------

def arePermsEqualParity(perm0, perm1):
  transCount = 0
  for i in range(len(perm0)):
    if perm0[i] != perm1[i]:
      for j in range(len(perm1)):
        if perm1[j] == perm0[i]:
          perm1[i], perm1[j] = perm1[j], perm1[i]
          transCount += 1
          break
  return (transCount %2) == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
613
0
Gpt3D_Clone613_0.py 1 16
Gpt3D_Clone613_0.py 18 23

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	concatenate_list = left_side+right_side
	temp_list = sorted(concatenate_list)
	return temp_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
613
1
Gpt3D_Clone613_1.py 1 16
Gpt3D_Clone613_1.py 18 22

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = left_side+right_side
	result.sort()
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
0
Gpt3D_Clone615_0.py 1 16
Gpt3D_Clone615_0.py 18 38

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	len_left_side = len(left_side)
	len_right_side = len(right_side)
	while len_left_side > 0 or len_right_side > 0 :
		if len_left_side > 0 and len_right_side > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
				len_left_side -= 1
			else :
				result.append(right_side.pop(0))
				len_right_side -= 1
		elif len_left_side > 0 :
			result.append(left_side.pop(0))
			len_left_side -= 1
		elif len_right_side > 0 :
			result.append(right_side.pop(0))
			len_right_side -= 1
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
621
1
Gpt3D_Clone621_1.py 1 10
Gpt3D_Clone621_1.py 12 23

----------------------------------------

def merge_sort(data) :
	if len(data) == 1 :
		return data
	middle = len(data) / / 2
	left_data = merge_sort(data [: middle])
	right_data = merge_sort(data [middle :])
	return merge(left_data, right_data)
----------------------------------------

def merge_sort(data):
	if len(data) == 1:
		return data
	middle = len(data) // 2
	left_data = data [: middle]
	right_data = data [middle:]
	
	left_data = merge_sort(left_data)
	right_data = merge_sort(right_data)
	
	return merge(left_data, right_data, data)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
622
0
Gpt3D_Clone622_0.py 1 10
Gpt3D_Clone622_0.py 12 35

----------------------------------------

def merge_sort(data) :
	if len(data) == 1 :
		return data
	middle = len(data) / / 2
	left_data = merge_sort(data [: middle])
	right_data = merge_sort(data [middle :])
	return merge(left_data, right_data)
----------------------------------------

def merge_sort(data) :
	if len(data) == 1 : 
		return data 
	middle = len(data) // 2 
	left_data = merge_sort(data[: middle])
	right_data = merge_sort(data[middle:]) 
	left_ptr = 0
	right_ptr = 0
	result = []
	while left_ptr < len(left_data) and right_ptr < len(right_data) : 
		if left_data[left_ptr] < right_data[right_ptr] : 
			result.append(left_data[left_ptr]) 
			left_ptr += 1
		else : 
			result.append(right_data[right_ptr]) 
			right_ptr += 1
	while left_ptr < len(left_data) : 
		result.append(left_data[left_ptr])
		left_ptr += 1
	while right_ptr < len(right_data) : 
		result.append(right_data[right_ptr])
		right_ptr += 1
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
0
Gpt3D_Clone639_0.py 1 13
Gpt3D_Clone639_0.py 15 33

----------------------------------------

def merge_sort(x) :
	if len(x) < 2 : return x
	result, mid = [], int(len(x) / 2)
	y = merge_sort(x [: mid])
	z = merge_sort(x [mid :])
	while (len(y) > 0) and (len(z) > 0) :
		if y [0] > z [0] : result.append(z.pop(0))
		else : result.append(y.pop(0))
	result.extend(y + z)
	return result
----------------------------------------

def merge_sort(x) :
	if len(x) < 2 : return x
	mid = int(len(x) / 2)
	y = merge_sort(x[: mid])
	z = merge_sort(x[mid:])
	result = []
	i, j = 0, 0
	while i < len(y) and j < len(z):
		if y[i] < z[j]:
			result.append(y[i])
			i += 1
		else:
			result.append(z[j])
			j += 1
	result += y[i:]  
	result += z[j:]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
1
Gpt3D_Clone639_1.py 1 13
Gpt3D_Clone639_1.py 15 29

----------------------------------------

def merge_sort(x) :
	if len(x) < 2 : return x
	result, mid = [], int(len(x) / 2)
	y = merge_sort(x [: mid])
	z = merge_sort(x [mid :])
	while (len(y) > 0) and (len(z) > 0) :
		if y [0] > z [0] : result.append(z.pop(0))
		else : result.append(y.pop(0))
	result.extend(y + z)
	return result
----------------------------------------

def merge_sort(x):
	if len(x) < 2: 
		return x
	result, mid = [], int(len(x) / 2)
	y = merge_sort(x[:mid])
	z = merge_sort(x[mid:])
	while len(y) > 0 and len(z) > 0:
		if y[0] < z[0]: 
			result.append(y.pop(0))
		else: 
			result.append(z.pop(0))
	result.extend(y + z)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
2
Gpt3D_Clone639_2.py 1 13
Gpt3D_Clone639_2.py 15 27

----------------------------------------

def merge_sort(x) :
	if len(x) < 2 : return x
	result, mid = [], int(len(x) / 2)
	y = merge_sort(x [: mid])
	z = merge_sort(x [mid :])
	while (len(y) > 0) and (len(z) > 0) :
		if y [0] > z [0] : result.append(z.pop(0))
		else : result.append(y.pop(0))
	result.extend(y + z)
	return result
----------------------------------------

def merge_sort(x):
	if len(x) < 2: 
		return x
	result, mid = [], int(len(x) / 2)
	y = merge_sort(x[:mid])
	z = merge_sort(x[mid:])
	while len(y) > 0 or len(z) > 0:
		if len(z) == 0 or (len(y) > 0 and y[0] < z[0]):
			result.append(y.pop(0))
		else: 
			result.append(z.pop(0))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
3
Gpt3D_Clone639_3.py 1 13
Gpt3D_Clone639_3.py 15 22

----------------------------------------

def merge_sort(x) :
	if len(x) < 2 : return x
	result, mid = [], int(len(x) / 2)
	y = merge_sort(x [: mid])
	z = merge_sort(x [mid :])
	while (len(y) > 0) and (len(z) > 0) :
		if y [0] > z [0] : result.append(z.pop(0))
		else : result.append(y.pop(0))
	result.extend(y + z)
	return result
----------------------------------------

def merge_sort(x) :
	if len(x) < 2 : return x
	mid = int(len(x) / 2)
	y = merge_sort(x[: mid])
	z = merge_sort(x[mid:])
	result = sorted(y + z)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
63
0
Gpt3D_Clone63_0.py 1 16
Gpt3D_Clone63_0.py 18 38

----------------------------------------

def issorted(vec, ascending = True) :
	if len(vec) < 2 :
		return True
	if ascending :
		for i in range(1, len(vec)) :
			if vec [i - 1] > vec [i] :
				return False
		return True
	else :
		for i in range(1, len(vec)) :
			if vec [i - 1] < vec [i] :
				return False
		return True
----------------------------------------

def issorted(vec, ascending = True) :
	length = len(vec)
	if length < 2 :
		return True
	low = 0
	high = length - 1
	if ascending :
		while low < high :
			if vec [low] > vec [high] :
				return False
			low += 1
			high -= 1
		return True
	else :
		while low < high :
			if vec [low] < vec [high] :
				return False
			low += 1
			high -= 1
		return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
63
1
Gpt3D_Clone63_1.py 1 16
Gpt3D_Clone63_1.py 18 35

----------------------------------------

def issorted(vec, ascending = True) :
	if len(vec) < 2 :
		return True
	if ascending :
		for i in range(1, len(vec)) :
			if vec [i - 1] > vec [i] :
				return False
		return True
	else :
		for i in range(1, len(vec)) :
			if vec [i - 1] < vec [i] :
				return False
		return True
----------------------------------------

def issorted(vec, ascending = True) :
	length = len(vec)
	if length < 2 :
		return True
	low = 0
	if ascending :
		while low < length-1 :
			if vec [low] > vec [low + 1] :
				return False
			low += 1
		return True
	else :
		while low < length-1 :
			if vec [low] < vec [low + 1] :
				return False
			low += 1
		return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
0
Gpt3D_Clone643_0.py 1 5
Gpt3D_Clone643_0.py 7 14

----------------------------------------

def smart_func(terms) :
	params = []
	for n in range(terms) :
		params.append(2 * n * np.pi)
----------------------------------------

def smart_func_v2(terms, factor = 2) :
	params = []
	for n in range(terms) :
		params.append(factor * n * np.pi)
	return params
	return np.cos(params)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
0
Gpt3D_Clone646_0.py 1 8
Gpt3D_Clone646_0.py 10 16

----------------------------------------

def daterange(start, end, step = datetime.timedelta(1)) :
	curr = start
	while curr < end :
		yield curr
		curr += step
----------------------------------------

def daterange(start, stop, step = datetime.timedelta(1)) :
	curr = stop - start
	while curr >= 0 :
		yield start
		start += step
		curr -= step
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
2
Gpt3D_Clone648_2.py 1 11
Gpt3D_Clone648_2.py 13 23

----------------------------------------

def shift_cipher_noloop(plain, i) :
	if (plain == "") :
		return ""
	else :
		if len(plain) > 3 and i > 0 :
			return shift_cipher_noloop(plain [1 :] + plain [0], i - 1)
		else :
			return plain
----------------------------------------

def shift_cipher_noloop(plain, i) :
	if (plain == "") :
		return ""
	temp_plain = plain
	for j in range(i):
		temp_plain = temp_plain[1:] + temp_plain[0]
	return temp_plain
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
3
Gpt3D_Clone648_3.py 1 11
Gpt3D_Clone648_3.py 13 17

----------------------------------------

def shift_cipher_noloop(plain, i) :
	if (plain == "") :
		return ""
	else :
		if len(plain) > 3 and i > 0 :
			return shift_cipher_noloop(plain [1 :] + plain [0], i - 1)
		else :
			return plain
----------------------------------------

def shift_cipher_noloop(plain, i) :
	if plain == "" :
		return ""
	return shift_cipher_noloop(plain [1 :] + plain [0], i - 1) if len(plain) > 3 and i > 0 else plain
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
2
Gpt3D_Clone64_2.py 1 14
Gpt3D_Clone64_2.py 16 22

----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	try :
		prev = it.next()
	except StopIteration :
		return True
	for x in it :
		if prev > x :
			return False
		prev = x
	return True
----------------------------------------

def is_sorted(lst):
  sorted_list = sorted(lst)
  if sorted_list == lst:
    return True
  else:
    return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
3
Gpt3D_Clone64_3.py 1 14
Gpt3D_Clone64_3.py 16 21

----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	try :
		prev = it.next()
	except StopIteration :
		return True
	for x in it :
		if prev > x :
			return False
		prev = x
	return True
----------------------------------------

def is_sorted(lst):
  if all(lst[i] <= lst[i+1] for i in range(len(lst)-1)):
    return True
  else:
    return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
650
3
Gpt3D_Clone650_3.py 1 14
Gpt3D_Clone650_3.py 16 20

----------------------------------------

def __init__(self) :
	super().__init__()
	self.label = QLabel("0")
	self.obj = worker.Worker()
	self.thread = QThread()
	self.obj.intReady.connect(self.onIntReady)
	self.obj.moveToThread(self.thread)
	self.obj.finished.connect(self.thread.quit)
	self.thread.started.connect(self.obj.procCounter)
	self.thread.start()
	self.initUI()
----------------------------------------

def executeTask(self):
	self.obj.finished.connect(self.thread.quit)
	self.thread.started.connect(self.obj.procCounter)
	self.thread.start()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
653
0
Gpt3D_Clone653_0.py 1 9
Gpt3D_Clone653_0.py 11 18

----------------------------------------

def sum_even(a, b) :
	if (a % 2 == 1) :
		a += 1
	if (b % 2 == 1) :
		b -= 1
	return a * (0.5 - 0.25 * a) + b * (0.25 * b + 0.5)
----------------------------------------

def sum_even(a, b) :
	if (a % 2 == 1) :
		a -= 1
	if (b % 2 == 1) :
		b += 1
	return a * (0.25 * a - 0.5) + b * (0.5 - 0.25 * b)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
653
1
Gpt3D_Clone653_1.py 1 9
Gpt3D_Clone653_1.py 11 18

----------------------------------------

def sum_even(a, b) :
	if (a % 2 == 1) :
		a += 1
	if (b % 2 == 1) :
		b -= 1
	return a * (0.5 - 0.25 * a) + b * (0.25 * b + 0.5)
----------------------------------------

def sum_even(a, b):
    if a % 2 == 1: 
        a += 1
    if b % 2 != 1:
        b -= 1
    return (0.75 * a * a) + (b * b) * 0.25
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
653
3
Gpt3D_Clone653_3.py 1 9
Gpt3D_Clone653_3.py 11 17

----------------------------------------

def sum_even(a, b) :
	if (a % 2 == 1) :
		a += 1
	if (b % 2 == 1) :
		b -= 1
	return a * (0.5 - 0.25 * a) + b * (0.25 * b + 0.5)
----------------------------------------

def sum_even(a, b):
    if a % 2 == 1:
        a += 1
    if b % 2 == 1:
        b -= 1
    return ((0.5 * (a + b)) * (a + b)) - (0.25 * a * b)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
654
0
Gpt3D_Clone654_0.py 1 9
Gpt3D_Clone654_0.py 11 19

----------------------------------------

def sum_even(a, b) :
	count = 0
	for i in range(a, b, 1) :
		if (i % 2 == 0) :
			count += i
	return count
----------------------------------------

def sum_even(a, b) :
	count = 0
	i = a
	while i <= b:
		if i % 2 == 0:
			count += i
		i += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
654
1
Gpt3D_Clone654_1.py 1 9
Gpt3D_Clone654_1.py 11 20

----------------------------------------

def sum_even(a, b) :
	count = 0
	for i in range(a, b, 1) :
		if (i % 2 == 0) :
			count += i
	return count
----------------------------------------

def sum_even(a, b) :
	count = 0
	i = a
	while i <= b:
		if i % 2 == 0 :
			count += i
		i += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
659
0
Gpt3D_Clone659_0.py 1 9
Gpt3D_Clone659_0.py 11 19

----------------------------------------

def anti_vowel(text) :
	newText = text [:]
	for i in 'aeiouAEIOU' :
		newText = newText.replace(i, '')
	print (newText)
	return newText
----------------------------------------

def anti_vowel2(text) :
	newText = ""
	vowels = set('aeiouAEIOU')
	for i in text :
		if i not in vowels :
			newText+= i
	print (newText)
	return newText
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
659
1
Gpt3D_Clone659_1.py 1 9
Gpt3D_Clone659_1.py 11 19

----------------------------------------

def anti_vowel(text) :
	newText = text [:]
	for i in 'aeiouAEIOU' :
		newText = newText.replace(i, '')
	print (newText)
	return newText
----------------------------------------

def anti_vowel(text) :
	accText = []
	for n in text :
		if not n in 'aeiouAEIOU' :
			accText.append(n)
	accStr = ''.join(accText)	
	print (accStr)
	return accStr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
659
2
Gpt3D_Clone659_2.py 1 9
Gpt3D_Clone659_2.py 11 18

----------------------------------------

def anti_vowel(text) :
	newText = text [:]
	for i in 'aeiouAEIOU' :
		newText = newText.replace(i, '')
	print (newText)
	return newText
----------------------------------------

def anti_vowel(text) :
	accText = ''
	for n in range(len(text)) :
		if not text[n] in 'aeiouAEIOU' :
			accText += text[n]
	print (accText)
	return accText
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
659
3
Gpt3D_Clone659_3.py 1 9
Gpt3D_Clone659_3.py 11 19

----------------------------------------

def anti_vowel(text) :
	newText = text [:]
	for i in 'aeiouAEIOU' :
		newText = newText.replace(i, '')
	print (newText)
	return newText
----------------------------------------

def anti_vowel1(text) :
	newText = ""
	for i in text :
		if i not in 'aeiouAEIOU' :
			newText+= i
	print (newText)
	return newText
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
0
Gpt3D_Clone65_0.py 1 14
Gpt3D_Clone65_0.py 16 23

----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	try :
		prev = it.next()
	except StopIteration :
		return True
	for x in it :
		if prev > x :
			return False
		prev = x
	return True
----------------------------------------

def is_sorted_three(lst):
	if not lst:
		return True
	for i in range(len(lst)-1):
		if lst[i] > lst[i+1]: 
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
1
Gpt3D_Clone65_1.py 1 14
Gpt3D_Clone65_1.py 16 22

----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	try :
		prev = it.next()
	except StopIteration :
		return True
	for x in it :
		if prev > x :
			return False
		prev = x
	return True
----------------------------------------

def is_sorted_four(lst):
	for i in range(len(lst)-1):
		if all(lst[x] <= lst[x+1] for x in range(i, len(lst)-1)):
			return True
		else:
			return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
661
0
Gpt3D_Clone661_0.py 1 5
Gpt3D_Clone661_0.py 7 46

----------------------------------------

def increasing(fn, left, right) :
	left_items = [next(left)]
	right_items = [next(right)]
	heap = []
----------------------------------------

def increasing(fn, left, right):
    left_items = [next(left)]
    right_items = [next(right)]
    heap = []
    heappush(heap, (fn(left_items[0], right_items[0]), 0, 0))
    while True:
        val, leftIdx, rightIdx = heappop(heap)
        yield val
        if leftIdx + 1 < len(left_items) and rightIdx < len(right_items):
            heappush(heap, (fn(left_items[leftIdx + 1], right_items[rightIdx]),
                         leftIdx + 1, rightIdx))
        if rightIdx + 1 < len(right_items) and leftIdx < len(left_items):
            heappush(heap, (fn(left_items[leftIdx], right_items[rightIdx + 1]),
                         leftIdx, rightIdx + 1))
        if leftIdx + 1 < len(left_items):
            tmp = next(left)
            if tmp:
                left_items.append(tmp)
        if rightIdx + 1 < len(right_items):
            tmp = next(right)
            if tmp:
                right_items.append(tmp)
	while left_items[0] != Triplet.EndItem or right_items[0] != Triplet.EndItem:	
		if left_items[0] < right_items[0]:
			heapq.heappush(heap, (left_items[0], 'L', left_items[1], left_items[2]))
			left_items = [next(left)]
		elif left_items[0] == right_items[0]:
			heapq.heappush(heap, (left_items[0], 'L', left_items[1], left_items[2]))
			left_items = [next(left)]
			if right_items[0] != Triplet.EndItem:
				heapq.heappush(heap, (right_items[0], 'R', right_items[1], right_items[2]))
				right_items = [next(right)]
		else:
			heapq.heappush(heap, (right_items[0], 'R', right_items[1], right_items[2]))
			right_items = [next(right)]
		while heap:
			fn(heap[0][1], heap[0][2], heap[0][3])
			heapq.heappop(heap)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
661
1
Gpt3D_Clone661_1.py 1 5
Gpt3D_Clone661_1.py 7 28

----------------------------------------

def increasing(fn, left, right) :
	left_items = [next(left)]
	right_items = [next(right)]
	heap = []
----------------------------------------

def increasing(fn, left, right) :
	left_items = [next(left)]
	right_items = [next(right)]
	heap = []
	while left_items[0] != Triplet.EndItem or right_items[0] != Triplet.EndItem:	
		if left_items[0] < right_items[0]:
			heap.append((left_items[0], 'L', left_items[1], left_items[2]))
			left_items = [next(left)]
		elif left_items[0] == right_items[0]:
			heap.append((left_items[0], 'L', left_items[1], left_items[2]))
			left_items = [next(left)]
			if right_items[0] != Triplet.EndItem:
				heap.append((right_items[0], 'R', right_items[1], right_items[2]))
				right_items = [next(right)]
		else:
			heap.append((right_items[0], 'R', right_items[1], right_items[2]))
			right_items = [next(right)]
		heap.sort()
		while heap:
			fn(heap[0][1], heap[0][2], heap[0][3])
			heap.pop(0)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
661
2
Gpt3D_Clone661_2.py 1 5
Gpt3D_Clone661_2.py 7 27

----------------------------------------

def increasing(fn, left, right) :
	left_items = [next(left)]
	right_items = [next(right)]
	heap = []
----------------------------------------

def increasing(fn, left, right) :
	left_items = [next(left)]
	right_items = [next(right)]
	heap = []
	while left_items[0] != Triplet.EndItem or right_items[0] != Triplet.EndItem:
		if right_items[0] != Triplet.EndItem and right_items[0] < left_items[0]:
			heapq.heappush(heap, (right_items[0], 'R', right_items[1], right_items[2]))
			right_items = [next(right)]
		elif left_items[0] == right_items[0]:
			heapq.heappush(heap, (left_items[0], 'L', left_items[1], left_items[2]))
			left_items = [next(left)]
			if right_items[0] != Triplet.EndItem:
				heapq.heappush(heap, (right_items[0], 'R', right_items[1], right_items[2]))
				right_items = [next(right)]
		else:
			heapq.heappush(heap, (left_items[0], 'L', left_items[1], left_items[2]))
			left_items = [next(left)]
		while heap:
			fn(heap[0][1], heap[0][2], heap[0][3])
			heapq.heappop(heap)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
661
3
Gpt3D_Clone661_3.py 1 5
Gpt3D_Clone661_3.py 7 26

----------------------------------------

def increasing(fn, left, right) :
	left_items = [next(left)]
	right_items = [next(right)]
	heap = []
----------------------------------------

def increasing(fn, left, right):
    left_items = [next(left)]
    right_items = [next(right)]
    heap = []
    heappush(heap, (fn(left_items[0], right_items[0]), 0, 0))
    while True:
        val, leftIdx, rightIdx = heappop(heap)
        yield val
        if leftIdx + 1 < len(left_items) and rightIdx < len(right_items):
            heappush(heap, (fn(left_items[leftIdx + 1], right_items[rightIdx]),
                         leftIdx + 1, rightIdx))
        if rightIdx + 1 < len(right_items) and leftIdx < len(left_items):
            heappush(heap, (fn(left_items[leftIdx], right_items[rightIdx + 1]),
                         leftIdx, rightIdx + 1))
        if leftIdx + 1 < len(left_items):
            left_items.append(next(left))
        if rightIdx + 1 < len(right_items):
            right_items.append(next(right))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
0
Gpt3D_Clone662_0.py 1 17
Gpt3D_Clone662_0.py 19 29

----------------------------------------

def print_list(the_list, indent_level = 0) :
	stack = [iter(the_list)]
	while stack :
		try :
			item = stack [- 1].next()
		except StopIteration :
			stack.pop()
			indent_level -= 1
			continue
		if isinstance(item, list) :
			indent_level += 1
			stack.append(iter(item))
		else :
			print "\t" * indent_level, item
----------------------------------------

def print_list(the_list, indent_level = 0):
	idx = 0
	while idx < len(the_list):
		item = the_list[idx]
		if type(item) == list:
			indent_level += 1
			print_list(item, indent_level)
		else:
			print "\t" * indent_level, item
		idx += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
1
Gpt3D_Clone662_1.py 1 17
Gpt3D_Clone662_1.py 19 26

----------------------------------------

def print_list(the_list, indent_level = 0) :
	stack = [iter(the_list)]
	while stack :
		try :
			item = stack [- 1].next()
		except StopIteration :
			stack.pop()
			indent_level -= 1
			continue
		if isinstance(item, list) :
			indent_level += 1
			stack.append(iter(item))
		else :
			print "\t" * indent_level, item
----------------------------------------

def print_list(the_list, indent_level = 0):
	for item in the_list:
		if type(item) == list:
			indent_level += 1
			print_list(item, indent_level)
		else:
			print "\t" * indent_level, item
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
0
Gpt3D_Clone667_0.py 1 12
Gpt3D_Clone667_0.py 14 30

----------------------------------------

def pascal(n) :
	array = [None for y in range(n)]
	row = [1]
	array [0] = row
	k = [0]
	for x in range(max(n, 0) - 1) :
		row = [l + r for l, r in zip(row + k, k + row)]
		array [x + 1] = row
	return array
----------------------------------------

def pascal4(n): 
    array = [None for y in range(n)] 
    if n > 0:
        row = [1] 
        array[0] = row 
        for x in range(max(n, 0) - 1): 
            row_length = len(row) 
            new_row = [] 
            for i in range(row_length): 
                if i == 0:
                    new_row.append(row[i]) 
                else: 
                    new_row.append(row[i - 1] + row[i])  
            row = new_row 
            array[x + 1] = row 
    return array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
1
Gpt3D_Clone675_1.py 1 13
Gpt3D_Clone675_1.py 15 21

----------------------------------------

def char_first_index(s, c) :
	if len_rec(s) == 0 :
		return None
	if s [0] == c :
		return 0
	answer = char_first_index(s [1 :], c)
	if answer is not None :
		return 1 + answer
	else :
		return answer
----------------------------------------

def char_first_index(s, c) :
	if len_rec(s) is 0 or s[0] is not c : 
		return None
	else :
		answer = char_first_index(s[1:], c)
		return 1 + answer if answer is not None else answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
1
Gpt3D_Clone678_1.py 1 9
Gpt3D_Clone678_1.py 11 20

----------------------------------------

def modify_duplicates_ordered(original) :
	result = []
	for val in original :
		while val in result :
			val += 0.0001
		result.append(val)
----------------------------------------

def modify_duplicates_ordered_type4(original) :
	result = []
	for val in original :
		while True :
			if val not in result :
				result.append(val)
				break
			else :
				val += 0.0001
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
0
Gpt3D_Clone679_0.py 1 11
Gpt3D_Clone679_0.py 13 27

----------------------------------------

def two_pair(ranks) :
	newlist = []
	for i in set(ranks) :
		if ranks.count(i) == 2 :
			newlist.append(i)
	newlist.sort(reverse = True)
	newlist = tuple(newlist)
	return None if newlist == () else newlist
----------------------------------------

def two_pair(ranks) :
	newlist = []
	count = 0
	for i in set(ranks) :
		check = ranks.count(i) 
                if check == 2 :
			newlist.append(i)
			count += 1
	if count > 0:
		newlist.sort(reverse = True)
		newlist = tuple(newlist)
		return newlist
	else:
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
3
Gpt3D_Clone679_3.py 1 11
Gpt3D_Clone679_3.py 13 23

----------------------------------------

def two_pair(ranks) :
	newlist = []
	for i in set(ranks) :
		if ranks.count(i) == 2 :
			newlist.append(i)
	newlist.sort(reverse = True)
	newlist = tuple(newlist)
	return None if newlist == () else newlist
----------------------------------------

def two_pair(ranks):
  result_list = []
  for item in set(ranks):
    if ranks.count(item) == 2:
      result_list.append(item)
  if len(result_list) == 0:
    return None
  else:
    result_tuple = tuple(result_list[::-1])
    return result_tuple
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
0
Gpt3D_Clone67_0.py 1 11
Gpt3D_Clone67_0.py 13 16

----------------------------------------

def integer(s) :
	if isinstance(s, int) :
		return True
	if isinstance(s, str) :
		for i in s :
			if i in "0123456789" :
				return True
	return False
----------------------------------------

def integer(s): 
	if isinstance(s, int) :
		return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
1
Gpt3D_Clone685_1.py 1 13
Gpt3D_Clone685_1.py 15 25

----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	for items in soup.select("ul.list-unstyled") :
		if len(items.select("a[href^='tel:']")) :
			phone = items.select("a[href^='tel:']") [0].text
			break
		else :
			phone = "N/A"
	print (title, phone)
----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	phone = "N/A"
	items = soup.select("ul.list-unstyled")
	if len(items) > 0 :
		links = items[0].select("a[href^='tel:']") 
		if len(links) > 0 :
			phone = links[0].text
	print (title, phone)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
68
0
Gpt3D_Clone68_0.py 1 10
Gpt3D_Clone68_0.py 12 20

----------------------------------------

def __call__(self, parser, namespace, values, option_string = None) :
	for value in values :
		try :
			n, v = value.split('=')
			setattr(namespace, n, v)
		except ValueError :
			setattr(namespace, '_unrecognized_args', values [values.index(value) :])
----------------------------------------

def __call__(self, parser, namespace, values, option_string = None) :
	for value in values :
		items = value.split('=')
		if len(items) == 2 :
			n, v = items
			setattr(namespace, n, v)
		else :
			setattr(namespace, '_unrecognized_args', values[values.index(value) :])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
68
1
Gpt3D_Clone68_1.py 1 10
Gpt3D_Clone68_1.py 12 20

----------------------------------------

def __call__(self, parser, namespace, values, option_string = None) :
	for value in values :
		try :
			n, v = value.split('=')
			setattr(namespace, n, v)
		except ValueError :
			setattr(namespace, '_unrecognized_args', values [values.index(value) :])
----------------------------------------

def __call__(self, parser, namespace, values, option_string = None) :
	for value in values :
		components = value.split('=')
		if len(components) == 2 :
			name, val = components
			setattr(namespace, name, val)
		else :
			setattr(namespace, '_unrecognized_args', values[values.index(value):])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
0
Gpt3D_Clone690_0.py 1 8
Gpt3D_Clone690_0.py 10 19

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored_3(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			editedSentence = ''
			for c in word :
				astriskStr = '*'
				editedSentence = editedSentence + astriskStr
			sentence = sentence.replace(word, editedSentence)
	return sentence
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
0
Gpt3D_Clone691_0.py 1 8
Gpt3D_Clone691_0.py 10 21

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored_4(sentence, bad_words=EXCLUDED_WORDS):
	newSentence = []
	if bad_words:
		sentenceList = sentence.split(' ')
		for word in sentenceList:
			if word in bad_words:
				for _ in range(len(word)):
					newSentence.append('*')
			else:
				newSentence.append(word)
	return ' '.join(newSentence)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
1
Gpt3D_Clone691_1.py 1 8
Gpt3D_Clone691_1.py 10 19

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored_3(sentence, bad_words=EXCLUDED_WORDS):
	newSentence = list(sentence)
	if bad_words:
		for word in bad_words:
			for letter in word:
				if letter in sentence:
					newSentence[sentence.index(letter)] = '*'
	return ''.join(newSentence)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
692
0
Gpt3D_Clone692_0.py 1 8
Gpt3D_Clone692_0.py 10 18

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored_3(sentence, bad_words = EXCLUDED_WORDS) :
	new_sentence = ""
	for word in sentence.split():
		if word in bad_words:
			new_sentence += "*" * len(word) + " "
		else:
			new_sentence += word + " "
	return new_sentence
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
692
2
Gpt3D_Clone692_2.py 1 8
Gpt3D_Clone692_2.py 10 16

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored_4(sentence, bad_words = EXCLUDED_WORDS) :
	new_sentence = sentence.split()
	for i,word in enumerate(new_sentence):
		if word in bad_words:
			new_sentence[i] = "*" * len(word)
	return " ".join(new_sentence)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
0
Gpt3D_Clone695_0.py 1 7
Gpt3D_Clone695_0.py 9 18

----------------------------------------

def GetTheSentences(infile) :
	with open(infile) as fp :
		for result in re.findall('DELIMITER1(.*?)DELIMITER2', fp.read(), re.S) :
			print result
----------------------------------------

def GetTheSentences(infile) :
	text = ""
	with open(infile) as fp :
		for line in fp.readlines():
			text += line 
	result = re.findall('DELIMITER1(.*?)DELIMITER2', text, re.S)
	for item in result:
		print result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
1
Gpt3D_Clone695_1.py 1 7
Gpt3D_Clone695_1.py 9 15

----------------------------------------

def GetTheSentences(infile) :
	with open(infile) as fp :
		for result in re.findall('DELIMITER1(.*?)DELIMITER2', fp.read(), re.S) :
			print result
----------------------------------------

def GetTheSentences(infile) :
	with open(infile) as fp :
		text = fp.read()
		result = re.findall('DELIMITER1(.*?)DELIMITER2', text, re.S)
		for item in result:
			print result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
0
Gpt3D_Clone696_0.py 1 8
Gpt3D_Clone696_0.py 10 21

----------------------------------------

def sublistExists(list, sublist) :
	for i in range(len(list) - len(sublist) + 1) :
		if sublist == list [i : i + len(sublist)] :
			return True
	return False
----------------------------------------

def sublistExists(list, sublist):
	for i in range(len(list) - len(sublist) + 1):
		found = True
		for j in range(len(sublist)):
			if list[i + j] != sublist[j]:
				found = False
				break
		if found:
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
1
Gpt3D_Clone696_1.py 1 8
Gpt3D_Clone696_1.py 10 20

----------------------------------------

def sublistExists(list, sublist) :
	for i in range(len(list) - len(sublist) + 1) :
		if sublist == list [i : i + len(sublist)] :
			return True
	return False
----------------------------------------

def sublistExists(list, sublist):
	for i in range(len(list) - len(sublist) + 1):
		sublistMatch = True
		for j in range(len(sublist)):
			if list[i + j] != sublist[j]:
				sublistMatch = False
				break
		if sublistMatch:
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
0
Gpt3D_Clone700_0.py 1 8
Gpt3D_Clone700_0.py 10 18

----------------------------------------

def xirr(values, dates) :
	try :
		return scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
	except RuntimeError :
		return scipy.optimize.brentq(lambda r : xnpv(r, values, dates), - 1.0, 1e10)
----------------------------------------

def xirr(values, dates) :
	try :
		return scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
	except:
		ans = scipy.optimize.brentq(lambda r : xnpv(r, values, dates), - 1.0, 1e10)
		if ans is None:
			raise RuntimeError
		return ans
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
1
Gpt3D_Clone700_1.py 1 8
Gpt3D_Clone700_1.py 10 16

----------------------------------------

def xirr(values, dates) :
	try :
		return scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
	except RuntimeError :
		return scipy.optimize.brentq(lambda r : xnpv(r, values, dates), - 1.0, 1e10)
----------------------------------------

def xirr(values, dates) :
	try :
		res = scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
	except RuntimeError :
		res = scipy.optimize.brentq(lambda r : xnpv(r, values, dates), - 1.0, 1e10)
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
0
Gpt3D_Clone706_0.py 1 10
Gpt3D_Clone706_0.py 12 24

----------------------------------------

def product(* args, ** kwds) :
	pools = map(tuple, args) * kwds.get('repeat', 1)
	result = [[]]
	for pool in pools :
		result = [x + [y] for x in result for y in pool]
	for prod in result :
		yield tuple(prod)
----------------------------------------

def product_4(*args, **kwds):
	pools = map(tuple, args) * kwds.get('repeat',1) 
	sets_of_possibilities = [[]] 
	for pool in pools: 
		temp_set_of_possibilities = [] 
		for possible_combination in sets_of_possibilities: 
			for item_in_pool in pool: 
				new_combination = possible_combination + [item_in_pool] 
				temp_set_of_possibilities.append(new_combination)
		sets_of_possibilities = temp_set_of_possibilities
	for prod in sets_of_possibilities: 
		yield tuple(prod)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
1
Gpt3D_Clone706_1.py 1 10
Gpt3D_Clone706_1.py 12 25

----------------------------------------

def product(* args, ** kwds) :
	pools = map(tuple, args) * kwds.get('repeat', 1)
	result = [[]]
	for pool in pools :
		result = [x + [y] for x in result for y in pool]
	for prod in result :
		yield tuple(prod)
----------------------------------------

def product(* args, ** kwds): 
  results = [[]] 
  for arg in args: 
    result = [] 
    for item in arg: 
      for r in results: 
        new_result = list(r) 
        new_result.append(item) 
        result.append(new_result) 
    results = result 
  for prod in results: 
    yield tuple(prod)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
2
Gpt3D_Clone706_2.py 1 10
Gpt3D_Clone706_2.py 12 25

----------------------------------------

def product(* args, ** kwds) :
	pools = map(tuple, args) * kwds.get('repeat', 1)
	result = [[]]
	for pool in pools :
		result = [x + [y] for x in result for y in pool]
	for prod in result :
		yield tuple(prod)
----------------------------------------

def product_3(*args, **kwds): 
	pools = map(tuple, args) * kwds.get('repeat',1) 
	results = [[]] 
	for pool in pools: 
		combinations_we_make = [] 
		for combination in results: 
			for item in pool: 
				new_combination = combination + [item] 
				combinations_we_make.append(new_combination) 
		results = combinations_we_make
	for prod in results: 
		yield tuple(prod)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
3
Gpt3D_Clone706_3.py 1 10
Gpt3D_Clone706_3.py 12 16

----------------------------------------

def product(* args, ** kwds) :
	pools = map(tuple, args) * kwds.get('repeat', 1)
	result = [[]]
	for pool in pools :
		result = [x + [y] for x in result for y in pool]
	for prod in result :
		yield tuple(prod)
----------------------------------------

def product(* args, ** kwds): 
  pools = map(tuple, args) * kwds.get('repeat', 1) 
  
  result = [[] for _ in pools]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
710
0
Gpt3D_Clone710_0.py 1 10
Gpt3D_Clone710_0.py 12 23

----------------------------------------

def wrapper(* args, ** kwargs) :
	for i in range(max_retries + 1) :
		print ('Try #', i + 1)
		try :
			return fn(* args, ** kwargs)
		except exception_type as e :
			print ('wrapper exception:', i + 1, e)
----------------------------------------

def wrapper(*args, **kwargs):
	i = 1
	last_exception = None
	while(i <= max_retries):
		print ('Try #', i)
		try:
			return fn(* args, ** kwargs)
		except exception_type as e:
			print ('wrapper exception:', i, e)
			last_exception = e
		i += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
710
1
Gpt3D_Clone710_1.py 1 10
Gpt3D_Clone710_1.py 12 25

----------------------------------------

def wrapper(* args, ** kwargs) :
	for i in range(max_retries + 1) :
		print ('Try #', i + 1)
		try :
			return fn(* args, ** kwargs)
		except exception_type as e :
			print ('wrapper exception:', i + 1, e)
----------------------------------------

def wrapper(* args, ** kwargs) :
	lasterror = None
	for i in range(1, max_retries + 1) :
		try :
			print ('Try #', i)
			return fn(* args, ** kwargs)
		except exception_type as e :
			print ('wrapper exception:', i, e)
			lasterror = e
	# Raise the last error if all attempts have failed.
	if lasterror:
		raise lasterror
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
3
Gpt3D_Clone713_3.py 1 12
Gpt3D_Clone713_3.py 14 19

----------------------------------------

def Max(s) :
	if len(s) == 1 :
		return s [0]
	else :
		m = Max(s [1 :])
		if m > s [0] :
			return m
		else :
			return s [0]
----------------------------------------

def Max(s) :
	if len(s) != 1 :
		m = Max(s[1:])
		return max(m, s[0])
	return s[0]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
717
0
Gpt3D_Clone717_0.py 1 4
Gpt3D_Clone717_0.py 6 16

----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = [line.split() for line in infile]
----------------------------------------

def index3(filename, lst) :
	data = []
	with open(filename, 'r') as infile :
		for line in infile :
			data.append(line.strip().split())
		res = []
		for x in lst :
			if x in data :
				res.append(x)
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
717
1
Gpt3D_Clone717_1.py 1 4
Gpt3D_Clone717_1.py 6 13

----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = [line.split() for line in infile]
----------------------------------------

def index2(filename, lst) :
	data = []
	with open(filename, 'r') as infile :
		for line in infile :
			data.append(line.split())
		res = [x for x in lst if x in data]
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
717
2
Gpt3D_Clone717_2.py 1 4
Gpt3D_Clone717_2.py 6 11

----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = [line.split() for line in infile]
----------------------------------------

def index_3(filename, lst):
	with open(filename, 'r') as infile: 
		lines = infile.read().splitlines()
		pairs = [(i, line.split()) for i, line in enumerate(lines) if line.split()[0] in lst]
		return [(x[0], x[1][1]) for x in pairs]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
0
Gpt3D_Clone718_0.py 1 4
Gpt3D_Clone718_0.py 6 14

----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = [line.split() for line in infile]
----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = infile.readlines()
		for line in lines :
			data = line.split()
			if data[0] not in lst :
				lst.append(data[0])
	return lst
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
1
Gpt3D_Clone718_1.py 1 4
Gpt3D_Clone718_1.py 6 13

----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = [line.split() for line in infile]
----------------------------------------

def index(filename, lst) :
	with open(filename) as infile :
		for line in infile :
			splits = line.split()
			if splits[0] not in lst :
				lst.append(splits[0])
	return lst
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
2
Gpt3D_Clone718_2.py 1 4
Gpt3D_Clone718_2.py 6 12

----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = [line.split() for line in infile]
----------------------------------------

def index(fileName, lst):
   outfile = open(fileName, 'r')
   lines = [i.split() for i in outfile]
   columns = [line[i] for i in lst for line in lines]
   outfile.close()
   return columns
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
3
Gpt3D_Clone718_3.py 1 4
Gpt3D_Clone718_3.py 6 11

----------------------------------------

def index(filename, lst) :
	with open(filename, 'r') as infile :
		lines = [line.split() for line in infile]
----------------------------------------

def index(fileName, lst):
   with open(fileName, 'r') as infile:
      lines = [line.strip().split(' ') for line in infile]
      columns = [item[i] for line in lines for i in lst]
   return columns
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
2
Gpt3D_Clone719_2.py 1 18
Gpt3D_Clone719_2.py 20 34

----------------------------------------

def index(filename, lst) :
	infile = open('raven.txt', 'r')
	lines = infile.readlines()
	words = []
	dic = {}
	for line in lines :
		line_words = line.split(' ')
		words.append(line_words)
	for i in range(len(words)) :
		for j in range(len(words [i])) :
			if words [i] [j] in lst :
				if words [i] [j] not in dic.keys() :
					dic [words [i] [j]] = set()
				dic [words [i] [j]].add(i + 1)
	return dic
----------------------------------------

def index(filename, lst):
	infile = open('raven.txt', 'r')
	lines = infile.readlines()
	words = []
	dic = {}
	for line in lines :
		words += line.split(' ')
	for word in words :
		for i in lst :
			if word == i :
				if word not in dic.keys() :
					dic[word] = set()
				dic[word].add(words.index(word) + 1)
	return dic
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
3
Gpt3D_Clone719_3.py 1 18
Gpt3D_Clone719_3.py 20 32

----------------------------------------

def index(filename, lst) :
	infile = open('raven.txt', 'r')
	lines = infile.readlines()
	words = []
	dic = {}
	for line in lines :
		line_words = line.split(' ')
		words.append(line_words)
	for i in range(len(words)) :
		for j in range(len(words [i])) :
			if words [i] [j] in lst :
				if words [i] [j] not in dic.keys() :
					dic [words [i] [j]] = set()
				dic [words [i] [j]].add(i + 1)
	return dic
----------------------------------------

def index(filename, lst): 
	infile = open('raven.txt', 'r')
	text = infile.read()
	words = text.split(' ')
	dic = {}
	for word in words : 
		for i in lst : 
			if word == i :
				if word not in dic.keys() :
					dic[word] = set()
				dic[word].add(words.index(word) + 1)
	return dic
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
2
Gpt3D_Clone721_2.py 1 13
Gpt3D_Clone721_2.py 15 28

----------------------------------------

def window(seq, n = 2) :
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	it = iter(seq)
	result = tuple(islice(it, n))
	if len(result) == n :
		yield result
	for elem in it :
		result = result [1 :] + (elem,)
		yield result
----------------------------------------

def window(seq, n = 2):
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	results = []
	it = iter(seq)
	while True:
		result = tuple(islice(it, n))
		if len(result) == n:
			results.append(result)
		if len(result) < n:
			break
	return results
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
3
Gpt3D_Clone721_3.py 1 13
Gpt3D_Clone721_3.py 15 23

----------------------------------------

def window(seq, n = 2) :
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	it = iter(seq)
	result = tuple(islice(it, n))
	if len(result) == n :
		yield result
	for elem in it :
		result = result [1 :] + (elem,)
		yield result
----------------------------------------

def window(seq, n = 2):
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	results = []
	for i in range(0, len(seq)-n+1):
		results.append(seq[i:i+n])
	return results
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
0
Gpt3D_Clone723_0.py 1 8
Gpt3D_Clone723_0.py 10 17

----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, basestring) and bool_str :
		if bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
----------------------------------------

def to_bool(bool_str) :
	try : 
		if bool_str and bool_str.lower() in ['true', 't'] : return True
		elif bool_str.lower() in ['false', 'f'] : return False
		else : raise ValueError("%s is no recognized as a boolean value" % bool_str)
	except AttributeError :
		raise ValueError("%s is no recognized as a boolean value" % bool_str)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
1
Gpt3D_Clone723_1.py 1 8
Gpt3D_Clone723_1.py 10 18

----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, basestring) and bool_str :
		if bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
----------------------------------------

def to_bool(bool_str) :
	try : 
		if bool_str and bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
		else : raise ValueError("%s is no recognized as a boolean value" % bool_str)
	except AttributeError :
		raise ValueError("%s is no recognized as a boolean value" % bool_str)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
2
Gpt3D_Clone723_2.py 1 8
Gpt3D_Clone723_2.py 10 17

----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, basestring) and bool_str :
		if bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
----------------------------------------

def to_bool(bool_str):
	if isinstance(bool_str, str) and bool_str:
		if bool_str.lower() in ('true', 't', '1'):
			return True
		elif bool_str.lower() in ('false', 'f', '0'):
			return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
724
0
Gpt3D_Clone724_0.py 1 8
Gpt3D_Clone724_0.py 10 19

----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, basestring) and bool_str :
		if bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
----------------------------------------

def to_bool(bool_str):
	if isinstance(bool_str, str) and bool_str:
		is_true = bool_str.lower() == 'true' or bool_str.lower() == 't' or bool_str.lower() == '1'
		is_false = bool_str.lower() == 'false' or bool_str.lower() == 'f' or bool_str.lower() == '0'
		if is_true:
			return True
		elif is_false:
			return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
724
1
Gpt3D_Clone724_1.py 1 8
Gpt3D_Clone724_1.py 10 17

----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, basestring) and bool_str :
		if bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
----------------------------------------

def to_bool(bool_str):
	if isinstance(bool_str, str) and bool_str:
		if bool_str.lower() == 'true' or bool_str.lower() == 't' or bool_str.lower() == '1':
			return True
		elif bool_str.lower() == 'false' or bool_str.lower() == 'f' or bool_str.lower() == '0':
			return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
724
2
Gpt3D_Clone724_2.py 1 8
Gpt3D_Clone724_2.py 10 16

----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, basestring) and bool_str :
		if bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, str) and bool_str :
		if bool_str.lower() == 'true' or bool_str == 't' or bool_str == '1' : return True
		elif bool_str.lower() == 'false' or bool_str == 'f' or bool_str == '0' : return False
	raise ValueError(f"{bool_str} is not recognized as a boolean value")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
724
3
Gpt3D_Clone724_3.py 1 8
Gpt3D_Clone724_3.py 10 15

----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, basestring) and bool_str :
		if bool_str.lower() in ['true', 't', '1'] : return True
		elif bool_str.lower() in ['false', 'f', '0'] : return False
	raise ValueError("%s is no recognized as a boolean value" % bool_str)
----------------------------------------

def to_bool(bool_str) :
	if isinstance(bool_str, str) and bool_str :
		if bool_str.lower() in ('true', 't', '1') : return True
		elif bool_str.lower() in ('false', 'f', '0') : return False
	raise ValueError('{0} is not recognized as a boolean value'.format(bool_str))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
725
1
Gpt3D_Clone725_1.py 1 16
Gpt3D_Clone725_1.py 18 38

----------------------------------------

def to_bool(value) :
	valid = {'true' : True, 't' : True, '1' : True,
	'false' : False, 'f' : False, '0' : False,
	}
	if isinstance(value, bool) :
		return value
	if not isinstance(value, basestring) :
		raise ValueError('invalid literal for boolean. Not a string.')
	lower_value = value.lower()
	if lower_value in valid :
		return valid [lower_value]
	else :
		raise ValueError('invalid literal for boolean: "%s"' % value)
----------------------------------------

def to_bool_3(val):
	all_bool = {
		'true': True,
		't': True,
		'1': True,
		'false': False,
		'f': False,
		'0': False
	}
	
	if isinstance(val, bool):
		return val
	elif not isinstance(val, str):
		raise ValueError('invalid literal for boolean. Not a string.')
		
	if val.lower() in all_bool:
		return all_bool[val.lower()]
	else:
		raise ValueError('invalid literal for boolean: "%s"' % val)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
728
0
Gpt3D_Clone728_0.py 1 13
Gpt3D_Clone728_0.py 15 33

----------------------------------------

def test2() :
	import json
	import time
	time_start = time.time()
	with open('data.csv', 'rb') as f :
		data = f.read()
	data = '[[[' + ']],[['.join(data.splitlines()).replace('\t', '],[') + ']]]'
	all_point_sets = [Point(* xy) for row in json.loads(data) for xy in zip(* row)]
	time_end = time.time()
	print "total time: ", (time_end - time_start)
----------------------------------------

def test2() :
	import json
	import time
	time_start = time.time()
	f = open('data.csv', 'rb') 
	data = f.read()
	data_lines = data.splitlines()
	data = '[[[' + ']],[['.join(data_lines).replace('\t', '],[') + ']]]'
	all_point_sets = []
	for row in json.loads(data) : 
		xy = zip(* row)
		point_set = Point(*xy)
		all_point_sets.append(point_set)
	time_end = time.time()
	print "total time: ", (time_end - time_start)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
728
1
Gpt3D_Clone728_1.py 1 13
Gpt3D_Clone728_1.py 15 30

----------------------------------------

def test2() :
	import json
	import time
	time_start = time.time()
	with open('data.csv', 'rb') as f :
		data = f.read()
	data = '[[[' + ']],[['.join(data.splitlines()).replace('\t', '],[') + ']]]'
	all_point_sets = [Point(* xy) for row in json.loads(data) for xy in zip(* row)]
	time_end = time.time()
	print "total time: ", (time_end - time_start)
----------------------------------------

def test2() : 
	import json
	import time
	time_start = time.time()
	f = open('data.csv', 'rb')
	data_lines = f.read().splitlines()
	data = '[[[' + ']],[['.join(data_lines).replace('\t', '],[') + ']]]'
	all_point_sets = []
	for row in json.loads(data) : 
		point_set = create_point_set(row)
		all_point_sets.append(point_set)
	time_end = time.time()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
730
1
Gpt3D_Clone730_1.py 1 8
Gpt3D_Clone730_1.py 10 15

----------------------------------------

def hit(bx, by, r, px, py, h) :
	if bx > = px - r and py < = by < = py + h :
		True
	else :
		False
----------------------------------------

def hit(bx, by, r, px, py, h) :
	if px - r < = bx and py < = by < = py + h :
		return True
	else :
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
730
2
Gpt3D_Clone730_2.py 1 8
Gpt3D_Clone730_2.py 10 15

----------------------------------------

def hit(bx, by, r, px, py, h) :
	if bx > = px - r and py < = by < = py + h :
		True
	else :
		False
----------------------------------------

def hit(bx, by, r, px, py, h) :
	if bx > = px - r and py < = by and by < = py + h :
		return True
	elif bx < px - r or py > by or by > py + h :
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
0
Gpt3D_Clone732_0.py 1 12
Gpt3D_Clone732_0.py 14 28

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure_3(a): 
	closure = set(a)
	flag = True
	while flag: 
		new_relations = set()
		for x, y in closure: 
			for q, w in closure: 
				if q == y: 
					new_relations.add((x, w))
		if closure | new_relations == closure:
			break
		else: 
			closure = closure | new_relations
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
2
Gpt3D_Clone732_2.py 1 12
Gpt3D_Clone732_2.py 14 27

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure_4(a): 
	closure = set(a)
	hasChanges = True
	while hasChanges: 
		new_relations = set()
		for (x, y) in closure: 
			for (q, w) in closure: 
				if q == y: 
					new_relations.add((x, w))
		closure_until_now = closure | new_relations
		hasChanges = closure_until_now != closure
		closure = closure_until_now
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
0
Gpt3D_Clone736_0.py 1 8
Gpt3D_Clone736_0.py 10 19

----------------------------------------

def transitive_closure(a) :
	closure = set()
	for x, _ in a :
		closure |= set((x, y) for y in dfs(x, a))
	return closure
----------------------------------------

def transitive_closure(a):
	closure = set()
	for x, _ in a:
		temp_closure = set()
		dfs_results = dfs(x, a)
		for y in dfs_results:
			temp_closure.add((x, y))
			closure |= temp_closure
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
1
Gpt3D_Clone736_1.py 1 8
Gpt3D_Clone736_1.py 10 18

----------------------------------------

def transitive_closure(a) :
	closure = set()
	for x, _ in a :
		closure |= set((x, y) for y in dfs(x, a))
	return closure
----------------------------------------

def transitive_closure(a):
	closure = set()
	for x, _ in a:
		temp_closure = set()
		for y in dfs(x, a):
			temp_closure.add((x, y))
		closure |= temp_closure
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
0
Gpt3D_Clone738_0.py 1 8
Gpt3D_Clone738_0.py 10 19

----------------------------------------

def remove_user(self, user) :
	if hasattr(user, "name") :
		self.remove(user.name)
	else :
		self.remove(user)
----------------------------------------

def remove_user(self, user):
        has_name = False
        if hasattr(user, "name"):
            has_name = True
        if has_name:
            user_name = user.name
            self.remove(user_name)
        else:
            self.remove(user)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
1
Gpt3D_Clone738_1.py 1 8
Gpt3D_Clone738_1.py 10 17

----------------------------------------

def remove_user(self, user) :
	if hasattr(user, "name") :
		self.remove(user.name)
	else :
		self.remove(user)
----------------------------------------

def remove_user(self, user):
        is_name_there = hasattr(user, "name")
        if is_name_there:
            user_name = user.name
            self.remove(user_name)
        else:
            self.remove(user)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
741
0
Gpt3D_Clone741_0.py 1 8
Gpt3D_Clone741_0.py 10 25

----------------------------------------

def pairsum_n(list1, value) :
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	return set((min(x, value - x), max(x, value - x)) for x in filterfalse(lambda x : (value - x) not in set1, set1))
----------------------------------------

def pairsum_n(list1, value) :
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	result = []
	temp_pair = []
	for x in filterfalse(lambda x : (value - x) not in set1, set1):
		temp_pair.append(x)
		temp_pair.append(value - x)
		smallest = min(temp_pair)
		largest = max(temp_pair)
		pair = (smallest, largest)
		result.append(pair)
		temp_pair = []
	return set(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
741
1
Gpt3D_Clone741_1.py 1 8
Gpt3D_Clone741_1.py 10 22

----------------------------------------

def pairsum_n(list1, value) :
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	return set((min(x, value - x), max(x, value - x)) for x in filterfalse(lambda x : (value - x) not in set1, set1))
----------------------------------------

def pairsum_n(list1: List[int], value: int) -> Set[Tuple[int, int]]:
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	
	result = set()
	for x in set1:
		complement = value - x
		if complement in set1:
			min_val, max_val = (x, complement) if x < complement else (complement, x)
			result.add((min_val, max_val))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
741
2
Gpt3D_Clone741_2.py 1 8
Gpt3D_Clone741_2.py 10 21

----------------------------------------

def pairsum_n(list1, value) :
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	return set((min(x, value - x), max(x, value - x)) for x in filterfalse(lambda x : (value - x) not in set1, set1))
----------------------------------------

def pairsum_n(list1: List[int], value: int) -> Set[Tuple[int, int]]:
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	
	result = set()
	for x in set1:
		if (value - x) in set1:
			result.add((min(x, value - x), max(x, value - x)))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
741
3
Gpt3D_Clone741_3.py 1 8
Gpt3D_Clone741_3.py 10 20

----------------------------------------

def pairsum_n(list1, value) :
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	return set((min(x, value - x), max(x, value - x)) for x in filterfalse(lambda x : (value - x) not in set1, set1))
----------------------------------------

def pairsum_n(list1, value) :
	set1 = set(list1)
	if list1.count(value / 2) < 2 :
		set1.remove(value / 2)
	result = []
	for x in filterfalse(lambda x : (value - x) not in set1, set1):
		pair = (min(x, value - x), max(x, value - x))
		result.append(pair)
	return set(result)
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
2
Gpt3D_Clone742_2.py 1 9
Gpt3D_Clone742_2.py 11 21

----------------------------------------

def package_contents(package_name) :
	file, pathname, description = imp.find_module(package_name)
	if file :
		raise ImportError('Not a package: %r', package_name)
	return set([os.path.splitext(module) [0] for module in os.listdir(pathname)
	if module.endswith(MODULE_EXTENSIONS)])
----------------------------------------

def package_contents(package_name) :
	file, pathname, description = imp.find_module(package_name)
	if file :
		raise ImportError('Not a package: %r', package_name)
	modules = []
	for module in os.listdir(pathname) :
		if module.endswith(MODULE_EXTENSIONS) :
			modules.append(os.path.splitext(module)[0])
	return set(modules)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
0
Gpt3D_Clone746_0.py 1 10
Gpt3D_Clone746_0.py 12 19

----------------------------------------

def __init__(self) :
	wx.Frame.__init__(self, None, - 1, "matplotlib pick_event problem")
	self.plotarea = PlotPanel(self)
	self.mainSizer = wx.BoxSizer(wx.HORIZONTAL)
	self.mainSizer.Add(self.plotarea, 1, wx.EXPAND)
	self.SetSizer(self.mainSizer)
	self.mainSizer.Fit(self)
----------------------------------------

def __init__(self):
    wx.Frame.__init__(self, None, -1, "matplotlib pick_event problem")
    self.plotarea = PlotPanel(self) 
    sizer = wx.BoxSizer(wx.HORIZONTAL)
    sizer.Add(self.plotarea, 1, wx.EXPAND)
    self.SetSizer(sizer)
    self.SetAutoLayout(True)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
1
Gpt3D_Clone746_1.py 1 10
Gpt3D_Clone746_1.py 12 19

----------------------------------------

def __init__(self) :
	wx.Frame.__init__(self, None, - 1, "matplotlib pick_event problem")
	self.plotarea = PlotPanel(self)
	self.mainSizer = wx.BoxSizer(wx.HORIZONTAL)
	self.mainSizer.Add(self.plotarea, 1, wx.EXPAND)
	self.SetSizer(self.mainSizer)
	self.mainSizer.Fit(self)
----------------------------------------

def __init__(self):
    wx.Frame.__init__(self, None, -1, "matplotlib pick_event problem")
    self.plotarea = PlotPanel(self) 
    box = wx.BoxSizer(wx.HORIZONTAL)
    box.Add(self.plotarea, 1, wx.EXPAND)
    self.SetSizer(box)
    self.Layout()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
748
0
Gpt3D_Clone748_0.py 1 10
Gpt3D_Clone748_0.py 12 23

----------------------------------------

def listFunc(lst) :
	if len(lst) == 0 : return ''
	if len(lst) == 1 : return lst [0]
	firstPart = lst [: - 1]
	retFirst = ", ".join(firstPart)
	retSecond = ", and " + lst [- 1]
	return retFirst + retSecond;
----------------------------------------

def listFunc(lst): 
	length = len(lst)
	if length == 0:
		return ''
	if length == 1:
		return lst[0]
	firstPart = lst[:-1]
	retFirst = "; ".join(firstPart)
	retSecond = "; and " + lst[-1]
	return retFirst + retSecond
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
748
1
Gpt3D_Clone748_1.py 1 10
Gpt3D_Clone748_1.py 12 22

----------------------------------------

def listFunc(lst) :
	if len(lst) == 0 : return ''
	if len(lst) == 1 : return lst [0]
	firstPart = lst [: - 1]
	retFirst = ", ".join(firstPart)
	retSecond = ", and " + lst [- 1]
	return retFirst + retSecond;
----------------------------------------

def listFunc(lst): 
	length = len(lst)
	if length == 0:
		return ''
	if length == 1:
		return lst[0]
	firstPart = lst[: -1]
	retFirst = "| ".join(firstPart)
	retSecond = "| and " + lst[-1]
	return retFirst + retSecond
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
748
2
Gpt3D_Clone748_2.py 1 10
Gpt3D_Clone748_2.py 12 21

----------------------------------------

def listFunc(lst) :
	if len(lst) == 0 : return ''
	if len(lst) == 1 : return lst [0]
	firstPart = lst [: - 1]
	retFirst = ", ".join(firstPart)
	retSecond = ", and " + lst [- 1]
	return retFirst + retSecond;
----------------------------------------

def listFunc(lst):
	if not lst: return ''
	lastElement = lst[-1]
	if len(lst) == 1:
		return lastElement
	allExceptLast = ''
	for element in lst[: - 1]:
		allExceptLast += element + ', '
	return allExceptLast + 'and ' + lastElement
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
748
3
Gpt3D_Clone748_3.py 1 10
Gpt3D_Clone748_3.py 12 21

----------------------------------------

def listFunc(lst) :
	if len(lst) == 0 : return ''
	if len(lst) == 1 : return lst [0]
	firstPart = lst [: - 1]
	retFirst = ", ".join(firstPart)
	retSecond = ", and " + lst [- 1]
	return retFirst + retSecond;
----------------------------------------

def listFunc(lst):
	if not lst: return ''
	lastElement = lst[-1]
	if len(lst) == 1:
		return lastElement
	allExceptLast = []
	for element in lst[: - 1]:
		allExceptLast.append(element)
	return ', '.join(allExceptLast) + ', and ' + lastElement
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
749
2
Gpt3D_Clone749_2.py 1 10
Gpt3D_Clone749_2.py 12 18

----------------------------------------

def has_add_permission(self, request) :
	base_add_permission = super(SettingAdmin, self).has_add_permission(request)
	if base_add_permission :
		count = Setting.objects.all().count()
		if count == 0 :
			return True
	return False
----------------------------------------

def has_add_permission(self, request) :
	if super(SettingAdmin, self).has_add_permission(request) :
		if Setting.objects.all().count() == 0 :
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
749
3
Gpt3D_Clone749_3.py 1 10
Gpt3D_Clone749_3.py 12 16

----------------------------------------

def has_add_permission(self, request) :
	base_add_permission = super(SettingAdmin, self).has_add_permission(request)
	if base_add_permission :
		count = Setting.objects.all().count()
		if count == 0 :
			return True
	return False
----------------------------------------

def has_add_permission(self, request) :
	if super(SettingAdmin, self).has_add_permission(request) and Setting.objects.all().count() == 0 :
		return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
0
Gpt3D_Clone74_0.py 1 10
Gpt3D_Clone74_0.py 12 26

----------------------------------------

def flatten(container) :
	for i in container :
		if isinstance(i, (list, tuple)) :
			for j in flatten(i) :
				yield j
		else :
			yield i
----------------------------------------

def flatten(container) :
	for i in container :
		if isinstance(i, list) :
			for j in i :
				if isinstance(j, list) :
					for k in flatten(j) :
						yield k
				else :
					yield j
		elif isinstance(i, tuple) :
			for j in flatten(list(i)) :
				yield j
		else :
			yield i
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
750
0
Gpt3D_Clone750_0.py 1 8
Gpt3D_Clone750_0.py 10 19

----------------------------------------

def convertType(value) :
	try :
		return int(value) if value.strip().isdigit() else float(value)
	except :
		return value
----------------------------------------

def convertType(value) :
	try :
		if value.strip().isdigit():
			return int(value)
		else:
			return float(value)
	except :
		return value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
750
1
Gpt3D_Clone750_1.py 1 8
Gpt3D_Clone750_1.py 10 18

----------------------------------------

def convertType(value) :
	try :
		return int(value) if value.strip().isdigit() else float(value)
	except :
		return value
----------------------------------------

def convertType(value) :
	if value.strip().isdigit():
		return int(value)
	else:
		try: 
			return float(value)
		except:
			return value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
0
Gpt3D_Clone752_0.py 1 13
Gpt3D_Clone752_0.py 15 33

----------------------------------------

def fib(n) :
	if n == 2 :
		try :
			fib.two_count += 1
		except AttributeError :
			fib.two_count = 1
	if n == 0 or n == 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n == 2 :
		try :
			fib.two_count += 1
		except AttributeError :
			fib.two_count = 1
	if n <= 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		p, q = 0, 1
		for i in range(2, n+1) :
			res = p + q
			p = q
			q = res
		return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
2
Gpt3D_Clone752_2.py 1 13
Gpt3D_Clone752_2.py 15 25

----------------------------------------

def fib(n) :
	if n == 2 :
		try :
			fib.two_count += 1
		except AttributeError :
			fib.two_count = 1
	if n == 0 or n == 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n == 0 or n == 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
	if n == 2 :
		if hasattr(fib, 'two_count') :
			fib.two_count += 1
		else :
			fib.two_count = 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
0
Gpt3D_Clone754_0.py 1 9
Gpt3D_Clone754_0.py 11 26

----------------------------------------

def checkLen() :
	days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	for position, day in enumerate(days) :
		if day == "Monday" :
			print ("Found it")
			print (position)
----------------------------------------

def checkLen():
	weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
	weekend = ["Saturday", "Sunday"]
	for position, day in enumerate(weekdays):
		if day == "Monday":
			print ("Found it")
			print (position)
		elif day == "Saturday":
			print ("Found another one")
			print (position)
	for position, day in enumerate(weekend):
		if day == "Sunday":
			print ("Found another one")
			print (position)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
1
Gpt3D_Clone754_1.py 1 9
Gpt3D_Clone754_1.py 11 22

----------------------------------------

def checkLen() :
	days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	for position, day in enumerate(days) :
		if day == "Monday" :
			print ("Found it")
			print (position)
----------------------------------------

def checkLen():
	weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
	weekend = ["Saturday", "Sunday"]
	for position, day in enumerate(weekdays):
		if day == "Monday":
			print ("Found it")
			print (position)
	for position, day in enumerate(weekend):
		if day == "Monday":
			print ("Found it")
			print (position)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
759
0
Gpt3D_Clone759_0.py 1 8
Gpt3D_Clone759_0.py 10 24

----------------------------------------

def queryset(self, request, queryset) :
	if self.value() :
		return set(comment for comment in queryset if comment.posted_by_guest())
	elif not self.value() :
		return set(comment for comment in queryset if not comment.posted_by_guest())
----------------------------------------

def queryset(self, request, queryset) :
	if self.value() :
		filtered_comments = []
		for comment in queryset:
			if comment.posted_by_guest():
				filtered_comments.append(comment)
		return set(filtered_comments)
	elif not self.value() :
		filtered_comments = []
		for comment in queryset:
			if not comment.posted_by_guest():
				filtered_comments.append(comment)
		return set(filtered_comments)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
759
1
Gpt3D_Clone759_1.py 1 8
Gpt3D_Clone759_1.py 10 20

----------------------------------------

def queryset(self, request, queryset) :
	if self.value() :
		return set(comment for comment in queryset if comment.posted_by_guest())
	elif not self.value() :
		return set(comment for comment in queryset if not comment.posted_by_guest())
----------------------------------------

def queryset(self, request, queryset) :
	filtered_comments = []
	for comment in queryset:
		if self.value():
			if comment.posted_by_guest():
				filtered_comments.append(comment)
		elif not self.value():
			if not comment.posted_by_guest():
				filtered_comments.append(comment)
	return set(filtered_comments)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
0
Gpt3D_Clone766_0.py 1 12
Gpt3D_Clone766_0.py 14 27

----------------------------------------

def postalValidate(S) :
	S = S.replace(" ", "")
	if len(S) ! = 6 or S.isalpha() or S.isdigit() :
		return False
	if not S [0 : 5 : 2].isalpha() :
		return False
	if not S [1 : 6 : 2].isdigit() :
		return False
	return S.upper()
----------------------------------------

def postalValidate(S) :
	S = S.replace(" ", "")
	if len(S) != 6:
		return False
	elif S.isalpha() or S.isdigit():
		return False
	elif not S[0:5:2].isalpha():
		return False
	elif not S[1:6:2].isdigit():
		return False
	else:
		return S.upper()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
772
0
Gpt3D_Clone772_0.py 1 17
Gpt3D_Clone772_0.py 19 44

----------------------------------------

def bitwise_or(num1, num2) :
	new_num1 = list(num1 [2 :])
	new_num2 = list(num2 [2 :])
	if len(num1) > len(num2) :
		new_num2 [: 0] = '0' * (len(num1) - len(num2))
	elif len(num1) < len(num2) :
		new_num1 [: 0] = '0' * (len(num2) - len(num1))
	new_num = []
	for c1, c2 in zip(new_num1, new_num2) :
		if c1 == "1" or c2 == "1" :
			new_num.append("1")
		else :
			new_num.append(c1)
	return '0b' + ''.join(new_num)
----------------------------------------

def bitwise_or(num1, num2):
    n1_len = len(num1)
    n2_len = len(num2)
    n1_start = 2
    n2_start = 2
    #Check length. Pad if necessary 
    if n1_len > n2_len:
        n2_start = 2 + (n1_len - n2_len)
    elif n1_len < n2_len:
        n1_start = 2 + (n2_len - n1_len)
    #Create new list to store result
    new_num = []
    #Iterate through given numbers
    it = 0
    while it < max(n1_len, n2_len):
        if num1[it+n1_start] == "1" or num2[it+n2_start] == "1":
            new_num.append("1")
        else:
            new_num.append(num1[it+n1_start])
        it += 1
    return '0b' + ''.join(new_num)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
776
1
Gpt3D_Clone776_1.py 1 14
Gpt3D_Clone776_1.py 16 24

----------------------------------------

def removeRec(node, value) :
	if node.value == value :
		node.value = node.next.value
		node.next = node.next.next
		return True
	if node.next == None :
		return False
	if node.next.value == value :
		node.next = node.next.next
		return True
	return removeRec(node.next, value)
----------------------------------------

def removeRec(node, value) :
	if node.value != value :
		if node.next == None :
			return False
		return removeRec(node.next, value)
	node.value = node.next.value
	node.next = node.next.next
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
0
Gpt3D_Clone777_0.py 1 15
Gpt3D_Clone777_0.py 17 33

----------------------------------------

def swap(inp) :
	inp = inp.split()
	out = []
	d1 = ['i am', 'you are', 'i\'m', 'you\'re', 'my', 'your', 'I', 'my', 'you']
	d2 = ['you are', 'I am', 'you\'re', 'I\'m', 'your', 'my', 'you', 'your', 'I']
	for item in inp :
		itm = item.replace(',', '')
		if itm not in d1 :
			out.append(item)
		else : out.append(d2 [d1.index(itm)])
	return ' '.join(out)
	print (swap('you love your version of my couch because I love you, and you\'re a couch-lover.'))
----------------------------------------

def swap(inp) :
	inp = inp.split()
	out = []
	replacement_list = [['i am', 'you are'],['you are', 'I am'], ['i\'m', 'you\'re'], ['you\'re', 'I\'m'],
						['my', 'your'], ['your', 'my'], ['I', 'you'], ['my', 'your'], ['you', 'I']]
	for item in inp :
		itm = item.replace(',', '')
		match_found = False
		for sublist in replacement_list :
			if itm == sublist[0]:
				out.append(sublist[1])
				match_found = True
		if match_found == False:
			out.append(item)
	return ' '.join(out)
	print (swap('you love your version of my couch because I love you, and you\'re a couch-lover.'))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
3
Gpt3D_Clone778_3.py 1 11
Gpt3D_Clone778_3.py 13 19

----------------------------------------

def softmax(z) :
	assert len(z.shape) == 2
	s = np.max(z, axis = 1)
	s = s [:, np.newaxis]
	e_x = np.exp(z - s)
	div = np.sum(e_x, axis = 1)
	div = div [:, np.newaxis]
	return e_x / div
----------------------------------------

def softmax(z) :
	assert len(z.shape) == 2
	s = np.max(z)
	e_x = np.exp(z - s)
	div = np.sum(e_x)
	return e_x / div
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
781
0
Gpt3D_Clone781_0.py 1 11
Gpt3D_Clone781_0.py 13 39

----------------------------------------

def __op__(self, op, args) :
	try :
		other = args [0]
	except IndexError :
		other = None
	print "%s %s %s" % (self, op, other)
	self, other = coerce(self, other)
	return getattr(self, op)(* args)
----------------------------------------

def __op__(self, ops, args):
    try:
        other = args[0]
    except IndexError:
        other = None
    print("%s %s %s" % (self, ops, other))
    self, other = coerce(self, other)
    if ops == '+':
        return self.add(*args)
    elif ops == '-':
        return self.sub(*args)
    elif ops == '*':
        return self.mul(*args)
    elif ops == '/':
        return self.div(*args)
    elif ops == '//':
        return self.floordiv(*args)
    elif ops == '**':
        return self.pow(*args)
    elif ops == '&':
        return self.and_(*args)
    elif ops == '|':
        return self.or_(*args)
    elif ops == '^':
        return self.xor(*args)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
787
0
Gpt3D_Clone787_0.py 1 8
Gpt3D_Clone787_0.py 10 20

----------------------------------------

def split(s, n) :
	new_list = []
	for i in range(0, len(s), n) :
		new_list.append(s [i : i + n])
	return new_list
----------------------------------------

def split_4(s, n):
	if not (n > 0 and isinstance(s, str)):
		return []
	new_list = []
	start_index = 0
	while start_index < len(s):
		new_list.append(s[start_index : start_index + n])
		start_index += n
	return new_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
2
Gpt3D_Clone789_2.py 1 9
Gpt3D_Clone789_2.py 11 17

----------------------------------------

def __enter__(self) :
	if self.level is not None :
		self.old_level = self.logger.level
		self.logger.setLevel(self.level)
	if self.handler :
		self.logger.addHandler(self.handler)
----------------------------------------

def __enter__(self) :
	if self.level is not None :
		old_level = self.logger.getLevel()
		self.logger.setLevel(level)
	if self.handler :
		self.logger.addHandler(self.logger.handler)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
794
0
Gpt3D_Clone794_0.py 1 11
Gpt3D_Clone794_0.py 13 22

----------------------------------------

def recursiveHalfString(s, offset = 0) :
	half, odd = divmod(len(s), 2)
	assert (not odd)
	if not s or offset > half :
		return True
	if s [offset] ! = s [half + offset] :
		return False
	return recursiveHalfString(s, offset + 1)
----------------------------------------

def recursiveHalfString_Type4(s, offset = 0) :
	length = len(s)
	if length % 2 != 0 :
		raise AssertionError('String length must be even.')
	if not s or offset > length // 2 :
		return True
	if s [offset] ! = s [length // 2 + offset] :
		return False
	return recursiveHalfString_Type4(s, offset + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
2
Gpt3D_Clone797_2.py 1 11
Gpt3D_Clone797_2.py 13 19

----------------------------------------

def count(list1) :
	x = 0
	total = 0
	while x < len(list1) :
		total += list [x]
		print total
		x = x + 1
	return total
----------------------------------------

def count3(list1):
  total = 0
  for x in list1[:]:
  	total += x
  	print(total)
  return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
0
Gpt3D_Clone798_0.py 1 11
Gpt3D_Clone798_0.py 13 19

----------------------------------------

def count(list1) :
	x = 0
	total = 0
	while x < len(list1) :
		total += list [x]
		print total
		x = x + 1
	return total
----------------------------------------

def count(list1) :
	total = 0
	for x in list1 :
		total += x
		print total
	return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
800
0
Gpt3D_Clone800_0.py 1 12
Gpt3D_Clone800_0.py 14 26

----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		try :
			if elem [0] == letter :
				count = count + 1
		except Exception, ex :
			print ex.message
	return count
----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	stop = len(p)
	pos = 0
	while pos < stop :
		try :
			if letter == p[pos][0] : 
				count += 1
		except Exception, ex :
			print ex.message
		pos += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
800
1
Gpt3D_Clone800_1.py 1 12
Gpt3D_Clone800_1.py 14 27

----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		try :
			if elem [0] == letter :
				count = count + 1
		except Exception, ex :
			print ex.message
	return count
----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	stop = len(p)
	pos = 0
	while pos < stop :
		try :
			if p[pos][0] == letter : 
				count += 1
		except Exception, ex :
			print ex.message
		pos += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
3
Gpt3D_Clone804_3.py 1 9
Gpt3D_Clone804_3.py 11 17

----------------------------------------

def backtrack(res, temp, nums, start) :
	res.append(temp [:])
	for i in range(start, len(nums)) :
		temp.append(nums [i])
		backtrack(res, temp, nums, i + 1)
		temp.pop()
----------------------------------------

def backtrack(res, temp, nums, start) :
	new_res = temp[:]
	res.append(new_res)
	for i in range(start, len(nums)) :
		new_temp = temp + [nums[i]]
		backtrack(res, new_temp, nums, i + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
806
0
Gpt3D_Clone806_0.py 1 13
Gpt3D_Clone806_0.py 15 32

----------------------------------------

def power_function(decimal, integer) :
	num = 1
	for function in range(abs(integer)) :
		if integer > 0 :
			num *= decimal
		if integer < 0 :
			num *= 1.0 / decimal
		if integer == 0 :
			num = 1
	return num
----------------------------------------

def power_function(decimal, integer):
   num = 1
   if integer > 0:
      try:
         for function in range(integer):
            num *= decimal
      except ValueError:
         print("Oops! That was no valid number. Try again...")
   elif integer == 0:
      num = 1
   else:
      try:
         for function in range(abs(integer)):
            num *= 1.0/decimal
      except ValueError:
         print("Oops! That was no valid number. Try again...")
   return num
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
806
3
Gpt3D_Clone806_3.py 1 13
Gpt3D_Clone806_3.py 15 23

----------------------------------------

def power_function(decimal, integer) :
	num = 1
	for function in range(abs(integer)) :
		if integer > 0 :
			num *= decimal
		if integer < 0 :
			num *= 1.0 / decimal
		if integer == 0 :
			num = 1
	return num
----------------------------------------

def power_function(decimal, integer):
	if integer > 0:
		num = decimal ** integer
	elif integer < 0:
		num = (1 / decimal) ** abs(integer)
	elif integer == 0 :
		num = 1
	return num
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
807
0
Gpt3D_Clone807_0.py 1 9
Gpt3D_Clone807_0.py 11 20

----------------------------------------

def is_continuous(seq) :
	non_null_indices = [i for i, obj in enumerate(seq) if obj is not None]
	for i, index in enumerate(non_null_indices [: - 1]) :
		if non_null_indices [i + 1] - index > 1 :
			return False
	return True
----------------------------------------

def is_continuous(seq):
	non_null_indices = []
	for i, obj in enumerate(seq):
		if obj is not None:
			non_null_indices.append(i)
	for i in range(len(non_null_indices)-1):
		if non_null_indices[i+1]-non_null_indices[i] > 1:
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
0
Gpt3D_Clone809_0.py 1 13
Gpt3D_Clone809_0.py 15 22

----------------------------------------

def turns(NumOfTries, word) :
	score = 0
	guesses = set()
	for i in range(len(w)) :
		guess = str(raw_input('Guess a letter (caps only): '))
		guesses.add(guess)
		if guess in word :
			score += 1
		print [c if c in guesses else "_" for c in w]
	return score
----------------------------------------

def turn(self):
	guess = str(input('Guess a letter (caps only): '))
	self.guesses.add(guess)
	if guess in self.word:
		self.score += 1
	print([c if c in self.guesses else '_' for c in self.word])
	return self.score
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
0
Gpt3D_Clone80_0.py 1 9
Gpt3D_Clone80_0.py 11 19

----------------------------------------

def pdf_view(request) :
	with open('/path/to/my/file.pdf', 'r') as pdf :
		response = HttpResponse(pdf.read(), mimetype = 'application/pdf')
		response ['Content-Disposition'] = 'inline;filename=some_file.pdf'
		return response
	pdf.closed
----------------------------------------

def pdf_view(request, file_name = None) :
	if not file_name:
		file_name = '/path/to/my/file.pdf'
	with open(file_name, 'r') as pdf :
		response = HttpResponse(pdf.read(), mimetype = 'application/pdf')
		response ['Content-Disposition'] = 'inline;filename=' + file_name
		return response
	pdf.closed
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
0
Gpt3D_Clone814_0.py 1 5
Gpt3D_Clone814_0.py 7 13

----------------------------------------

def get_icon_path(extension, size = 32) :
	type_, encoding = mimetypes.guess_type('x.' + extension)
	if type_ :
		icon = gio.content_type_get_icon(type_)
----------------------------------------

def get_icon_path(extension, size = 32) :
	fname = 'x.' + extension
	type_, encoding = mimetypes.guess_type(fname)
	if type_ :
		icon = gio.content_type_get_icon(type_)
		desired_size = size
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
1
Gpt3D_Clone814_1.py 1 5
Gpt3D_Clone814_1.py 7 13

----------------------------------------

def get_icon_path(extension, size = 32) :
	type_, encoding = mimetypes.guess_type('x.' + extension)
	if type_ :
		icon = gio.content_type_get_icon(type_)
----------------------------------------

def get_icon_path(extension, size = 32):
	file_name = 'x.' + extension
	type_, encoding = mimetypes.guess_type(file_name)
	if type_ :
		icon = gio.content_type_get_icon(type_)
		required_size = size
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
3
Gpt3D_Clone814_3.py 1 5
Gpt3D_Clone814_3.py 7 13

----------------------------------------

def get_icon_path(extension, size = 32) :
	type_, encoding = mimetypes.guess_type('x.' + extension)
	if type_ :
		icon = gio.content_type_get_icon(type_)
----------------------------------------

def get_icon_path(extension, size = 32) :
	query_str = 'x.' + extension
	type_, encoding = mimetypes.guess_type(query_str)
	if type_ :
		icon = gio.content_type_get_icon(type_)
		dest_size = size
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
4
Gpt3D_Clone814_4.py 1 5
Gpt3D_Clone814_4.py 7 13

----------------------------------------

def get_icon_path(extension, size = 32) :
	type_, encoding = mimetypes.guess_type('x.' + extension)
	if type_ :
		icon = gio.content_type_get_icon(type_)
----------------------------------------

def get_icon_path(extension, size = 32):
	filename = 'x.' + extension
	type_, encoding = mimetypes.guess_type(filename)
	if type_ :
		icon = gio.content_type_get_icon(type_)
		icon_size = size
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
0
Gpt3D_Clone815_0.py 1 5
Gpt3D_Clone815_0.py 7 18

----------------------------------------

def compare(a, b) :
	i_zip = list(enumerate(zip(a, b)))
	llen = len(a)
	hp = llen / / 2
----------------------------------------

def compare(e, f) :
	i_zip = list(enumerate(zip(e, f)))
	llen = len(e)
	mp = llen // 4
	result = [z for k, z in i_zip if k > mp]
	return result
	for i,(x, y) in i_zip:
		if x != y:
			hp -= 1
	return hp == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
1
Gpt3D_Clone815_1.py 1 5
Gpt3D_Clone815_1.py 7 15

----------------------------------------

def compare(a, b) :
	i_zip = list(enumerate(zip(a, b)))
	llen = len(a)
	hp = llen / / 2
----------------------------------------

def compare(a, b) :
	spc = list(enumerate(zip(a, b)))
	ln = len(a)
	half = ln // 2
	for j,(m, n) in spc:
		if m != n:
			half -= 1
	return half == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
2
Gpt3D_Clone815_2.py 1 5
Gpt3D_Clone815_2.py 7 15

----------------------------------------

def compare(a, b) :
	i_zip = list(enumerate(zip(a, b)))
	llen = len(a)
	hp = llen / / 2
----------------------------------------

def compare(a, b) :
	g_zip = list(enumerate(zip(a, b)))
	g_len = len(a)
	mid = g_len // 2
	for x,(y, z) in g_zip:
		if y != z:
			mid -= 1
	return mid == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
3
Gpt3D_Clone815_3.py 1 5
Gpt3D_Clone815_3.py 7 13

----------------------------------------

def compare(a, b) :
	i_zip = list(enumerate(zip(a, b)))
	llen = len(a)
	hp = llen / / 2
----------------------------------------

def compare(c, d) :
	i_zip = list(enumerate(zip(c, d)))
	llen = len(c)
	lp = llen - (llen / /2)
	result = [y for j, y in i_zip if j < lp]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
2
Gpt3D_Clone818_2.py 1 11
Gpt3D_Clone818_2.py 13 21

----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	assert os.access(csvfile, os.F_OK)
----------------------------------------

def setup(obj):
	import pathlib
	obj.fixture_dir = pathlib.Path(__file__).parent / "fixtures"
	if os.access(obj.fixture_dir, os.F_OK) is False :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + obj.fixture_dir)
	csvfile = obj.fixture_dir / "profiles-source1.csv"
	assert os.access(csvfile, os.F_OK)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
0
Gpt3D_Clone819_0.py 1 11
Gpt3D_Clone819_0.py 13 21

----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	assert os.access(csvfile, os.F_OK)
----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.dirname(__file__), "fixtures")
	if not os.path.exists(self.fixture_dir):
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(op.abspath(self.fixture_dir), "profiles-source1.csv")
	assert os.path.exists(csvfile)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
0
Gpt3D_Clone820_0.py 1 10
Gpt3D_Clone820_0.py 12 26

----------------------------------------

def numPens(n) :
	if n < 5 :
		return False
	elif n == 5 or n == 8 or n == 24 :
		return True
	else :
		return numPens(n - 5) or numPens(n - 8) or numPens(n - 24)
----------------------------------------

def numPens(n) :
	if n < 5 :
		return False
	elif n == 5 : 
		return True
	elif n == 8 :
		return True
	elif n == 24 :
		return True
	else :
		a = numPens(n-5) 
		b = numPens(n-8)
		c = numPens(n-24)
		return a or b or c
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
1
Gpt3D_Clone825_1.py 1 11
Gpt3D_Clone825_1.py 13 23

----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
----------------------------------------

def run(cmd, timeout_sec):
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE);
	timer = Timer(timeout_sec, proc.kill);
	stdout = None;
	stderr = None;
	try:
		timer.start();
		stdout, stderr = proc.communicate();
	finally:
		timer.cancel();
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
2
Gpt3D_Clone825_2.py 1 11
Gpt3D_Clone825_2.py 13 22

----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
----------------------------------------

def run(cmd, timeout_sec):
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE);
	timer = Timer(timeout_sec, proc.kill);
	stdout = None;
	try:
		timer.start();
		stdout, stderr = proc.communicate();
	finally:
		timer.cancel();
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
827
1
Gpt3D_Clone827_1.py 1 13
Gpt3D_Clone827_1.py 15 27

----------------------------------------

def run(self) :
	self.process = subprocess.Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
	while (self.process.poll() is None and self.timeout > 0) :
		time.sleep(1)
		self.timeout -= 1
	if not self.timeout > 0 :
		self.process.terminate()
		self.timed_out = True
	else :
		self.timed_out = False
----------------------------------------

def run(self): 
  self.process = Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
  timeout_lapse = 1
  while self.process.poll() is None and self.timeout > 0:
    time.sleep(timeout_lapse)
    self.timeout -= timeout_lapse
  if self.timeout < 0:
    self.process.terminate()
    self.timed_out = True
  else: 
    self.timed_out = False
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
0
Gpt3D_Clone831_0.py 1 8
Gpt3D_Clone831_0.py 10 18

----------------------------------------

def fib(n) :
	if n < = 2 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n <= 2 :
		return 1
	else :
		f1 = fib(n - 1)
		f2 = fib(n - 2)
		f3 = f1 + f2
		return f3
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
833
0
Gpt3D_Clone833_0.py 1 11
Gpt3D_Clone833_0.py 13 22

----------------------------------------

def awesome(my_string) :
	if is_substr(my_string, ["A", "B", "C"]) :
		x = do_something() + complicated_thing()
	elif is_substr(my_string, ["1", "2", "3"]) :
		x = do_something_else() + complicated_thing()
	elif is_substr(my_string, ["!", "#", "$"]) :
		x = do_another_thing() + complicated_thing()
	return x + ("Hello" if some_condition(x) else "World")
----------------------------------------

def awesome(my_string) :
	x = None
	if is_substr(my_string, ["A", "B", "C"]) :
		x = do_something()
	elif is_substr(my_string, ["1", "2", "3"]) :
		x = do_something_else()
	elif is_substr(my_string, ["!", "#", "$"]) :
		x = do_another_thing()
	return x + tricky_stuff() + ("Hello" if some_condition(x) else "Goodbye")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
1
Gpt3D_Clone836_1.py 1 11
Gpt3D_Clone836_1.py 13 22

----------------------------------------

def contains_consecutive_duplicates(xs) :
	for i in xs :
		if xs.indexOf(i) == len(xs) :
			break
		if xs [i] == xs [i - 1] or xs [i] == xs [i + 1] :
			return True
		else :
			return False
----------------------------------------

def contains_consecutive_duplicates(xs):
	for i in range(len(xs)):
		if i != len(xs)-1:
			if xs[i] == xs[i+1]:
				return True
		else:
			break
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
2
Gpt3D_Clone836_2.py 1 11
Gpt3D_Clone836_2.py 13 20

----------------------------------------

def contains_consecutive_duplicates(xs) :
	for i in xs :
		if xs.indexOf(i) == len(xs) :
			break
		if xs [i] == xs [i - 1] or xs [i] == xs [i + 1] :
			return True
		else :
			return False
----------------------------------------

def contains_consecutive_duplicates(xs):
	for i in range(len(xs)):
		if i == 0 or i == len(xs) - 1:
			break
		if xs[i - 1] == xs[i] or xs [i] == xs[i + 1]:
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
3
Gpt3D_Clone836_3.py 1 11
Gpt3D_Clone836_3.py 13 18

----------------------------------------

def contains_consecutive_duplicates(xs) :
	for i in xs :
		if xs.indexOf(i) == len(xs) :
			break
		if xs [i] == xs [i - 1] or xs [i] == xs [i + 1] :
			return True
		else :
			return False
----------------------------------------

def contains_consecutive_duplicates(xs):
	for i in range(1, len(xs) -1):
		if xs[i - 1] == xs[i] or xs[i] == xs [i + 1]:
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
0
Gpt3D_Clone837_0.py 1 7
Gpt3D_Clone837_0.py 9 17

----------------------------------------

def neclusters(l, K) :
	for splits in itertools.combinations(range(len(l) - 1), K - 1) :
		splits = [0] + [s + 1 for s in splits] + [None]
		yield [l [s : e] for s, e in zip(splits, splits [1 :])]
----------------------------------------

def neclusters(l, K) :
	splits_indexes = []
	for splits in itertools.combinations(range(len(l) - 1), K - 1) :
		splits_indexes.append([s + 1 for s in splits])
	
	for i in range(len(splits_indexes)): 
		splits_indexes[i] = [0] + sorted(splits_indexes[i]) + [None]
		yield [l[s : e] for s, e in zip(splits_indexes[i], splits_indexes[i][1 :])]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
1
Gpt3D_Clone837_1.py 1 7
Gpt3D_Clone837_1.py 9 14

----------------------------------------

def neclusters(l, K) :
	for splits in itertools.combinations(range(len(l) - 1), K - 1) :
		splits = [0] + [s + 1 for s in splits] + [None]
		yield [l [s : e] for s, e in zip(splits, splits [1 :])]
----------------------------------------

def neclusters_3(l, K) :
	for splits in itertools.combinations(range(len(l) - 1), K - 1) :
		splits = [0] + [s + 1 for s in splits] + [len(l)]
		yield [l [s : e] for s, e in zip(splits[:-1], splits [1 :])]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
2
Gpt3D_Clone837_2.py 1 7
Gpt3D_Clone837_2.py 9 14

----------------------------------------

def neclusters(l, K) :
	for splits in itertools.combinations(range(len(l) - 1), K - 1) :
		splits = [0] + [s + 1 for s in splits] + [None]
		yield [l [s : e] for s, e in zip(splits, splits [1 :])]
----------------------------------------

def neclusters(l, K) :
	for splits in itertools.combinations(range(len(l) - 1), K - 1) :
		splits = [0] + sorted([s + 1 for s in splits]) + [None]
		yield list(l [s : e] for s, e in zip(splits, splits [1 :]))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
3
Gpt3D_Clone837_3.py 1 7
Gpt3D_Clone837_3.py 9 14

----------------------------------------

def neclusters(l, K) :
	for splits in itertools.combinations(range(len(l) - 1), K - 1) :
		splits = [0] + [s + 1 for s in splits] + [None]
		yield [l [s : e] for s, e in zip(splits, splits [1 :])]
----------------------------------------

def neclusters_4(l, K) :
	for splits in itertools.combinations(range(len(l)), K - 1) :
		splits = [s + 1 for s in splits] + [len(l)]
		yield [l [s : e] for s, e in zip(splits[:-1], splits [1 :])]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
83
0
Gpt3D_Clone83_0.py 1 8
Gpt3D_Clone83_0.py 10 17

----------------------------------------

def characters(nameLst) :
	outLst = []
	for i in range(len(nameLst)) :
		outLst = outlst.append(len(nameLst))
	return (outLst)
----------------------------------------

def characters(nameLst):
	outLst =[]
	i = 0
	while i < len(nameLst):
		outLst = outLst.append(len(nameLst))
		i += 1
	return outLst
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
0
Gpt3D_Clone840_0.py 1 14
Gpt3D_Clone840_0.py 16 27

----------------------------------------

def problem_a(n, answer = None) :
	answer = [n] if answer is None else answer
	if n == 1 :
		return answer
	elif n % 2 == 0 :
		n = n / 2
		answer.append(n)
	else :
		n = n * 3 + 1
		answer.append(n)
	return problem_a(n, answer)
----------------------------------------

def problem_a(n, answer) :
	if answer is None :
		answer = []
	if n == 1 :
		return answer + [1]
	else :
		if n % 2 == 0 :
			n = n / 2
		else :
			n = n * 3 + 1
		return problem_a(n, answer + [n])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
1
Gpt3D_Clone840_1.py 1 14
Gpt3D_Clone840_1.py 16 23

----------------------------------------

def problem_a(n, answer = None) :
	answer = [n] if answer is None else answer
	if n == 1 :
		return answer
	elif n % 2 == 0 :
		n = n / 2
		answer.append(n)
	else :
		n = n * 3 + 1
		answer.append(n)
	return problem_a(n, answer)
----------------------------------------

def problem_a(n, answer = []) : 
	if n == 1 :
		return [1] + answer
	elif n % 2 == 0 :
		return problem_a(n / 2, answer + [n])
	else :
		return problem_a(n * 3 + 1, answer + [n])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
1
Gpt3D_Clone842_1.py 1 10
Gpt3D_Clone842_1.py 12 20

----------------------------------------

def __call__(self, * args, ** kwargs) :
	if not hasattr(self, 'fn') :
		self.fn = args [0]
		return self
	print "In my decorator before call, with arg %s" % self.argument
	self.fn(* args, ** kwargs)
	print "In my decorator after call, with arg %s" % self.argument
----------------------------------------

def __call__(self, * args, ** kwargs) :
 if hasattr(self, 'fn') :
		print("In my decorator before call, with arg %s" % self.argument)
		self.fn(* args, ** kwargs)
		print("In my decorator after call, with arg %s" % self.argument)
 else:
		self.fn = args[0]
		return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
2
Gpt3D_Clone842_2.py 1 10
Gpt3D_Clone842_2.py 12 21

----------------------------------------

def __call__(self, * args, ** kwargs) :
	if not hasattr(self, 'fn') :
		self.fn = args [0]
		return self
	print "In my decorator before call, with arg %s" % self.argument
	self.fn(* args, ** kwargs)
	print "In my decorator after call, with arg %s" % self.argument
----------------------------------------

def __call__(self, * args, ** kwargs) :
	if hasattr(self, 'fn') :
		print "In my decorator before call, with arg %s" % self.argument
		self.fn(* args, ** kwargs)
		print "In my decorator after call, with arg %s" % self.argument
	else:
		self.fn = args [0]
		return self
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
0
Gpt3D_Clone844_0.py 1 10
Gpt3D_Clone844_0.py 12 23

----------------------------------------

def f(n) :
	if n == 0 :
		return 0
	if n == 1 :
		return 1
	else :
		return 0.5 * (f(n - 1) + f(n - 2))
----------------------------------------

def f(n, m1=None, m2=None) :
	if n == 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		if m1 == None :
			m1 = f(n - 1)
		if m2 == None : 
			m2 = f(n - 2)
		return 0.5 * (m1 + m2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
2
Gpt3D_Clone844_2.py 1 10
Gpt3D_Clone844_2.py 12 20

----------------------------------------

def f(n) :
	if n == 0 :
		return 0
	if n == 1 :
		return 1
	else :
		return 0.5 * (f(n - 1) + f(n - 2))
----------------------------------------

def f(n) :
	if n == 0 :
		result = 0
	elif n == 1 :
		result = 1
	else :
		result = 0.5 * (f(n - 1) + f(n - 2))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
0
Gpt3D_Clone847_0.py 1 9
Gpt3D_Clone847_0.py 11 23

----------------------------------------

def remove_item(todolist, name) :
	result = [item for item in todolist if name ! = item [1]]
	if len(todolist) == len(result) :
		return False
	else :
		return result
----------------------------------------

def remove_item(todolist, name): 
  result = [] 
  i = 0 
  while i < len(todolist): 
    if name != todolist[i][1]: 
      result.append(todolist[i]) 
    i = i + 1 
  
  if len(todolist) == len(result): 
    return False 
  else: 
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
0
Gpt3D_Clone854_0.py 1 8
Gpt3D_Clone854_0.py 10 18

----------------------------------------

def fib(a = 0, b = 1) :
	yield a
	while True :
		yield b
		a, b = b, a + b
----------------------------------------

def fib(a = 0, b = 1):
	yield a
	while True:
		yield b
		temp_a = a 
		temp_b = b 
		a = temp_b
		b = temp_a + temp_b
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
0
Gpt3D_Clone864_0.py 1 8
Gpt3D_Clone864_0.py 10 21

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	temp_list = sorted(string.split(), key = lambda x : len(x))
	key_list = []
	value_list = []
	for x in temp_list :
		key_list.append(len(x))
		value_list.append(x)
	for key, group in groupby(key_list, lambda x : x) :
		result [key] = [x for i,x in zip(key_list,value_list) if i == key]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
1
Gpt3D_Clone864_1.py 1 8
Gpt3D_Clone864_1.py 10 19

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary(string):
	result = {}
	splits = string.split() 
	sorted_list = sorted(splits, key = lambda x : len(x))
	for key, group in groupby(sorted_list, lambda x : len(x)):
		res = list(group)
		result[key] = res
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
2
Gpt3D_Clone864_2.py 1 8
Gpt3D_Clone864_2.py 10 18

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary(string):
	result = {}
	splits = string.split()
	sorted_list = sorted(splits, key=len)
	for key, group in groupby(sorted_list, len):
		res = list(group)
		result[key] = res
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
0
Gpt3D_Clone865_0.py 1 8
Gpt3D_Clone865_0.py 10 27

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary_4(string):
  result = {}
  words = string.split()
  sorted_words = sorted(words, key=lambda x: len(x))
  last_len = None
  group_list = []
  for word in sorted_words:
    cur_len = len(word)
    if not last_len or last_len == cur_len:
      group_list.append(word) 
    else:
      result[last_len] = group_list.copy()
      group_list.clear()
      group_list.append(word)
    last_len = cur_len 
  result[last_len] = group_list.copy()
  return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
1
Gpt3D_Clone865_1.py 1 8
Gpt3D_Clone865_1.py 10 20

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	words = string.split()
	for word in words:
	   length = len(word)
	   if length in result:
			result[length].append(word)
	   else:
			result[length] = [word]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
2
Gpt3D_Clone865_2.py 1 8
Gpt3D_Clone865_2.py 10 20

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	words = string.split()
	for i in range(len(words)):
		length = len(words[i])
		if length not in result:
			result[length] = []
		result[length].append(words[i])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
3
Gpt3D_Clone865_3.py 1 8
Gpt3D_Clone865_3.py 10 18

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary_3(string):
	result = {}
	words = string.split()
	sorted_words = sorted(words, key=lambda x: len(x))
	for key, group in groupby(sorted_words, lambda x: len(x)):
		group_list = list(group)
		result[key] = group_list 
	return result 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
1
Gpt3D_Clone869_1.py 1 12
Gpt3D_Clone869_1.py 14 21

----------------------------------------

def standings(team) :
	for league, teams_dict in teams.items() :
		try :
			teams_dict [team]
			print (teams_dict [team], team)
			print (league)
			break
		except KeyError :
			continue
----------------------------------------

def standings(team) :
	for league in teams :
		team_list = teams[league]
		if team in team_list.keys() :
			print (team_list [team], team)
			print (league)
			break
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
0
Gpt3D_Clone870_0.py 1 11
Gpt3D_Clone870_0.py 13 23

----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		if el_a in b [last :] :
			last = b [last :].index(el_a)
		else :
			return False
	return True
----------------------------------------

def sublist(a, b) :
	last = 0
	match_flag = True
	for val_a in a :
		if val_a not in b [last :] :
			match_flag = False
			break
		else :
			last = b [last :].index(val_a)
	return match_flag
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
1
Gpt3D_Clone870_1.py 1 11
Gpt3D_Clone870_1.py 13 24

----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		if el_a in b [last :] :
			last = b [last :].index(el_a)
		else :
			return False
	return True
----------------------------------------

def sublist(a, b) :
	last = 0
	match = True
	for el_a in a :
		if el_a not in b [last :] :
			match = False
			break
		else :
			last = b [last :].index(el_a)
	return match
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
871
0
Gpt3D_Clone871_0.py 1 11
Gpt3D_Clone871_0.py 13 25

----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		if el_a in b [last :] :
			last = b [last :].index(el_a)
		else :
			return False
	return True
----------------------------------------

def sublist(a, b):
    last = 0
    for el_a in a:
        found = False
        for el_b in b[last:]:
            if el_a == el_b:
                last += 1
                found = True
                break
        if not found:
            return False
    return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
871
1
Gpt3D_Clone871_1.py 1 11
Gpt3D_Clone871_1.py 13 21

----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		if el_a in b [last :] :
			last = b [last :].index(el_a)
		else :
			return False
	return True
----------------------------------------

def sublist(a, b) : 
  last = 0 
  for idx, el_a in enumerate(a) : 
    if el_a not in b[last:] :
      return False
    else : 
      last += b[last:].index(el_a) + 1
  return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
875
0
Gpt3D_Clone875_0.py 1 13
Gpt3D_Clone875_0.py 15 29

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b):
	seq = iter(b)
	for x in a:
		found = False
		while True:
			try:
				if next(seq) == x:
					found = True
					break
			except StopIteration:
				break
		if not found:
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
875
1
Gpt3D_Clone875_1.py 1 13
Gpt3D_Clone875_1.py 15 27

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b):
	seq = iter(b)
	for x in a:
		while True:
			try:
				y = next(seq)
				if y == x:
					break
			except StopIteration:
				return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
876
0
Gpt3D_Clone876_0.py 1 13
Gpt3D_Clone876_0.py 15 25

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b):
	for x in a:
		flag = False
		for b_item in b:
			if b_item == x:
				flag = True
				break
		if flag == False:
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
876
1
Gpt3D_Clone876_1.py 1 13
Gpt3D_Clone876_1.py 15 21

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b):
	for x in a:
		if x not in b:
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
0
Gpt3D_Clone877_0.py 1 13
Gpt3D_Clone877_0.py 15 26

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b) : 
	seq = iter(b)
	for x in a:
		is_found = False
		while not is_found:
			try:
				if next(seq) == x:
					is_found = True
			except StopIteration: 
				return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
1
Gpt3D_Clone877_1.py 1 13
Gpt3D_Clone877_1.py 15 25

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b) : 
	seq = iter(b)
	for x in a:
		try:
			while next(seq) != x:
				pass
		except StopIteration:
			return False
	else :
		return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
2
Gpt3D_Clone877_2.py 1 13
Gpt3D_Clone877_2.py 15 25

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b):
    seq = iter(b)
    for x in a:
        try:
            while next(seq) == x:
                pass
        except StopIteration:
            return False
    else:
        return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
3
Gpt3D_Clone877_3.py 1 13
Gpt3D_Clone877_3.py 15 25

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b):
    seq = iter(b)
    for x in a:
        try:
            while next(seq) != x:
                pass
        except StopIteration:
            return False
    else:
        return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
0
Gpt3D_Clone878_0.py 1 13
Gpt3D_Clone878_0.py 15 29

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	for x in a :
		while True :
			try: 
				if next(seq) != x: 
					pass
				else: 
					break
			except StopIteration:
				return False
	else:
		return True
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
881
0
Gpt3D_Clone881_0.py 1 15
Gpt3D_Clone881_0.py 17 34

----------------------------------------

def sublist(a, b) :
	index_a = 0
	index_b = 0
	len_a = len(a)
	len_b = len(b)
	while index_a < len_a and index_b < len_b :
		if a [index_a] == b [index_b] :
			index_a += 1
			index_b += 1
		else :
			index_b += 1
	return index_a == len_a
----------------------------------------

def sublist(a, b):
  if len(a) > len(b):
    return False
  
  i = 0
  for x in a:
    index = -1
    for j in range(i, len(b)):
      if b[j] == x:
        index = j
        break
          
    if index == -1:
      return False
    else:
      i = index + 1
      
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
881
1
Gpt3D_Clone881_1.py 1 15
Gpt3D_Clone881_1.py 17 36

----------------------------------------

def sublist(a, b) :
	index_a = 0
	index_b = 0
	len_a = len(a)
	len_b = len(b)
	while index_a < len_a and index_b < len_b :
		if a [index_a] == b [index_b] :
			index_a += 1
			index_b += 1
		else :
			index_b += 1
	return index_a == len_a
----------------------------------------

def sublist(a, b):
  if len(a) > len(b):
    return False
  
  i = 0
  for x in a:
    j = 0
    while j < len(b):
      if b[j] == x:
        break
      j += 1
    if j == len(b):
      return False
    
    i += 1
  
  return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
881
2
Gpt3D_Clone881_2.py 1 15
Gpt3D_Clone881_2.py 17 30

----------------------------------------

def sublist(a, b) :
	index_a = 0
	index_b = 0
	len_a = len(a)
	len_b = len(b)
	while index_a < len_a and index_b < len_b :
		if a [index_a] == b [index_b] :
			index_a += 1
			index_b += 1
		else :
			index_b += 1
	return index_a == len_a
----------------------------------------

def sublist(a, b):
  if len(a) > len(b):
    return False
  
  i = 0
  for x in a:
    index = b.find(x, i)
    if index == -1:
      return False
    else:
      i = index + 1
      
  return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
881
3
Gpt3D_Clone881_3.py 1 15
Gpt3D_Clone881_3.py 17 31

----------------------------------------

def sublist(a, b) :
	index_a = 0
	index_b = 0
	len_a = len(a)
	len_b = len(b)
	while index_a < len_a and index_b < len_b :
		if a [index_a] == b [index_b] :
			index_a += 1
			index_b += 1
		else :
			index_b += 1
	return index_a == len_a
----------------------------------------

def sublist(a, b):
  if len(a) > len(b):
    return False
  
  i = 0
  for x in a:
    while i < len(b):
      if b[i] == x:
        break
      i += 1
      
    if i == len(b):
      return False
    
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
0
Gpt3D_Clone886_0.py 1 7
Gpt3D_Clone886_0.py 9 14

----------------------------------------

def __init__(self, ** kwargs) :
	for k in kwargs.keys() :
		if k in [acceptable_keys_list] :
			self.__setattr__(k, kwargs [k])
----------------------------------------

def __init__(self, **kwargs):
  for k in kwargs.keys():
    if k in acceptable_keys_list:
      self.__dict__[k] = kwargs[k]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
2
Gpt3D_Clone886_2.py 1 7
Gpt3D_Clone886_2.py 9 13

----------------------------------------

def __init__(self, ** kwargs) :
	for k in kwargs.keys() :
		if k in [acceptable_keys_list] :
			self.__setattr__(k, kwargs [k])
----------------------------------------

def __init__(self, **kwargs):
  for k, v in kwargs.items():
    if k in acceptable_keys_list:
      setattr(self, k, v)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
0
Gpt3D_Clone888_0.py 1 10
Gpt3D_Clone888_0.py 12 21

----------------------------------------

def linspace(start, stop, n) :
	if n == 1 :
		yield stop
		return
	h = (stop - start) / (n - 1)
	for i in range(n) :
		yield start + h * i
----------------------------------------

def linspace(start, stop, n) :
	if n == 1 :
		return stop
	h = (stop - start) / (n - 1)
	step = start
	for i in range(n) :
		step += h * i
		yield step
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
2
Gpt3D_Clone888_2.py 1 10
Gpt3D_Clone888_2.py 12 17

----------------------------------------

def linspace(start, stop, n) :
	if n == 1 :
		yield stop
		return
	h = (stop - start) / (n - 1)
	for i in range(n) :
		yield start + h * i
----------------------------------------

def linspace(start, stop, n):
	if n == 1:
		return [stop]
	h = (stop - start) / (n - 1)
	return [start + h * num for num in range(n)]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
3
Gpt3D_Clone888_3.py 1 10
Gpt3D_Clone888_3.py 12 18

----------------------------------------

def linspace(start, stop, n) :
	if n == 1 :
		yield stop
		return
	h = (stop - start) / (n - 1)
	for i in range(n) :
		yield start + h * i
----------------------------------------

def linspace(start, stop, n) :
	if n == 1 :
		return stop
	h = (stop - start) / (n - 1)
	return [start + h * i for i in range(n)]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
893
0
Gpt3D_Clone893_0.py 1 9
Gpt3D_Clone893_0.py 11 19

----------------------------------------

def int_to_roman(number) :
	result = ""
	for (arabic, roman) in ROMAN :
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
----------------------------------------

def int_to_roman(number) :
	result = ""
	for item in ROMAN:
		new_number = number // item[0]
		new_string = item[1] * new_number
		number %= item[0]
		result += new_string
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
893
1
Gpt3D_Clone893_1.py 1 9
Gpt3D_Clone893_1.py 11 17

----------------------------------------

def int_to_roman(number) :
	result = ""
	for (arabic, roman) in ROMAN :
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
----------------------------------------

def int_to_roman(number) :
	result = ""
	for item in ROMAN :
		(factor, number) = divmod(number, item[0])
		result += item[1] * factor
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
1
Gpt3D_Clone894_1.py 1 9
Gpt3D_Clone894_1.py 11 19

----------------------------------------

def int_to_roman(number) :
	result = ""
	for (arabic, roman) in ROMAN :
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
----------------------------------------

def int_to_roman_4(number) :
    result = ""
    lROMAN = list(ROMAN.items())
    for key, values in lROMAN :
        (factor, number) = divmod(number, key)
        temp = values * factor
        result += temp
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
900
1
Gpt3D_Clone900_1.py 1 7
Gpt3D_Clone900_1.py 9 13

----------------------------------------

def zipdir(path, ziph) :
	for root, dirs, files in os.walk(path) :
		for file in files :
			ziph.write(os.path.join(root, file))
----------------------------------------

def zipdir(path, ziph) :
	file_path = os.walk(path)
	for text_file in file_path :
		ziph.write(os.path.join(text_file))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
0
Gpt3D_Clone902_0.py 1 8
Gpt3D_Clone902_0.py 10 20

----------------------------------------

def avg(self) :
	if all(isinstance(item, int) for item in self) :
		return sum(self) / len(self)
	else :
		raise ValueError('Invalid item in list. All items need to be an integer.')
----------------------------------------

def avg(self) :
	if all(isinstance(item, int) for item in self) :
		value = 0
		i = 0
		while i < len(self) :
			value += self[i]
			i += 1
		return value / len(self)
	else :
		raise ValueError('Invalid item in list. All items need to be an integer.')
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
1
Gpt3D_Clone902_1.py 1 8
Gpt3D_Clone902_1.py 10 20

----------------------------------------

def avg(self) :
	if all(isinstance(item, int) for item in self) :
		return sum(self) / len(self)
	else :
		raise ValueError('Invalid item in list. All items need to be an integer.')
----------------------------------------

def avg(self) :
	if all(isinstance(item, int) for item in self) :
		total = 0
		for item in self :
			total += item
		return total / len(self)
	else :
		raise ValueError('Invalid item in list. All items need to be an integer.')
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
3
Gpt3D_Clone902_3.py 1 8
Gpt3D_Clone902_3.py 10 16

----------------------------------------

def avg(self) :
	if all(isinstance(item, int) for item in self) :
		return sum(self) / len(self)
	else :
		raise ValueError('Invalid item in list. All items need to be an integer.')
----------------------------------------

def avg(self) :
	for item in self :
		if not isinstance(item, int) : 
			raise ValueError('Invalid item in list. All items need to be an integer.')
	return sum(self) / len(self)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
0
Gpt3D_Clone906_0.py 1 10
Gpt3D_Clone906_0.py 12 21

----------------------------------------

def evaluate(tokens, ops, precedence) :
	for prec in precedence :
		index = find_op(tokens, prec)
		while index > = 0 :
			tokens = reduce_binary_infix(tokens, index, ops)
			index = find_op(tokens, prec)
	return tokens
----------------------------------------

def evaluate(tokens, ops, precedence) :
	for prec in precedence :
		index = 0
		while index < len(tokens) :
			if tokens[index] == prec :
				tokens = reduce_binary_infix(tokens, index, ops)
			index += 1
	return tokens
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
1
Gpt3D_Clone906_1.py 1 10
Gpt3D_Clone906_1.py 12 20

----------------------------------------

def evaluate(tokens, ops, precedence) :
	for prec in precedence :
		index = find_op(tokens, prec)
		while index > = 0 :
			tokens = reduce_binary_infix(tokens, index, ops)
			index = find_op(tokens, prec)
	return tokens
----------------------------------------

def evaluate(tokens, ops, precedence) :
	while len(tokens) > 1 :
		for prec in precedence :
			index = find_op(tokens, prec)
			if index > = 0 :
				reduce_binary_infix(tokens, index, ops)
				break
	return tokens
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
0
Gpt3D_Clone912_0.py 1 11
Gpt3D_Clone912_0.py 13 24

----------------------------------------

def countWords(s) :
	d = {}
	for word in s.split() :
		try :
			d [word] += 1
		except KeyError :
			d [word] = 1
	return d
----------------------------------------

def countWords(s):
	d = {}
	split_s = s.split()
	x = 0
	while x < len(split_s):
		if split_s[x] in d:
			d[split_s[x]] += 1
		else:
			d[split_s[x]] = 1
		x += 1
	return d
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
918
0
Gpt3D_Clone918_0.py 1 15
Gpt3D_Clone918_0.py 17 51

----------------------------------------

def main() :
	pygame.init()
	white = (255, 255, 255)
	red = (255, 0, 0)
	gameDisplay = pygame.display.set_mode((600, 800))
	gameExit = False
	x = 0
	y = 0
	w = 25
	h = 25
	sobj = shape(white, 0, 0, 25, 25)
	sobj.draw_rect(gameDisplay)
----------------------------------------

def main() :
	pygame.init()
	white = (255, 255, 255)
	red = (255, 0, 0)
	gameDisplay = pygame.display.set_mode((600, 800))
	gameExit = False
	x = 0
	y = 0
	w = 25
	h = 25
	sobj = shape(white, 0, 0, w, h)
	sobj.draw_rect(gameDisplay)
	while not gameExit :
		for event in pygame.event.get() :
			if event.type == pygame.QUIT :
				gameExit = True
			elif event.type == pygame.KEYDOWN :
				if event.key == pygame.K_LEFT :
					x -= 10
				elif event.key == pygame.K_RIGHT :
					x += 10
				elif event.key == pygame.K_UP :
					y -= 20
				elif event.key == pygame.K_DOWN :
					y +=20
		gameDisplay.fill(red)
		sobj.change_position(x, y)
		sobj.draw_rect(gameDisplay)
		pygame.display.update()
	pygame.quit()
	quit()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
918
1
Gpt3D_Clone918_1.py 1 15
Gpt3D_Clone918_1.py 17 49

----------------------------------------

def main() :
	pygame.init()
	white = (255, 255, 255)
	red = (255, 0, 0)
	gameDisplay = pygame.display.set_mode((600, 800))
	gameExit = False
	x = 0
	y = 0
	w = 25
	h = 25
	sobj = shape(white, 0, 0, 25, 25)
	sobj.draw_rect(gameDisplay)
----------------------------------------

def main() :
	pygame.init()
	white = (255, 255, 255)
	red = (255, 0, 0)
	gameDisplay = pygame.display.set_mode((600, 800))
	gameExit = False
	x = 0
	y = 0
	sobj = shape(white, 0, 0, 25, 25)
	sobj.draw_rect(gameDisplay)
	while not gameExit :
		for event in pygame.event.get() :
			if event.type == pygame.QUIT :
				gameExit = True
			elif event.type == pygame.KEYDOWN :
				if event.key == pygame.K_LEFT :
					x -= 10
				elif event.key == pygame.K_RIGHT :
					x += 10
				elif event.key == pygame.K_UP :
					y -= 10
				elif event.key == pygame.K_DOWN :
					y += 10
		gameDisplay.fill(red)
		sobj.change_position(x, y)
		sobj.draw_rect(gameDisplay)
		pygame.display.update()
	pygame.quit()
	quit()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
918
2
Gpt3D_Clone918_2.py 1 15
Gpt3D_Clone918_2.py 17 47

----------------------------------------

def main() :
	pygame.init()
	white = (255, 255, 255)
	red = (255, 0, 0)
	gameDisplay = pygame.display.set_mode((600, 800))
	gameExit = False
	x = 0
	y = 0
	w = 25
	h = 25
	sobj = shape(white, 0, 0, 25, 25)
	sobj.draw_rect(gameDisplay)
----------------------------------------

def main() :
	pygame.init()
	white = (255, 255, 255)
	red = (255, 0, 0)
	gameDisplay = pygame.display.set_mode((600, 800))
	gameExit = False
	x = 0
	y = 0
	w = 25
	h = 25
	sobj = shape(white, 0, 0, 25, 25)
	sobj.draw_rect(gameDisplay)
	while not gameExit :
		for event in pygame.event.get() :
			if event.type == pygame.QUIT :
				gameExit = True
			elif event.type == pygame.KEYDOWN :
				if event.key == pygame.K_LEFT :
					x -= 10
				elif event.key == pygame.K_RIGHT :
					x += 10
		gameDisplay.fill(red)
		sobj.change_position(x, y)
		sobj.draw_rect(gameDisplay)
		pygame.display.update()
	pygame.quit()
	quit()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
0
Gpt3D_Clone919_0.py 1 8
Gpt3D_Clone919_0.py 10 20

----------------------------------------

def reverseParentheses(s) :
	assert '(' in s and ')' in s
	while '(' in s :
		reverseParentheses(s)
	return s
----------------------------------------

def reverseParentheses(s):
	assert '(' in s and ')' in s
	while True:
		open_pos = s.find('(')
		if open_pos == -1:
			return s
		close_pos = s.find(')', open_pos)
		inner = s[open_pos+1:close_pos]
		inner_rev = inner[::-1]
		s = s[:open_pos] + inner_rev + s[close_pos+1:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
1
Gpt3D_Clone919_1.py 1 8
Gpt3D_Clone919_1.py 10 20

----------------------------------------

def reverseParentheses(s) :
	assert '(' in s and ')' in s
	while '(' in s :
		reverseParentheses(s)
	return s
----------------------------------------

def reverseParentheses(s):
	if '(' not in s or ')' not in s:
		return s
	else:
		open_pos = s.find('(')
		close_pos = s.find(')', open_pos)
		inner = s[open_pos+1:close_pos]
		inner_rev = inner[::-1]
		s = s[:open_pos] + inner_rev + s[close_pos+1:]
		return reverseParentheses(s)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
2
Gpt3D_Clone919_2.py 1 8
Gpt3D_Clone919_2.py 10 19

----------------------------------------

def reverseParentheses(s) :
	assert '(' in s and ')' in s
	while '(' in s :
		reverseParentheses(s)
	return s
----------------------------------------

def reverseParentheses(s):
	assert '(' in s and ')' in s
	while '(' in s and ')' in s:
		open_pos = s.find('(')
		close_pos = s.find(')', open_pos)
		inner = s[open_pos+1:close_pos]
		inner_rev = ''.join(reversed(inner))
		s = s[:open_pos] + inner_rev + s[close_pos+1:]
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
3
Gpt3D_Clone919_3.py 1 8
Gpt3D_Clone919_3.py 10 19

----------------------------------------

def reverseParentheses(s) :
	assert '(' in s and ')' in s
	while '(' in s :
		reverseParentheses(s)
	return s
----------------------------------------

def reverseParentheses(s):
	assert '(' in s and ')' in s
	while s.find('(') != -1:
		open_pos = s.find('(')
		close_pos = s.find(')', open_pos)
		inner = s[open_pos+1:close_pos]
		inner_rev = inner[::-1]
		s = s[:open_pos] + inner_rev + s[close_pos+1:]
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
91
0
Gpt3D_Clone91_0.py 1 8
Gpt3D_Clone91_0.py 10 15

----------------------------------------

def length_of_string(mystring) :
	if type(mystring) is int :
		return "invalid entry"
	else :
		return len(mystring)
----------------------------------------

def length_of_string(argument):
    try:
        return len(argument)
    except TypeError:
        return "invalid entry"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
0
Gpt3D_Clone921_0.py 1 8
Gpt3D_Clone921_0.py 10 18

----------------------------------------

def readlines(self) :
	lines = []
	for line in iter(self.readline, '') :
		lines.append(line)
	return lines
----------------------------------------

def readlines(self):
        lines = []
        for line in self.readline:
                temp_line = line
                if temp_line == '' :
                        break
                lines.append(temp_line)
        return lines
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
0
Gpt3D_Clone930_0.py 1 8
Gpt3D_Clone930_0.py 10 19

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique(l) : 
	S = set()
	n = 0
	for x in l :
		if x not in S : 
			S.add(x)
			l[n] = x 
			n += 1 
	del l[n:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
1
Gpt3D_Clone930_1.py 1 8
Gpt3D_Clone930_1.py 10 17

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique(l) : 
	n = 0
	for x in l : 
		if x not in l[:n] : 
			l[n] = x 
			n += 1 
	del l[n:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
0
Gpt3D_Clone931_0.py 1 8
Gpt3D_Clone931_0.py 10 17

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique(l):
	n = 0
	for x in l:
		if x not in l[:n]:
			l[n] = x
			n += 1
	del l[n:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
1
Gpt3D_Clone931_1.py 1 8
Gpt3D_Clone931_1.py 10 16

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique(l):
	s = set()
	for x in l:
		if x not in s:
			s.add(x)
	l = list(s)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
0
Gpt3D_Clone932_0.py 1 8
Gpt3D_Clone932_0.py 10 18

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique(l):
    s = {}; n = 0
    for x in l:
        if x not in s: 
            s.add(x); 
            l[n] = x; 
            n += 1
    del l[n:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
2
Gpt3D_Clone932_2.py 1 8
Gpt3D_Clone932_2.py 10 16

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique(l):
    s = {}; n = 0;
    for x in l:
        if x not in s: s.add(x); l[n] = x; n += 1;
    l = l[0:n];
    
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
1
Gpt3D_Clone933_1.py 1 11
Gpt3D_Clone933_1.py 13 21

----------------------------------------

def unique(items) :
	seen = set()
	for i in xrange(len(items) - 1, - 1, - 1) :
		it = items [i]
		if it in seen :
			del items [i]
		else :
			seen.add(it)
----------------------------------------

def unique(items) :
	seen = set(items)
	for i in range(len(items) - 1, - 1, - 1) :
		it = items[i]
		if it not in seen :
			seen.add(it)
		else :
			del items[i]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
2
Gpt3D_Clone935_2.py 1 17
Gpt3D_Clone935_2.py 19 27

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list) :
	s = set()
	output = []
	for x in list :
		if x not in s :
			s.add(x)
			output.append(x)
	return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
3
Gpt3D_Clone935_3.py 1 17
Gpt3D_Clone935_3.py 19 27

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		if x not in s:
			s[x] = 1
			output.append(x)
	return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
0
Gpt3D_Clone936_0.py 1 17
Gpt3D_Clone936_0.py 19 27

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list) :
	dictionary = {}
	output = []
	for x in list :
		if (x not in dictionary) :
			dictionary[x] = 0
			output.append(x)
	return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
1
Gpt3D_Clone936_1.py 1 17
Gpt3D_Clone936_1.py 19 28

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list) :
	unique_elements = set()
	output = []
	for x in list :
		if (x not in unique_elements) :
			unique_elements.add(x)
			output.append(x)
	return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
2
Gpt3D_Clone937_2.py 1 17
Gpt3D_Clone937_2.py 19 24

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def set_item_count(dictionary, item):
    if (dictionary.has_key(item)) :
        count = dictionary[item] + 1
    else:
        count = 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
3
Gpt3D_Clone937_3.py 1 17
Gpt3D_Clone937_3.py 19 30

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list):
    s = {}
    output = []
    for x in list :
        set_item_count(s, x)
    for x in list :
        count = reset_item_count(s, x)
        if (count > 0) :
            output.append(x)
    return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
4
Gpt3D_Clone937_4.py 1 17
Gpt3D_Clone937_4.py 19 30

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list):
    s = {}
    output = []
    for x in list :
        set_item_count(s, x)
    for x in list :
        count = reset_item_count(s, x)
        if (count > 0) :
            output.append(x)
    return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
5
Gpt3D_Clone937_5.py 1 17
Gpt3D_Clone937_5.py 19 24

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def set_item_count(dictionary, item):
    if (dictionary.has_key(item)) :
        count = dictionary[item] + 1
    else:
        count = 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
6
Gpt3D_Clone937_6.py 1 17
Gpt3D_Clone937_6.py 19 30

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list):
    s = {}
    output = []
    for x in list :
        set_item_count(s, x)
    for x in list :
        count = reset_item_count(s, x)
        if (count > 0) :
            output.append(x)
    return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
7
Gpt3D_Clone937_7.py 1 17
Gpt3D_Clone937_7.py 19 24

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def set_item_count(dictionary, item):
    if (dictionary.has_key(item)) :
        count = dictionary[item] + 1
    else:
        count = 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
8
Gpt3D_Clone937_8.py 1 17
Gpt3D_Clone937_8.py 19 30

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list):
    s = {}
    output = []
    for x in list :
        set_item_count(s, x)
    for x in list :
        count = reset_item_count(s, x)
        if (count > 0) :
            output.append(x)
    return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
9
Gpt3D_Clone937_9.py 1 17
Gpt3D_Clone937_9.py 19 30

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique(list):
    s = {}
    output = []
    for x in list :
        set_item_count(s, x)
    for x in list :
        count = reset_item_count(s, x)
        if (count > 0) :
            output.append(x)
    return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
0
Gpt3D_Clone945_0.py 1 9
Gpt3D_Clone945_0.py 11 25

----------------------------------------

def download_file(url) :
	local_filename = url.split('/') [- 1]
	r = requests.get(url, stream = True)
	with open(local_filename, 'wb') as f :
		shutil.copyfileobj(r.raw, f)
	return local_filename
----------------------------------------

def download_file(url) :
	local_filename = url.split('/') [- 1]
	try:
		r = requests.get(url, stream = True)
	except Exception as e:
		logger.error('Download error: {}.'.format(e))
		return
	try:
		with open(local_filename, 'wb') as f :
			shutil.copyfileobj(r.raw, f)
	except IOError as e:
		logger.error('Write file error: {}.'.format(e))
	return local_filename
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
949
0
Gpt3D_Clone949_0.py 1 8
Gpt3D_Clone949_0.py 10 27

----------------------------------------

def add(self, val) :
	if (self.root == None) :
		self.root = Node(val)
	else :
		self._add(val, self.root)
----------------------------------------

def add(self, val): 
	if (self.root == None): 
		self.root = Node(val) 
	else: 
		parent = None 
		current = self.root 
		while (current != None): 
			parent = current 
			if (val < current.value): 
				current = current.left 
			else: 
				current = current.right 
		if (val < parent.value): 
			parent.left=Node(val) 
		else: 
			parent.right=Node(val) 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
949
1
Gpt3D_Clone949_1.py 1 8
Gpt3D_Clone949_1.py 10 21

----------------------------------------

def add(self, val) :
	if (self.root == None) :
		self.root = Node(val)
	else :
		self._add(val, self.root)
----------------------------------------

def _add(self,val,node): 
	if (val < node.value): 
		if (node.left != None): 
			self._add(val, node.left) 
		else: 
			node.left = Node(val) 
	else: 
		if (node.right != None): 
			self._add(val, node.right) 
		else: 
			node.right = Node(val)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
958
0
Gpt3D_Clone958_0.py 1 9
Gpt3D_Clone958_0.py 11 21

----------------------------------------

def md5sum(filename) :
	with open(filename, mode = 'rb') as f :
		d = hashlib.md5()
		for buf in iter(partial(f.read, 128), b'') :
			d.update(buf)
	return d.hexdigest()
----------------------------------------

def md5sum(filename) :
	f = open(filename, mode = 'rb') 
	d = hashlib.md5()
	while(True) :
		buf = f.read(128)
		if len(buf) == 0 :
			break
		d.update(buf)
	f.close()
	return d.hexdigest()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
958
1
Gpt3D_Clone958_1.py 1 9
Gpt3D_Clone958_1.py 11 22

----------------------------------------

def md5sum(filename) :
	with open(filename, mode = 'rb') as f :
		d = hashlib.md5()
		for buf in iter(partial(f.read, 128), b'') :
			d.update(buf)
	return d.hexdigest()
----------------------------------------

def md5sum(filename) :
	f = open(filename, mode = 'rb') 
	d = hashlib.md5()
	while True:
		buf = f.read(128)
		if not buf :
			break
		d.update(buf)
	f.close()
	return d.hexdigest()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
964
0
Gpt3D_Clone964_0.py 1 9
Gpt3D_Clone964_0.py 11 22

----------------------------------------

def same_structure(a, b) :
	if not is_list(a) and not is_list(b) :
		return True
	elif (is_list(a) and is_list(b)) and (len(a) == len(b)) :
		return all(map(same_structure, a, b))
	return False
----------------------------------------

def same_structure(a, b) :
	if not is_list(a) and not is_list(b) :
		return True
	elif (is_list(a) and is_list(b)) and (len(a) == len(b)) :
		allMatch = True
		for i in range(len(a)): 
  			if same_structure(a[i], b[i]) == False: 
    			allMatch = False
		return allMatch
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
2
Gpt3D_Clone965_2.py 1 12
Gpt3D_Clone965_2.py 14 25

----------------------------------------

def same_structure(a, b) :
	if a == [] or b == [] :
		return a == b
	elif is_list(a [0]) ! = is_list(b [0]) :
		return False
	elif not is_list(a [0]) :
		return same_structure(a [1 :], b [1 :])
	else :
		return same_structure(a [0], b [0]) and same_structure(a [1 :], b [1 :])
----------------------------------------

def same_structure(a, b) :
	if not a and not b :
		return True
	elif not is_list(a[0]) and not is_list(b[0]) :
		return same_structure(a[1:], b[1:])
	elif is_list(a[0]) and is_list(b[0]):
		return same_structure(a[0], b[0]) and same_structure(a[1:], b[1:])
	else :
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
3
Gpt3D_Clone965_3.py 1 12
Gpt3D_Clone965_3.py 14 21

----------------------------------------

def same_structure(a, b) :
	if a == [] or b == [] :
		return a == b
	elif is_list(a [0]) ! = is_list(b [0]) :
		return False
	elif not is_list(a [0]) :
		return same_structure(a [1 :], b [1 :])
	else :
		return same_structure(a [0], b [0]) and same_structure(a [1 :], b [1 :])
----------------------------------------

def same_structure(a, b) :
	if a == [] and b == [] :
		return True 
	elif is_list(a[0]) == is_list(b[0]) :
		return same_structure(a[0], b[0]) and same_structure(a[1:], b[1:])
	else :
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
0
Gpt3D_Clone966_0.py 1 9
Gpt3D_Clone966_0.py 11 16

----------------------------------------

def read_logfile(master_log) :
	last_line_holder = []
	for line in master_log :
		if line.contains('[76:Health]:') :
			last_line_holder.append(line)
	print (last_line_holder [- 1])
----------------------------------------

def read_logfile(master_log) :
	for line in master_log :
		if '[76:Health]:' in line :
			print (line [- 1])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
967
0
Gpt3D_Clone967_0.py 1 9
Gpt3D_Clone967_0.py 11 19

----------------------------------------

def obj_get(self, request = None, ** kwargs) :
	try :
		info = Info.get(kwargs ['pk'])
	except ResourceNotFound :
		raise ObjectDoesNotExist('Sorry, no results on that page.')
	return info
----------------------------------------

def obj_get(self, **kwargs):
    data = []
    try:
        info = Info.objects.get(**kwargs)
        data.append(info)
    except ResourceNotFound:
        raise ObjectDoesNotExist('Sorry, no results on that page.')
    return data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
0
Gpt3D_Clone968_0.py 1 15
Gpt3D_Clone968_0.py 17 35

----------------------------------------

def qsort(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : i += 1
		while l [j] > pivot : j -= 1
		if i < = j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort(l, fst, j)
	qsort(l, i, lst)
----------------------------------------

def qsort(arr, first, last):
	if first >= last:
		return
	i = first
	j = last
	mid = arr[random.randint(first, last)]
	while i <= j:
		while arr[i] < mid:
			i += 1
		while arr[j] > mid:
			j -= 1
		if i <= j:
			arr[i], arr[j] = arr[j], arr[i]
			i += 1
			j -= 1
	qsort(arr, first, j)
	qsort(arr, i, last)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
1
Gpt3D_Clone968_1.py 1 15
Gpt3D_Clone968_1.py 17 34

----------------------------------------

def qsort(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : i += 1
		while l [j] > pivot : j -= 1
		if i < = j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort(l, fst, j)
	qsort(l, i, lst)
----------------------------------------

def qsort(array, lower, higher): 
    if lower >= higher: 
        return 
    i, j = lower, higher 
    mid = array[random.randint(lower, higher)] 
    while i <= j: 
        while array[i] < mid: 
            i += 1
        while array[j] > mid: 
            j -= 1 
        if i <= j: 
            array[i], array[j] = array[j], array[i] 
            i += 1 
            j -= 1
    qsort(array, lower, j) 
    qsort(array, i, higher)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
1
Gpt3D_Clone96_1.py 1 9
Gpt3D_Clone96_1.py 11 20

----------------------------------------

def SumOdds(x, y) :
	count = 0
	for i in range(x, y + 1) :
		if i % 2 == 1 :
			count = count + i
	print (count)
----------------------------------------

def SumOdds(x, y) :
	count = 0
	index = x
	while index <= y :
		if index % 2 == 1 :
			count += index
		index += 1
	print (count)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
973
0
Gpt3D_Clone973_0.py 1 8
Gpt3D_Clone973_0.py 10 15

----------------------------------------

def factorial(n) :
	base = 1
	for i in range(n, 0, - 1) :
		base = base * i
	print base
----------------------------------------

def factorial(n):
	if n == 0 or n == 1:
		return 1
	else:
		return n * factorial(n - 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
0
Gpt3D_Clone974_0.py 1 10
Gpt3D_Clone974_0.py 12 21

----------------------------------------

def factorial(n) :
	result = 1
	i = n * (n - 1)
	while n > = 1 :
		result = result * n
		n = n - 1
	return result
----------------------------------------

def factorial(n) :
	if n == 0 :
		return 1
	else :
		result = 1
		rng = range(1, n+1)
		for x in rng :
			result = result * x
		return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
0
Gpt3D_Clone979_0.py 1 8
Gpt3D_Clone979_0.py 10 16

----------------------------------------

def wrapper(arg1) :
	try :
		return func(arg1)
	except MyException as e :
		print "Error:", e.args
----------------------------------------

def wrapper(arg1) :
	try :
		res = func(arg1)
		return res
	except MyException as e :
		print("Error:", e.args)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
0
Gpt3D_Clone97_0.py 1 17
Gpt3D_Clone97_0.py 19 30

----------------------------------------

def ordinal(num) :
	ldig = num % 10
	l2dig = (num / / 10) % 10
	if l2dig == 1 :
		suffix = 'th'
	elif ldig == 1 :
		suffix = 'st'
	elif ldig == 2 :
		suffix = 'nd'
	elif ldig == 3 :
		suffix = 'rd'
	else :
		suffix = 'th'
	return '%d%s' % (num, suffix)
----------------------------------------

def ordinal_4(num) :
	suffix = 'th'
	ldig = num % 10
	l2dig = (num // 10) % 10
	if l2dig != 1 and ldig == 1 :
		suffix = 'st'
	elif l2dig != 1 and ldig == 2 :
		suffix = 'nd'
	elif l2dig != 1 and ldig == 3 :
		suffix = 'rd'
	return '%d%s' % (num, suffix)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
2
Gpt3D_Clone981_2.py 1 8
Gpt3D_Clone981_2.py 10 17

----------------------------------------

def myfunc(orientation, l, w) :
	if 1 < = orientation < = 8 :
		a = (- w, - l, - w, - l, w, l, w, l) [orientation - 1]
		b = (l, w, - l, - w) [(orientation - 1) % 4]
	return a, b
----------------------------------------

def myfunc(orientation, l, w):
	if 1 <= orientation <= 8:
		x, y = (- w, - l, - w, - l, w, l, w, l), (l, w, - l, - w) 
		a = x[orientation - 1]
		b = y[(orientation -1) % 4]
	return a, b
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
1
Gpt3D_Clone982_1.py 1 8
Gpt3D_Clone982_1.py 10 18

----------------------------------------

def fileCount(path, extension) :
	count = 0
	for root, dirs, files in os.walk(path) :
		count += sum(f.endswith(extension) for f in files)
	return count
----------------------------------------

def fileCount(path, extension):
	count = 0
	file_list = os.listdir(path)
	for filename in file_list:
		if filename.endswith(extension):
			count += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
986
0
Gpt3D_Clone986_0.py 1 11
Gpt3D_Clone986_0.py 13 21

----------------------------------------

def __str__(self) :
	if self.cards :
		rep = ""
		for card in self.cards :
			rep += str(card) + "\t"
	else :
		rep = "<empty>"
	return rep
----------------------------------------

def __str__(self):
     st=""
     if len(self.cards)==0:
         st="<empty>"
     else:
          for i in self.cards:
               st=st+str(i)+"\t"
     return st
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
991
1
Gpt3D_Clone991_1.py 1 21
Gpt3D_Clone991_1.py 23 26

----------------------------------------

def spiral(X, Y) :
	x = y = 0
	dx = 0
	dy = - 1
	for i in range(max(X, Y) ** 2) :
		if (- X / 2 < x < = X / 2) and (- Y / 2 < y < = Y / 2) :
			yield x, y
		if x == y or (x < 0 and x == - y) or (x > 0 and x == 1 - y) :
			dx, dy = - dy, dx
		x, y = x + dx, y + dy
	spiral_matrix_size = 5
	my_list = list(range(spiral_matrix_size ** 2))
	my_list = [my_list [x : x + spiral_matrix_size] for x in range(0, len(my_list), spiral_matrix_size)]
	print (my_list)
	for i, (x, y) in enumerate(spiral(spiral_matrix_size, spiral_matrix_size)) :
		diff = int(spiral_matrix_size / 2)
		my_list [x + diff] [y + diff] = i
	print (my_list)
----------------------------------------

def matrix_print(my_list):
	for row in my_list:
    		print(row)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
1
Gpt3D_Clone992_1.py 1 10
Gpt3D_Clone992_1.py 12 19

----------------------------------------

def rec(chk, i) :
	print (locals())
	i += 1
	chk = chk + [i]
	if i ! = 4 :
		rec(chk, i)
		print (locals())
----------------------------------------

def rec(chk, i):
    if i >= 3:
        print(locals())
    else:
        print(locals())
        rec(chk + [i + 1], i + 1)
        print(locals())
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
2
Gpt3D_Clone992_2.py 1 10
Gpt3D_Clone992_2.py 12 18

----------------------------------------

def rec(chk, i) :
	print (locals())
	i += 1
	chk = chk + [i]
	if i ! = 4 :
		rec(chk, i)
		print (locals())
----------------------------------------

def rec(chk, i) :
    print(locals())
    if i + 1 != 4: 
        rec(chk + [i + 1], i + 1)
        print(locals())
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
995
0
Gpt3D_Clone995_0.py 1 13
Gpt3D_Clone995_0.py 15 26

----------------------------------------

def dfs(graph, node) :
	print '{0}_start'.format(node)
	if node not in graph :
		print '{0}_end'.format(node)
		return
	for i, nd in enumerate(graph [node]) :
		if i > 0 :
			print '{0}_middle'.format(node)
		dfs(graph, nd)
	print '{0}_end'.format(node)
----------------------------------------

def dfs(graph, node) :
    result = node + '_start'
    if node not in graph :
        result = node + '_end'
        return 
    for i, nd in enumerate(graph [node]):
        if i > 0 :
            result = result + node + '_middle'
        result = result + dfs(graph, nd)
    result = result + node +'_end'
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
995
2
Gpt3D_Clone995_2.py 1 13
Gpt3D_Clone995_2.py 15 26

----------------------------------------

def dfs(graph, node) :
	print '{0}_start'.format(node)
	if node not in graph :
		print '{0}_end'.format(node)
		return
	for i, nd in enumerate(graph [node]) :
		if i > 0 :
			print '{0}_middle'.format(node)
		dfs(graph, nd)
	print '{0}_end'.format(node)
----------------------------------------

def dfs(graph, node) :
	result = '{0}_start'.format(node)
	if node not in graph :
		result = '{0}_end'.format(node)
		return
	for i, nd in enumerate(graph [node]) :
		if i > 0 :
			result = result + '{0}_middle'.format(node)
		result = result + dfs(graph, nd)
	result = result + '{0}_end'.format(node)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
0
Gpt3D_Clone999_0.py 1 9
Gpt3D_Clone999_0.py 11 19

----------------------------------------

def __setattr__(self, name, value) :
	if name not in self._allowed_attrs :
		raise AttributeError(
		"Cannot set attribute {!r} on type {}".format(
		name, self.__class__.__name__))
	super(RestrictedAttributesObject, self).__setattr__(name, value)
----------------------------------------

def __setattr__(self, name, value):
	'''Raise AttributeError if name is not in allowed_attrs'''
	if name not in self._allowed_attrs:
		raise AttributeError("Cannot set attribute {!r} on type {}".format(
			name,
			self.__class__.__name__
		))
	type.__setattr__(self, name, value)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
1
Gpt3D_Clone999_1.py 1 9
Gpt3D_Clone999_1.py 11 21

----------------------------------------

def __setattr__(self, name, value) :
	if name not in self._allowed_attrs :
		raise AttributeError(
		"Cannot set attribute {!r} on type {}".format(
		name, self.__class__.__name__))
	super(RestrictedAttributesObject, self).__setattr__(name, value)
----------------------------------------

def __setattr__(self, name, value):
	'''Raise AttributeError if name is not in allowed_attrs'''
	if name not in self._allowed_attrs:
		raise AttributeError("Cannot set attribute {!r} on type {}".format(
			name,
			self.__class__.__name__
		))
	object.__setattr__(self, name, value)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
0
Gpt3D_Clone9_0.py 1 10
Gpt3D_Clone9_0.py 12 28

----------------------------------------

def shift_n_letters(letter, n) :
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in list(message) :
		index = (char_array.index(ch) + n) % 26
		result += char_array [index]
	return result
----------------------------------------

def shift_n_letters(letter, n):
	shifted_string = ""
	length = len(message)
	
	for i in range(length):
		ch = ord(message[i])
		shifted_ch = ch
		if (ch <= 122 and ch >= 97):
			shifted_ch = ch + n
			if(shifted_ch > 122):
				shifted_ch -= 26
			elif (shifted_ch < 97):
				shifted_ch += 26
		shifted_string += chr(shifted_ch)
		
	return shifted_string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
1
Gpt3D_Clone9_1.py 1 10
Gpt3D_Clone9_1.py 12 24

----------------------------------------

def shift_n_letters(letter, n) :
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in list(message) :
		index = (char_array.index(ch) + n) % 26
		result += char_array [index]
	return result
----------------------------------------

def shift_n_letters(letter, n):
	shifted_string = ""
	length = len(message) 
	
	for i in range(length):
		ch = ord(message[i])
		shifted_ch = ch
		if (ch <= 122 and ch >= 97):
			shifted_ch = (ch - 97 + n) % 26 + 97
		shifted_string += chr(shifted_ch)
		
	return shifted_string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
2
Gpt3D_Clone9_2.py 1 10
Gpt3D_Clone9_2.py 12 24

----------------------------------------

def shift_n_letters(letter, n) :
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in list(message) :
		index = (char_array.index(ch) + n) % 26
		result += char_array [index]
	return result
----------------------------------------

def shift_n_letters(letter, n):
	shifted_string = ""
	length = len(message) 
	
	for i in range(length):
		ch = ord(message[i])
		shifted_ch = ch
		if ( ch <= 122 and ch >= 97):
			shifted_ch = (ch - 97 + n) % 26 + 97
		shifted_string += chr(shifted_ch)
		
	return shifted_string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
3
Gpt3D_Clone9_3.py 1 10
Gpt3D_Clone9_3.py 12 24

----------------------------------------

def shift_n_letters(letter, n) :
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in list(message) :
		index = (char_array.index(ch) + n) % 26
		result += char_array [index]
	return result
----------------------------------------

def shift_n_letters(letter, n):
	shifted_string = ""
	length = len(message) 
	
	for i in range(length):
		ch = ord(message[i])
		shifted_ch = ch
		if (ch <= 122 and ch >= 97):
			shifted_ch = (shifted_ch - 97 + n) % 26 + 97
		shifted_string += chr(shifted_ch)
		
	return shifted_string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
1
Gpt3D_Clone0_1.py 1 14
Gpt3D_Clone0_1.py 16 30

----------------------------------------

def second_largest(numbers) :
	count = 0
	m1 = m2 = float('-inf')
	for x in numbers :
		count += 1
		if x > m2 :
			if x > = m1 :
				m1, m2 = x, m1
			else :
				m2 = x
	return m2 if count > = 2 else None
----------------------------------------

def second_largest(numbers) :
	count = 0
	m1 = m2 = float('-inf')
	for x in numbers :
		count += 1
		if x > m2 :
			if x >= m1 :
				m1, m2 = x, m1
			else :
				m2 = x
	if count > = 2 :
		return m2 
	else :
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
100
0
Gpt3D_Clone100_0.py 1 15
Gpt3D_Clone100_0.py 17 32

----------------------------------------

def write(self, data) :
	if data [0 : LOG_IDR_LENGTH] == LOG_IDENTIFIER :
		self.fl.write("%s\n" % data [LOG_IDR_LENGTH :])
		self.stdout.write(data [LOG_IDR_LENGTH :])
	else :
		timestamp = str(datetime.datetime.now())
		if 'Traceback' == data [0 : 9] :
			data = '%s: %s' % (timestamp, data)
			self.fl.write(data)
		else :
			self.fl.write(data)
		self.stdout.write(data)
----------------------------------------

def write(self, data):
	if data[0 : LOG_IDR_LENGTH] == LOG_IDENTIFIER:
		self.fl.write("%s\n" % data[LOG_IDR_LENGTH : ])
		self.stdout.write(data[LOG_IDR_LENGTH : ])
	else:
		timestamp = str(datetime.datetime.now())
		date_val = timestamp.split(" ")[0] 
		time_val = timestamp.split(" ")[1]
		if 'Traceback' == data[0 : 9]:
			data = '%s %s: %s' % (date_val, time_val, data)
			self.fl.write(data)
		else:
			data = '%s %s: %s' % (date_val, time_val, data)
			self.fl.write(data)
			self.stdout.write(data)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
100
1
Gpt3D_Clone100_1.py 1 15
Gpt3D_Clone100_1.py 17 31

----------------------------------------

def write(self, data) :
	if data [0 : LOG_IDR_LENGTH] == LOG_IDENTIFIER :
		self.fl.write("%s\n" % data [LOG_IDR_LENGTH :])
		self.stdout.write(data [LOG_IDR_LENGTH :])
	else :
		timestamp = str(datetime.datetime.now())
		if 'Traceback' == data [0 : 9] :
			data = '%s: %s' % (timestamp, data)
			self.fl.write(data)
		else :
			self.fl.write(data)
		self.stdout.write(data)
----------------------------------------

def write(self, data) :
	if data [0 : LOG_IDR_LENGTH] == LOG_IDENTIFIER :
		output_data = data [LOG_IDR_LENGTH :]
		self.fl.write("%s\n" % output_data)
		self.stdout.write(output_data)
	else :
		now = datetime.datetime.now()
		timestamp = str(now)
		if 'Traceback' == data [0 : 9] :
			new_data = '%s: %s' % (timestamp, data)
			self.fl.write(new_data)
		else :
			self.fl.write(data)
		self.stdout.write(data)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
100
2
Gpt3D_Clone100_2.py 1 15
Gpt3D_Clone100_2.py 17 29

----------------------------------------

def write(self, data) :
	if data [0 : LOG_IDR_LENGTH] == LOG_IDENTIFIER :
		self.fl.write("%s\n" % data [LOG_IDR_LENGTH :])
		self.stdout.write(data [LOG_IDR_LENGTH :])
	else :
		timestamp = str(datetime.datetime.now())
		if 'Traceback' == data [0 : 9] :
			data = '%s: %s' % (timestamp, data)
			self.fl.write(data)
		else :
			self.fl.write(data)
		self.stdout.write(data)
----------------------------------------

def write(self, data):
	if data[0:LOG_IDR_LENGTH] == LOG_IDENTIFIER:
		self.fl.write("%s\n" % data[LOG_IDR_LENGTH : ])
		self.stdout.write(data[LOG_IDR_LENGTH : ])
	else:
		timestamp = str(datetime.datetime.now())
		date_str = timestamp.split(" ")[0]
		time_str = timestamp.split(" ")[1]
		data = '%s %s: %s' % (date_str, time_str, data)
		self.fl.write(data)
		self.stdout.write(data)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
101
1
Gpt3D_Clone101_1.py 1 10
Gpt3D_Clone101_1.py 12 19

----------------------------------------

def num_input(prompt, error) :
	while True :
		result = raw_input(prompt)
		for candidate in (int, float) :
			try : return candidate(result)
			except ValueError : pass
		print error
----------------------------------------

def num_input(prompt, error) :
	while True :
		result = eval(input(prompt))
		for candidate in (int, float) :
			try : return candidate(result)
			except ValueError : pass
		print(error)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
103
0
Gpt3D_Clone103_0.py 1 9
Gpt3D_Clone103_0.py 11 17

----------------------------------------

def num_input(s) :
	while True :
		try :
			return decimal.Decimal(raw_input(s))
		except decimal.InvalidOperation, e :
			print e.message
----------------------------------------

def num_input(s) :
	while True :
		try :
			return float(input(s))
		except ValueError, e :
			print e.message
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
103
2
Gpt3D_Clone103_2.py 1 9
Gpt3D_Clone103_2.py 11 17

----------------------------------------

def num_input(s) :
	while True :
		try :
			return decimal.Decimal(raw_input(s))
		except decimal.InvalidOperation, e :
			print e.message
----------------------------------------

def num_input(s) :
	while True :
		try :
			return int(input(s))
		except ValueError, e :
			print e.message
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
105
0
Gpt3D_Clone105_0.py 1 14
Gpt3D_Clone105_0.py 16 28

----------------------------------------

def myfunc(lst) :
	ret = []
	a = b = lst [0]
	for el in lst [1 :] :
		if el == b + 1 :
			b = el
		else :
			ret.append(a if a == b else (a, b))
			a = b = el
	ret.append(a if a == b else (a, b))
	return ret
----------------------------------------

def myfunc(lst): 
	ret = [] 
	a = b = lst [0] 
	for el in lst [1:]: 
		if el != b+1: 
			ret.append(a if a == b else (a, b)) 
			a = b = el 
		else:
			b = el
	ret.append(a if a == b else (a, b)) 
	return ret 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
0
Gpt3D_Clone107_0.py 1 14
Gpt3D_Clone107_0.py 16 25

----------------------------------------

def main() :
	q = Queue()
	p1 = Process(target = f1, args = (q,))
	p1.start()
	p2 = Process(target = f2, args = (q,))
	p2.start()
	while True :
		try :
			print q.get()
		except :
			break
----------------------------------------

def main() :
	q = Queue()
	p1 = Process(target = f1, args = (q,))
	p1.start()
	p2 = Process(target= f2, args = (q,))
	p2.start()
	while True :
		data = q.get_nowait()
		print data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
2
Gpt3D_Clone107_2.py 1 14
Gpt3D_Clone107_2.py 16 25

----------------------------------------

def main() :
	q = Queue()
	p1 = Process(target = f1, args = (q,))
	p1.start()
	p2 = Process(target = f2, args = (q,))
	p2.start()
	while True :
		try :
			print q.get()
		except :
			break
----------------------------------------

def main3() :
  q = Queue()
  p1 = Process(target = f1, args = (q,))
  p2 = Process(target = f2, args = (q,))
  p1.start()
  p2.start()
  while q.empty() == False :
    print q.get()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
109
0
Gpt3D_Clone109_0.py 1 8
Gpt3D_Clone109_0.py 10 20

----------------------------------------

def Compare(left, ops, comparators) :
	for x, op, y in zip([left] + comparators [: - 1], ops, comparators) :
		if not op(x, y) :
			return False
	return True
----------------------------------------

def Compare(left, ops, comparators) :
	counter = 0
	for x, op, y in zip([left] + comparators [: - 1], ops, comparators) :
		if not op(x, y) :
			counter += 1
	if counter == 0:
    		return True
	else:
    		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
109
1
Gpt3D_Clone109_1.py 1 8
Gpt3D_Clone109_1.py 10 19

----------------------------------------

def Compare(left, ops, comparators) :
	for x, op, y in zip([left] + comparators [: - 1], ops, comparators) :
		if not op(x, y) :
			return False
	return True
----------------------------------------

def Compare(left, ops, comparators) :
	numIncorrect = 0
	for x, op, y in zip([left] + comparators [: - 1], ops, comparators) :
		if not op(x, y) :
			numIncorrect += 1
	if numIncorrect == 0:
    		return True
	elif numIncorrect > 0:
    		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
109
2
Gpt3D_Clone109_2.py 1 8
Gpt3D_Clone109_2.py 10 17

----------------------------------------

def Compare(left, ops, comparators) :
	for x, op, y in zip([left] + comparators [: - 1], ops, comparators) :
		if not op(x, y) :
			return False
	return True
----------------------------------------

def Compare(left, ops, comparators):
	for i in range(len(comparators)-1):
		x, op, y = left, ops[i], comparators[i]
		if not op(x, y):
			return False
	return True
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
0
Gpt3D_Clone10_0.py 1 10
Gpt3D_Clone10_0.py 12 20

----------------------------------------

def shift_n_letters(letter, n) :
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in list(message) :
		index = (char_array.index(ch) + n) % 26
		result += char_array [index]
	return result
----------------------------------------

def shift_n_letters(letter, n):
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for i in range(len(letter)):
		index = (char_array.index(letter[i]) + n) % 26
		result += char_array[index]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
1
Gpt3D_Clone10_1.py 1 10
Gpt3D_Clone10_1.py 12 19

----------------------------------------

def shift_n_letters(letter, n) :
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in list(message) :
		index = (char_array.index(ch) + n) % 26
		result += char_array [index]
	return result
----------------------------------------

def shift_n_letters(message, n):
	char_array = [ch for ch in range(97, 123)]
	result = ""
	for ch in list(message):
		index = (char_array.index(ch) + n) % 26
		result += chr(char_array[index])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
2
Gpt3D_Clone10_2.py 1 10
Gpt3D_Clone10_2.py 12 19

----------------------------------------

def shift_n_letters(letter, n) :
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in list(message) :
		index = (char_array.index(ch) + n) % 26
		result += char_array [index]
	return result
----------------------------------------

def shift_n_letters(letter, n):
	char_array = [chr(i) for i in range(97, 123)]
	result = ""
	for ch in letter:
		index = (ord(ch) - 97 + n) % 26
		result += char_array[index]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
112
0
Gpt3D_Clone112_0.py 1 14
Gpt3D_Clone112_0.py 16 27

----------------------------------------

def print_checked_items(self) :
	path = "/home/test1/checked.txt"
	mode = QtCore.QFile.Append if self.isWritten else QtCore.QFile.WriteOnly
	if len(self.items) > 0 :
		file = QtCore.QFile(path)
		if file.open(mode) :
			for item in self.items :
				print ('%s' % item.text())
				file.write(item.text() + "\n")
		file.close()
	print ("print checked items executed")
----------------------------------------

def print_checked_items(self):
    path = "/home/test1/checked.txt"
    mode = QtCore.QFile.WriteOnly if not self.isWritten else QtCore.QFile.Append
    if len(self.items) > 0:
        file = QtCore.QFile(path)
        if file.open(mode):
            for item in self.items:
                print('{0}'.format(item.text()))
                file.write(str(item.text()) + '\n')
        file.close()
    print('print checked items executed')
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
0
Gpt3D_Clone113_0.py 1 14
Gpt3D_Clone113_0.py 16 28

----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] ! = _tree.TREE_UNDEFINED :
		name = feature_name [node]
		threshold = tree_.threshold [node]
		print "{}if {} <= {}:".format(indent, name, threshold)
		recurse(tree_.children_left [node], depth + 1)
		print "{}else:  # if {} > {}".format(indent, name, threshold)
		recurse(tree_.children_right [node], depth + 1)
	else :
		print "{}return {}".format(indent, tree_.value [node])
----------------------------------------

def recurse(node, depth):
	indent = "  " * depth 
	if tree_.feature[node] != _tree.TREE_UNDEFINED:
		name = feature_name[node] 
		threshold = tree_.threshold[node]
		print("{}if {} <= {}:".format(indent, name, threshold))
		recurse(tree_.children_left[node], depth + 1)
		print("{}else:  # if {} > {}".format(indent, name, threshold))
		recurse(tree_.children_right[node], depth + 1)
	else:
		print("{}return {}".format(indent, tree_.value[node]))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
2
Gpt3D_Clone113_2.py 1 14
Gpt3D_Clone113_2.py 16 27

----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] ! = _tree.TREE_UNDEFINED :
		name = feature_name [node]
		threshold = tree_.threshold [node]
		print "{}if {} <= {}:".format(indent, name, threshold)
		recurse(tree_.children_left [node], depth + 1)
		print "{}else:  # if {} > {}".format(indent, name, threshold)
		recurse(tree_.children_right [node], depth + 1)
	else :
		print "{}return {}".format(indent, tree_.value [node])
----------------------------------------

def recurse(node, depth):
	indent = "   " * depth
	if tree_.feature[node] != _tree.TREE_UNDEFINED:
		name = feature_name[node]
		threshold = tree_.threshold[node]
		print('{}if {} <= {}:'.format(indent, name, threshold))
		recurse(tree_.children_left[node], depth + 1)
		print('{}else:  # if {} > {}'.format(indent, name, threshold))
		recurse(tree_.children_right[node], depth + 1)
	else:
		print('{}return {}'.format(indent, tree_.value[node]))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
116
0
Gpt3D_Clone116_0.py 1 16
Gpt3D_Clone116_0.py 18 34

----------------------------------------

def __setitem__(self, key, value) :
	if key in self.dictionary :
		self.dictionary [key] [1] = value
		return
	if self.removed_indices is None :
		index = self.next_index
		self.next_index += 1
	else :
		index = self.removed_indices [0]
		self.removed_indices = self.removed_indices [1]
	self.dictionary [key] = [index, value]
	self.indexdict [index] = key
	self.len += 1
----------------------------------------

def __setitem__(self, key, value) :
	if key in self.dictionary :
		self.dictionary [key] [1] = value
		return
	
	if len(self.removed_indices) > 0 :
		index = self.removed_indices[0] 
		del self.removed_indices[0]
	else :
		index = self.next_index
		self.next_index += 1
	
	self.dictionary [key] = [index, value]
	self.indexdict [index] = key
	self.len += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
116
1
Gpt3D_Clone116_1.py 1 16
Gpt3D_Clone116_1.py 18 31

----------------------------------------

def __setitem__(self, key, value) :
	if key in self.dictionary :
		self.dictionary [key] [1] = value
		return
	if self.removed_indices is None :
		index = self.next_index
		self.next_index += 1
	else :
		index = self.removed_indices [0]
		self.removed_indices = self.removed_indices [1]
	self.dictionary [key] = [index, value]
	self.indexdict [index] = key
	self.len += 1
----------------------------------------

def __setitem__(self, key, value) :
	if self.dictionary.__contains__(key) :
		self.dictionary [key] [1] = value
		return
	if len(self.removed_indices) == 0 :
		self.next_index += 1
		index = self.next_index
	else :
		index = self.removed_indices [0]
		self.removed_indices = self.removed_indices [1:]
	self.dictionary [key] = [index, value]
	self.indexdict [index] = key
	self.len += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
118
0
Gpt3D_Clone118_0.py 1 11
Gpt3D_Clone118_0.py 13 21

----------------------------------------

def collatz(number) :
	if number % 2 == 0 :
		print (number / / 2)
		return number / / 2
	elif number % 2 ! = 0 :
		result = 3 * number + 1
		print (result)
		return result
----------------------------------------

def collatz_4(number) :
	if number % 2 == 0 :
		print (number * 2)
		return number * 2
	elif number % 2 ! = 0 :
		result = 7 * number + 1
		print (result)
		return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
118
1
Gpt3D_Clone118_1.py 1 11
Gpt3D_Clone118_1.py 13 20

----------------------------------------

def collatz(number) :
	if number % 2 == 0 :
		print (number / / 2)
		return number / / 2
	elif number % 2 ! = 0 :
		result = 3 * number + 1
		print (result)
		return result
----------------------------------------

def collatz(number):
	if number % 2 == 0:
		print (number // 2)
		return number // 2
	else:
		result = 3 * number + 1
		print (result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
118
2
Gpt3D_Clone118_2.py 1 11
Gpt3D_Clone118_2.py 13 20

----------------------------------------

def collatz(number) :
	if number % 2 == 0 :
		print (number / / 2)
		return number / / 2
	elif number % 2 ! = 0 :
		result = 3 * number + 1
		print (result)
		return result
----------------------------------------

def collatz(number):
	if number % 2 == 0:
		return number // 2
	else:
		result = 3 * number + 1
		return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
0
Gpt3D_Clone119_0.py 1 15
Gpt3D_Clone119_0.py 17 31

----------------------------------------

def collatz(number) :
	if number % 2 == 0 :
		result = number / / 2
	elif number % 2 == 1 :
		result = 3 * number + 1
	while result == 1 :
		print (result)
		sys.exit()
	while result ! = 1 :
		print (result)
		number = result
		return collatz(number)
----------------------------------------

def collatz(number) :
	result = 0
	if number % 2 == 0 :
		result = number // 2
	elif number % 2 == 1 :
		result = 3 * number + 1
	while result != 1 :
		print (result)
		number = result
		collatz(number)
	if result == 1 :
		print (result) 
		sys.exit()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
1
Gpt3D_Clone119_1.py 1 15
Gpt3D_Clone119_1.py 17 29

----------------------------------------

def collatz(number) :
	if number % 2 == 0 :
		result = number / / 2
	elif number % 2 == 1 :
		result = 3 * number + 1
	while result == 1 :
		print (result)
		sys.exit()
	while result ! = 1 :
		print (result)
		number = result
		return collatz(number)
----------------------------------------

def collatz(number) :
	if number % 2 == 0 :
		result = int(number / 2)
	elif number % 2 == 1 :
		result = 3 * number + 1
	if result == 1 :
		print (result)
		sys.exit()
	else :
		print (result)
		number = result
		return collatz(number)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
1
Gpt3D_Clone11_1.py 1 10
Gpt3D_Clone11_1.py 12 19

----------------------------------------

def shift_n_letters(letter, n) :
	result = ord(letter) + n
	while result > ord('z') :
		result -= 26
	while result < ord('a') :
		result += 26
	return chr(result)
----------------------------------------

def shift_n_letters(letter, n):
	result = ord(letter) + n 
    if result > ord('z'): 
      result -= 26 
    if result < ord('a'):
    	result += 26
    return chr(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
2
Gpt3D_Clone11_2.py 1 10
Gpt3D_Clone11_2.py 12 21

----------------------------------------

def shift_n_letters(letter, n) :
	result = ord(letter) + n
	while result > ord('z') :
		result -= 26
	while result < ord('a') :
		result += 26
	return chr(result)
----------------------------------------

def shift_n_letters(letter, n) :
	shifted_value = ord(letter) + n
	if shifted_value > ord('z') :
		shifted_value -= 26
	elif shifted_value < ord('a') :
		shifted_value += 26
	return chr(shifted_value)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
0
Gpt3D_Clone121_0.py 1 14
Gpt3D_Clone121_0.py 16 28

----------------------------------------

def __init__(self, pos, checkpoints) :
	super().__init__()
	self.image = pg.Surface((60, 60), pg.SRCALPHA)
	pg.draw.polygon(self.image, (0, 100, 240), [(30, 0), (60, 60), (0, 60)])
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
	self.checkpoints = itertools.cycle(checkpoints)
	self.active_checkpoint = next(self.checkpoints)
	self.start_point = self.active_checkpoint
	self.active_checkpoint.image = self.active_checkpoint.image_active
	self.laps = - 1
----------------------------------------

def __init__(self, pos, checkpoints):
	super().__init__()
	self.image = pg.Surface((60, 60), pg.SRCALPHA)
	pg.draw.polygon(self.image, (0, 100, 240), [(30, 0), (60, 60), (0, 60)])
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
	self.checkpoints = checkpoints
	iter_checkpoints = iter(checkpoints)
	self.active_checkpoint = next(iter_checkpoints)
	self.start_point = self.active_checkpoint
	self.active_checkpoint.image = self.active_checkpoint.image_active
	self.laps = - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
1
Gpt3D_Clone121_1.py 1 14
Gpt3D_Clone121_1.py 16 28

----------------------------------------

def __init__(self, pos, checkpoints) :
	super().__init__()
	self.image = pg.Surface((60, 60), pg.SRCALPHA)
	pg.draw.polygon(self.image, (0, 100, 240), [(30, 0), (60, 60), (0, 60)])
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
	self.checkpoints = itertools.cycle(checkpoints)
	self.active_checkpoint = next(self.checkpoints)
	self.start_point = self.active_checkpoint
	self.active_checkpoint.image = self.active_checkpoint.image_active
	self.laps = - 1
----------------------------------------

def __init__(self, pos, checkpoints) :
	super().__init__()
	self.image = pg.Surface((60, 60), pg.SRCALPHA)
	pg.draw.polygon(self.image, (0, 100, 240), [(30, 0), (60, 60), (0, 60)])
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
	self.checkpoints = checkpoints
	self.iterator = iter(checkpoints) 
	self.active_checkpoint = next(self.iterator)
	self.start_point = self.active_checkpoint
	self.active_checkpoint.image = self.active_checkpoint.image_active
	self.laps = 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
0
Gpt3D_Clone122_0.py 1 10
Gpt3D_Clone122_0.py 12 20

----------------------------------------

def __init__(self, pos, angle = 0) :
	super().__init__()
	self.image_inactive = pg.transform.rotate(CHECKPOINT_IMG, angle)
	self.image_active = pg.transform.rotate(CHECKPOINT2_IMG, angle)
	self.image = self.image_inactive
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
----------------------------------------

def __init__(self, pos):
	super().__init__()
	self.image_inactive = CHECKPOINT_IMG
	self.image_active = CHECKPOINT2_IMG
	self.image = self.image_inactive
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
1
Gpt3D_Clone122_1.py 1 10
Gpt3D_Clone122_1.py 12 19

----------------------------------------

def __init__(self, pos, angle = 0) :
	super().__init__()
	self.image_inactive = pg.transform.rotate(CHECKPOINT_IMG, angle)
	self.image_active = pg.transform.rotate(CHECKPOINT2_IMG, angle)
	self.image = self.image_inactive
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
----------------------------------------

def __init__(self, pos, angle) :
	super().__init__()
	self.image_inactive = pg.transform.rotate(CHECKPOINT_IMG, (angle * 2))
	self.image_active = pg.transform.rotate(CHECKPOINT2_IMG, (angle * 2))
	self.image = self.image_inactive
	self.rect = self.image.get_rect(center = pos)
	self.mask = pg.mask.from_surface(self.image)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
123
0
Gpt3D_Clone123_0.py 1 9
Gpt3D_Clone123_0.py 11 19

----------------------------------------

def next(self) :
	try :
		self._doc = self._cursor.next()
	except StopIteration :
		self._doc = None
	return self
----------------------------------------

def next(self) :
	self._doc = None
	try :
		self._doc = self._cursor.next()
	except StopIteration :
		pass
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
0
Gpt3D_Clone124_0.py 1 13
Gpt3D_Clone124_0.py 15 26

----------------------------------------

def myLogger(self) :
	if None == self.logger :
		self.logger = logging.getLogger('ProvisioningPython')
		self.logger.setLevel(logging.DEBUG)
		now = datetime.datetime.now()
		handler = logging.FileHandler('ProvisioningPython' + now.strftime("%Y-%m-%d") + '.log')
		formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
		handler.setFormatter(formatter)
		self.logger.addHandler(handler)
	return self.logger
----------------------------------------

def myLogger(self):
	if self.logger is None:
		self.logger = logging.getLogger('ProvisioningPython')
		self.logger.setLevel(logging.DEBUG)
		current = datetime.datetime.now().strftime('%Y-%m-%d')
		handler = logging.FileHandler('ProvisioningPython' + current + '.log')
		formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
		handler.setFormatter(formatter)
		self.logger.addHandler(handler)
	return self.logger
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
1
Gpt3D_Clone124_1.py 1 13
Gpt3D_Clone124_1.py 15 25

----------------------------------------

def myLogger(self) :
	if None == self.logger :
		self.logger = logging.getLogger('ProvisioningPython')
		self.logger.setLevel(logging.DEBUG)
		now = datetime.datetime.now()
		handler = logging.FileHandler('ProvisioningPython' + now.strftime("%Y-%m-%d") + '.log')
		formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
		handler.setFormatter(formatter)
		self.logger.addHandler(handler)
	return self.logger
----------------------------------------

def myLogger(self):
	if self.logger is None:
		self.logger = logging.getLogger('ProvisioningPython')
		self.logger.setLevel(logging.DEBUG)
		now_date = datetime.datetime.now().strftime('%Y-%m-%d')
		handler = logging.FileHandler('ProvisioningPython' + now_date + '.log')
		formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
		handler.setFormatter(formatter)
		self.logger.addHandler(handler)
	return self.logger
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
12
0
Gpt3D_Clone12_0.py 1 16
Gpt3D_Clone12_0.py 18 40

----------------------------------------

def topic_prob_extractor(hdp = None, topn = None) :
	topic_list = hdp.show_topics(topics = - 1, topn = topn)
	topics = [int(x.split(':') [0].split(' ') [1]) for x in topic_list]
	split_list = [x.split(' ') for x in topic_list]
	weights = []
	for lst in split_list :
		sub_list = []
		for entry in lst :
			if '*' in entry :
				sub_list.append(float(entry.split('*') [0]))
		weights.append(np.asarray(sub_list))
	sums = [np.sum(x) for x in weights]
	return pd.DataFrame({'topic_id' : topics, 'weight' : sums})
----------------------------------------

def topic_prob_extractor_type3(hdp = None, topn = None) :
	topic_list = hdp.show_topics(topics = - 1, topn = topn)
	topics = []
	split_list = [x.split(' ') for x in topic_list]
	weights = []
	for lst in split_list :
		sub_list = []
		last_word = ""
		for i, entry in enumerate(lst) :
			split_entry = entry.split(':')
			if len(split_entry) == 2 :
				topics.append(int(split_entry[0]))
			if '*' in entry :
				sub_list.append(float(entry.split('*') [0]))
				if (i == (len(lst)-1)) :
					last_word = entry.split('*')[1]
		weights.append(np.asarray(sub_list))
	sums = [np.sum(x) for x in weights]
	return pd.DataFrame({'topic_id' : topics, 'weight' : sums, 'last_word' : last_word})
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
12
1
Gpt3D_Clone12_1.py 1 16
Gpt3D_Clone12_1.py 18 36

----------------------------------------

def topic_prob_extractor(hdp = None, topn = None) :
	topic_list = hdp.show_topics(topics = - 1, topn = topn)
	topics = [int(x.split(':') [0].split(' ') [1]) for x in topic_list]
	split_list = [x.split(' ') for x in topic_list]
	weights = []
	for lst in split_list :
		sub_list = []
		for entry in lst :
			if '*' in entry :
				sub_list.append(float(entry.split('*') [0]))
		weights.append(np.asarray(sub_list))
	sums = [np.sum(x) for x in weights]
	return pd.DataFrame({'topic_id' : topics, 'weight' : sums})
----------------------------------------

def topic_prob_extractor_type4(hdp = None, topn = None) :
	topic_list = hdp.show_topics(topics = - 1, topn = topn)
	topics = [int(x.split(':') [0].split(' ') [1]) for x in topic_list]
	split_list = [x.split(' ') for x in topic_list]
	weights = []
	last_words = []
	for lst in split_list :
		sub_list = []
		last_word = ""
		for i, entry in enumerate(lst) :
			if '*' in entry :
				sub_list.append(float(entry.split('*') [0]))
				if (i == (len(lst)-1)) :
					last_word = entry.split('*')[1]
		weights.append(np.asarray(sub_list))
		last_words.append(last_word)
	sums = [np.sum(x) for x in weights]
	return pd.DataFrame({'topic_id' : topics, 'weight' : sums, 'last_word' : last_words})
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
133
0
Gpt3D_Clone133_0.py 1 13
Gpt3D_Clone133_0.py 15 24

----------------------------------------

def find_nth(haystack, needle, n = 1) :
	if (hasattr(needle, 'finditer')) :
		matches = needle.finditer(haystack)
	else :
		matches = re.finditer(re.escape(needle), haystack)
	start_here = itertools.dropwhile(lambda x : x [0] < n, enumerate(matches, 1))
	try :
		return next(start_here) [1].start()
	except StopIteration :
		return - 1
----------------------------------------

def find_nth(haystack, needle, n = 1) :
	if (hasattr(needle, 'search')) :
    	matches = needle.search(haystack, n)
	else :
    	matches = re.search(re.escape(needle), haystack,n)
	try :
		return matches.start()
	except StopIteration :
		return - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
0
Gpt3D_Clone138_0.py 1 7
Gpt3D_Clone138_0.py 9 15

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	value = None
	for i in range(self.pops) :
		value = stack.pop()
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
1
Gpt3D_Clone138_1.py 1 7
Gpt3D_Clone138_1.py 9 13

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack):
    assert self.pushes == 0 
    for _ in range(self.pops):
        stack.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
2
Gpt3D_Clone138_2.py 1 7
Gpt3D_Clone138_2.py 9 13

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in reversed(range(self.pops)) :
		stack.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
3
Gpt3D_Clone138_3.py 1 7
Gpt3D_Clone138_3.py 9 13

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame):
	assert self.pushes == 0
	for i in range(self.pops + 1):
		stack.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
4
Gpt3D_Clone139_4.py 1 7
Gpt3D_Clone139_4.py 9 16

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame):
	assert self.pushes == 0
	while stack and self.pops > 0:
		stack.pop()
		self.pops -= 1
# TYPE 3
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
140
1
Gpt3D_Clone140_1.py 1 7
Gpt3D_Clone140_1.py 9 14

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	count = 0
	while count < self.pops :
		stack.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
140
2
Gpt3D_Clone140_2.py 1 7
Gpt3D_Clone140_2.py 9 14

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	index = 0
	while(index < self.pops) :
		stack.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
140
3
Gpt3D_Clone140_3.py 1 7
Gpt3D_Clone140_3.py 9 13

----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops) :
		stack.pop()
----------------------------------------

def touch_value(self, stack, frame) :
	assert self.pushes == 0
	for i in range(self.pops, 0, -1) :
		stack.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
0
Gpt3D_Clone141_0.py 1 9
Gpt3D_Clone141_0.py 11 17

----------------------------------------

def touch_value(self, stack, frame) :
	TOS1, TOS = stack [- 2 :]
	print (TOS1, TOS)
	if abs(TOS1) > BadValue.MAX_ALLOWED_VALUE or abs(TOS) > BadValue.MAX_ALLOWED_VALUE :
		raise BadValue("The value for exponent was too big")
	stack [- 2 :] = [TOS1 ** TOS]
----------------------------------------

def touch_value (self, stack, frame):
    TOS1, TOS = stack[-2:]
    print (TOS1, TOS)
    if TOS1 == 0 and TOS != 0:
        raise BadValue("Cannot divide by zero")
    stack [-2:] = [TOS1 / (TOS ** (1/TOS))]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
1
Gpt3D_Clone141_1.py 1 9
Gpt3D_Clone141_1.py 11 19

----------------------------------------

def touch_value(self, stack, frame) :
	TOS1, TOS = stack [- 2 :]
	print (TOS1, TOS)
	if abs(TOS1) > BadValue.MAX_ALLOWED_VALUE or abs(TOS) > BadValue.MAX_ALLOWED_VALUE :
		raise BadValue("The value for exponent was too big")
	stack [- 2 :] = [TOS1 ** TOS]
----------------------------------------

def touch_value (self, stack, frame):
    TOS1, TOS = stack[-2:]
    print (TOS1, TOS)
    if TOS1 == 0 and TOS < 0:
        raise BadValue("Cannot have a negative power of 0")
    stack [-2:] = [pow(TOS1, TOS)]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
2
Gpt3D_Clone142_2.py 1 8
Gpt3D_Clone142_2.py 10 16

----------------------------------------

def touch_value(self, stack, frame) :
	name = self.get_arg()
	if name not in frame :
		raise UnknownSymbol("Does not know symbol {}".format(name))
	stack.append(frame [name])
----------------------------------------

def touch_value(self, stack, frame) :
	name = self.get_arg()
	if name not in frame :
		print("Does not know symbol {}".format(name))
		return
	stack.append(frame [name])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
146
0
Gpt3D_Clone146_0.py 1 11
Gpt3D_Clone146_0.py 13 24

----------------------------------------

def contains(small, big) :
	for i in xrange(len(big) - len(small) + 1) :
		for j in xrange(len(small)) :
			if big [i + j] ! = small [j] :
				break
		else :
			return i, i + len(small)
	return False
----------------------------------------

def contains(small, big) :
	for i in range(len(big)-len(small)+1) :
		subString = big[i:i+len(small)-1]
		isEqual = True
		for j in range(len(substring)):
			if substring[j] != small[j]:
				isEqual = False
				break
		if isEqual :
			return i, i+len(small)
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
146
1
Gpt3D_Clone146_1.py 1 11
Gpt3D_Clone146_1.py 13 22

----------------------------------------

def contains(small, big) :
	for i in xrange(len(big) - len(small) + 1) :
		for j in xrange(len(small)) :
			if big [i + j] ! = small [j] :
				break
		else :
			return i, i + len(small)
	return False
----------------------------------------

def contains(small, big):
    for i in xrange(len(big) - len(small) + 1):
        for j in xrange(len(small)):
            if big[i] != small[j]:
                break
            i += 1
        else: 
            return True 
    return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
0
Gpt3D_Clone147_0.py 1 8
Gpt3D_Clone147_0.py 10 17

----------------------------------------

def __init__(self, width) :
	if width < 0 :
		print ('Width cannot be less than zero.')
	else :
		self.width = width
----------------------------------------

def __init__(self, width) :
	if width < 0 :
		print ('Width cannot be less than zero.')
	elif width == 0 :
		print ('Width cannot be zero.')
	else :
		self.width = width
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
148
0
Gpt3D_Clone148_0.py 1 8
Gpt3D_Clone148_0.py 10 16

----------------------------------------

def __init__(self, width) :
	if width < 0 :
		print ('Width cannot be less than zero.')
	else :
		self.width = width
----------------------------------------

def __init__(self, width, color):
	if width < 0 :
		print ('Width cannot be less than zero.')
	else: 
		self.width = width
  		self.color = color
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
149
0
Gpt3D_Clone149_0.py 1 21
Gpt3D_Clone149_0.py 23 43

----------------------------------------

def main() :
	principle = decimal.Decimal(raw_input('Please enter your loan amount:'))
	rate = decimal.Decimal(raw_input('Please enter rate of interest (percent):')) / 100
	term = decimal.Decimal(raw_input('Please enter loan period (years):')) * 12
	interest = (principle * rate).quantize(decimal.Decimal('.01'), rounding = decimal.ROUND_HALF_EVEN)
	balance = principle + interest
	payment = (balance / term).quantize(decimal.Decimal('.01'), rounding = decimal.ROUND_CEILING)
	print "Payment\t\tAmount Paid\t\tRem.Bal."
	for count in range(1 + term) :
		if count == 0 :
			print count, "\t\t0.00\t\t\t", balance
		elif count == term :
			payment = balance
			balance -= payment
			print count, "\t\t", payment, "\t\t\t", balance
		else :
			balance -= payment
			print count, "\t\t", payment, "\t\t\t", balance
----------------------------------------

def main() :
	principle = decimal.Decimal(input('Please enter your loan amount:'))
	rate = decimal.Decimal(input('Please enter rate of interest (percent):')) / 100
	term = decimal.Decimal(input('Please enter loan period (years):')) * 12
	rout = decimal.Decimal('.01')
	rtype = decimal.ROUND_HALF_EVEN
	interest = (principle * rate).quantize(rout, rounding=rtype)
	balance = principle + interest
	payment = (balance / term).quantize(rout, rounding=decimal.ROUND_CEILING)
	print("Payment\t\tAmount Paid\t\tRem.Bal.")
	for count in range(1 + term) :
		if count == 0 :
			print(count, "\t\t0.00\t\t\t", balance)
		elif count == term :
			payment = balance
			balance -= payment
			print(count, "\t\t", payment, "\t\t\t", balance)
		else :
			balance -= payment
			print(count, "\t\t", payment, "\t\t\t", balance)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
14
2
Gpt3D_Clone14_2.py 1 13
Gpt3D_Clone14_2.py 15 28

----------------------------------------

def check_all_conditions() :
	x = check_size()
	if x : return x
	x = check_color()
	if x : return x
	x = check_tone()
	if x : return x
	x = check_flavor()
	if x : return x
	return None
----------------------------------------

def check_all_conditions() :
	x = check_size()
	y = check_color()
	z = check_tone()
	k = check_flavor()
	if x : return x
	elif y : return y
	elif z : return z
	elif k : return k
	else: return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
152
0
Gpt3D_Clone152_0.py 1 11
Gpt3D_Clone152_0.py 13 22

----------------------------------------

def type(text, delay) :
	i = 0
	amount = len(text)
	while amount < i :
		sys.stdout.write(text [i])
		sys.stdout.flush()
		i += 1
		time.sleep(delay)
----------------------------------------

def type(lst, delay):
    total = len(lst)
    i = 0
    while total > i:
        sys.stdout.write(lst[i])
        sys.stdout.flush()
        i += 1
        time.sleep(delay)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
152
1
Gpt3D_Clone152_1.py 1 11
Gpt3D_Clone152_1.py 13 22

----------------------------------------

def type(text, delay) :
	i = 0
	amount = len(text)
	while amount < i :
		sys.stdout.write(text [i])
		sys.stdout.flush()
		i += 1
		time.sleep(delay)
----------------------------------------

def type(item, delay):
    size = len(item)
    start = 0
    while size > start:
        sys.stdout.write(item[start])
        sys.stdout.flush()
        start += 1
        time.sleep(delay)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
154
0
Gpt3D_Clone154_0.py 1 28
Gpt3D_Clone154_0.py 30 58

----------------------------------------

def roman_int(user_choice) :
	if user_choice == "1" :
		user_roman = input("What numeral would you like to convert?\n").upper()
		result = 0
		values = []
		try :
			result = roman_numerals [user_roman]
		except KeyError :
			for i in user_roman :
				try :
					value = roman_numerals [i]
					values.append(value)
				except KeyError :
					print ("Not valid input")
			for i, value in enumerate(values) :
				try :
					if value > values [i + 1] :
						result += value
					else :
						actual_value = values [i + 1] - value
						result = result + actual_value
						values [i + 1] = 0
				except IndexError :
					pass
		print (result)
----------------------------------------

def roman_int(user_choice) :
	if user_choice == "1" :
		user_roman = input("What numeral would you like to convert?\n").upper()
		result = 0
		values = []
		try :
			result = roman_numerals [user_roman]
		except KeyError :
			for i in user_roman :
				try :
					value = roman_numerals [i]
					values.append(value)
				except KeyError :
					print ("Not valid input")
			for i in range(len(values)-1):
				try :
					if values[i] > values[i+1] :
						result += values[i]
					else :
						actual_value = values[i+1]-values[i]
						result = result + actual_value
						values[i+1] = 0
						values[i] = 0
				except IndexError :
					pass
			if values[len(values)-1] > 0 :
				result += values[len(values)-1]
		print (result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
0
Gpt3D_Clone157_0.py 1 9
Gpt3D_Clone157_0.py 11 19

----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	for text in ["children1", "children2", "children3"] :
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), text))
		parent.appendRow(children)
	self.mytreeview.expand(index)
----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	items = ["children1", "children2", "children3"]
	for text in items :
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), text))
		parent.appendRow(children)
	self.mytreeview.expand(index)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
1
Gpt3D_Clone157_1.py 1 9
Gpt3D_Clone157_1.py 11 18

----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	for text in ["children1", "children2", "children3"] :
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), text))
		parent.appendRow(children)
	self.mytreeview.expand(index)
----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	items = ["children1", "children2", "children3"] 
	for text in items :
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), text))
		parent.appendRow(children)
	self.mytreeview.expand(index)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
2
Gpt3D_Clone157_2.py 1 9
Gpt3D_Clone157_2.py 11 18

----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	for text in ["children1", "children2", "children3"] :
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), text))
		parent.appendRow(children)
	self.mytreeview.expand(index)
----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	quantity = 3
	for i in range(quantity) :
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), str(i+1)))
		parent.appendRow(children)
	self.mytreeview.expand(index)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
3
Gpt3D_Clone157_3.py 1 9
Gpt3D_Clone157_3.py 11 18

----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	for text in ["children1", "children2", "children3"] :
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), text))
		parent.appendRow(children)
	self.mytreeview.expand(index)
----------------------------------------

def update_model(self, index) :
	parent = self.model.itemFromIndex(index)
	for i in range(1, 4):
		children = QtGui.QStandardItem("{}_{}".format(parent.text(), "children_" + str(i)))
		parent.appendRow(children)
	self.mytreeview.expand(index)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
0
Gpt3D_Clone158_0.py 1 12
Gpt3D_Clone158_0.py 14 28

----------------------------------------

def getmonth(day, week, year) :
	for month in range(1, 13) :
		try :
			date = DT.datetime(year, month, day)
		except ValueError :
			continue
		iso_year, iso_weeknum, iso_weekday = date.isocalendar()
		if iso_weeknum == week :
			return date.month
----------------------------------------

def getmonth_type_four(day, week, year) :
	month = 1
	date = None
	while month <= 12 :
		try :
			date = DT.datetime(year, month, day)
		except ValueError :
			month += 1
			continue
		iso_year, iso_weeknum, iso_weekday = date.isocalendar()
		if iso_weeknum == week :
			return date.month
		month += 1
	return date
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
1
Gpt3D_Clone158_1.py 1 12
Gpt3D_Clone158_1.py 14 27

----------------------------------------

def getmonth(day, week, year) :
	for month in range(1, 13) :
		try :
			date = DT.datetime(year, month, day)
		except ValueError :
			continue
		iso_year, iso_weeknum, iso_weekday = date.isocalendar()
		if iso_weeknum == week :
			return date.month
----------------------------------------

def getmonth_type_three(day, week, year) :
	month = 1
	while month <= 12 :
		try :
			date = DT.datetime(year, month, day)
		except ValueError :
			month += 1
			continue
		iso_year, iso_weeknum, iso_weekday = date.isocalendar()
		if iso_weeknum == week :
			return date.month
		month += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
160
0
Gpt3D_Clone160_0.py 1 9
Gpt3D_Clone160_0.py 11 18

----------------------------------------

def findKmersSet(k, stuff) :
	result = []
	for inner_list in stuff :
		iterators = [iter(inner_list [i :]) for i in xrange(k)]
		result.append([''.join(triple) for triple in zip(* iterators)])
	return result
----------------------------------------

def findKmersSet_4(k, stuff) :
	sub_result = []
	for inner in stuff :
		iter_list = [iter(inner [i :]) for i in range(k)]
		sub_list = [''.join(triple) for triple in zip(* iter_list)]
		sub_result.append(sub_list)
	return sub_result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
160
1
Gpt3D_Clone160_1.py 1 9
Gpt3D_Clone160_1.py 11 19

----------------------------------------

def findKmersSet(k, stuff) :
	result = []
	for inner_list in stuff :
		iterators = [iter(inner_list [i :]) for i in xrange(k)]
		result.append([''.join(triple) for triple in zip(* iterators)])
	return result
----------------------------------------

def findKmersSet_3(k, stuff) :
	result = []
	for inner_list in stuff :
		iters = [iter(inner_list [i :]) for i in range(k)]
		sub_list = [''.join(triple) for triple in zip(* iters)]
		result.append(sub_list)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
0
Gpt3D_Clone163_0.py 1 11
Gpt3D_Clone163_0.py 13 22

----------------------------------------

def after_request(response) :
	diff = time.time() - g.start
	if app.debug :
		print "Exec time: %s" % str(diff)
	if (response.response) :
		response.response [0] = response.response [0].replace('__EXECUTION_TIME__', str(diff))
		response.headers ["content-length"] = len(response.response [0])
	return response
----------------------------------------

def after_request(response): 
	diff = time.time() - g.start
	if app.debug: 
		print("Execution time: %s" % str(diff))
	if response.response: 
		response.response[0] = response.response[0].replace("__EXECUTION_TIME__", str(diff))
		response.set_data(response.response[0])
	return response
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
1
Gpt3D_Clone163_1.py 1 11
Gpt3D_Clone163_1.py 13 22

----------------------------------------

def after_request(response) :
	diff = time.time() - g.start
	if app.debug :
		print "Exec time: %s" % str(diff)
	if (response.response) :
		response.response [0] = response.response [0].replace('__EXECUTION_TIME__', str(diff))
		response.headers ["content-length"] = len(response.response [0])
	return response
----------------------------------------

def after_request(response): 
	diff = time.time() - g.start
	if not app.debug: 
		print("Execution time: %s" % str(diff))
	if response.response: 
		response.response[0] = response.response[0].replace("__EXECUTION_TIME__", str(diff))
		response.headers["content-length"] = len(response.response[0])
	return response
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
164
0
Gpt3D_Clone164_0.py 1 11
Gpt3D_Clone164_0.py 13 21

----------------------------------------

def after_request(response) :
	diff = time.time() - g.start
	if app.debug :
		print "Exec time: %s" % str(diff)
	if (response.response) :
		response.response [0] = response.response [0].replace('__EXECUTION_TIME__', str(diff))
		response.headers ["content-length"] = len(response.response [0])
	return response
----------------------------------------

def after_request(response):
    diff = time.time() - g.start
    if app.debug:
        print("Exec time: %s" % str(diff))
    if response.response:
        response.response[0] = response.response[0].replace('__EXECUTION_TIME__', str(diff))
        response.headers["content-length"] = len(response.response[0])
    return response
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
164
1
Gpt3D_Clone164_1.py 1 11
Gpt3D_Clone164_1.py 13 21

----------------------------------------

def after_request(response) :
	diff = time.time() - g.start
	if app.debug :
		print "Exec time: %s" % str(diff)
	if (response.response) :
		response.response [0] = response.response [0].replace('__EXECUTION_TIME__', str(diff))
		response.headers ["content-length"] = len(response.response [0])
	return response
----------------------------------------

def after_request(response):
    diff = time.time() - g.start
    if app.debug:
        print('Exec time: %s' % str(diff))
    if response.response:
        response.response[0] = response.response[0].replace("__EXECUTION_TIME__", str(diff))
        response.headers["content-length"] = len(response.response[0])
    return response
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
0
Gpt3D_Clone169_0.py 1 12
Gpt3D_Clone169_0.py 14 26

----------------------------------------

def get_most_ooo_word(words) :
	words = words [0].split()
	most = [words [0]]
	for word in words [1 :] :
		if word.count('o') > most [0].count('o') :
			most = [word]
		elif word.count('o') == most [0].count('o') :
			most.append(word)
	return most
----------------------------------------

def get_most_ooo_word(words):
	words = words[0].split()
	most_words = list()
	most_words.append(words[0])
	for word in words[1:]:
		if word.count('o') > most_words[0].count('o'):
			most_words = list()
			most_words.append(word)
		elif word.count('o') == most_words[0].count('o'):
			most_words.append(word)
	maximum = len(most_words)
	return maximum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
3
Gpt3D_Clone169_3.py 1 12
Gpt3D_Clone169_3.py 14 25

----------------------------------------

def get_most_ooo_word(words) :
	words = words [0].split()
	most = [words [0]]
	for word in words [1 :] :
		if word.count('o') > most [0].count('o') :
			most = [word]
		elif word.count('o') == most [0].count('o') :
			most.append(word)
	return most
----------------------------------------

def get_most_ooo_word(words):
	words = words[0].split()
	most = list()
	most.append(words[0])
	for word in words[1:]:
		if word.count('o') > most[0].count('o'):
			most = list()
			most.append(word)
		elif word.count('o') == most[0].count('o'):
			most.append(word)
	return most
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
16
0
Gpt3D_Clone16_0.py 1 8
Gpt3D_Clone16_0.py 10 19

----------------------------------------

def check_all_conditions() :
	for condition in all_conditions() :
		if condition :
			return condition
	return None
----------------------------------------

def check_all_conditions():
	valid_flag = False
	for condition in all_conditions():
		if condition() is True:
			valid_flag = True
			break
	if valid_flag:
		return condition
	return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
16
1
Gpt3D_Clone16_1.py 1 8
Gpt3D_Clone16_1.py 10 16

----------------------------------------

def check_all_conditions() :
	for condition in all_conditions() :
		if condition :
			return condition
	return None
----------------------------------------

def check_all_conditions() :
	for condition in all_conditions() :
		check = condition()
		if check != None :
			return check
	return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
0
Gpt3D_Clone170_0.py 1 16
Gpt3D_Clone170_0.py 18 34

----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	loc = - 1
	with open(path) as f :
		for i, line in enumerate(f) :
			if word in line :
				loc = i
				break
	if loc > = 0 :
		print ("Word found at line {}".format(loc))
	else :
		print ("Word not found")
----------------------------------------

def searchWordlist() :
	try :
		path = input(PATH)
		word = input(WORD)
		loc = -1
		with open(path, 'r') as fp :
			for i, line in enumerate(fp) :
				if word in line :
					loc = i
					break
		if loc >= 0 :
			print ("Word found at line {}".format(loc))
		else :
			print ("Word not found")
	except :
		print ("Could not read the file")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
1
Gpt3D_Clone170_1.py 1 16
Gpt3D_Clone170_1.py 18 33

----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	loc = - 1
	with open(path) as f :
		for i, line in enumerate(f) :
			if word in line :
				loc = i
				break
	if loc > = 0 :
		print ("Word found at line {}".format(loc))
	else :
		print ("Word not found")
----------------------------------------

def searchWordlist() :
	path = input(PATH)
	word = input(WORD)
	loc = -1
	fopen = open(path, 'r')
	for idx, line in enumerate(fopen) :
		if word in line :
			loc = idx
			break
	fopen.close()
	if loc != -1 :
		print ("Word found at line {}".format(loc))
	else :
		print ("Word not found")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
0
Gpt3D_Clone171_0.py 1 16
Gpt3D_Clone171_0.py 18 33

----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	loc = - 1
	with open(path) as f :
		for i, line in enumerate(f) :
			if word in line :
				loc = i
				break
	if loc > = 0 :
		print ("Word found at line {}".format(loc))
	else :
		print ("Word not found")
----------------------------------------

def searchWordlist() : 
	path = input(PATH)
	word = input(WORD)
	loc = - 1
	f = open(path)
	for i, line in enumerate(f) : 
		if word in line :
			loc = i
			break
	if loc >= 0 : 
		print ("Word found at line {}".format(loc))
	else : 
		print ("Word not found")
	f.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
1
Gpt3D_Clone171_1.py 1 16
Gpt3D_Clone171_1.py 18 32

----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	loc = - 1
	with open(path) as f :
		for i, line in enumerate(f) :
			if word in line :
				loc = i
				break
	if loc > = 0 :
		print ("Word found at line {}".format(loc))
	else :
		print ("Word not found")
----------------------------------------

def searchWordlist() :
	path = input(PATH)
	word = input(WORD)
	loc = - 1
	with open(path, "r") as f :
		for (idx, line) in enumerate(f) :
			if word in line :
				loc = idx
				break
	if loc >= 0 :
		print("Word found at line {}".format(loc))
	else :
		print("Word not found")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
172
0
Gpt3D_Clone172_0.py 1 13
Gpt3D_Clone172_0.py 15 29

----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	with open(path) as f :
		for line in f :
			if word in line :
				print "Word found"
				return 1
	print "Word not found"
	return 0
----------------------------------------

def searchWordlist() :
	path = str(raw_input(PATH))
	word = str(raw_input(WORD))
	flag = 0
	with open(path) as f :
		for line in f :
			if word in line :
				print "Word found"
				flag = 1
				break
	if flag == 0:
		print "Word not found"
	return flag
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
173
0
Gpt3D_Clone173_0.py 1 15
Gpt3D_Clone173_0.py 17 27

----------------------------------------

def addition() :
	total = 0
	while True :
		value = input()
		if value == "exit" :
			break
		else :
			try :
				total += int(value)
			except :
				print ('Please enter in a valid integer')
	print (total)
----------------------------------------

def addition() :
	total = 0
	while True :
		value = int(input())
		if value == "exit" :
			break
		else :
			total += value
	print (total)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
0
Gpt3D_Clone174_0.py 1 21
Gpt3D_Clone174_0.py 23 43

----------------------------------------

def get_cost(x) :
	t_zone = 720
	max_rate = 5.5
	rate = 0.0208
	duration = x ['t1']
	if duration < t_zone :
		if (duration * rate) > = max_rate :
			return max_rate
		else :
			return (duration * rate)
	else :
		if duration > = 720 :
			x = int(duration / 720)
			y = ((duration % 720) * rate)
			if y > = max_rate :
				return ((x * max_rate) + max_rate)
			else :
				return ((x * max_rate) + y)
----------------------------------------

def get_cost(x) :
	t_zone = 720
	max_rate = 5.5
	rate = 0.0208
	duration = x ['t1']
	if duration < t_zone :
		rate1 = duration * rate
		if rate1 >= max_rate :
			return max_rate
		else :
			return rate1
	else :
		if duration >= 720 :
			duration1 = int(duration / 720)
			rate2 = (duration1 % 720) * rate
			if rate2 >= max_rate :
				return (duration1 * max_rate) + max_rate
			else :
				return (duration1 * max_rate) + rate2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
2
Gpt3D_Clone174_2.py 1 21
Gpt3D_Clone174_2.py 23 35

----------------------------------------

def get_cost(x) :
	t_zone = 720
	max_rate = 5.5
	rate = 0.0208
	duration = x ['t1']
	if duration < t_zone :
		if (duration * rate) > = max_rate :
			return max_rate
		else :
			return (duration * rate)
	else :
		if duration > = 720 :
			x = int(duration / 720)
			y = ((duration % 720) * rate)
			if y > = max_rate :
				return ((x * max_rate) + max_rate)
			else :
				return ((x * max_rate) + y)
----------------------------------------

def get_cost(x):
	t_zone = 720
	max_rate = 5.5
	rate = 0.0208
	duration = x ['t1']
	if duration < t_zone : 
		return float((duration * rate) if (duration * rate) >= max_rate else max_rate)
	else:
		if duration >= 720:
			x = int(duration/720)
			y = ((duration % 720) * rate)	
			return ((x * max_rate) + (max_rate if y >= max_rate else y))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
0
Gpt3D_Clone176_0.py 1 11
Gpt3D_Clone176_0.py 13 27

----------------------------------------

def __init__(self, a = None, b = None, e = None, f = None) :
	if [a, b, e, f].count(None) > 2 :
		raise Exception('Not enough parameters to make an ellipse')
	self.a, self.b, self.e, self.f = a, b, e, f
	self.calculate_a()
	for parameter in 'b', 'e', 'f' :
		if self.__dict__ [parameter] is None :
			Ellipse.__dict__ ['calculate_' + parameter](self)
----------------------------------------

def __init__(self, a = None, b = None, e = None, f = None) :
	if [a, b, e, f].count(None) > 2 :
		raise Exception('Not enough parameters to make an ellipse')
	self.a, self.b, self.e, self.f = a, b, e, f
	self.calculate_a()
	for parameter in 'b', 'e', 'f' :
		if self.__dict__ [parameter] is None :
			if parameter == 'b':
				Ellipse.__dict__ ['calculate_b'](self)
			elif parameter == 'e':
				Ellipse.__dict__ ['calculate_e'](self)
			else:
				Ellipse.__dict__ ['calculate_f'](self)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
1
Gpt3D_Clone176_1.py 1 11
Gpt3D_Clone176_1.py 13 26

----------------------------------------

def __init__(self, a = None, b = None, e = None, f = None) :
	if [a, b, e, f].count(None) > 2 :
		raise Exception('Not enough parameters to make an ellipse')
	self.a, self.b, self.e, self.f = a, b, e, f
	self.calculate_a()
	for parameter in 'b', 'e', 'f' :
		if self.__dict__ [parameter] is None :
			Ellipse.__dict__ ['calculate_' + parameter](self)
----------------------------------------

def __init__(self, a = None, b = None, e = None, f = None) :
	if [a, b, e, f].count(None) > 2 :
		raise Exception('Not enough parameters to make an ellipse')
	self.a, self.b, self.e, self.f = a, b, e, f
	self.calculate_a()
	for parameter in 'b', 'e', 'f' :
		if self.__dict__ [parameter] is None :
			if parameter is 'b':
				Ellipse.__dict__ ['calculate_b'](self)
			elif parameter is 'e':
				Ellipse.__dict__ ['calculate_e'](self)
			else:
				Ellipse.__dict__ ['calculate_f'](self)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
0
Gpt3D_Clone177_0.py 1 11
Gpt3D_Clone177_0.py 13 23

----------------------------------------

def __init__(self, a = None, b = None, e = None, f = None) :
	if [a, b, e, f].count(None) > 2 :
		raise Exception('Not enough parameters to make an ellipse')
	self.a, self.b, self.e, self.f = a, b, e, f
	self.calculate_a()
	for parameter in 'b', 'e', 'f' :
		if self.__dict__ [parameter] is None :
			Ellipse.__dict__ ['calculate_' + parameter](self)
----------------------------------------

def __init__(self, a = None, b = None, e = None, f = None) :
	if [a, b, e, f].count(None) > 2 :
		raise Exception('Not enough parameters to make an ellipse')
	self.a, self.b, self.e, self.f = a, b, e, f
	self.calculate_a()
	for parameter in ('b', 'e', 'f') :
		# Calculate parameter only if it is None
		if self.__dict__ [parameter] == None :
			# Get attribute and calculate parameter
			Ellipse.__dict__ [parameter](self)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
0
Gpt3D_Clone178_0.py 1 18
Gpt3D_Clone178_0.py 20 35

----------------------------------------

def __init__(self, a = None, b = None, ** kwargs) :
	self.relations = {
	"e" : {"req" : ["a", "b"], "func" : lambda a, b : a + b},
	"C" : {"req" : ["e", "a"], "func" : lambda e, a : e * 1 / (a * b)},
	"A" : {"req" : ["C", "e"], "func" : lambda e, C : cmplx_func_A(e, C)},
	"a" : {"req" : ["e", "b"], "func" : lambda e, b : e / b},
	"b" : {"req" : ["e", "a"], "func" : lambda e, a : e / a}}
	self.a = a
	self.b = b
	self.e = None
	self.C = None
	self.A = None
	if kwargs :
		for key in kwargs :
			setattr(self, key, kwargs [key])
----------------------------------------

def __init__(self, a = None, b = None, ** kwargs) :
	self.relations = {
	"e" : {"req" : ["a", "b"], "func" : lambda a, b : (a + b) * 1.0},
	"C" : {"req" : ["e", "a"], "func" : lambda e, a : (e * 1.0) / (a * b)},
	"A" : {"req" : ["C", "e"], "func" : lambda e, C : complex_func_A(e, C)},
	"a" : {"req" : ["e", "b"], "func" : lambda e, b : (e / b) * 1.0},
	"b" : {"req" : ["e", "a"], "func" : lambda e, a : (e / a) * 1.0}}
	self.a = a
	self.b = b
	self.e = None
	self.C = None
	self.A = None
	if kwargs :
		for key in kwargs :
			setattr(self, key, kwargs [key])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
1
Gpt3D_Clone178_1.py 1 18
Gpt3D_Clone178_1.py 20 35

----------------------------------------

def __init__(self, a = None, b = None, ** kwargs) :
	self.relations = {
	"e" : {"req" : ["a", "b"], "func" : lambda a, b : a + b},
	"C" : {"req" : ["e", "a"], "func" : lambda e, a : e * 1 / (a * b)},
	"A" : {"req" : ["C", "e"], "func" : lambda e, C : cmplx_func_A(e, C)},
	"a" : {"req" : ["e", "b"], "func" : lambda e, b : e / b},
	"b" : {"req" : ["e", "a"], "func" : lambda e, a : e / a}}
	self.a = a
	self.b = b
	self.e = None
	self.C = None
	self.A = None
	if kwargs :
		for key in kwargs :
			setattr(self, key, kwargs [key])
----------------------------------------

def __init__(self, a = None, b = None, ** kwargs) :
	self.relations = {
	"e" : {"req" : ["a", "b"], "func" : lambda x, y : (x + y) * 1.0},
	"C" : {"req" : ["e", "a"], "func" : lambda r,j : (r * 1.0) / (j * b)},
	"A" : {"req" : ["C", "e"], "func" : lambda r, c : complex_func_A(r, c)},
	"a" : {"req" : ["e", "b"], "func" : lambda p, q : (p / q) * 1.0},
	"b" : {"req" : ["e", "a"], "func" : lambda m, n : (m / n) * 1.0}}
	self.a = a
	self.b = b
	self.e = None
	self.C = None
	self.A = None
	if kwargs :
		for k in kwargs :
			setattr(self, k, kwargs [k])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
179
1
Gpt3D_Clone179_1.py 1 18
Gpt3D_Clone179_1.py 20 31

----------------------------------------

def __init__(self, a = None, b = None, ** kwargs) :
	self.relations = {
	"e" : {"req" : ["a", "b"], "func" : lambda a, b : a + b},
	"C" : {"req" : ["e", "a"], "func" : lambda e, a : e * 1 / (a * b)},
	"A" : {"req" : ["C", "e"], "func" : lambda e, C : cmplx_func_A(e, C)},
	"a" : {"req" : ["e", "b"], "func" : lambda e, b : e / b},
	"b" : {"req" : ["e", "a"], "func" : lambda e, a : e / a}}
	self.a = a
	self.b = b
	self.e = None
	self.C = None
	self.A = None
	if kwargs :
		for key in kwargs :
			setattr(self, key, kwargs [key])
----------------------------------------

def __init__(self, a = None, b = None, **kwargs): 
	self.a = a
	self.b = b
	self.e = None
	self.C = None
	self.A = None
	
	if kwargs: 
		for key in kwargs: 
			setattr(self, key, kwargs[key])
			
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
0
Gpt3D_Clone181_0.py 1 15
Gpt3D_Clone181_0.py 17 27

----------------------------------------

def __eq__(self, other) :
	if not isinstance(other, FrozenDict) :
		return dict(self.iteritems()) == other
	if len(self) ! = len(other) :
		return False
	for key, value in self.iteritems() :
		try :
			if value ! = other [key] :
				return False
		except KeyError :
			return False
	return True
----------------------------------------

def __eq__(self, other) : 
	if not isinstance(other, FrozenDict) :
		return dict(self.iteritems()) == other 
	other_keys = set(other.keys())
	if len(self) != len(other_keys) : 
		return False
	for key, value in self.iteritems() : 
		if key not in other_keys or value != other[key] : 
			return False 
	return True 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
1
Gpt3D_Clone181_1.py 1 15
Gpt3D_Clone181_1.py 17 26

----------------------------------------

def __eq__(self, other) :
	if not isinstance(other, FrozenDict) :
		return dict(self.iteritems()) == other
	if len(self) ! = len(other) :
		return False
	for key, value in self.iteritems() :
		try :
			if value ! = other [key] :
				return False
		except KeyError :
			return False
	return True
----------------------------------------

def __eq__(self, other) : 
	if not isinstance(other, FrozenDict) :
		return dict(self.iteritems()) == other 
	if len(self) != len(other) : 
		return False 
	for key, value in self.iteritems() : 
		if key not in other or value != other[key] :
			return False 
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
182
0
Gpt3D_Clone182_0.py 1 19
Gpt3D_Clone182_0.py 21 37

----------------------------------------

def __init__(self, parent = None) :
	super(Main, self).__init__(parent)
	self.addButton = QtGui.QPushButton('button to add other widgets')
	self.addButton.clicked.connect(self.addWidget)
	self.scrollLayout = QtGui.QFormLayout()
	self.scrollWidget = QtGui.QWidget()
	self.scrollWidget.setLayout(self.scrollLayout)
	self.scrollArea = QtGui.QScrollArea()
	self.scrollArea.setWidgetResizable(True)
	self.scrollArea.setWidget(self.scrollWidget)
	self.mainLayout = QtGui.QVBoxLayout()
	self.mainLayout.addWidget(self.addButton)
	self.mainLayout.addWidget(self.scrollArea)
	self.centralWidget = QtGui.QWidget()
	self.centralWidget.setLayout(self.mainLayout)
	self.setCentralWidget(self.centralWidget)
----------------------------------------

def __init__(self, parent) :
	super(Main, self).__init__(parent)
	self.addButton = QtGui.QPushButton('button to add other widgets')
	self.addButton.clicked.connect(self.addWidget)
	self.mainLayout = QtGui.QVBoxLayout()
	self.scrollArea = QtGui.QScrollArea()
	self.scrollArea.setWidgetResizable(True)
	self.scrollWidget = QtGui.QWidget()
	self.scrollLayout = QtGui.QFormLayout()
	self.scrollWidget.setLayout(self.scrollLayout)
	self.scrollArea.setWidget(self.scrollWidget)
	self.mainLayout.addWidget(self.addButton)
	self.mainLayout.addWidget(self.scrollArea)
	self.centralWidget = QtGui.QWidget()
	self.centralWidget.setLayout(self.mainLayout)
	self.setCentralWidget(self.centralWidget)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
0
Gpt3D_Clone183_0.py 1 9
Gpt3D_Clone183_0.py 11 18

----------------------------------------

def __init__(self, parent = None) :
	super(Test, self).__init__(parent)
	self.pushButton = QtGui.QPushButton('I am in Test widget')
	layout = QtGui.QHBoxLayout()
	layout.addWidget(self.pushButton)
	self.setLayout(layout)
----------------------------------------

def __init__(self, parent = None) :
	super(Test, self).__init__(parent)
	self.pushButton = QtGui.QPushButton('I am in Test widget')
	widget = QtGui.QWidget(self)
	layout = QtGui.QHBoxLayout(widget)
	layout.addWidget(self.pushButton)
	self.setCentralWidget(widget)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
18
0
Gpt3D_Clone18_0.py 1 4
Gpt3D_Clone18_0.py 6 12

----------------------------------------

def __init__(self, a) :
	self.a = a
	self.li = []
----------------------------------------

def __init__(self, a) :
	self.a = a
	self.li = []
	for i in range(a):
		self.li.append(i)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
18
1
Gpt3D_Clone18_1.py 1 4
Gpt3D_Clone18_1.py 6 9

----------------------------------------

def __init__(self, a) :
	self.a = a
	self.li = []
----------------------------------------

def __init__(self, a) :
	self.a = a
	self.li = list()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
192
0
Gpt3D_Clone192_0.py 1 11
Gpt3D_Clone192_0.py 13 22

----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			return d.replace(day = day).replace(year = d.year + int(months) / / 12).replace(month = (d.month + int(months)) % 12)
		except :
			pass
	raise Exception("should not happen")
----------------------------------------

def add_months(d, months):
    for i in range(4):
        day = d.day - i
        try:
            return d.replace(day=day, year= d.year +int(months) //12 , month = (d.month + int(months)) % 12)
        except:
            continue
    raise Exception("should not happen")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
192
1
Gpt3D_Clone192_1.py 1 11
Gpt3D_Clone192_1.py 13 21

----------------------------------------

def add_months(d, months) :
	for i in range(4) :
		day = d.day - i
		try :
			return d.replace(day = day).replace(year = d.year + int(months) / / 12).replace(month = (d.month + int(months)) % 12)
		except :
			pass
	raise Exception("should not happen")
----------------------------------------

def add_months(d, months):
    for i in range(4):
        decrement = -i
        try:
            return d.replace(day=d.day+decrement, year= d.year +int(months) //12 , month = (d.month + int(months)) % 12)
        except:
            continue
    raise Exception("should not happen")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
194
0
Gpt3D_Clone194_0.py 1 10
Gpt3D_Clone194_0.py 12 22

----------------------------------------

def seriesrun(x, n) :
	power = 0
	s = 0
	while power < n :
		s += (- x) ** power
		power += 1
	return s
----------------------------------------

def seriesrun(x, n):
	power = 0
	s = 0
	while power < n:
		if power % 2 == 0:
			s += x ** power
		else:
			s += (-x) ** power
		power += 1
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
194
1
Gpt3D_Clone194_1.py 1 10
Gpt3D_Clone194_1.py 12 19

----------------------------------------

def seriesrun(x, n) :
	power = 0
	s = 0
	while power < n :
		s += (- x) ** power
		power += 1
	return s
----------------------------------------

def seriesrun(x, n):
	power = n
	s = 0
	while power >= 0:
		s += (- x) ** power
		power -= 1
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
194
2
Gpt3D_Clone194_2.py 1 10
Gpt3D_Clone194_2.py 12 19

----------------------------------------

def seriesrun(x, n) :
	power = 0
	s = 0
	while power < n :
		s += (- x) ** power
		power += 1
	return s
----------------------------------------

def seriesrun(x, n): 
	exponent = 0
	total = 0
	while exponent < n:
		total = total + (-x) ** exponent
		exponent = exponent + 1
	return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
195
0
Gpt3D_Clone195_0.py 1 15
Gpt3D_Clone195_0.py 17 29

----------------------------------------

def factors(num) :
	numroot = int(math.sqrt(num)) + 1
	for i in xrange(2, numroot) :
		divider, remainder = divmod(num, i)
		if not remainder :
			yield i
			break
	else :
		yield num
		return
	for factor in factors(divider) :
		yield factor
----------------------------------------

def factors(num) :
	numroot = int(math.floor(math.sqrt(num)))
	for i in xrange(2, numroot) :
		divider, remainder = divmod(num, i)
		if not remainder :
			yield i
			for factor in factors(divider) :
				yield factor
			break
	else :
		yield num
		return
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
198
1
Gpt3D_Clone198_1.py 1 9
Gpt3D_Clone198_1.py 11 20

----------------------------------------

def transformFactorList(factorList) :
	twos = [x for x in factorList if x == 2]
	rest = [x for x in factorList if x ! = 2]
	if twos :
		rest.insert(0, 2 if len(twos) == 1 else "2 ^ %d" % len(twos))
	return rest
----------------------------------------

def transformFactorList(factorList) :
	if 2 in factorList:
		twos = [x for x in factorList if x == 2]
		rest = [x for x in factorList if x ! = 2]
		if twos :
			rest.insert(0, 2 if len(twos) == 1 else "2 ^ %d" % len(twos))
			return rest
	else:
		return factList
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
198
2
Gpt3D_Clone198_2.py 1 9
Gpt3D_Clone198_2.py 11 19

----------------------------------------

def transformFactorList(factorList) :
	twos = [x for x in factorList if x == 2]
	rest = [x for x in factorList if x ! = 2]
	if twos :
		rest.insert(0, 2 if len(twos) == 1 else "2 ^ %d" % len(twos))
	return rest
----------------------------------------

def transformFactorList(factorList) :
	twos = [x for x in factorList if x == 2]
	rest = [x for x in factorList if x != 2]
	if twos :
		rest.reverse()
		rest.append(2 if len(twos) == 1 else "2 ^ %d" % len(twos))
		rest.reverse()
	return rest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
198
3
Gpt3D_Clone198_3.py 1 9
Gpt3D_Clone198_3.py 11 18

----------------------------------------

def transformFactorList(factorList) :
	twos = [x for x in factorList if x == 2]
	rest = [x for x in factorList if x ! = 2]
	if twos :
		rest.insert(0, 2 if len(twos) == 1 else "2 ^ %d" % len(twos))
	return rest
----------------------------------------

def transformFactorList(factorList) :
	twos = [x for x in factorList if x == 2]
	rest = [x for x in factorList if x != 2]
	if twos :
		rest.append(2 if len(twos) == 1 else "2 ^ %d" % len(twos))
		rest.sort()
	return rest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
0
Gpt3D_Clone199_0.py 1 9
Gpt3D_Clone199_0.py 11 23

----------------------------------------

def convert_timestamp(date_timestamp = None) :
	try :
		d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S %Z")
	except ValueError :
		d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S")
	return d.strftime("%Y-%m-%d")
----------------------------------------

def convert_timestamp(date_timestamp = None) :
	d = None
	try :
		d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S %Z")
	except ValueError :
		try :
			d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S")
		except :
			return False
	if d is not None :
		return d.strftime("%Y-%m-%d")
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
1
Gpt3D_Clone199_1.py 1 9
Gpt3D_Clone199_1.py 11 21

----------------------------------------

def convert_timestamp(date_timestamp = None) :
	try :
		d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S %Z")
	except ValueError :
		d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S")
	return d.strftime("%Y-%m-%d")
----------------------------------------

def convert_timestamp(date_timestamp = None) :
	try :
		d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S %Z")
		return d.strftime("%Y-%m-%d")
	except ValueError :
		try :
			d = datetime.strptime(date_timestamp, "%Y-%m-%d %H:%M:%S")
			return d.strftime("%Y-%m-%d")
		except :
			return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
0
Gpt3D_Clone1_0.py 1 12
Gpt3D_Clone1_0.py 14 23

----------------------------------------

def download_file(service, file_id) :
	request = service.files().get_media(fileId = file_id)
	fh = io.BytesIO()
	downloader = MediaIoBaseDownload(fh, request)
	done = False
	while done is False :
		status, done = downloader.next_chunk()
		print ("Download %d%%." % int(status.progress() * 100))
	return fh.getvalue()
----------------------------------------

def download_file(service, file_id):
	request = service.files().get_media(fileId = file_id)
	fh = io.BytesIO()
	downloader = MediaIoBaseDownload(fh, request)
	status = downloader.next_chunk()
	while not status[1]:
		status = downloader.next_chunk()
		print("Download %d%%." % int(status[0].progress() * 100))
	return fh.getvalue()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
200
0
Gpt3D_Clone200_0.py 1 15
Gpt3D_Clone200_0.py 17 27

----------------------------------------

def __init__(self, host, user, port, key, remote_port) :
	self.host = host
	self.user = user
	self.port = port
	self.key = key
	self.remote_port = remote_port
	tmpfile = tempfile.NamedTemporaryFile()
	tmpfile.close()
	self.socket = tmpfile.name
	self.local_port = random.randint(10000, 65535)
	self.local_host = '127.0.0.1'
	self.open = False
----------------------------------------

def __init__(self, host, user, port, key, remote_port):
	self.host = host
	self.user = user
	self.port = port
	self.key = key
	self.remote_port = remote_port
	self.socket = "mysocket"
	self.local_port = random.randint(10000, 65535)
	self.local_host = '127.0.0.1'
	self.open = False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
200
1
Gpt3D_Clone200_1.py 1 15
Gpt3D_Clone200_1.py 17 27

----------------------------------------

def __init__(self, host, user, port, key, remote_port) :
	self.host = host
	self.user = user
	self.port = port
	self.key = key
	self.remote_port = remote_port
	tmpfile = tempfile.NamedTemporaryFile()
	tmpfile.close()
	self.socket = tmpfile.name
	self.local_port = random.randint(10000, 65535)
	self.local_host = '127.0.0.1'
	self.open = False
----------------------------------------

def __init__(self, host, user, port, key, remote_port): 
        self.host = host
        self.user = user
        self.port = port
        self.key = key
        self.remote_port = remote_port 
        self.socket = tempfile.NamedTemporaryFile().name   
        self.local_port = random.randint(10000, 65535)
        self.local_host = '127.0.0.1'
        self.open = False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
200
2
Gpt3D_Clone200_2.py 1 15
Gpt3D_Clone200_2.py 17 26

----------------------------------------

def __init__(self, host, user, port, key, remote_port) :
	self.host = host
	self.user = user
	self.port = port
	self.key = key
	self.remote_port = remote_port
	tmpfile = tempfile.NamedTemporaryFile()
	tmpfile.close()
	self.socket = tmpfile.name
	self.local_port = random.randint(10000, 65535)
	self.local_host = '127.0.0.1'
	self.open = False
----------------------------------------

def __init__(self, host, user, port, key, remote_port):
       self.host = host
       self.user = user
       self.port = port
       self.key = key
       self.remote_port = remote_port
       self.local_port = random.randint(10000, 65535)
       self.local_host = '127.0.0.1'
       self.open = False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
202
0
Gpt3D_Clone202_0.py 1 11
Gpt3D_Clone202_0.py 13 22

----------------------------------------

def minimum(lst, current_min = None) :
	if not lst :
		return current_min
	if current_min is None :
		current_min = lst [0]
	elif lst [0] < current_min :
		current_min = lst [0]
	return minimum(lst [1 :], current_min)
----------------------------------------

def minimum(lst, current_min=None):
	if lst:
		if not current_min:
			current_min = lst[0]
		elif lst[0] < current_min:
			current_min = lst[0]
		return minimum(lst[1:], current_min)
	else:
		return current_min
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
202
1
Gpt3D_Clone202_1.py 1 11
Gpt3D_Clone202_1.py 13 22

----------------------------------------

def minimum(lst, current_min = None) :
	if not lst :
		return current_min
	if current_min is None :
		current_min = lst [0]
	elif lst [0] < current_min :
		current_min = lst [0]
	return minimum(lst [1 :], current_min)
----------------------------------------

def minimum(list, current_min=None):
    if len(list) > 0:
        if current_min is None:
            current_min = list[0]
        elif list[0] < current_min:
            current_min = list[0]
        return minimum(list[1:], current_min)
    else:
        return current_min
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
204
0
Gpt3D_Clone204_0.py 1 13
Gpt3D_Clone204_0.py 15 29

----------------------------------------

def minimum(lst) :
	if len(lst) == 1 :
		return lst [0]
	first = lst [0]
	rest = lst [1 :]
	min_of_rest = minimum(rest)
	if first < min_of_rest :
		return first
	else :
		return min_of_rest
----------------------------------------

def minimum(lst) :
	if len(lst) < 1 :
		return None
	elif len(lst) == 1 :
		return lst [0]
	first = lst [0]
	rest = lst [1:]
	min_of_rest = minimum(rest)
	if first < min_of_rest :
		return first
	else :
		return min_of_rest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
0
Gpt3D_Clone205_0.py 1 11
Gpt3D_Clone205_0.py 13 22

----------------------------------------

def scraper(pageNum) :
	while pageNum < SOME_TARGET_VALUE :
		req = Request("http://www.someurl.com/Search/page=" + str(pageNum) + "&facet_Category=20", headers = {"User-Agent" : "Mozilla/5.0"})
		html = urlopen(req).read()
		bsObj = BeautifulSoup(html)
		for result in bsObj.select("h2 a") :
			print (result ["href"])
		pageNum += 1
----------------------------------------

def scraper(start, end, category) :
  page = start
  while page < end:
    req = Request("http://www.someurl.com/Search/page=" + str(page) + "&facet_Category=" + str(category), headers = {"User-Agent" : "Mozilla/5.0"})
    html = urlopen(req).read()
    bsObj = BeautifulSoup(html)
    for result in bsObj.select("h2 a") :
      print (result ["href"])
    page += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
1
Gpt3D_Clone205_1.py 1 11
Gpt3D_Clone205_1.py 13 21

----------------------------------------

def scraper(pageNum) :
	while pageNum < SOME_TARGET_VALUE :
		req = Request("http://www.someurl.com/Search/page=" + str(pageNum) + "&facet_Category=20", headers = {"User-Agent" : "Mozilla/5.0"})
		html = urlopen(req).read()
		bsObj = BeautifulSoup(html)
		for result in bsObj.select("h2 a") :
			print (result ["href"])
		pageNum += 1
----------------------------------------

def scraper(pageNum) :
	while pageNum < SOME_TARGET_VALUE :
		req = Request("http://www.someurl.com/Search/page=" + str(pageNum) + "&facet_Category=20", headers = {"User-Agent" : "Mozilla/5.0"})
		html = urlopen(req).read()
		bsObj = BeautifulSoup(html)
		for result in bsObj.find_all('div', class_ = 'result-title') :
			print (result.a["href"])
		pageNum += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
0
Gpt3D_Clone206_0.py 1 12
Gpt3D_Clone206_0.py 14 23

----------------------------------------

def greet(lines, cheers) :
	for i in range(lines) :
		output = (" ") * i + "Go"
		for j in range(cheers) :
			if cheers == 1 :
				print output
				break
			output += "Budddy Go"
		print output
----------------------------------------

def greet(lines, cheers):
	for i in range(lines):
		output = (" ")* i
		if cheers == 1:
			print output + "Go"
			continue
		for j in range(cheers):
			output += "Buddy Go"
		print output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
207
0
Gpt3D_Clone207_0.py 1 9
Gpt3D_Clone207_0.py 11 16

----------------------------------------

def request(context, flow) :
	if flow.request.host == 'google.com' :
		flow.reply(HTTPResponse('HTTP/1.1', 302, 'Found',
		Headers(Location = 'http://stackoverflow.com/',
		Content_Length = '0'),
		b''))
----------------------------------------

def request(context, flow):
  if flow.request.host == 'google.com':
    flow.reply(HTTPResponse('HTTP/1.1', 200, 'OK',
      Headers(Location = 'http://google.com/', Content_Length = '0'),
      b''))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
207
1
Gpt3D_Clone207_1.py 1 9
Gpt3D_Clone207_1.py 11 16

----------------------------------------

def request(context, flow) :
	if flow.request.host == 'google.com' :
		flow.reply(HTTPResponse('HTTP/1.1', 302, 'Found',
		Headers(Location = 'http://stackoverflow.com/',
		Content_Length = '0'),
		b''))
----------------------------------------

def request(context, flow):
  if flow.request.host == 'google.com':
    flow.reply(HTTPResponse('HTTP/1.1', 302, 'Found',
      Headers(Location = 'http://gmail.com/', Content_Length = '0'),
      b''))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
1
Gpt3D_Clone210_1.py 1 15
Gpt3D_Clone210_1.py 17 30

----------------------------------------

def longestSubstringFinder(string1, string2) :
	answer = ""
	len1, len2 = len(string1), len(string2)
	for i in range(len1) :
		match = ""
		for j in range(len2) :
			if (i + j < len1 and string1 [i + j] == string2 [j]) :
				match += string2 [j]
			else :
				if (len(match) > len(answer)) : answer = match
				match = ""
	return answer
----------------------------------------

def longestSubstringFinder(string1, string2 ) :
	answer = ""
	len1, len2 = len (string1 ), len (string2 )
	for i in range(len1) :
		for j in range(len2) :
			match = ""
			if (i + j < len1 and string1 [i + j] == string2 [j]) :
				match += string2 [j]
				
			if (len(match) > len(answer)) : 
				answer = match
	return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
0
Gpt3D_Clone216_0.py 1 7
Gpt3D_Clone216_0.py 9 13

----------------------------------------

def count_words(string) :
	for word, v in collections.Counter(string.split()).items() :
		if word.endswith("on") :
			print (word, ":", v)
----------------------------------------

def count_words(string):
	for word, v in collections.Counter(string.split()).items():
		if word[-2:] == "on":
			print(word, ":", v)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
1
Gpt3D_Clone216_1.py 1 7
Gpt3D_Clone216_1.py 9 13

----------------------------------------

def count_words(string) :
	for word, v in collections.Counter(string.split()).items() :
		if word.endswith("on") :
			print (word, ":", v)
----------------------------------------

def count_words(string):
	for word, v in collections.Counter(string.split()).items():
		if word.endswith('on'):
			print("{0}: {1}". format(word, v))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
0
Gpt3D_Clone220_0.py 1 16
Gpt3D_Clone220_0.py 18 34

----------------------------------------

def decdeg2dms(dd) :
	negative = dd < 0
	dd = abs(dd)
	minutes, seconds = divmod(dd * 3600, 60)
	degrees, minutes = divmod(minutes, 60)
	if negative :
		if degrees > 0 :
			degrees = - degrees
		elif minutes > 0 :
			minutes = - minutes
		else :
			seconds = - seconds
	return (degrees, minutes, seconds)
----------------------------------------

def decdeg2dms(dd):
	isPos = True
	if dd < 0: 
		isPos = False
		dd = abs(dd)
	minutes, seconds = divmod(dd * 3600, 60)
	degrees, minutes = divmod(minutes, 60)
	if not isPos :
		if degrees > 0 :
			degrees = - degrees
		elif minutes > 0 :
			minutes = - minutes
		else :
			seconds = - seconds
	return (degrees, minutes, seconds)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
1
Gpt3D_Clone220_1.py 1 16
Gpt3D_Clone220_1.py 18 30

----------------------------------------

def decdeg2dms(dd) :
	negative = dd < 0
	dd = abs(dd)
	minutes, seconds = divmod(dd * 3600, 60)
	degrees, minutes = divmod(minutes, 60)
	if negative :
		if degrees > 0 :
			degrees = - degrees
		elif minutes > 0 :
			minutes = - minutes
		else :
			seconds = - seconds
	return (degrees, minutes, seconds)
----------------------------------------

def decdeg2dms(dd):
	if dd >= 0: 
		minutes, seconds = divmod(dd * 3600, 60)
		degrees, minutes = divmod(minutes, 60)
	elif dd < 0: 
		minutes, seconds = divmod(abs(dd * 3600), 60)
		degrees, minutes = divmod(minutes, 60)
		degrees = - degrees
		minutes = - minutes
		seconds = - seconds
	return (degrees, minutes, seconds)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
0
Gpt3D_Clone221_0.py 1 15
Gpt3D_Clone221_0.py 17 29

----------------------------------------

def __init__(self, * args, ** kwargs) :
	tk.Tk.__init__(self, * args, ** kwargs)
	self.frame = tk.Frame(self)
	self.frame.pack(side = "top", fill = "both", expand = True)
	self.label = tk.Label(self, text = "Hello, world")
	button1 = tk.Button(self, text = "Click to hide label",
	command = self.hide_label)
	button2 = tk.Button(self, text = "Click to show label",
	command = self.show_label)
	self.label.pack(in_ = self.frame)
	button1.pack(in_ = self.frame)
	button2.pack(in_ = self.frame)
----------------------------------------

def __init__(self, *args, **kwargs):
   tk.Tk.__init__(self, *args, **kwargs)
   self.frame = tk.Frame(self)
   self.frame.pack(side="top", fill="both", expand=True)
   self.label = tk.Label(self, text="Hello, world")
   button1 = tk.Button(self, text="Click to hide label",
                       command=self.hide_label)
   button2 = tk.Button(self, text="Click to show label",
                       command=self.show_label)
   self.label.grid(row=0, column=0, sticky="nsew")
   button1.grid(row=1, column=0, sticky="nsew")
   button2.grid(row=1, column=1, sticky="nsew")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
1
Gpt3D_Clone221_1.py 1 15
Gpt3D_Clone221_1.py 17 30

----------------------------------------

def __init__(self, * args, ** kwargs) :
	tk.Tk.__init__(self, * args, ** kwargs)
	self.frame = tk.Frame(self)
	self.frame.pack(side = "top", fill = "both", expand = True)
	self.label = tk.Label(self, text = "Hello, world")
	button1 = tk.Button(self, text = "Click to hide label",
	command = self.hide_label)
	button2 = tk.Button(self, text = "Click to show label",
	command = self.show_label)
	self.label.pack(in_ = self.frame)
	button1.pack(in_ = self.frame)
	button2.pack(in_ = self.frame)
----------------------------------------

def __init__(self, *args, **kwargs):
   tk.Tk.__init__(self, *args, **kwargs)
   self.frame = tk.Frame(self)
   self.frame.pack(fill="both", expand=True, side="top")
   self.label = tk.Label(self, text="Hello, world")
   button1 = tk.Button(self, text="Click to hide label",
                       command=self.hide_label)
   button2 = tk.Button(self, text="Click to show label",
                       command=self.show_label)
   self.label.pack(fill="both", pady=2, padx=2, expand=True, in_=self.frame)
   button1.pack(pady=1, padx=2, in_=self.frame)
   button2.pack(pady=1, padx=2, in_=self.frame)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
0
Gpt3D_Clone224_0.py 1 14
Gpt3D_Clone224_0.py 16 26

----------------------------------------

def insert(self, btreeNode) :
	if self.data > btreeNode.data :
		if self.lChild == None :
			self.lChild = btreeNode
		else :
			self.lChild.insert(btreeNode)
	else :
		if self.rChild == None :
			self.rChild = btreeNode
		else :
			self.rChild.insert(btreeNode)
----------------------------------------

def insert(self, btreeNode) :
	if self.data > btreeNode.data :
		if self.lChild == None :
			self.lChild = btreeNode
		else :
			self.lChild.insert(btreeNode)
	else :
		if self.rChild != None :
			self.rChild.insert(btreeNode)
		self.rChild = btreeNode
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
2
Gpt3D_Clone226_2.py 1 9
Gpt3D_Clone226_2.py 11 20

----------------------------------------

def insert(self, data) :
	if self.root :
		return self.root._insert(data)
	else :
		self.root = Node(data)
		return True
----------------------------------------

def insert(self, data):
    if self.root:
        index = self.root._insert(data)
        if index:
            return index
    else:
        self.root = Node(data)
        return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
3
Gpt3D_Clone226_3.py 1 9
Gpt3D_Clone226_3.py 11 19

----------------------------------------

def insert(self, data) :
	if self.root :
		return self.root._insert(data)
	else :
		self.root = Node(data)
		return True
----------------------------------------

def insert(self, data):
    if self.root:
        value = self.root._insert(data)
        if value is not None:
            return value
    else:
        self.root = Node(data)
        return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
228
1
Gpt3D_Clone228_1.py 1 8
Gpt3D_Clone228_1.py 10 15

----------------------------------------

def main() :
	n = int(raw_input())
	for i in range(0, 1 < < n) :
		gray = i ^ (i >> 1)
		print "{0:0{1}b}".format(gray, n),
----------------------------------------

def main():
	n = int(input())
	for i in range(2**n):
		gray = i ^ (i >> 1)
		print(format(gray, "0{}b".format(n)), end="")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
228
2
Gpt3D_Clone228_2.py 1 8
Gpt3D_Clone228_2.py 10 15

----------------------------------------

def main() :
	n = int(raw_input())
	for i in range(0, 1 < < n) :
		gray = i ^ (i >> 1)
		print "{0:0{1}b}".format(gray, n),
----------------------------------------

def main():
	n = int(input())
	for i in range(2**n):
		gray = i^(i>>1)
		binary = bin(gray)[2:].zfill(n)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
228
3
Gpt3D_Clone228_3.py 1 8
Gpt3D_Clone228_3.py 10 15

----------------------------------------

def main() :
	n = int(raw_input())
	for i in range(0, 1 < < n) :
		gray = i ^ (i >> 1)
		print "{0:0{1}b}".format(gray, n),
----------------------------------------

def main():
	n = int(input())
	for i in range(2**n):
		gray = i ^ (i >> 1)
		binString = "{0:0{1}b}".format(gray, n)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
231
0
Gpt3D_Clone231_0.py 1 12
Gpt3D_Clone231_0.py 14 25

----------------------------------------

def getName(self, name) :
	listy = []
	splitName = name.split(' ')
	for i in range(len(splitName)) :
		if i == (len(splitName) - 1) :
			listy.append('Surname: ' + splitName [i])
		else :
			listy.append('Name: ' + splitName [i])
	return listy
----------------------------------------

def getName3(self, name) :
	names = []
	splittext = name.split(' ')
	i = 0
	for name in splittext :
		if i == (len(splittext)-1) :
			names.append('Surname: ' + name)
		else :
			names.append('Name: ' + name)
		i += 1
	return names
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
232
0
Gpt3D_Clone232_0.py 1 9
Gpt3D_Clone232_0.py 11 18

----------------------------------------

def getName(self, name) :
	splitName = name.split(' ')
	surname = splitName.pop()
	for i in range(len(splitName)) :
		yield ('Name: %s' % splitName [i])
	yield ('Surname: %s' % surname)
----------------------------------------

def getName(self, name) :
	splitName = name.split(' ')
	surname = splitName.pop()
	for piece in splitName :
		yield ('Name: %s' % piece)
	yield ('Surname: %s' % surname)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
0
Gpt3D_Clone240_0.py 1 17
Gpt3D_Clone240_0.py 19 28

----------------------------------------

def flatten(TheList) :
	listIsNested = True
	while listIsNested :
		keepChecking = False
		Temp = []
		for element in TheList :
			if isinstance(element, list) :
				Temp.extend(element)
				keepChecking = True
			else :
				Temp.append(element)
		listIsNested = keepChecking
		TheList = Temp [:]
	return TheList
----------------------------------------

def flatten_4(TheList):
  new_list = []
  for element in TheList:
    if isinstance(element, list):
      remain_list = flatten_4(element)
      new_list.extend(remain_list)
    else:
      new_list.append(element)
  return new_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
1
Gpt3D_Clone242_1.py 1 10
Gpt3D_Clone242_1.py 12 20

----------------------------------------

def flatten_list(seq) :
	if not seq :
		return []
	elif isinstance(seq [0], list) :
		return (flatten_list(seq [0]) + flatten_list(seq [1 :]))
	else :
		return [seq [0]] + flatten_list(seq [1 :])
----------------------------------------

def flatten_list(seq) :
	if seq == [] :
		return []
	elif isinstance(seq [0], list) :
		return flatten_list(seq [0]) + flatten_list(seq [1 :])
	else :
		return [ seq [0] ] + flatten_list(seq [1 :])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
253
0
Gpt3D_Clone253_0.py 1 15
Gpt3D_Clone253_0.py 17 31

----------------------------------------

def bmi_risk(bmi, age) :
	if bmi < 22 and age < 45 :
		risk = "Low"
	elif bmi < 22 and age > = 45 :
		risk = "Medium"
	elif bmi > = 22 and age < 45 :
		risk = "Medium"
	elif bmi > = 22 and age > = 45 :
		risk = "High"
	else :
		risk = "Unknown"
	return risk
----------------------------------------

def bmi_risk(bmi, age) :
	if bmi < 22 :
		if age < 45 :
			risk = "Low"
		else :
			risk = "Medium"
	elif bmi >= 22 :
		if age < 45 :
			risk = "Medium"
		else :
			risk = "High"
	else :
		risk = "Unknown"
	return risk
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
253
1
Gpt3D_Clone253_1.py 1 15
Gpt3D_Clone253_1.py 17 30

----------------------------------------

def bmi_risk(bmi, age) :
	if bmi < 22 and age < 45 :
		risk = "Low"
	elif bmi < 22 and age > = 45 :
		risk = "Medium"
	elif bmi > = 22 and age < 45 :
		risk = "Medium"
	elif bmi > = 22 and age > = 45 :
		risk = "High"
	else :
		risk = "Unknown"
	return risk
----------------------------------------

def bmi_risk(bmi, age) :
	risk = "Unknown"
	if bmi < 22 :
		if age < 45 :
			risk = "Low"
		elif age >= 45 :
			risk = "Medium"
	elif bmi >= 22 :
		if age < 45 :
			risk = "Medium"
		elif age >= 45 :
			risk = "High"
	return risk
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
253
2
Gpt3D_Clone253_2.py 1 15
Gpt3D_Clone253_2.py 17 26

----------------------------------------

def bmi_risk(bmi, age) :
	if bmi < 22 and age < 45 :
		risk = "Low"
	elif bmi < 22 and age > = 45 :
		risk = "Medium"
	elif bmi > = 22 and age < 45 :
		risk = "Medium"
	elif bmi > = 22 and age > = 45 :
		risk = "High"
	else :
		risk = "Unknown"
	return risk
----------------------------------------

def bmi_risk(bmi, age) :
	risk = "Unknown"
	if (bmi < 22 and age < 45) or (bmi > = 22 and age > = 45) :
		risk = "Medium"
	elif bmi < 22 and age > = 45 :
		risk = "Low"
	elif bmi > = 22 and age < 45 :
		risk = "High"
	return risk
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
0
Gpt3D_Clone254_0.py 1 14
Gpt3D_Clone254_0.py 16 28

----------------------------------------

def recurse(left, right, threshold, features, node) :
	if (threshold [node] ! = - 2) :
		print "if ( " + features [node] + " <= " + str(threshold [node]) + " ) {"
		if left [node] ! = - 1 :
			recurse(left, right, threshold, features, left [node])
		print "} else {"
		if right [node] ! = - 1 :
			recurse(left, right, threshold, features, right [node])
		print "}"
	else :
		print "return " + str(value [node])
----------------------------------------

def recur(lt, rt, thresh, feat, node):
	if (thresh[node] != -2):
		print("if ( "+feat[node]+" <= "+str(thresh[node])+" ) {")
		if lt[node] != -1:
			recur(lt, rt, thresh, feat, lt[node])
		print("} else {")
		if rt[node] != -1:
			recur(lt, rt, thresh, feat, rt[node])
		print("}")
	else:
		print("return "+str(value[node]))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
1
Gpt3D_Clone254_1.py 1 14
Gpt3D_Clone254_1.py 16 27

----------------------------------------

def recurse(left, right, threshold, features, node) :
	if (threshold [node] ! = - 2) :
		print "if ( " + features [node] + " <= " + str(threshold [node]) + " ) {"
		if left [node] ! = - 1 :
			recurse(left, right, threshold, features, left [node])
		print "} else {"
		if right [node] ! = - 1 :
			recurse(left, right, threshold, features, right [node])
		print "}"
	else :
		print "return " + str(value [node])
----------------------------------------

def recurs(lefty, rig, thresholdy, featy, nodie):
	if (thresholdy [nodie] != -2):
		print("if ( "+featy [nodie]+" <= "+str(thresholdy [nodie])+" ) {")
		if lefty [nodie] != -1:
			recurs(lefty, rig, thresholdy, featy, lefty [nodie])
		print("} else {")
		if rig [nodie] != -1:
			recurs(lefty, rig, thresholdy, featy, rig [nodie])
		print("}")
	else:
		print("return "+str(value[nodie]))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
0
Gpt3D_Clone263_0.py 1 18
Gpt3D_Clone263_0.py 20 37

----------------------------------------

def recurse(left, right, child, lineage = None) :
	if lineage is None :
		lineage = [child]
	if child in left :
		parent = np.where(left == child) [0].item()
		split = 'l'
	else :
		parent = np.where(right == child) [0].item()
		split = 'r'
	lineage.append((parent, split, threshold [parent], features [parent]))
	if parent == 0 :
		lineage.reverse()
		return lineage
	else :
		return recurse(left, right, parent, lineage)
----------------------------------------

def recurse(left, right, child, lineage = None) :
	if lineage is not None :
		lineage = [child]
	if child in left :
		parent = np.where(left == child) [0].item()
		split = 'l'
	else :
		parent = np.where(right == child) [0].item()
		split = 'r'
	lineage.append((parent, split, threshold [parent], features [parent]))
	if parent != 0 :
		return recurse(left, right, parent, lineage)
	else :
		lineage.reverse()
		return lineage
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
264
0
Gpt3D_Clone264_0.py 1 18
Gpt3D_Clone264_0.py 20 35

----------------------------------------

def recurse(left, right, child, lineage = None) :
	if lineage is None :
		lineage = [child]
	if child in left :
		parent = np.where(left == child) [0].item()
		split = 'l'
	else :
		parent = np.where(right == child) [0].item()
		split = 'r'
	lineage.append((parent, split, threshold [parent], features [parent]))
	if parent == 0 :
		lineage.reverse()
		return lineage
	else :
		return recurse(left, right, parent, lineage)
----------------------------------------

def recurse4(left, right, child, a, b, c, lineage=None):
	if lineage is None:
		lineage = [child]
	if child in left:
		parent = np.where(left == child) [0].item()
		split = c
	else:
		parent = np.where(right == child) [0].item()
		split = b
	lineage.append((parent, split, a[parent], b[parent]))
	if parent == 0:
		lineage.reverse()
		return lineage
	else:
		return recurse4(left, right, parent, a, b, c, lineage)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
0
Gpt3D_Clone265_0.py 1 18
Gpt3D_Clone265_0.py 20 40

----------------------------------------

def recurse(left, right, child, lineage = None) :
	if lineage is None :
		lineage = [child]
	if child in left :
		parent = np.where(left == child) [0].item()
		split = 'l'
	else :
		parent = np.where(right == child) [0].item()
		split = 'r'
	lineage.append((parent, split, threshold [parent], features [parent]))
	if parent == 0 :
		lineage.reverse()
		return lineage
	else :
		return recurse(left, right, parent, lineage)
----------------------------------------

def recurse(left, right, child, lineage = None) :
	if lineage is None :
		lineage = []
		lineage.append(child)
	if child in left :
		parent = np.where(left == child) [0].item()
		split = 'l'
	else :
		parent = np.where(right == child) [0].item()
		split = 'r'
	lineage.append(parent)
	lineage.append(split)
	lineage.append(threshold [parent])
	lineage.append(features [parent])
	if parent == 0 :
		lineage.reverse()
		return lineage
	else :
		return recurse(left, right, parent, lineage)
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
0
Gpt3D_Clone267_0.py 1 14
Gpt3D_Clone267_0.py 16 28

----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] ! = _tree.TREE_UNDEFINED :
		name = feature_name [node]
		threshold = tree_.threshold [node]
		print "{}if {} <= {}:".format(indent, name, threshold)
		recurse(tree_.children_left [node], depth + 1)
		print "{}else:  # if {} > {}".format(indent, name, threshold)
		recurse(tree_.children_right [node], depth + 1)
	else :
		print "{}return {}".format(indent, tree_.value [node])
----------------------------------------

def recurse(node, depth) :
	indent = "  " * depth
	if tree_.feature [node] != _tree.TREE_UNDEFINED :
		name = feature_name[node]
		threshold = tree_.threshold [node]
		decision = "{}if {} <= {}:\n".format(indent, name, threshold)
		decision += "{}else:  # if {} > {}\n".format(indent, name, threshold)
		print decision
		recurse(tree_.children_left [node], depth + 1)
		recurse(tree_.children_right [node], depth + 1)
	else :
		print "{}return {}".format(indent, tree_.value [node])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
269
1
Gpt3D_Clone269_1.py 1 8
Gpt3D_Clone269_1.py 10 16

----------------------------------------

def DnaCheck() :
	if any(c in squence_str for c in ['A', 'C', 'T', 'G']) :
		return "yes"
	else :
		return "no"
----------------------------------------

def DnaCheck() :
	char_set = set(squence_str)
	if 'A' in char_set or 'C' in char_set or 'T' in char_set or 'G' in char_set :
		return "yes"
	else :
		return "no"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
269
2
Gpt3D_Clone269_2.py 1 8
Gpt3D_Clone269_2.py 10 16

----------------------------------------

def DnaCheck() :
	if any(c in squence_str for c in ['A', 'C', 'T', 'G']) :
		return "yes"
	else :
		return "no"
----------------------------------------

def DnaCheck() :
	nucleotides = ['A', 'C', 'T', 'G']
	if any(n in sequence_str for n in nucleotides) :
		return "yes"
	else :
		return "no"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
270
2
Gpt3D_Clone270_2.py 1 8
Gpt3D_Clone270_2.py 10 17

----------------------------------------

def DnaCheck() :
	if any(c in squence_str for c in ['A', 'C', 'T', 'G']) :
		return "yes"
	else :
		return "no"
----------------------------------------

def DnaCheck() :
	dna_choices = ['A', 'C', 'T', 'G']
	if any(c in squence_str for c in dna_choices) :
		return "yes"
	else :
		return "no"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
1
Gpt3D_Clone271_1.py 1 8
Gpt3D_Clone271_1.py 10 16

----------------------------------------

def find_nearest(array, values) :
	array = np.asarray(array)
	values = np.expand_dims(values, axis = - 1)
	indices = np.abs(array - values).argmin(axis = - 1)
	return array [indices]
----------------------------------------

def find_nearest_3(list, value_list):
	list = np.asarray(list)
	value_list = np.expand_dims(value_list, axis=-1)
	subtract_arrays = np.subtract(list, value_list)
	min_difference = np.argmin(subtract_arrays, axis=-1)
	return list[min_difference]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
2
Gpt3D_Clone271_2.py 1 8
Gpt3D_Clone271_2.py 10 15

----------------------------------------

def find_nearest(array, values) :
	array = np.asarray(array)
	values = np.expand_dims(values, axis = - 1)
	indices = np.abs(array - values).argmin(axis = - 1)
	return array [indices]
----------------------------------------

def find_nearest(array, values): 
        array = np.asarray(array) 
        values = np.expand_dims(values, axis=1) 
        indices = np.abs(array-values).argmin(axis=1) 
        return array[indices]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
274
0
Gpt3D_Clone274_0.py 1 17
Gpt3D_Clone274_0.py 19 37

----------------------------------------

def scan(self, input) :
	self.result = []
	for word in input.split() :
		try :
			self.result.append(('number', int(word)))
		except ValueError :
			for category, item in self.mapping.items() :
				if word.lower() in item :
					found_category = category
					break
				else :
					found_category = 'error'
			self.result.append((found_category, word))
	return self.result
----------------------------------------

def scan(self, input) :
	self.result = []
	words = input.split()
	for word in words :
		word_category = ""
		try :
			word_category = "number"
			int(word)
		except ValueError :
			for category, item in self.mapping.items() :
				if word.lower() in item :
					found_category = category
					break
				else :
					word_category = "error"
		self.result.append((word_category, word))
	return self.result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
274
1
Gpt3D_Clone274_1.py 1 17
Gpt3D_Clone274_1.py 19 36

----------------------------------------

def scan(self, input) :
	self.result = []
	for word in input.split() :
		try :
			self.result.append(('number', int(word)))
		except ValueError :
			for category, item in self.mapping.items() :
				if word.lower() in item :
					found_category = category
					break
				else :
					found_category = 'error'
			self.result.append((found_category, word))
	return self.result
----------------------------------------

def scan(self, input) :
	self.result = []
	words = input.split()
	for word in words :
		category = ""
		try :
			category = "number"
			int(word)
		except ValueError :
			for c, item in self.mapping.items() :
				if word.lower() in item :
					found = c
					break
				else :
					category = "error"
		self.result.append((category, word))
	return self.result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
276
0
Gpt3D_Clone276_0.py 1 17
Gpt3D_Clone276_0.py 19 37

----------------------------------------

def scan(self, input) :
	self.result = []
	for word in input.split() :
		try :
			self.result.append(('number', int(word)))
		except ValueError :
			for category, item in self.mapping.items() :
				if word.lower() in item :
					found_category = category
					break
				else :
					found_category = 'error'
			self.result.append((found_category, word))
	return self.result
----------------------------------------

def scan(self, input) :
	self.result = []
	words = input.split()
	for word in words :
		is_number = word.isdigit()
		if is_number :
			self.result.append(('number', int(word)))
		else :
			category_found = False
			for category, item in self.mapping.items() :
				if word.lower() in item :
					found_category = category
					category_found = True
					break
			if not category_found :
				found_category = 'error'
			self.result.append((found_category, word))
	return self.result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
277
0
Gpt3D_Clone277_0.py 1 13
Gpt3D_Clone277_0.py 15 28

----------------------------------------

def scan(words) :
	result = []
	for word in words.split() :
		found_category = 'error'
		for category, category_lexicon in _LEXICON.items() :
			if word in category_lexicon :
				found_category = category
				break
		result.append((found_category, word))
	return result
----------------------------------------

def scan(words) :
	result = []
	separated_words = words.split()
	for w in separated_words :
		found_category = 'error'
		for pair in _LEXICON.items() :
			cat = pair[0]
			cat_words = pair[1]
			if w in cat_words :
				found_category = cat
				break
		result.append((found_category, w))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
277
1
Gpt3D_Clone277_1.py 1 13
Gpt3D_Clone277_1.py 15 27

----------------------------------------

def scan(words) :
	result = []
	for word in words.split() :
		found_category = 'error'
		for category, category_lexicon in _LEXICON.items() :
			if word in category_lexicon :
				found_category = category
				break
		result.append((found_category, word))
	return result
----------------------------------------

def scan(words) :
	result = []
	for w in words.split() :
		found_category = 'error'
		for cat, cat_lex in _LEXICON.items() :
			if w in set(cat_lex) :
				found_category = cat
				break
		tup = (found_category, w)
		if tup not in result :
			result.append(tup)
	return set(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
0
Gpt3D_Clone279_0.py 1 15
Gpt3D_Clone279_0.py 17 28

----------------------------------------

def scan(sentence) :
	tuples = []
	words = sentence.split()
	for word in words :
		try :
			tuples.append((lexicons [word], word))
		except KeyError :
			if word.isdigit() :
				tuples.append(('number', int(word)))
			else :
				tuples.append(('error', word))
	return tuples
----------------------------------------

def scan(sentence):
	tuples = []
	words = sentence.split()
	for word in words:
		if word in lexicons:
			tuples.append((lexicons[word],word))
		elif word.isdigit():
			tuples.append(('number', int(word)))
		else:
			tuples.append(('error',word))
	return tuples
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
1
Gpt3D_Clone279_1.py 1 15
Gpt3D_Clone279_1.py 17 28

----------------------------------------

def scan(sentence) :
	tuples = []
	words = sentence.split()
	for word in words :
		try :
			tuples.append((lexicons [word], word))
		except KeyError :
			if word.isdigit() :
				tuples.append(('number', int(word)))
			else :
				tuples.append(('error', word))
	return tuples
----------------------------------------

def scan(sentence):
	tuples = []
	words = sentence.split()
	for word in words:
		if word in lexicons.keys():
			tuples.append((lexicons[word], word))
		elif word.isdigit():
			tuples.append(('number', int(word)))
		else:
			tuples.append(('error', word))
	return tuples
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
0
Gpt3D_Clone282_0.py 1 15
Gpt3D_Clone282_0.py 17 29

----------------------------------------

def invertSelectionRemoveSelected(self) :
	model = self.view.model()
	for i in range(model.rowCount()) :
		for j in range(model.columnCount()) :
			ix = model.index(i, j)
			self.view.selectionModel().select(ix, QItemSelectionModel.Toggle)
	index_list = []
	for model_index in self.view.selectionModel().selectedRows() :
		index = QPersistentModelIndex(model_index)
		index_list.append(index)
	for index in index_list :
		model.removeRow(index.row())
----------------------------------------

def invertSelectionRemoveSelected(self) :
    model = self.view.model()
    for i in range(model.rowCount()) :
        for j in range(model.columnCount()) :
            ix = model.index(i, j)
            self.view.selectionModel().select(ix, QItemSelectionModel.Toggle)
    rows_to_remove = self.view.selectionModel().selectedRows()
    for model_index in rows_to_remove :
        index = QPersistentModelIndex(model_index)
        row_number = index.row()
        model.removeRow(row_number)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
1
Gpt3D_Clone282_1.py 1 15
Gpt3D_Clone282_1.py 17 28

----------------------------------------

def invertSelectionRemoveSelected(self) :
	model = self.view.model()
	for i in range(model.rowCount()) :
		for j in range(model.columnCount()) :
			ix = model.index(i, j)
			self.view.selectionModel().select(ix, QItemSelectionModel.Toggle)
	index_list = []
	for model_index in self.view.selectionModel().selectedRows() :
		index = QPersistentModelIndex(model_index)
		index_list.append(index)
	for index in index_list :
		model.removeRow(index.row())
----------------------------------------

def invertSelectionRemoveSelected(self) :
	model = self.view.model()
	for i in range(model.rowCount()) :
		for j in range(model.columnCount()) :
			ix = model.index(i, j)
			self.view.selectionModel().select(ix, QItemSelectionModel.Toggle)
	selected_rows = self.view.selectionModel().selectedRows()
	for model_index in selected_rows :
		index = QPersistentModelIndex(model_index)
		model.removeRow(index.row())
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
283
0
Gpt3D_Clone283_0.py 1 13
Gpt3D_Clone283_0.py 15 29

----------------------------------------

def meta_redirect(content) :
	root = soupparser.fromstring(content)
	result_url = root.xpath('//meta[@http-equiv="refresh"]/@content')
	if result_url :
		result_url = str(result_url [0])
		urls = result_url.split('URL=') if len(result_url.split('url=')) < 2 else result_url.split('url=')
		url = urls [1] if len(urls) > = 2 else None
	else :
		return None
	return url
----------------------------------------

def meta_redirect(content) :
	root = soupparser.fromstring(content)
	result_url = root.xpath('//meta[@http-equiv="refresh"]/@content')
	if result_url :
		result_url = str(result_url [0])
		if len(result_url.split('URL=')) < 2:
		    urls = result_url.split('waiting:')
		else :
		    urls = result_url.split('url=') 
		
		url = urls [1] if len(urls) > = 2 else None
	else :
		return None
	return url
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
283
1
Gpt3D_Clone283_1.py 1 13
Gpt3D_Clone283_1.py 15 27

----------------------------------------

def meta_redirect(content) :
	root = soupparser.fromstring(content)
	result_url = root.xpath('//meta[@http-equiv="refresh"]/@content')
	if result_url :
		result_url = str(result_url [0])
		urls = result_url.split('URL=') if len(result_url.split('url=')) < 2 else result_url.split('url=')
		url = urls [1] if len(urls) > = 2 else None
	else :
		return None
	return url
----------------------------------------

def meta_redirect(content) :
	root = soupparser.fromstring(content)
	result_url = root.xpath('//meta[@http-equiv="refresh"]/@content')
	if result_url :
		result_url = str(result_url [0])
		urls_1 = result_url.split('URL=') 
		urls_2 = result_url.split('url=') 
		urls = urls_1 if len(urls_1) < len(urls_2) else urls_2
		url = urls [1] if len(urls) > = 2 else None
	else :
		return None
	return url
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
284
0
Gpt3D_Clone284_0.py 1 11
Gpt3D_Clone284_0.py 13 21

----------------------------------------

def div3() :
	divlist = []
	num = range(1, 10)
	for n in num :
		if n % 3 == 0 :
			for _ in xrange(20) :
				divlist.append(random.randint(0, 10))
	print divlist
----------------------------------------

def div3() :
	divlist = []
	num = range(1, 10)
	for n in num :
		if n % 3 == 0 :
			divlist.extend([random.randint(0, 10) for _ in xrange(20)])
	print divlist
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
284
1
Gpt3D_Clone284_1.py 1 11
Gpt3D_Clone284_1.py 13 21

----------------------------------------

def div3() :
	divlist = []
	num = range(1, 10)
	for n in num :
		if n % 3 == 0 :
			for _ in xrange(20) :
				divlist.append(random.randint(0, 10))
	print divlist
----------------------------------------

def div3():
	divlist = []
	for n in range(1, 10):
		if n % 3 == 0:
			for _ in range(20):
				divlist.append(random.randint(0, 10))
	return divlist
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
1
Gpt3D_Clone285_1.py 1 9
Gpt3D_Clone285_1.py 11 18

----------------------------------------

def is_sequence_same(list_a, list_b) :
	if list_a and list_a [0] in list_b :
		first = list_b.index(list_a [0])
	else :
		return False
	return list_a == (list_b [first :] + list_b [: first])
----------------------------------------

def is_sequence_same(list_a, list_b) :
	if list_a and list_a[0] in list_b:
		first = list_b.index(list_a[0])
		check_sequence = list_a == list_b[first:] + list_b[ : first]
	else :
		return False
	return check_sequence
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
2
Gpt3D_Clone285_2.py 1 9
Gpt3D_Clone285_2.py 11 19

----------------------------------------

def is_sequence_same(list_a, list_b) :
	if list_a and list_a [0] in list_b :
		first = list_b.index(list_a [0])
	else :
		return False
	return list_a == (list_b [first :] + list_b [: first])
----------------------------------------

def is_sequence_same(list_a, list_b) :
	if list_a and list_a[0] in list_b:
		first = list_b.index(list_a[0])
		check_sequence = list_a == (list_b[first : ] + list_b[ : first])
	else :
		return False
	return check_sequence
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
290
0
Gpt3D_Clone290_0.py 1 11
Gpt3D_Clone290_0.py 13 24

----------------------------------------

def formatTime(self, record, datefmt = None) :
	ct = self.converter(record.created)
	if datefmt :
		s = time.strftime(datefmt, ct)
	else :
		t = time.strftime("%Y-%m-%d %H:%M:%S", ct)
		s = "%s.%03d" % (t, record.msecs)
	return s
----------------------------------------

def formatTime(self, record, datefmt = None) :
	ct = self.converter(record.created)
	if datefmt :
		s = time.strftime(datefmt, ct)
	elif record.msecs > 0 :
		t = time.strftime("%Y-%m-%d %H:%M:%S", ct)
		s = "%s.%03d" % (t, record.msecs)
	else :
		s = time.strftime("%Y-%m-%d %H:%M:%S", ct)
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
291
2
Gpt3D_Clone291_2.py 1 8
Gpt3D_Clone291_2.py 10 15

----------------------------------------

def formatTime(self, record, datefmt = None) :
	arrow_time = Arrow.fromtimestamp(record.created)
	if datefmt :
		arrow_time = arrow_time.format(datefmt)
	return str(arrow_time)
----------------------------------------

def formatTime(self, record, datefmt = None) :
	timestamp = record.created
	if datefmt :
		timestamp = timegm.strftime(timestamp, datefmt)
	return str(timestamp)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
1
Gpt3D_Clone293_1.py 1 11
Gpt3D_Clone293_1.py 13 22

----------------------------------------

def get_file_list(directory = '.') :
	files = []
	for i in os.listdir(directory) :
		if os.path.isdir(i) :
			files.extend(get_file_list(i))
		else :
			files.append(i)
	return files
----------------------------------------

def get_file_list(directory = '.') :
	files = []
	for i in os.listdir(directory) :
		if os.path.isfile(i) :
			files.append(i)
		elif os.path.isdir(i) :
			files.extend(get_file_list(i))
	return files
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
1
Gpt3D_Clone295_1.py 1 10
Gpt3D_Clone295_1.py 12 22

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedStringV3(str1, str2) :
	if len(str1) == len(str2) :
		return "".join(i for j in zip(str1, str2) for i in j)
	else :
		if len(str1) > len(str2) :
			longer, shorter = str1, str2
		else :
			longer, shorter = str2, str1
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
2
Gpt3D_Clone295_2.py 1 10
Gpt3D_Clone295_2.py 12 20

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedStringV4 (inStr1, inStr2):
	if len(inStr1) == len(inStr2):
		return ''.join(i for j in zip(inStr1, inStr2) for i in j)
	else:
		longer, shorter = (inStr1, inStr2) if len(inStr1) > len(inStr2) else (inStr2, inStr1)
		repeatChar = shorter [- 1]
		shorter = shorter + (repeatChar * (len(longer) - len(shorter)))
		return ''.join(i for j in zip(shorter, longer) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
296
0
Gpt3D_Clone296_0.py 1 10
Gpt3D_Clone296_0.py 12 20

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString(string1, string2) :
	if len(string1) != len(string2) :
		longStr, shortStr = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shortStr = shortStr + shortStr [- 1] * (len(longStr) - len(shortStr))
	else :
		longStr, shortStr = (string1, string2)
	return "".join(i for j in zip(shortStr, longStr) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
296
1
Gpt3D_Clone296_1.py 1 10
Gpt3D_Clone296_1.py 12 17

----------------------------------------

def extendedString(string1, string2) :
	if len(string1) == len(string2) :
		return "".join(i for j in zip(string1, string2) for i in j)
	else :
		longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
		shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
		return "".join(i for j in zip(shorter, longer) for i in j)
----------------------------------------

def extendedString3(string1, string2) :
	longer, shorter = (string1, string2) if len(string1) > len(string2) else (string2, string1)
	shorter = shorter + shorter [- 1] * (len(longer) - len(shorter))
	return "".join(i for j in zip(shorter, longer) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
297
1
Gpt3D_Clone297_1.py 1 11
Gpt3D_Clone297_1.py 13 23

----------------------------------------

def extendedString(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x [- 1] * (len(y) - len(x))
	elif len(x) > len(y) :
		y = y + y [- 1] * (len(x) - len(y))
	return "".join(i for j in zip(x, y) for i in j)
----------------------------------------

def extendedString4(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		diff = len(y) - len(x)
		x += x[-1] * diff
	elif len(x) > len(y) :
		diff = len(x) - len(y)
		y += y[-1] * diff
	return "".join(i for j in zip(x, y) for i in j)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
2
Gpt3D_Clone298_2.py 1 11
Gpt3D_Clone298_2.py 13 25

----------------------------------------

def extendedString(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x [- 1] * (len(y) - len(x))
	elif len(x) > len(y) :
		y = y + y [- 1] * (len(x) - len(y))
	return "".join(i for j in zip(x, y) for i in j)
----------------------------------------

def extendedString_T3(string1, string2) :
	x = string1
	y = string2
	if len(x) < len(y) :
		x = x + x[-1] * (len(y) - len(x))		
	elif len(x) > len(y) :
		y = y + y[-1] * (len(x) - len(y))		
	result = []  
	for s in zip(x, y):  
		result.extend(s)
	return "".join(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
0
Gpt3D_Clone29_0.py 1 10
Gpt3D_Clone29_0.py 12 20

----------------------------------------

def most_common(l) :
	try :
		return mode(l)
	except StatisticsError as e :
		if 'no unique mode' in e.args [0] :
			return l [0]
		raise
----------------------------------------

def most_common(l) :
	try :
		return stats.mode(l)
	except StatisticsError as e :
		if 'no unique mode' in e.args [0] :
			return l [0]
		else:
			raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
1
Gpt3D_Clone29_1.py 1 10
Gpt3D_Clone29_1.py 12 20

----------------------------------------

def most_common(l) :
	try :
		return mode(l)
	except StatisticsError as e :
		if 'no unique mode' in e.args [0] :
			return l [0]
		raise
----------------------------------------

def most_common(l) :
	try :
		return stats.mode(l)
	except StatisticsError as e :
		if 'no unique mode' in e.args [0] :
			return min(l)
		else:
			raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
302
0
Gpt3D_Clone302_0.py 1 11
Gpt3D_Clone302_0.py 13 23

----------------------------------------

def merge(arr1, arr2) :
	merged = []
	while arr1 and arr2 :
		if arr1 [0] > arr2 [0] :
			arr1, arr2 = arr2, arr1
		merged.append(arr1.pop(0))
	merged.extend(arr1 or arr2)
	return merged
----------------------------------------

def merge(arr1, arr2) :
	merged = []
	while arr1 and arr2 :
		if arr1 [0] < arr2 [0] :
			merged.append(arr1.pop(0))
		else: 
			merged.append(arr2.pop(0))
	merged.extend(arr1 or arr2)
	return merged
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
0
Gpt3D_Clone303_0.py 1 15
Gpt3D_Clone303_0.py 17 31

----------------------------------------

def quantityFunction(product) :
	valid = False
	while True :
		if product is not None :
			quantity = raw_input("Please enter the amount of this item you would like to purchase: ")
			if quantity.isdigit() :
				return int(quantity)
				valid = True
			else :
				print ("We didn't recognise that number. Please try again.")
				continue
		return False
----------------------------------------

def quantityFunction(item):
	valid = False
	while True:
		if item is not None:
			quantityStr = input("Please enter the amount of this item you would like to purchase: ")
			try:
				quantity = int(quantityStr)
			except ValueError:
				print("We didn't recognise that number. Please try again.")
				continue
			else:
				return quantity
				valid = True
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
304
0
Gpt3D_Clone304_0.py 1 9
Gpt3D_Clone304_0.py 11 19

----------------------------------------

def micro_world(bacteria, K) :
	sarg = [i [0] for i in sorted(enumerate(bacteria), key = lambda x : x [1])]
	sortedbac = [bacteria [i] for i in sarg]
	diff = [j - i for i, j in zip(sortedbac [: - 1], sortedbac [1 :])] + [K + 1]
	idx = [i for i, v in enumerate(diff) if v > K]
	return [bacteria [i] for i in sorted([sarg [i] for i in idx])]
----------------------------------------

def micro_world(bacteria, K):
    sort_bac = sorted(enumerate(bacteria), key = lambda x: x[1])
    sort_index = [i[0] for i in sort_bac]
    sort_val = [bacteria[i] for i in sort_index]
    diff = [j - i for i, j in zip(sort_val[:-1], sort_val[1:])] + [K+1]
    idx = [index for index, value in enumerate(diff) if value > K]
    return [bacteria[i] for i in sorted([sort_index[ind] for ind in idx])]
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
304
1
Gpt3D_Clone304_1.py 1 9
Gpt3D_Clone304_1.py 11 18

----------------------------------------

def micro_world(bacteria, K) :
	sarg = [i [0] for i in sorted(enumerate(bacteria), key = lambda x : x [1])]
	sortedbac = [bacteria [i] for i in sarg]
	diff = [j - i for i, j in zip(sortedbac [: - 1], sortedbac [1 :])] + [K + 1]
	idx = [i for i, v in enumerate(diff) if v > K]
	return [bacteria [i] for i in sorted([sarg [i] for i in idx])]
----------------------------------------

def micro_world(bacteria, K): 
    sarg = [i[0] for i in sorted(enumerate(bacteria), key = lambda x: x[1])[::-1]] 
    sortedbac = [bacteria[i] for i in sarg] 
    diff = [j - i for i, j in zip(sortedbac[: - 1], sortedbac[1 :])] + [K + 1]
    idx = [i for i, v in enumerate(diff) if v > K] 
    return [bacteria[i] for i in sorted([sarg[i] for i in idx])[::-1]] 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
0
Gpt3D_Clone305_0.py 1 10
Gpt3D_Clone305_0.py 12 22

----------------------------------------

def fib(n) :
	if n == 1 :
		return (1)
	elif n == 0 :
		return (0)
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fibonacii(n) :
	if n == 0 :
		return (0)
	elif n == 1:
		return (1)
	else :
		a,b = 0, 1
		for i in range(2, n+1) :
			a,b = b,a+b
		return b
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
1
Gpt3D_Clone307_1.py 1 10
Gpt3D_Clone307_1.py 12 24

----------------------------------------

def fib(n) :
	global call_count
	call_count = call_count + 1
	if n < = 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fibonacci_3(n):
	global call_count
	call_count = call_count + 1
	if n <= 1:
		return 1
	else:
		if n - 1 > 0 and n - 2 > 0:
			return fibonacci_3(n - 1) + fibonacci_3(n - 2)
		elif n - 2 == 0:
			return fibonacci_3(n - 1) + 1
		else:
			return fibonacci_3(1) + 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
0
Gpt3D_Clone308_0.py 1 10
Gpt3D_Clone308_0.py 12 21

----------------------------------------

def fib(n) :
	global call_count
	call_count = call_count + 1
	if n < = 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib_4 (n) :
	global call_count 
	call_count += 1
	if n <= 1:
		return 1
	elif n == 2:
		return 2
	else:
		return fib_4(n-1) + fib_4(n-2) + fib_4(n-3)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
1
Gpt3D_Clone308_1.py 1 10
Gpt3D_Clone308_1.py 12 22

----------------------------------------

def fib(n) :
	global call_count
	call_count = call_count + 1
	if n < = 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib_3 (n) : 
	global call_count
	call_count = call_count + 1
	if n == 0 : 
		return 1
	elif n == 1: 
		return 1
	else: 
		return fib_3(n-1) + fib_3(n-2)
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
3
Gpt3D_Clone308_3.py 1 10
Gpt3D_Clone308_3.py 12 19

----------------------------------------

def fib(n) :
	global call_count
	call_count = call_count + 1
	if n < = 1 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n, call_count) :
	call_count = call_count + 1
	if n <= 1 :
		return 1
	else :
		return fib(n - 1, call_count) + fib(n - 2, call_count)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
310
2
Gpt3D_Clone310_2.py 1 23
Gpt3D_Clone310_2.py 25 45

----------------------------------------

def read_relationship(filename) :
	data = []
	with open(filename, 'rb') as f :
		reader = csv.reader(f, delimiter = '\t')
		next(reader, None)
		for row in reader :
			data.append([{
			'source' : {
			'id' : row [0],
			'start' : int(row [2]),
			'end' : int(row [3]),
			},
			'target' : {
			'id' : row [1],
			'start' : int(row [4]),
			'end' : int(row [5]),
			},
			}])
	with open('data/data.txt', 'w') as outfile :
		json.dump(data, outfile)
----------------------------------------

def read_relationship(filename):
	data = []
	with open(filename, 'rb') as f:  
		reader = csv.reader(f, delimiter='\t')  
		next(reader, None) 
		for row in reader:
			datum = {}
			datum['source'] = {
				'id' : row[0],
				'start' : int(row[2]),
				'end' : int(row[3])
			}
			datum['target'] = {
				'id' : row[1],
				'start' : int(row[4]),
				'end' : int(row[5])
			}
			data.append([datum])
	with open('data/data.txt', 'w') as outfile:
		json.dump(data, outfile)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
310
3
Gpt3D_Clone310_3.py 1 23
Gpt3D_Clone310_3.py 25 46

----------------------------------------

def read_relationship(filename) :
	data = []
	with open(filename, 'rb') as f :
		reader = csv.reader(f, delimiter = '\t')
		next(reader, None)
		for row in reader :
			data.append([{
			'source' : {
			'id' : row [0],
			'start' : int(row [2]),
			'end' : int(row [3]),
			},
			'target' : {
			'id' : row [1],
			'start' : int(row [4]),
			'end' : int(row [5]),
			},
			}])
	with open('data/data.txt', 'w') as outfile :
		json.dump(data, outfile)
----------------------------------------

def read_relationship(filename):
	data = []
	with open(filename, 'rb') as f:  
		reader = csv.reader(f, delimiter = '\t')  
		next(reader, None)  
		for row in reader: 
			data.append([{
				'source' : {
					'id' : row[0],
					'start' : int(row[2]),
					'end' : int(row[3])
				},
				'target' : {
					'id' : row[1],
					'start' : int(row[4]),
					'end' : int(row[5])
				}
			}])
	with open('data/data.txt', 'w') as outfile:
		json.dump(data, outfile)
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
1
Gpt3D_Clone314_1.py 1 9
Gpt3D_Clone314_1.py 11 19

----------------------------------------

def get_target_path(pth, mtx) :
	for level in pth :
		mtx = mtx.get(level, None)
		if mtx is None :
			break
	return mtx
----------------------------------------

def get_target_path3(pth, mtx) :
	temp = mtx
	for level in pth :
		temp2 = temp.get(level, None)
		if temp2 is None :
			break
		temp =temp2
	return temp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
2
Gpt3D_Clone314_2.py 1 9
Gpt3D_Clone314_2.py 11 17

----------------------------------------

def get_target_path(pth, mtx) :
	for level in pth :
		mtx = mtx.get(level, None)
		if mtx is None :
			break
	return mtx
----------------------------------------

def get_target_path(pth, mtx):
	for level in pth:
		mtx = mtx.get(level)
		if mtx == None:
			break
	return mtx
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
316
0
Gpt3D_Clone316_0.py 1 10
Gpt3D_Clone316_0.py 12 23

----------------------------------------

def count_chars(p) :
	indx = collections.Counter()
	with open(p) as f :
		for line in f :
			for c in line :
				indx [c] += 1
	print indx
----------------------------------------

def count_chars(p) :
	indx = dict()                                 
	with open(p) as f :
		for line in f :
			for c in line :
				if c in indx : 
					indx[c] += 1
				else :
					indx[c] = 1 
	print indx
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
316
1
Gpt3D_Clone316_1.py 1 10
Gpt3D_Clone316_1.py 12 20

----------------------------------------

def count_chars(p) :
	indx = collections.Counter()
	with open(p) as f :
		for line in f :
			for c in line :
				indx [c] += 1
	print indx
----------------------------------------

def count_chars(p) :
	indx = collections.Counter()
	with open(p, 'r') as f :
		text = f.read()
		for line in text.splitlines() :
			for c in line :
				indx [c] += 1
	print indx
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
318
0
Gpt3D_Clone318_0.py 1 11
Gpt3D_Clone318_0.py 13 22

----------------------------------------

def __init__(self, original_function, maxsize = 1000) :
	self.original_function = original_function
	self.maxsize = maxsize
	self.mapping = {}
	PREV, NEXT, KEY, VALUE = 0, 1, 2, 3
	self.head = [None, None, None, None]
	self.tail = [self.head, None, None, None]
	self.head [NEXT] = self.tail
----------------------------------------

def __init__(self, original_function, maxsize = 1000) :
	self.original_function = original_function
	self.maxsize = maxsize
	self.mapping = {}
	PREV, NEXT, KEY, VALUE = 0, 1, 2, 3
	self.head = [None, None, None, None, None]
	self.tail = [self.head, None, None, None, None]
	self.head[NEXT] = self.tail
	self.latest_value = None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
0
Gpt3D_Clone319_0.py 1 9
Gpt3D_Clone319_0.py 11 17

----------------------------------------

def __init__(self, maxlen, items = None) :
	self._maxlen = maxlen
	self.d = OrderedDict()
	if items :
		for k, v in items :
			self [k] = v
----------------------------------------

def __init__(self, maxlen, items = None) :
	self._maxlen = maxlen
	self.d = dict()
	if items :
		for item in items :
			self [item[0]] = item[1]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
330
0
Gpt3D_Clone330_0.py 1 18
Gpt3D_Clone330_0.py 20 32

----------------------------------------

def __init__(self, rect, pen, brush, tooltip = 'No tip here', parent = None) :
	super(GraphicsItem, self).__init__()
	self.setFlag(QtGui.QGraphicsItem.ItemIsMovable, True)
	self.setFlag(QtGui.QGraphicsItem.ItemIsSelectable, True)
	self.setFlag(QtGui.QGraphicsItem.ItemIsFocusable, True)
	self.setAcceptsHoverEvents(True)
	self.pen = pen
	pw = self.pen.widthF()
	self.brush = QtGui.QBrush(QtCore.Qt.blue)
	self.brush = brush
	self.setToolTip(tooltip)
	self.parent = parent
	self.rect = QtCore.QRectF(rect [0], rect [1], rect [2], rect [3])
	self.focusrect = QtCore.QRectF(rect [0] - pw / 2, rect [1] - pw / 2,
	rect [2] + pw, rect [3] + pw)
----------------------------------------

def __init__(self, rect, pen, brush, tooltip = 'No tip here', parent = None) :
	super(GraphicsItem, self).__init__()
	self.setFlag([QtGui.QGraphicsItem.ItemIsMovable, QtGui.QGraphicsItem.ItemIsSelectable, QtGui.QGraphicsItem.ItemIsFocusable], True)
	self.setAcceptsHoverEvents(True)
	self.pen = QtGui.QPen(pen)
	pw = self.pen.widthF()
	self.brush = QtGui.QBrush(brush)
	self.setToolTip(tooltip)
	self.parent = parent
	self.rect = QtCore.QRectF(*rect)
	self.focusrect = QtCore.QRectF(rect [0] - pw / 2, rect [1] - pw / 2,
	rect [2] + pw, rect [3] + pw)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
331
0
Gpt3D_Clone331_0.py 1 11
Gpt3D_Clone331_0.py 13 21

----------------------------------------

def count_char(text) :
	answer = {}
	for char in text :
		if char in answer :
			answer [char] += 1
		else :
			answer [char] = 1
	print (answer)
----------------------------------------

def count_char(text) :
	answer = {}
	for char in text :
		if char not in answer :
			answer [char] = 1
		else :
			answer [char] += 1
	print (answer)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
0
Gpt3D_Clone333_0.py 1 14
Gpt3D_Clone333_0.py 16 29

----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		col = index.column()
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			if col == 0 or col == 1 :
				return self.items [index.row()] [col]
			elif col == 2 :
				return self.items [index.row()] [0] + self.items [index.row()] [1]
			elif col == 3 :
				return self.items [index.row()] [2]
----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		col = index.column()
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			if col == 0 :
				return self.items [index.row()] [col]
			elif col == 1 :
				return self.items [index.row()] [col]
			elif col == 3 :
				return self.items [index.row()] [2]
			else :
				return self.items [index.row()] [0] + self.items [index.row()] [1]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
1
Gpt3D_Clone333_1.py 1 14
Gpt3D_Clone333_1.py 16 29

----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		col = index.column()
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			if col == 0 or col == 1 :
				return self.items [index.row()] [col]
			elif col == 2 :
				return self.items [index.row()] [0] + self.items [index.row()] [1]
			elif col == 3 :
				return self.items [index.row()] [2]
----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		col = index.column()
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			data = None
			if col == 0 or col == 1 :
				data = self.items [index.row()] [col]
			elif col == 2 :
				data = self.items [index.row()] [0] + self.items [index.row()] [1]
			elif col == 3 :
				data = self.items[index.row()] [2]
			return data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
2
Gpt3D_Clone333_2.py 1 14
Gpt3D_Clone333_2.py 16 30

----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		col = index.column()
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			if col == 0 or col == 1 :
				return self.items [index.row()] [col]
			elif col == 2 :
				return self.items [index.row()] [0] + self.items [index.row()] [1]
			elif col == 3 :
				return self.items [index.row()] [2]
----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		col = index.column()
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			if col == 0 :
				return self.items [index.row()] [col]
			elif col == 1 :
				return self.items [index.row()] [col]
			elif col == 2 :
				return self.items [index.row()] [0] + self.items [index.row()] [1]
			else :
				return self.items [index.row()] [2]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
3
Gpt3D_Clone333_3.py 1 14
Gpt3D_Clone333_3.py 16 26

----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		col = index.column()
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			if col == 0 or col == 1 :
				return self.items [index.row()] [col]
			elif col == 2 :
				return self.items [index.row()] [0] + self.items [index.row()] [1]
			elif col == 3 :
				return self.items [index.row()] [2]
----------------------------------------

def data(self, index, role = Qt.DisplayRole) :
	if index.isValid() :
		spot = self.items [index.row()]
		if role == Qt.DisplayRole :
			if index.column() == 0 or index.column() == 1 :
				return self.items [index.row()] [index.column()]
			elif index.column() == 2 :
				return self.items [index.row()] [0] + self.items [index.row()] [1]
			elif index.column() == 3 :
				return self.items [index.row()] [2]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
335
0
Gpt3D_Clone335_0.py 1 13
Gpt3D_Clone335_0.py 15 27

----------------------------------------

def show_progress(block_num, block_size, total_size) :
	global pbar
	if pbar is None :
		pbar = progressbar.ProgressBar(maxval = total_size)
	downloaded = block_num * block_size
	if downloaded < total_size :
		pbar.update(downloaded)
	else :
		pbar.finish()
		pbar = None
----------------------------------------

def show_progress(block_num, block_size, total_size) :
	global pbar
	downloaded = block_num * block_size
	if pbar is None :
		pbar = progressbar.ProgressBar(maxval = total_size)
		pbar.update(downloaded)
	elif downloaded < total_size :
		pbar.update(downloaded)
	else :
		pbar.finish()
		pbar = None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
1
Gpt3D_Clone336_1.py 1 12
Gpt3D_Clone336_1.py 14 25

----------------------------------------

def find_word_horizontal(crosswords, word) :
	input_list = list(word)
	output_list = []
	row_index = - 1
	column_index = 0
	for outer_index, sublist in enumerate(crosswords) :
		for inner_index in xrange(0, (len(sublist) - len(input_list) + 1)) :
			if sublist [inner_index : inner_index + len(input_list)] == input_list :
				return [outer_index, inner_index]
----------------------------------------

def find_word_horizontal(crosswords, word) :
	input_list = list(word)
	row_index = 0
	column_index = 0
	for outer_index, sublist in enumerate(crosswords):
		for inner_index in xrange(0, (len(sublist) - len(input_list) + 1)):
			if sublist [inner_index : inner_index + len(input_list)] == input_list:
				row_index = outer_index
				column_index = inner_index
				break
		return [row_index, column_index]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
337
1
Gpt3D_Clone337_1.py 1 11
Gpt3D_Clone337_1.py 13 23

----------------------------------------

def find(self, key) :
	if key == self.key :
		return self.data
	if key < self.key and self.left :
		return self.left.find(key)
	if key > self.key and self.right :
		return self.right.find(key)
	raise KeyError("No such thing")
----------------------------------------

def find(self, key) :
	if key == self.key :
		return self.data
	elif key < self.key and self.left :
		return self.left.find(key)
	elif key > self.key and self.right :
		return self.right.find(key)
	else:
		raise KeyError("No such thing")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
337
2
Gpt3D_Clone337_2.py 1 11
Gpt3D_Clone337_2.py 13 22

----------------------------------------

def find(self, key) :
	if key == self.key :
		return self.data
	if key < self.key and self.left :
		return self.left.find(key)
	if key > self.key and self.right :
		return self.right.find(key)
	raise KeyError("No such thing")
----------------------------------------

def find(self, key) :
	if key == self.key :
		return self.data
	elif key < self.key and self.left :
		return self.left.find(key)
	elif key > self.key and self.right :
		return self.right.find(key)
	else :
		raise KeyError("No such thing")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
337
3
Gpt3D_Clone337_3.py 1 11
Gpt3D_Clone337_3.py 13 22

----------------------------------------

def find(self, key) :
	if key == self.key :
		return self.data
	if key < self.key and self.left :
		return self.left.find(key)
	if key > self.key and self.right :
		return self.right.find(key)
	raise KeyError("No such thing")
----------------------------------------

def find(self, key) :
	if self.key == key :
		return self.data
	elif self.left and key < self.key :
		return self.left.find(key)
	elif self.right and key > self.key : 
		return self.right.find(key)
	else :
		raise KeyError("No such thing")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
0
Gpt3D_Clone339_0.py 1 11
Gpt3D_Clone339_0.py 13 21

----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a [i - 1] == x :
		return i - 1
	else :
		return - 1
----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a [i - 1] != x :
		return - 1
	else :
		return i - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
1
Gpt3D_Clone339_1.py 1 11
Gpt3D_Clone339_1.py 13 21

----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a [i - 1] == x :
		return i - 1
	else :
		return - 1
----------------------------------------

def binary_search(a, x, lo = 0, hi = -1):
	i = bisect(a, x, lo, hi)
	if i == 0:
		return -1
	elif a[i] == x and a[i-1] != x:
		return i
	else: 
		return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
2
Gpt3D_Clone339_2.py 1 11
Gpt3D_Clone339_2.py 13 22

----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a [i - 1] == x :
		return i - 1
	else :
		return - 1
----------------------------------------

def binary_search(a, x, lo = 0, hi = -1):
	i = bisect(a, x, lo, hi)
	if i == 0:
		return -1
	elif a[i] == x:
		return i
	else: 
		return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
1
Gpt3D_Clone340_1.py 1 11
Gpt3D_Clone340_1.py 13 21

----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a [i - 1] == x :
		return i - 1
	else :
		return - 1
----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a[i] == x and a[i-1] != x :
		return i
	else :
		return - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
2
Gpt3D_Clone340_2.py 1 11
Gpt3D_Clone340_2.py 13 22

----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a [i - 1] == x :
		return i - 1
	else :
		return - 1
----------------------------------------

def binary_search(a, x, lo = 0, hi = - 1) :
	i = bisect(a, x, lo, hi)
	if i == 0 :
		return - 1
	elif a[i] == x :
		return i
	else :
		return - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
0
Gpt3D_Clone342_0.py 1 8
Gpt3D_Clone342_0.py 10 17

----------------------------------------

def binary_search(L, x) :
	i = bisect.bisect_left(L, x)
	if i == len(L) or L [i] ! = x :
		return - 1
	return i
----------------------------------------

def binary_search(L, x):
	i = bisect.bisect_left(L, x)
	if i == len(L):
		return -1
	if L[i] == x:
		return i
	return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
1
Gpt3D_Clone342_1.py 1 8
Gpt3D_Clone342_1.py 10 16

----------------------------------------

def binary_search(L, x) :
	i = bisect.bisect_left(L, x)
	if i == len(L) or L [i] ! = x :
		return - 1
	return i
----------------------------------------

def binary_search(L, x):
	i = bisect.bisect_left(L, x)
	if i != len(L) and L[i] == x:
		return i
	return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
2
Gpt3D_Clone342_2.py 1 8
Gpt3D_Clone342_2.py 10 16

----------------------------------------

def binary_search(L, x) :
	i = bisect.bisect_left(L, x)
	if i == len(L) or L [i] ! = x :
		return - 1
	return i
----------------------------------------

def binary_search(L, x):
    i = bisect.bisect_right(L, x)
    if i == 0 or L[i-1] != x:
        return -1
    return i - 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
0
Gpt3D_Clone343_0.py 1 11
Gpt3D_Clone343_0.py 13 21

----------------------------------------

def upload(path) :
	with open(path, 'rb') as file :
		try :
			ftp.storbinary("STOR " + os.path.basename(path), file)
		except ftplib.error_temp as error :
			return path, error
		else :
			return path, None
----------------------------------------

def upload(path):
	try:
		ftp.storlines("STOR " + os.path.basename(path), open(path, 'rb'))
	except ftplib.error_temp as error:
		return path, error
	else:
		return path, None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
344
0
Gpt3D_Clone344_0.py 1 9
Gpt3D_Clone344_0.py 11 21

----------------------------------------

def get_or_create(session, model, ** kwargs) :
	instance = session.query(model).filter_by(** kwargs).first()
	if not instance :
		instance = model(** kwargs)
		session.add(instance)
	return instance
----------------------------------------

def get_or_create_type_3(session, model, ** kwargs) :
	instance = session.query(model).filter_by(** kwargs).all()
	if not instance:
		for obj in instance:		
			instance = obj
			break 
	if not instance :
		instance = model(** kwargs)
		session.add(instance)
	return instance
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
344
1
Gpt3D_Clone344_1.py 1 9
Gpt3D_Clone344_1.py 11 20

----------------------------------------

def get_or_create(session, model, ** kwargs) :
	instance = session.query(model).filter_by(** kwargs).first()
	if not instance :
		instance = model(** kwargs)
		session.add(instance)
	return instance
----------------------------------------

def get_or_create_type_4(session, model, **kwargs):
	instance = session.query(model).filter_by(**kwargs).first()
	if not instance :
		instance = model(**kwargs)
		for obj in instance:
			instance = obj
			break 
	session.add(instance)
	return instance
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
344
2
Gpt3D_Clone344_2.py 1 9
Gpt3D_Clone344_2.py 11 19

----------------------------------------

def get_or_create(session, model, ** kwargs) :
	instance = session.query(model).filter_by(** kwargs).first()
	if not instance :
		instance = model(** kwargs)
		session.add(instance)
	return instance
----------------------------------------

def get_or_create(session, model, ** kwargs) :
    object_exist = session.query(model).filter_by(** kwargs).first()
    if object_exist is not None :
        return object_exist
    else :
        instance = model(** kwargs)
        session.add(instance)
    return instance
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
344
3
Gpt3D_Clone344_3.py 1 9
Gpt3D_Clone344_3.py 11 19

----------------------------------------

def get_or_create(session, model, ** kwargs) :
	instance = session.query(model).filter_by(** kwargs).first()
	if not instance :
		instance = model(** kwargs)
		session.add(instance)
	return instance
----------------------------------------

def get_or_create(session, model, ** kwargs):
	instance = session.query(model).filter_by(** kwargs).first()
	if instance is not None:
		return instance
	else:
		instance = model(** kwargs)
		session.add(instance)
	return instance
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
346
0
Gpt3D_Clone346_0.py 1 15
Gpt3D_Clone346_0.py 17 35

----------------------------------------

def backupToZip(folder) :
	import zipfile, os
	folder = os.path.abspath(folder)
	for foldername, subfolders, filenames in os.walk(folder) :
		if foldername == folder :
			archive_folder_name = ''
		else :
			archive_folder_name = os.path.relpath(foldername, folder)
			backupZip.write(foldername, arcname = archive_folder_name)
		for filename in filenames :
			backupZip.write(os.path.join(foldername, filename), arcname = os.path.join(archive_folder_name, filename))
	backupZip.close()
----------------------------------------

def backupToZip(folder):
	import zipfile, os
	archive_folder_name = ''
	try:
		folder = os.path.abspath(folder)
		backupZip = zipfile.ZipFile(f'{os.path.basename(folder)}.zip', 'w')
		for root, directories, files in os.walk(folder):
			if root == folder:
				arcname = ''
			else:
				arcname = os.path.relpath(root, folder)
			backupZip.write(root, arcname=arcname)
			for file in files:
				backupZip.write(os.path.join(root, file), arcname=os.path.join(arcname, file))
		backupZip.close()
	except Exception as e:
		print(e)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
0
Gpt3D_Clone351_0.py 1 8
Gpt3D_Clone351_0.py 10 19

----------------------------------------

def powerset(items) :
	combo = []
	for r in range(len(items) + 1) :
		combo.append(list(combinations(items, r)))
	return combo
----------------------------------------

def powerset(items) :
	combo = []
	intermediate = []
	for r in range(len(items) + 1) :
		for i in items :
			intermediate.append(i)
		combo.append(list(combinations(intermediate, r)))
	return combo
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
1
Gpt3D_Clone351_1.py 1 8
Gpt3D_Clone351_1.py 10 18

----------------------------------------

def powerset(items) :
	combo = []
	for r in range(len(items) + 1) :
		combo.append(list(combinations(items, r)))
	return combo
----------------------------------------

def powerset(items) :
	combo = []
	r = 0
	while r <= len(items) :
		combo.append(list(combinations(items, r)))
		r += 1
	return combo
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
0
Gpt3D_Clone352_0.py 1 20
Gpt3D_Clone352_0.py 22 40

----------------------------------------

def __init__(self, f, request, params, model, model_admin, field_path = None) :
	super(IsFreePostage, self).__init__(f, request, params, model,
	model_admin, field_path)
	self.removes = {
	'Yes' : ['postage__gt'],
	'No' : ['postage__exact'],
	'All' : ['postage__exact', 'postage__gt']}
	self.links = (
	('All', {}),
	('Yes', {'postage__exact' : 0}),
	('No', {'postage__gt' : 0}))
	if request.GET.has_key('postage__exact') :
		self.ttl = 'Yes'
	elif request.GET.has_key('postage__gt') :
		self.ttl = 'No'
	else :
		self.ttl = 'All'
----------------------------------------

def __init__(self, f, request, params, model, model_admin, field_path = None) :
	super(IsFreePostage, self).__init__(f, request, params, model,
	model_admin, field_path)
	self.removes = {
	'Yes' : lambda : ['postage__gt'],
	'No' : lambda : ['postage__exact'],
	'All' : lambda : ['postage__exact', 'postage__gt']}
	self.links = (
	('All', lambda : {}),
	('Yes', lambda : {'postage__exact' : 0}),
	('No', lambda : {'postage__gt' : 0}))
	if request.GET.has_key('postage__exact') :
		self.ttl = 'Yes'
	elif request.GET.has_key('postage__gt') :
		self.ttl = 'No'
	else :
		self.ttl = 'All'
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
1
Gpt3D_Clone352_1.py 1 20
Gpt3D_Clone352_1.py 22 42

----------------------------------------

def __init__(self, f, request, params, model, model_admin, field_path = None) :
	super(IsFreePostage, self).__init__(f, request, params, model,
	model_admin, field_path)
	self.removes = {
	'Yes' : ['postage__gt'],
	'No' : ['postage__exact'],
	'All' : ['postage__exact', 'postage__gt']}
	self.links = (
	('All', {}),
	('Yes', {'postage__exact' : 0}),
	('No', {'postage__gt' : 0}))
	if request.GET.has_key('postage__exact') :
		self.ttl = 'Yes'
	elif request.GET.has_key('postage__gt') :
		self.ttl = 'No'
	else :
		self.ttl = 'All'
----------------------------------------

def __init__(self, f, request, params, model, model_admin, field_path = None) :
	super(IsFreePostage, self).__init__(f, request, params, model, 
	model_admin, field_path)
	
	self.removes = dict()
	self.removes['Yes'] = ['postage__gt']
	self.removes['No'] = ['postage__exact']
	self.removes['All'] = ['postage__exact', 'postage__gt']
	self.links = list()
	self.links[0] = ('All', {})
	self.links[1] = ('Yes', {'postage__exact' : 0})
	self.links[2] = ('No', {'postage__gt' : 0})
	
	if request.GET.has_key('postage__exact') :
		self.ttl = 'Yes'
	elif request.GET.has_key('postage__gt') :
		self.ttl = 'No'
	else :
		self.ttl = 'All'
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
0
Gpt3D_Clone354_0.py 1 13
Gpt3D_Clone354_0.py 15 25

----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50,
	wrap = WORD, state = DISABLED)
	self.entry.grid(row = 0, column = 0, sticky = NSEW)
	self.text.grid(row = 1, column = 0, sticky = NSEW)
	self.grid_rowconfigure(1, weight = 1)
	self.grid_columnconfigure(0, weight = 1)
	on_validate(self.entry, Mode.key, self.validator)
----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50,
	wrap = WORD, state = DISABLED)
	self.entry.place(x = 0, y = 0, relwidth = 1.0,
	relheight = 0.5)
	self.text.place(x = 0, y = 0.5, relwidth = 1.0, 
	relheight = 0.5)
	on_validate(self.entry, Mode.key, self.validator)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
1
Gpt3D_Clone354_1.py 1 13
Gpt3D_Clone354_1.py 15 24

----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50,
	wrap = WORD, state = DISABLED)
	self.entry.grid(row = 0, column = 0, sticky = NSEW)
	self.text.grid(row = 1, column = 0, sticky = NSEW)
	self.grid_rowconfigure(1, weight = 1)
	self.grid_columnconfigure(0, weight = 1)
	on_validate(self.entry, Mode.key, self.validator)
----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50)
	self.entry.grid(row = 0, column = 0, sticky = NSEW)
	self.text.grid(row = 1, column = 0, sticky = NSEW)
	self.grid_rowconfigure(1, weight = 1)
	self.grid_columnconfigure(0, weight = 1)
	self.entry.bind("<KeyPress>", self.validator)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
2
Gpt3D_Clone354_2.py 1 13
Gpt3D_Clone354_2.py 15 24

----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50,
	wrap = WORD, state = DISABLED)
	self.entry.grid(row = 0, column = 0, sticky = NSEW)
	self.text.grid(row = 1, column = 0, sticky = NSEW)
	self.grid_rowconfigure(1, weight = 1)
	self.grid_columnconfigure(0, weight = 1)
	on_validate(self.entry, Mode.key, self.validator)
----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50,
	wrap = WORD, state = DISABLED)
	self.entry.pack(fill = BOTH, expand = True)
	self.text.pack(fill = BOTH, expand = True)
	on_validate(self.entry, Mode.key, self.validator)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
3
Gpt3D_Clone354_3.py 1 13
Gpt3D_Clone354_3.py 15 24

----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50,
	wrap = WORD, state = DISABLED)
	self.entry.grid(row = 0, column = 0, sticky = NSEW)
	self.text.grid(row = 1, column = 0, sticky = NSEW)
	self.grid_rowconfigure(1, weight = 1)
	self.grid_columnconfigure(0, weight = 1)
	on_validate(self.entry, Mode.key, self.validator)
----------------------------------------

def __init__(self, master, ** kw) :
	super().__init__(master, ** kw)
	self.entry = tkinter.Entry(self)
	self.text = tkinter.Text(self, height = 15, width = 50)
	self.entry.grid(row = 0, column = 0, sticky = NSEW)
	self.text.grid(row = 1, column = 0, sticky = NSEW)
	self.grid_rowconfigure(1, weight = 1)
	self.grid_columnconfigure(0, weight = 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
355
0
Gpt3D_Clone355_0.py 1 10
Gpt3D_Clone355_0.py 12 19

----------------------------------------

def test_verify_file_existance(self) :
	file_name = 'Test.csv'
	file_path = '../../Data/VandV/Input_Reader/'
	try :
		verify_file_existance(file_path, file_name)
	except :
		print ("file not found")
----------------------------------------

def test_verify_file_existance(self) :
	file_name = 'Test.csv'
	file_path = '../../Data/VandV/Input_Reader/'
	if os.path.exists(os.path.join(file_path, file_name)): 
		verify_file_existance(file_path, file_name)
	else :
		print ("file not found")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
355
1
Gpt3D_Clone355_1.py 1 10
Gpt3D_Clone355_1.py 12 19

----------------------------------------

def test_verify_file_existance(self) :
	file_name = 'Test.csv'
	file_path = '../../Data/VandV/Input_Reader/'
	try :
		verify_file_existance(file_path, file_name)
	except :
		print ("file not found")
----------------------------------------

def test_verify_file_existance(self) :
	file_name = 'Test.csv'
	file_path = '../../Data/VandV/Input_Reader/'
	if os.path.isfile(os.path.join(file_path, file_name)): 
		verify_file_existance(file_path, file_name)
	else :
		print ("file not found")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
356
0
Gpt3D_Clone356_0.py 1 14
Gpt3D_Clone356_0.py 16 27

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist):
	midlist.sort()
	lens = len(midlist)
	if (lens % 2) != 0:
		midl = (lens // 2)
		res = midlist[midl]
	else:
		odd = ((lens // 2) - 1)
		ev = (lens // 2)
		res = (midlist[odd] + midlist[ev])/2
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
0
Gpt3D_Clone357_0.py 1 14
Gpt3D_Clone357_0.py 16 29

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist) :
	lens = len(midlist)
	res = 0
	if lens % 2 != 0 :
		midlist.sort()
		midl = (lens / 2)
		res = midlist[midl]
	else :
		midlist.sort()
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist[odd] + midlist[ev]) / 2
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
1
Gpt3D_Clone357_1.py 1 14
Gpt3D_Clone357_1.py 16 29

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist) :
	lens = len(midlist)
	midlist.sort()
	res = 0
	if lens % 2 != 0 :
		midl = (lens / 2)
		res = midlist[midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist[odd] + midlist[ev]) / 2
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
358
2
Gpt3D_Clone358_2.py 1 14
Gpt3D_Clone358_2.py 16 30

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist) :
	lens = len(midlist)
	midlist.sort()
	if lens % 2 != 0 :
		index = int(lens / 2)
		res = midlist[index]
	else :
		index_odd = int((lens / 2) - 1)
		index_even = int(lens / 2)
		res = float(midlist[index_odd] + midlist[index_even]) / float(2)
	
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
358
3
Gpt3D_Clone358_3.py 1 14
Gpt3D_Clone358_3.py 16 27

----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 ! = 0 :
		midl = (lens / 2)
		res = midlist [midl]
	else :
		odd = (lens / 2) - 1
		ev = (lens / 2)
		res = float(midlist [odd] + midlist [ev]) / float(2)
	return res
----------------------------------------

def median(midlist) :
	midlist.sort()
	lens = len(midlist)
	if lens % 2 == 1 :
		midl = (lens // 2)
		res = midlist [midl]
	else :
		odd = (lens // 2) - 1
		ev = (lens // 2)
		res = (midlist [odd] + midlist [ev]) / 2
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
359
1
Gpt3D_Clone359_1.py 1 9
Gpt3D_Clone359_1.py 11 19

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) : 
	new_list = sorted(data) 
	middle = len(new_list) // 2 
	if len(new_list) % 2 > 0 : 
		return new_list[middle] 
	elif len(new_list) % 2 == 0 : 
		return (new_list[middle - 1] + new_list[middle]) / 2.0 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
361
0
Gpt3D_Clone361_0.py 1 9
Gpt3D_Clone361_0.py 11 21

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data):
    new_list = sorted(data)
    index = len(new_list) / 2
    if len(new_list) % 2 > 0:
        return new_list[index]
    elif len(new_list) % 2 == 0:
        return (new_list[index] + new_list[index - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
361
1
Gpt3D_Clone361_1.py 1 9
Gpt3D_Clone361_1.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = sorted(data)
	half_length = len(new_list) // 2
	if len(new_list) % 2 > 0 :
		return new_list [half_length]
	elif len(new_list) % 2 == 0 :
		return (new_list [half_length] + new_list [half_length - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
361
2
Gpt3D_Clone361_2.py 1 9
Gpt3D_Clone361_2.py 11 19

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = sorted(data)
	middle_index = int(len(new_list) / 2)
	if len(new_list) % 2 > 0 :
		return new_list [middle_index]
	elif len(new_list) % 2 == 0 :
		return (new_list [middle_index] + new_list [middle_index - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
361
3
Gpt3D_Clone361_3.py 1 9
Gpt3D_Clone361_3.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data):
    new_list = sorted(data)
    mid_index = len(new_list) // 2
    if len(new_list) % 2 > 0:
        return new_list[mid_index]
    elif len(new_list) % 2 == 0:
        return (new_list[mid_index] + new_list[mid_index - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
364
0
Gpt3D_Clone364_0.py 1 9
Gpt3D_Clone364_0.py 11 20

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = list()
	for x in data :
		new_list.append(x)
	new_list.sort()
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
364
1
Gpt3D_Clone364_1.py 1 9
Gpt3D_Clone364_1.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = data.copy()
	new_list.sort()
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
364
2
Gpt3D_Clone364_2.py 1 9
Gpt3D_Clone364_2.py 11 18

----------------------------------------

def median(data) :
	new_list = sorted(data)
	if len(new_list) % 2 > 0 :
		return new_list [len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list [(len(new_list) / 2)] + new_list [(len(new_list) / 2) - 1]) / 2.0
----------------------------------------

def median(data) :
	new_list = data[:]
	new_list.sort()	
	if len(new_list) % 2 > 0 :
		return new_list[len(new_list) / 2]
	elif len(new_list) % 2 == 0 :
		return (new_list[(len(new_list) / 2)] + new_list[(len(new_list) / 2) - 1]) / 2.0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
0
Gpt3D_Clone365_0.py 1 15
Gpt3D_Clone365_0.py 17 29

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median(x):
	x = sorted(x)
	listlength = len(x)
	if len(x) % 2 == 0 :
		num = round(listlength / 2)
		num2 = num - 1
		middlenum = (x[num] + x[num2]) / 2
	else:
		num = round(listlength / 2)
		middlenum = x[num]
	return middlenum 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
2
Gpt3D_Clone365_2.py 1 15
Gpt3D_Clone365_2.py 17 27

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median(x):
	x = sorted(x)
	listlength = len(x)
	num = round(listlength / 2)
	if len(x) % 2 == 0 :
		num2 = num - 1
		middlenum = (x[num] + x[num2]) / 2
	else:
		middlenum = x[num]
	return middlenum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
367
0
Gpt3D_Clone367_0.py 1 15
Gpt3D_Clone367_0.py 17 28

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median(x):
	x = sorted(x)
	listlength = len(x)
	if (listlength % 2) == 0:
		num = round(listlength / 2)
		num2 = num - 1
		middlenum = (x[num] + x[num2]) / 2
	else:
		num = round(listlength / 2)
		middlenum = x[num]
	return middlenum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
367
1
Gpt3D_Clone367_1.py 1 15
Gpt3D_Clone367_1.py 17 29

----------------------------------------

def median(x) :
	if len(x) % 2 == 0 :
		x = sorted(x)
		num = round(len(x) / 2)
		num2 = num - 1
		middlenum = (x [num] + x [num2]) / 2
	else :
		x = sorted(x)
		listlength = len(x)
		num = round(listlength / 2)
		middlenum = x [num]
	return middlenum
----------------------------------------

def median(x):
	x = sorted(x)
	listlength = len(x)
	if (listlength % 2) == 0:
		num = round(listlength / 2)
		num2 = num - 1
		middlenum = (x[num] + x[num2]) / 2
	else:
		num = int(listlength / 2)
		middlenum = x[num]
	return middlenum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
0
Gpt3D_Clone368_0.py 1 11
Gpt3D_Clone368_0.py 13 25

----------------------------------------

def median(lst) :
	sortedLst = sorted(lst)
	lstLen = len(lst)
	index = (lstLen - 1) / / 2
	if (lstLen % 2) :
		return sortedLst [index]
	else :
		return (sortedLst [index] + sortedLst [index + 1]) / 2.0
----------------------------------------

def median(lst):
    sorted_lst = sorted(lst)
    list_length = len(lst)
    index = (list_length - 1) // 2 
    if list_length % 2:
        return sorted_lst[index]
    else:
        # Type 3 variables
        average = 0
        average = (sorted_lst[index] + sorted_lst[index + 1]) / 2.0 
        return average
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
369
0
Gpt3D_Clone369_0.py 1 10
Gpt3D_Clone369_0.py 12 20

----------------------------------------

def cumulative_sum(l) :
	total = 0
	cumulative = []
	for num in l :
		total += num
		cumulative.append(total)
	return cumulative
----------------------------------------

def cumulative_sum(l):
    cumulative = []
    total = 0
    for i in range(len(l)):
        total += l[i]
        cumulative.append(total)
    return cumulative
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
0
Gpt3D_Clone36_0.py 1 12
Gpt3D_Clone36_0.py 14 26

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub):
    if not sub:
        return 1
    elif not seq:
        return 0
    result1 = num_subsequences(seq[1:], sub[1:])
    result2 = num_subsequences(seq[1:], sub)
    if seq[0] == sub[0]:
        result = result1 + result2
    else:
        result = result2
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
0
Gpt3D_Clone371_0.py 1 11
Gpt3D_Clone371_0.py 13 24

----------------------------------------

def mkdir_p(path) :
	try :
		os.makedirs(path)
	except OSError as exc :
		if exc.errno == errno.EEXIST and os.path.isdir(path) :
			pass
		else :
			raise
----------------------------------------

def mkdir_p(path):
	try:
		os.makedirs(path)
	except OSError as exc:
		if exc.errno == errno.ENOTDIR:
			raise
		else:
			if os.path.isdir(path):
				pass
			else:
				raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
1
Gpt3D_Clone371_1.py 1 11
Gpt3D_Clone371_1.py 13 24

----------------------------------------

def mkdir_p(path) :
	try :
		os.makedirs(path)
	except OSError as exc :
		if exc.errno == errno.EEXIST and os.path.isdir(path) :
			pass
		else :
			raise
----------------------------------------

def mkdir_p(path):
	try:
		os.makedirs(path)
	except OSError as exc:
		if exc.errno == errno.ENOENT:
			raise
		else:
			if os.path.isdir(path):
				pass
			else:
				raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
0
Gpt3D_Clone372_0.py 1 11
Gpt3D_Clone372_0.py 13 24

----------------------------------------

def mkdir_p(path) :
	try :
		os.makedirs(path)
	except OSError as exc :
		if exc.errno == errno.EEXIST and os.path.isdir(path) :
			pass
		else :
			raise
----------------------------------------

def mkdir_p(path) :
	try :
		os.makedirs(path)
	except OSError as exc :
		if exc.errno == errno.EEXIST :
			if os.path.isdir(path) :
				pass
			else :
				raise
		else:
			raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
1
Gpt3D_Clone372_1.py 1 11
Gpt3D_Clone372_1.py 13 23

----------------------------------------

def mkdir_p(path) :
	try :
		os.makedirs(path)
	except OSError as exc :
		if exc.errno == errno.EEXIST and os.path.isdir(path) :
			pass
		else :
			raise
----------------------------------------

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError:
        if os.path.exists(path):
            if not os.path.isdir(path):
                raise
        else:
            raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
2
Gpt3D_Clone372_2.py 1 9
Gpt3D_Clone372_2.py 11 15

----------------------------------------

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise
----------------------------------------

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if not exc.errno == errno.EEXIST or not os.path.isdir(path):
            raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
3
Gpt3D_Clone372_3.py 1 11
Gpt3D_Clone372_3.py 13 19

----------------------------------------

def mkdir_p(path) :
	try :
		os.makedirs(path)
	except OSError as exc :
		if exc.errno == errno.EEXIST and os.path.isdir(path) :
			pass
		else :
			raise
----------------------------------------

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if not (exc.errno == errno.EEXIST and os.path.isdir(path)):
            raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
0
Gpt3D_Clone373_0.py 1 10
Gpt3D_Clone373_0.py 12 18

----------------------------------------

def ping(self, host) :
	res = False
	ping_param = "-n 1" if system_name().lower() == "windows" else "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
----------------------------------------

def ping(self, host) :
	res = False
	ping_param = get_ping_param()
	resultado = execute_ping_command(ping_param + host)
	if "TTL=" in resultado :
		res = True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
1
Gpt3D_Clone373_1.py 1 10
Gpt3D_Clone373_1.py 12 18

----------------------------------------

def ping(self, host) :
	res = False
	ping_param = "-n 1" if system_name().lower() == "windows" else "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
----------------------------------------

def ping(self, host) :
	res = False
	ping_param = get_ping_param()
	resultado = execute_ping_command(host, ping_param)
	if "TTL=" in resultado :
		res = True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
1
Gpt3D_Clone374_1.py 1 10
Gpt3D_Clone374_1.py 12 23

----------------------------------------

def ping(self, host) :
	res = False
	ping_param = "-n 1" if system_name().lower() == "windows" else "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
----------------------------------------

def ping(self, host) :
	res = False
	if system_name().lower() == "windows" : 
		ping_param = "-n 1" 
	else :
		ping_param = "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
2
Gpt3D_Clone374_2.py 1 10
Gpt3D_Clone374_2.py 12 22

----------------------------------------

def ping(self, host) :
	res = False
	ping_param = "-n 1" if system_name().lower() == "windows" else "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
----------------------------------------

def ping(self, host):
	res = False
	if system_name().lower() == "windows":
		ping_param = "-n 1" 
	else:
		ping_param = "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
3
Gpt3D_Clone374_3.py 1 10
Gpt3D_Clone374_3.py 12 18

----------------------------------------

def ping(self, host) :
	res = False
	ping_param = "-n 1" if system_name().lower() == "windows" else "-c 1"
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
	return res
----------------------------------------

def ping(self, host):
	res = False
	ping_param = self.get_ping_parameter()
	resultado = os.popen("ping " + ping_param + " " + host).read()
	if "TTL=" in resultado :
		res = True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
376
0
Gpt3D_Clone376_0.py 1 26
Gpt3D_Clone376_0.py 28 46

----------------------------------------

def ping(host, network_timeout = 3) :
	args = [
	'ping']
	platform_os = platform.system().lower()
	if platform_os == 'windows' :
		args.extend(['-n', '1'])
		args.extend(['-w', str(network_timeout * 1000)])
	elif platform_os in ('linux', 'darwin') :
		args.extend(['-c', '1'])
		args.extend(['-W', str(network_timeout)])
	else :
		raise NotImplemented('Unsupported OS: {}'.format(platform_os))
	args.append(host)
	try :
		if platform_os == 'windows' :
			output = subprocess.run(args, check = True, universal_newlines = True).stdout
			if output and 'TTL' not in output :
				return False
		else :
			subprocess.run(args, check = True)
		return True
	except (subprocess.CalledProcessError, subprocess.TimeoutExpired) :
		return False
----------------------------------------

def ping(host, network_timeout = 3) :
	args = ['ping']
	platform_os = platform.system().lower()
	if platform_os == 'windows' :
		args.extend(['-n', '1'])
		args.extend(['-w', str(network_timeout * 1000)])
	elif platform_os in ('linux', 'darwin') :
		args.extend(['-c', '1'])
		args.extend(['-W', str(network_timeout)])
	else :
		raise NotImplemented('Unsupported OS: {}'.format(platform_os))
	args.append(host)
	try :
		subprocess.run(args, check = True, universal_newlines = True)
		return True
	except (subprocess.CalledProcessError, subprocess.TimeoutExpired) :
		return False
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
0
Gpt3D_Clone377_0.py 1 19
Gpt3D_Clone377_0.py 21 41

----------------------------------------

def ping(host, n = 0) :
	if (n > 0) :
		avg = 0
		for i in range(n) :
			avg += ping(host)
		avg = avg / n
	mp = MultiPing([host])
	mp.send()
	responses, no_responses = mp.receive(1)
	for addr, rtt in responses.items() :
		RTT = rtt
	if no_responses :
		mp.send()
		responses, no_responses = mp.receive(1)
		RTT = - 1
	return RTT
----------------------------------------

def ping(host, n = 0) :
	if (n > 0) :
		avg = 0
		for i in range(n) :
			avg += ping(host)
		avg = avg / n
	rtts = []
	mp = MultiPing([host])
	mp.send()
	responses, no_responses = mp.receive(1)
	for addr, rtt in responses.items() :
		rtts.append(rtt)
	if no_responses :
		mp.send()
		responses, no_responses = mp.receive(1)
	if len(rtts) > 0:
		RTT = max(rtts)
	else:
		RTT = -1
	return RTT
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
0
Gpt3D_Clone378_0.py 1 8
Gpt3D_Clone378_0.py 10 18

----------------------------------------

def call_api(url, data) :
	for k, value in list(data.items()) :
		url, n = re.subn(r'\{%s\}' % k, ';'.join(str(x) for x in value), url)
		if n :
			del data [k]
----------------------------------------

def call_api(url, data) :
	for item in list(data.items()) :
		k = item[0]
		value = item[1]
		url, n = re.subn(r'\{%s\}' % k, ';'.join(str(x) for x in value), url)
		if n :
			del data [k]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
1
Gpt3D_Clone378_1.py 1 8
Gpt3D_Clone378_1.py 10 15

----------------------------------------

def call_api(url, data) :
	for k, value in list(data.items()) :
		url, n = re.subn(r'\{%s\}' % k, ';'.join(str(x) for x in value), url)
		if n :
			del data [k]
----------------------------------------

def call_api(url, data):
    for key, value in data.items():
        new_url,n = re.subn(r'\{%s\}' % key, ';'.join(str(x) for x in value), url)
        if n > 0:
            del data[key]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
0
Gpt3D_Clone37_0.py 1 12
Gpt3D_Clone37_0.py 14 24

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = 0
	for i in range (len(seq)) :
		if seq [i] == sub [0] :
		 	result += num_subsequences(seq [i + 1 :], sub [1 :])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
380
0
Gpt3D_Clone380_0.py 1 10
Gpt3D_Clone380_0.py 12 21

----------------------------------------

def foo(bar = None, i = 10) :
	if bar is None :
		bar = set()
	if i == 0 :
		return bar
	bar |= set(random.randint(1, 1000) for i in xrange(10))
	return foo(bar, i - 1)
----------------------------------------

def foo(bar = None, i = 10) :
	if bar == None :
		bar = set()
	if i == 0 :
		return bar
	else :
		for j in range(10) :
			bar.add(random.randint(1, 1000))
		return foo(bar, i - 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
380
1
Gpt3D_Clone380_1.py 1 10
Gpt3D_Clone380_1.py 12 20

----------------------------------------

def foo(bar = None, i = 10) :
	if bar is None :
		bar = set()
	if i == 0 :
		return bar
	bar |= set(random.randint(1, 1000) for i in xrange(10))
	return foo(bar, i - 1)
----------------------------------------

def foo(bar = None, i = 10) :
	if bar is None :
		bar = set()
	if i == 0 :
		return bar
	else :
		bar.update(random.choice(list(range(1, 1000))) for x in range(10))
		return foo(bar, i - 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
380
2
Gpt3D_Clone380_2.py 1 10
Gpt3D_Clone380_2.py 12 20

----------------------------------------

def foo(bar = None, i = 10) :
	if bar is None :
		bar = set()
	if i == 0 :
		return bar
	bar |= set(random.randint(1, 1000) for i in xrange(10))
	return foo(bar, i - 1)
----------------------------------------

def foo(bar = None, i = 10) :
	if not bar :
		bar = set()
	if i == 0 :
		return bar
	bar |= set(random.randint(-100, 50) for e in range(10))
	return foo(bar, i - 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
0
Gpt3D_Clone381_0.py 1 11
Gpt3D_Clone381_0.py 13 23

----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elems :
		if k in res.keys() :
			return dict()
		res [k] = v;
	return res
----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	index = 0
	for key in elems :
		if key in res.keys() :
			return dict()
		res [index] = key;
		index += 1
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
1
Gpt3D_Clone381_1.py 1 11
Gpt3D_Clone381_1.py 13 23

----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elems :
		if k in res.keys() :
			return dict()
		res [k] = v;
	return res
----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	keys = list(elems.keys())
	values = list(elems.values())
	for i, (k, v) in enumerate(zip(keys, values)):
		if k in res.keys() :
			return dict()
		res [keys[i]] = values[i];
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
2
Gpt3D_Clone381_2.py 1 11
Gpt3D_Clone381_2.py 13 21

----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elems :
		if k in res.keys() :
			return dict()
		res [k] = v;
	return res
----------------------------------------

def merge_dicts(d1, d2) :
	elements = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elements :
		if k in res :
			return dict()
		res[k] = v
	return res
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
382
1
Gpt3D_Clone382_1.py 1 11
Gpt3D_Clone382_1.py 13 21

----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elems :
		if k in res.keys() :
			return dict()
		res [k] = v;
	return res
----------------------------------------

def merge_dicts(a, b): 
	items = set(a.items()) | set(b.items())
	res = dict()
	for key, val in items :
		if key in res :
			return dict() 
		res[key] = val
	return res 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
382
2
Gpt3D_Clone382_2.py 1 11
Gpt3D_Clone382_2.py 13 21

----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elems :
		if k in res.keys() :
			return dict()
		res [k] = v;
	return res
----------------------------------------

def combine_dicts(d1, d2) :
	pair_items = set(d1.items()) | set(d2.items())
	final = dict()
	for k, v in pair_items:
		if k in final:
			return dict()
		final[k] = v
	return final
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
382
3
Gpt3D_Clone382_3.py 1 11
Gpt3D_Clone382_3.py 13 21

----------------------------------------

def merge_dicts(d1, d2) :
	elems = set(d1.items()) | set(d2.items())
	res = {}
	for k, v in elems :
		if k in res.keys() :
			return dict()
		res [k] = v;
	return res
----------------------------------------

def combine_lookup(first, second): 
	elements = set(first.items()) | set(second.items())
	combined = {}
	for key, value in elements :
		if key in combined :
			return dict()
		combined[key] = value 
	return combined
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
383
0
Gpt3D_Clone383_0.py 1 11
Gpt3D_Clone383_0.py 13 23

----------------------------------------

def merge_dicts(d1, d2) :
	try :
		intersection = d1.viewkeys() & d2
	except AttributeError :
		intersection = d1.keys() & d2
	if any(d1 [shared] ! = d2 [shared] for shared in intersection) :
		return {}
	return dict(d1, ** d2)
----------------------------------------

def merge_dicts(dic_1, dic_2) :
	try :
		intersection = dic_1.viewkeys() & dic_2
	except AttributeError :
		intersection = dic_1.keys() & dic_2
	if any(dic_1 [shared] != dic_2 [shared] for shared in intersection) :
		return {}
	combined_dic = dic_1.copy()
	combined_dic.update(dic_2)
	return combined_dic
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
387
1
Gpt3D_Clone387_1.py 1 14
Gpt3D_Clone387_1.py 16 23

----------------------------------------

def Names() :
	names_list = ['Ben', 'Thor', 'Zoe', 'Kate']
	Found = False
	PlayerName = str(raw_input("What Player are you looking for? "))
	for name in names_list :
		if name == PlayerName :
			Found = True
	if Found == True :
		print ("Yes, they have a top score.")
	else :
		print ("No, they do not have a top score.")
----------------------------------------

def Names() :
	names_list = ['Ben', 'Thor', 'Zoe', 'Kate']
	PlayerName = str(input("What Player are you looking for? "))
	if PlayerName in names_list :
		print ("Yes, they have a top score.")
	else :
		print ("No, they do not have a top score.")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
0
Gpt3D_Clone388_0.py 1 15
Gpt3D_Clone388_0.py 17 30

----------------------------------------

def odd_numbers(my_list) :
	total = 0
	count = 0
	for number in my_list :
		if (number % 2 == 1) :
			total = total + number
		else :
			count = count + 1
	if (number == count) :
		return (0)
	else :
		return (total)
----------------------------------------

def odd_numbers(my_list):
	sum = 0
	even = 0
	for index in my_list:
		if (index % 2):
			sum += index
		else:
			even += 1
	if (even == len(my_list)):
		return (0)
	else:
		return (sum)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
1
Gpt3D_Clone388_1.py 1 15
Gpt3D_Clone388_1.py 17 28

----------------------------------------

def odd_numbers(my_list) :
	total = 0
	count = 0
	for number in my_list :
		if (number % 2 == 1) :
			total = total + number
		else :
			count = count + 1
	if (number == count) :
		return (0)
	else :
		return (total)
----------------------------------------

def odd_numbers(my_list) :
	total, count = 0, 0
	for number in my_list :
		if (number % 2 == 1) :
			total = total + number
		else :
			count += 1
	if (number == count) :
		return 0
	else :
		return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
0
Gpt3D_Clone38_0.py 1 12
Gpt3D_Clone38_0.py 14 24

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub):
	if not sub : 
		return 1
	elif not seq :
		return 0
	result = 0
	if seq[0] == sub[0] : 
		result = num_subsequences(seq[2:], sub[1:])
	result += num_subsequences(seq[1:], sub)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
1
Gpt3D_Clone38_1.py 1 12
Gpt3D_Clone38_1.py 14 24

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub) :
	if not sub : 
		return 1
	elif not seq :
		return 0
	result = 0
	if seq[0] == sub[0] : 
		result = num_subsequences(seq[1:], sub[1:]) 
	result += num_subsequences(seq[1:], sub)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
4
Gpt3D_Clone38_4.py 1 12
Gpt3D_Clone38_4.py 14 24

----------------------------------------

def num_subsequences(seq, sub) :
	if not sub :
		return 1
	elif not seq :
		return 0
	result = num_subsequences(seq [1 :], sub)
	if seq [0] == sub [0] :
		result += num_subsequences(seq [1 :], sub [1 :])
	return result
----------------------------------------

def num_subsequences(seq, sub):
	if not sub:
		return 1
	elif not seq:
		return 0
	result = num_subsequences(seq[:-1], sub)
	if seq[-1] == sub[-1]:
		result += num_subsequences(seq[:-1], sub[:-1])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
0
Gpt3D_Clone393_0.py 1 11
Gpt3D_Clone393_0.py 13 22

----------------------------------------

def permutations(string) :
	if len(string) == 1 :
		return string
	recursive_perms = []
	for c in string :
		for perm in permutations(string.replace(c, '', 1)) :
			revursive_perms.append(c + perm)
	return set(revursive_perms)
----------------------------------------

def permutations(string):
	if len(string) == 1:
		return string
	recursive_perms = []
	for i in range(len(string)):
		lowered = string[:i] + string[i+1:]
		for perm in permutations(lowered):
			recursive_perms.append(string[i] + perm)
	return set(recursive_perms) 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
0
Gpt3D_Clone395_0.py 1 11
Gpt3D_Clone395_0.py 13 24

----------------------------------------

def corr(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = data1.mean()
	mean2 = data2.mean()
	std1 = data1.std()
	std2 = data2.std()
	corr = ((data1 * data2).mean() - mean1 * mean2) / (std1 * std2)
	return corr
----------------------------------------

def corr(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = data1.mean()
	mean2 = data2.mean()
	std1 = data1.std()
	std2 = data2.std()
	multi_mean = (data1 * data2).mean()
	mean_multi = mean1 * mean2
	normalise = std1 * std2
	corr = (multi_mean - mean_multi) / normalise
	return corr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
1
Gpt3D_Clone395_1.py 1 11
Gpt3D_Clone395_1.py 13 24

----------------------------------------

def corr(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = data1.mean()
	mean2 = data2.mean()
	std1 = data1.std()
	std2 = data2.std()
	corr = ((data1 * data2).mean() - mean1 * mean2) / (std1 * std2)
	return corr
----------------------------------------

def corr(data1, data2) :
	"data1 & data2 should be numpy arrays."
	mean1 = data1.mean()
	mean2 = data2.mean()
	std1 = data1.std()
	std2 = data2.std()
	multi_mean = (data1 * data2).mean()
	multi_cal = mean1 * mean2
	corr = (multi_mean - multi_cal) / (std1 * std2)
	return corr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
396
0
Gpt3D_Clone396_0.py 1 10
Gpt3D_Clone396_0.py 12 19

----------------------------------------

def productFib(prod) :
	power = math.log(prod * 5) / log_phi
	i = int(round(power - 1, 7) / 2) + 1
	low = f(i)
	high = f(i + 1)
	answer = [low, high, low * high == prod]
	return answer
----------------------------------------

def productFib(prod):
  power = math.log(prod * 5) // log_phi
  i = int(round(power + 1,7) / 2) + 1
  low = f(i)
  high = f(i + 1)
  answer = [low, high, low * high == prod]
  return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
2
Gpt3D_Clone397_2.py 1 8
Gpt3D_Clone397_2.py 10 17

----------------------------------------

def subset(l) :
	if not l :
		return [[]]
	rest = subset(l [1 :])
	return rest + [[l [0]] + s for s in rest]
----------------------------------------

def subset(l):
  if not l:
    return [[]]
  x = l[0]
  rest = subset(l[1:])
  more = [[x] + s for s in rest]
  return rest + more
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
3
Gpt3D_Clone397_3.py 1 8
Gpt3D_Clone397_3.py 10 17

----------------------------------------

def subset(l) :
	if not l :
		return [[]]
	rest = subset(l [1 :])
	return rest + [[l [0]] + s for s in rest]
----------------------------------------

def subset3(l):
  if not l:
    return [[]]
  
  l1 = l[1:]
  rest = subset3(l1)
  return rest + [[l[0]] + sub for sub in rest]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
398
0
Gpt3D_Clone398_0.py 1 15
Gpt3D_Clone398_0.py 17 31

----------------------------------------

def do_GET(self) :
	if self.path ! = '/' :
		self.send_error(404, "Object not found")
		return
	self.send_response(200)
	self.send_header('Content-type', 'text/html; charset=utf-8')
	self.end_headers()
	i = 0
	while True :
		self.wfile.write("%i " % i)
		time.sleep(0.1)
		i += 1
----------------------------------------

def do_GET(self) :
	if self.path != '/' :
		self.send_error(403, "Request not valid")
		return;
		
	self.send_response(200)
	self.send_header('Content-type', 'text/html; charset=utf-8');
	self.end_headers();
	count = 0
	while count < 100: 
		self.wfile.write("%i " % count)
		time.sleep(0.1)
		count += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
0
Gpt3D_Clone400_0.py 1 14
Gpt3D_Clone400_0.py 16 32

----------------------------------------

def roundrobin(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	num_active = len(iterables)
	nexts = cycle(iter(it).__next__ for it in iterables)
	while num_active :
		try :
			for next in nexts :
				yield next()
		except StopIteration :
			num_active -= 1
			nexts = cycle(islice(nexts, num_active))
----------------------------------------

def roundrobin4(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	num_active = len(iterables)
	nexts = cycle(iter(it).__next__ for it in iterables)
	while num_active :
		try :
			for next in nexts :
				value = next()
				if value is None :
					num_active -= 1
					nexts = cycle(islice(nexts, num_active))
				else :
					yield value
		except StopIteration :
			num_active -= 1
			nexts = cycle(islice(nexts, num_active))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
1
Gpt3D_Clone400_1.py 1 14
Gpt3D_Clone400_1.py 16 32

----------------------------------------

def roundrobin(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	num_active = len(iterables)
	nexts = cycle(iter(it).__next__ for it in iterables)
	while num_active :
		try :
			for next in nexts :
				yield next()
		except StopIteration :
			num_active -= 1
			nexts = cycle(islice(nexts, num_active))
----------------------------------------

def roundrobin3(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	num_active = len(iterables)
	nexts = cycle(iter(it).__next__ for it in iterables)
	while num_active :
		try :
			for next in nexts :
				value = next()
				yield value
				if value is None :
					num_active -= 1
					nexts = cycle(islice(nexts, num_active))
		except StopIteration :
			num_active -= 1
			nexts = cycle(islice(nexts, num_active))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
401
0
Gpt3D_Clone401_0.py 1 14
Gpt3D_Clone401_0.py 16 28

----------------------------------------

def roundrobin(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	pending = len(iterables)
	nexts = cycle(iter(it).next for it in iterables)
	while pending :
		try :
			for next in nexts :
				yield next()
		except StopIteration :
			pending -= 1
			nexts = cycle(islice(nexts, pending))
----------------------------------------

def roundrobin(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	pending = len(iterables)
	nexts = cycle(iter(it).next() for it in iterables)
	while pending>0 :
		try :
			for item in nexts :
				yield item()
		except StopIteration :
			pending = pending - 1
			nexts = cycle(islice(nexts, pending))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
401
1
Gpt3D_Clone401_1.py 1 14
Gpt3D_Clone401_1.py 16 28

----------------------------------------

def roundrobin(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	pending = len(iterables)
	nexts = cycle(iter(it).next for it in iterables)
	while pending :
		try :
			for next in nexts :
				yield next()
		except StopIteration :
			pending -= 1
			nexts = cycle(islice(nexts, pending))
----------------------------------------

def roundrobin(* iterables) :
	"roundrobin('ABC', 'D', 'EF') --> A D E B F C"
	pending = len(iterables)
	nexts = cycle(iter(it).__next__() for it in iterables)
	while pending>0 :
		try :
			for item in nexts :
				yield item()
		except StopIteration :
			pending -= 1
			nexts = cycle(itertools.islice(nexts, pending))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
2
Gpt3D_Clone403_2.py 1 9
Gpt3D_Clone403_2.py 11 18

----------------------------------------

def now_next(sequence, n = 2) :
	iterators = itertools.tee(iter(sequence), n)
	for i, iterator in enumerate(iterators) :
		for j in range(i) :
			iterator.next()
	return itertools.izip(* iterators)
----------------------------------------

def now_next_3(sequence, n = 2) :
	iterators = itertools.tee(sequence, n)
	for i, iterator in enumerate(iterators) :
		for j in range(i) :
			next(iterator)
	return itertools.zip_longest(* iterators)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
404
0
Gpt3D_Clone404_0.py 1 12
Gpt3D_Clone404_0.py 14 27

----------------------------------------

def translation_comparison() :
	import re
	file1 = open("text1.txt", "r")
	file2 = open("text2.txt", "r")
	text1 = file1.read()
	text2 = file2.read()
	text1 = set(re.findall(r'\w+', text1))
	text2 = set(re.findall(r'\w+', text2))
	return list(text1.difference(text2))
----------------------------------------

def translation_comparison() :
	import re
	file1 = open("text1.txt", "r")
	file2 = open("text2.txt", "r")
	text1 = file1.read()
	text2 = file2.read()
	words1 = set(re.findall(r'\w+', text1))
	words2 = set(re.findall(r'\w+', text2))
	differences = []
	for element in words1:
		if element not in words2:
			differences.append(element)
	return differences
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
404
1
Gpt3D_Clone404_1.py 1 12
Gpt3D_Clone404_1.py 14 25

----------------------------------------

def translation_comparison() :
	import re
	file1 = open("text1.txt", "r")
	file2 = open("text2.txt", "r")
	text1 = file1.read()
	text2 = file2.read()
	text1 = set(re.findall(r'\w+', text1))
	text2 = set(re.findall(r'\w+', text2))
	return list(text1.difference(text2))
----------------------------------------

def translation_comparison() :
	import re
	file1 = open("text1.txt", "r")
	file2 = open("text2.txt", "r")
	text1 = file1.read()
	text2 = file2.read()
	text1_list = re.findall(r'\w+', text1)
	text2_list = re.findall(r'\w+', text2)
	text1_set = set(text1_list)
	text2_set = set(text2_list)
	return list(text1_set.difference(text2_set))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
405
0
Gpt3D_Clone405_0.py 1 8
Gpt3D_Clone405_0.py 10 17

----------------------------------------

def divisors(integer) :
	arr = []
	for x in range(2, integer - 1) :
		if integer % x == 0 :
			arr.append(x)
----------------------------------------

def divisors(integer) :
	arr = []
	x = 2
	while x < integer - 1 :
		if integer % x == 0 :
			arr.append(x)
		x += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
405
1
Gpt3D_Clone405_1.py 1 8
Gpt3D_Clone405_1.py 10 16

----------------------------------------

def divisors(integer) :
	arr = []
	for x in range(2, integer - 1) :
		if integer % x == 0 :
			arr.append(x)
----------------------------------------

def divisors(integer) :
	arr = []
	for x in range(2, integer) :
		if integer % x == 0 and x != integer :
			arr.append(x)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
407
2
Gpt3D_Clone407_2.py 1 9
Gpt3D_Clone407_2.py 11 17

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [:index]
	else :
		return the_list[:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
2
Gpt3D_Clone410_2.py 1 9
Gpt3D_Clone410_2.py 11 17

----------------------------------------

def ignore_until(the_list, match) :
	if match in the_list :
		index = the_list.index(match)
		return the_list [index :]
	else :
		return []
----------------------------------------

def ignore_until(the_list, match) :
	index = the_list.index(match) if match in the_list else -1
	if index > -1 :
		return the_list[index:]
	else :
		return []
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
414
0
Gpt3D_Clone414_0.py 1 9
Gpt3D_Clone414_0.py 11 18

----------------------------------------

def __getitem__(self, key) :
	if isinstance(key, int) :
		return super(MyOrderedDict, self).__getitem__(self.keys() [key])
	if isinstance(key, slice) :
		return [super(MyOrderedDict, self).__getitem__(k) for k in self.keys() [key]]
	return super(MyOrderedDict, self).__getitem__(key)
----------------------------------------

def __getitem__(self, key) :
	if isinstance(key, int) :
		return super(MyOrderedDict, self).__getitem__(self._keys[key])
	if isinstance(key, slice) :
		return [super(MyOrderedDict, self).__getitem__(k) for k in self._keys[key]]
	return super(MyOrderedDict, self).__getitem__(key)
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
414
1
Gpt3D_Clone414_1.py 1 9
Gpt3D_Clone414_1.py 11 17

----------------------------------------

def __getitem__(self, key) :
	if isinstance(key, int) :
		return super(MyOrderedDict, self).__getitem__(self.keys() [key])
	if isinstance(key, slice) :
		return [super(MyOrderedDict, self).__getitem__(k) for k in self.keys() [key]]
	return super(MyOrderedDict, self).__getitem__(key)
----------------------------------------

def __getitem__(self, key):
  if isinstance(key, int):
    return super(MyOrderedDict, self).__getitem__(list(self.keys())[key])
  if isinstance(key, slice):
    return [self[i] for i in range(*key.indices(len(self)))]
  return super(MyOrderedDict, self).__getitem__(key)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
414
2
Gpt3D_Clone414_2.py 1 9
Gpt3D_Clone414_2.py 11 17

----------------------------------------

def __getitem__(self, key) :
	if isinstance(key, int) :
		return super(MyOrderedDict, self).__getitem__(self.keys() [key])
	if isinstance(key, slice) :
		return [super(MyOrderedDict, self).__getitem__(k) for k in self.keys() [key]]
	return super(MyOrderedDict, self).__getitem__(key)
----------------------------------------

def __getitem__(self, key) :
	if isinstance(key, int) :
		return super(MyOrderedDict, self).__getitem__(list(self.keys())[key])
	if isinstance(key, slice) :
		return [super(MyOrderedDict, self).__getitem__(k) for k in list(self.keys())[key]]
	return super(MyOrderedDict, self).__getitem__(key)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
0
Gpt3D_Clone415_0.py 1 4
Gpt3D_Clone415_0.py 6 9

----------------------------------------

def pop(self, key = None, default = object()) :
	if key is None :
		return self.popitem()
----------------------------------------

def pop(self, key = None, default = object()) : 
	if key is None :
		key, value = self.popitem()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
416
0
Gpt3D_Clone416_0.py 1 14
Gpt3D_Clone416_0.py 16 28

----------------------------------------

def run(self) :
	t = datetime(* datetime.now().timetuple() [: 5])
	while 1 :
		for e in self.events :
			e.check(t)
		t += timedelta(minutes = 1)
		n = datetime.now()
		while n < t :
			s = (t - n).seconds + 1
			time.sleep(s)
			n = datetime.now()
----------------------------------------

def run(self) :
	t = datetime(* datetime.now().timetuple() [: 5])
	while 1 :
		for e in self.events :
			e.check(self, t)
		t += timedelta(minutes = 1)
		n = datetime.now()
		while n < t :
			s = (t - n).total_seconds() + 1
			sleep(s)
			n = datetime.now()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
419
0
Gpt3D_Clone419_0.py 1 41
Gpt3D_Clone419_0.py 43 74

----------------------------------------

def decode(number, base) :
	try :
		int(base)
	except ValueError :
		raise ValueError('decode(value,base): base must be in base10')
	else :
		base = int(base)
	number = str(number)
	if base < 2 :
		base = 2
	if base > 62 :
		base = 62
	numbers = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f",
	"g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",
	"w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L",
	"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
	final = 0
	if number.startswith("-") :
		neg = True
		number = list(number)
		del (number [0])
		temp = number
		number = ""
		for x in temp :
			number = "{}{}".format(number, x)
	else :
		neg = False
	loc = len(number) - 1
	number = str(number)
	for x in number :
		if numbers.index(x) > base :
			raise ValueError('{} is out of base{} range'.format(x, str(base)))
		final = final + (numbers.index(x) * (base ** loc))
		loc = loc - 1
	if neg :
		return - final
	else :
		return final
----------------------------------------

def decode(number, base):
	try:
		base = int(base)
	except ValueError:
		raise ValueError('decode(value,base): base must be in base10')
	number = str(number)
	if base < 2:
		base = 2
	if base > 62:
		base = 62
	numbers = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f",
			"g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",
			"w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L",
			"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
	final = 0
	if number.startswith("-"):
		is_negative = True
		number = number.replace('-', '')
	else:
		is_negative = False
	num_len = len(number) - 1
	for x in number:
		if numbers.index(x) > base:
			raise ValueError('{} is out of base{} range'.format(x, str(base)))
		final = final + (numbers.index(x) * (base ** num_len))
		num_len = num_len - 1
	if is_negative:
		return - final
	else:
		return final
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
0
Gpt3D_Clone420_0.py 1 13
Gpt3D_Clone420_0.py 15 27

----------------------------------------

def leap_years(start, end) :
	if start < 1500 or start > 2100 :
		return 0
	if end < 1500 or end > 2100 :
		return 0
	i, count = 0, 0
	for i in range(start, end + 1) :
		if i % 4 == 0 and (i % 100 ! = 0 or i % 400 == 0) :
			count += 1
	return count
----------------------------------------

def leap_years4(start, end):
	if start < 1500 or start > 2100:
		return 0
	elif end < 1500 or end > 2100:
		return 0
	else:
		j = 0
		total = 0
		for j in range(start, end + 1):
			if (j % 4 == 0 and (j % 100 != 0 or j % 400 == 0)):
				total += 1
		return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
1
Gpt3D_Clone420_1.py 1 13
Gpt3D_Clone420_1.py 15 27

----------------------------------------

def leap_years(start, end) :
	if start < 1500 or start > 2100 :
		return 0
	if end < 1500 or end > 2100 :
		return 0
	i, count = 0, 0
	for i in range(start, end + 1) :
		if i % 4 == 0 and (i % 100 ! = 0 or i % 400 == 0) :
			count += 1
	return count
----------------------------------------

def leap_years3(start, end):
	if start < 1500 or start > 2100:
		return 0
	elif end < 1500 or end > 2100:
		return 0
	else:
		i = 0
		count = 0
		for i in range(start, end + 1):
			if (i % 4 == 0 and (i % 100 != 0 or i % 400 == 0)):
				count += 1
		return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
2
Gpt3D_Clone420_2.py 1 13
Gpt3D_Clone420_2.py 15 24

----------------------------------------

def leap_years(start, end) :
	if start < 1500 or start > 2100 :
		return 0
	if end < 1500 or end > 2100 :
		return 0
	i, count = 0, 0
	for i in range(start, end + 1) :
		if i % 4 == 0 and (i % 100 ! = 0 or i % 400 == 0) :
			count += 1
	return count
----------------------------------------

def leap_years(start, end):
	if start < 1500 or start > 2100 or end < 1500 or end > 2100 :
		return 0
	i, count = 0, 0
	for i in range(start, end + 1):
		if (i % 4 == 0 and i % 100 != 0) or i % 400 == 0 :
			count += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
421
0
Gpt3D_Clone421_0.py 1 13
Gpt3D_Clone421_0.py 15 27

----------------------------------------

def getPrimes(n) :
	yield 2
	i = 3
	while i < n :
		for a in getPrimes(int(math.sqrt(i)) + 1) :
			if i % a == 0 :
				break
		else :
			yield i
		i += 2
----------------------------------------

def getPrimes(n) :
	yield 2
	i = 3
	while i < n : 
		k = 2
		while k <= math.sqrt(i) :
			if i % k == 0 :
				break
			k += 1
		else :
			yield i
		i += 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
421
1
Gpt3D_Clone421_1.py 1 13
Gpt3D_Clone421_1.py 15 24

----------------------------------------

def getPrimes(n) :
	yield 2
	i = 3
	while i < n :
		for a in getPrimes(int(math.sqrt(i)) + 1) :
			if i % a == 0 :
				break
		else :
			yield i
		i += 2
----------------------------------------

def getPrimes(n) :
	yield 2
	i = 3
	while i < n :
		for a in getPrimes(int(math.sqrt(i)) + 1) :
			if i % a != 0 :
				yield i
				break
		i += 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
0
Gpt3D_Clone422_0.py 1 14
Gpt3D_Clone422_0.py 16 24

----------------------------------------

def getPrimes(n) :
	i = 2
	while i < n :
		prime = True
		for a in xrange(2, i) :
			if i % a == 0 :
				prime = False
				break
		if prime :
			yield i
		i += 1
----------------------------------------

def getPrimes(n):
	for i in range(2, n):
		is_prime = True
		for a in range(2, i):
			if i % a == 0:
				is_prime = False
		if is_prime:
			yield i
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
0
Gpt3D_Clone423_0.py 1 17
Gpt3D_Clone423_0.py 19 38

----------------------------------------

def handle_request(req) :
	for i, h in enumerate(handlers) :
		if h [1].handles(req) :
			h [0] += 1
			for j in reversed(range(i + 1)) :
				if handlers [j] [0] < = h [0] :
					break
			if j < i :
				handlers [j + 1 : i + 1] = handlers [j : i]
				handlers [j] = h
			break
	else :
		return None
	return h [1]
----------------------------------------

def handle_request(req) :
	for i, h in enumerate(handlers) :
		if h [1].handles(req) :
			h [0] += 1
			for j in reversed(range(i + 1)) :
				if handlers [j] [0] < = h [0] :
					break
			if j < i :
				p = j + 1
				q = i + 1
				while p < q :
					handlers [p], handlers [q] = handlers [q], handlers[p]
					p += 1
					q -= 1
				handlers [j] = h
			break
	else :
		return None
	return h [1]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
424
0
Gpt3D_Clone424_0.py 1 13
Gpt3D_Clone424_0.py 15 27

----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	for _ in range(roll_times) :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op :
			print (roll_result)
	if print_op :
		print (total_roll)
	return total_roll
----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	index = 0
	while index < roll_times :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op:
			print(roll_result)
		index += 1
	if print_op:
		print(total_roll)
	return total_roll
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
424
1
Gpt3D_Clone424_1.py 1 13
Gpt3D_Clone424_1.py 15 27

----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	for _ in range(roll_times) :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op :
			print (roll_result)
	if print_op :
		print (total_roll)
	return total_roll
----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	index = 1
	while index <= roll_times :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op :
			print (roll_result)
		index += 1
	if print_op :
		print (total_roll)
	return total_roll
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
424
2
Gpt3D_Clone424_2.py 1 13
Gpt3D_Clone424_2.py 15 28

----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	for _ in range(roll_times) :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op :
			print (roll_result)
	if print_op :
		print (total_roll)
	return total_roll
----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	index = 0
	while index < roll_times :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op :
			print (roll_result)
		index += 1
	if print_op :
		print (total_roll)
	return total_roll
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
424
3
Gpt3D_Clone424_3.py 1 13
Gpt3D_Clone424_3.py 15 27

----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	for _ in range(roll_times) :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op :
			print (roll_result)
	if print_op :
		print (total_roll)
	return total_roll
----------------------------------------

def roll_die(die_type, roll_times, print_op = False) :
	total_roll = 0
	i = 0
	while i < roll_times :
		roll_result = random.randint(1, die_type)
		total_roll += roll_result
		if print_op:
			print(roll_result)
		i = i + 1
	if print_op:
		print(total_roll)
	return total_roll
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
425
0
Gpt3D_Clone425_0.py 1 9
Gpt3D_Clone425_0.py 11 18

----------------------------------------

def __next__(self) :
	try :
		return next(self.__iter)
	except StopIteration :
		self.__iter = None
		raise
----------------------------------------

def __next__(self) :
	try :
		value = next(self.__iter)
		return value
	except StopIteration :
		self.__iter = None
		raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
425
1
Gpt3D_Clone425_1.py 1 9
Gpt3D_Clone425_1.py 11 18

----------------------------------------

def __next__(self) :
	try :
		return next(self.__iter)
	except StopIteration :
		self.__iter = None
		raise
----------------------------------------

def __next__(self) :
	try :
		value = next(self.__iter)
		return value
	except StopIteration :
		self.__iter = None
		raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
425
2
Gpt3D_Clone425_2.py 1 9
Gpt3D_Clone425_2.py 11 19

----------------------------------------

def __next__(self) :
	try :
		return next(self.__iter)
	except StopIteration :
		self.__iter = None
		raise
----------------------------------------

def __next__(self) :
	try :
		result = next(self.__iter)
		return result
	except StopIteration :
		self.__iter = None
		raise
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
426
0
Gpt3D_Clone426_0.py 1 10
Gpt3D_Clone426_0.py 12 20

----------------------------------------

def on_success(self, data) :
	print data ['text']
	with open('scratch1.json', 'ab') as outfile :
		json.dump(data, outfile, indent = 4)
	with open('scratch2.json', 'ab') as xoutfile :
		json.dump(data, xoutfile, indent = 4)
	return
----------------------------------------

def on_success(self, data) :
	print(data ['text'])
	with open('scratch1.json', 'ab') as outfile :
		json.dump(data, outfile)
	with open('scratch2.json', 'ab') as xoutfile :
		json.dump(data, xoutfile)
	return
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
427
2
Gpt3D_Clone427_2.py 1 14
Gpt3D_Clone427_2.py 16 31

----------------------------------------

def mssl(l) :
	best = cur = 0
	curi = starti = besti = 0
	for ind, i in enumerate(l) :
		if cur + i > 0 :
			cur += i
		else :
			cur, curi = 0, ind + 1
		if cur > best :
			starti, besti, best = curi, ind + 1, cur
	return starti, besti, best
----------------------------------------

def mssl(l) :
	best = cur = 0
	curi = starti = besti = 0
	for ind, i in enumerate(l) :
		if cur + i > 0 :
			cur = cur + i
		else :
			cur = 0
			curi = ind + 1
		if cur > best :
			starti = curi
			besti = ind + 1
			best = cur
	return starti, besti, best
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
428
0
Gpt3D_Clone428_0.py 1 14
Gpt3D_Clone428_0.py 16 27

----------------------------------------

def mssl(l) :
	best = cur = 0
	curi = starti = besti = 0
	for ind, i in enumerate(l) :
		if cur + i > 0 :
			cur += i
		else :
			cur, curi = 0, ind + 1
		if cur > best :
			starti, besti, best = curi, ind + 1, cur
	return starti, besti, best
----------------------------------------

def mssl(list):
    bestsum = currentsum = 0
    index = start = end = 0
    for i in range(len(list)):
        if currentsum + list[i] > 0:
            currentsum += list[i]
        else:
            currentsum, index = 0, i + 1
        if currentsum > bestsum:
            start, end, bestsum = index, i + 1, currentsum
    return start, end, bestsum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
0
Gpt3D_Clone430_0.py 1 18
Gpt3D_Clone430_0.py 20 35

----------------------------------------

def get_fs_type(path) :
	partition = {}
	for part in psutil.disk_partitions() :
		partition [part.mountpoint] = (part.fstype, part.device)
	if path in partition :
		return partition [path]
	splitpath = path.split(os.sep)
	for i in xrange(len(splitpath), 0, - 1) :
		path = os.sep.join(splitpath [: i]) + os.sep
		if path in partition :
			return partition [path]
		path = os.sep.join(splitpath [: i])
		if path in partition :
			return partition [path]
	return ("unkown", "none")
----------------------------------------

def get_fs_type(path):
    partition = {}
    for part in psutil.disk_partitions():
        partition[part.mountpoint] = (part.fstype, part.device)
    if path in partition:
        return partition[path]
    splitpath = path.split(os.sep)
    for section in splitpath:
        if section != '':
            path = os.sep.join(splitpath[:-1])
            if path in partition:
                return partition[path]
    return ("unkown", "none")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
1
Gpt3D_Clone430_1.py 1 18
Gpt3D_Clone430_1.py 20 34

----------------------------------------

def get_fs_type(path) :
	partition = {}
	for part in psutil.disk_partitions() :
		partition [part.mountpoint] = (part.fstype, part.device)
	if path in partition :
		return partition [path]
	splitpath = path.split(os.sep)
	for i in xrange(len(splitpath), 0, - 1) :
		path = os.sep.join(splitpath [: i]) + os.sep
		if path in partition :
			return partition [path]
		path = os.sep.join(splitpath [: i])
		if path in partition :
			return partition [path]
	return ("unkown", "none")
----------------------------------------

def get_fs_type(path):
    partition = {}
    for part in psutil.disk_partitions():
        partition[part.mountpoint] = (part.fstype, part.device)
    if path in partition:
        return partition[path]
    splitpath = path.split(os.sep)
    for i in range(1, len(splitpath)):
        path = os.sep.join(splitpath[:i])
        if path in partition:
            return partition[path]
    return ("unkown", "none")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
1
Gpt3D_Clone433_1.py 1 10
Gpt3D_Clone433_1.py 12 22

----------------------------------------

def update(self, request, * args, ** kwargs) :
	partial = True
	instance = self.get_object()
	serializer = self.get_serializer(instance, data = request.data, partial = partial)
	serializer.is_valid(raise_exception = True)
	self.perform_update(serializer)
	return Response(serializer.data)
----------------------------------------

def update(self, request, * args, ** kwargs) : 
	partial = True 
	instance = self.get_object() 
	serializer = self.get_serializer(instance, data = request.data, partial = partial) 
	if serializer.is_valid(): 
		self.perform_update(serializer)
		return Response(serializer.data)
	else: 
		raise ValidationError(serializer.errors) 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
0
Gpt3D_Clone436_0.py 1 14
Gpt3D_Clone436_0.py 16 32

----------------------------------------

def __init__(self, * args, ** kw) :
	super(ModelForm, self).__init__(* args, ** kw)
	self.fields.keyOrder = [
	'super_user',
	'all_districts',
	'multi_district',
	'all_schools',
	'manage_users',
	'direct_login',
	'student_detail',
	'license']
----------------------------------------

def __init__(self, * args, ** kw) :
	super(ModelForm, self).__init__(* args, ** kw)
	field_order = [
		'super_user',
		'all_districts',
		'multi_district',
		'all_schools',
		'manage_users',
		'direct_login',
		'student_detail',
		'license'
	]
	for key in field_order :
		if key not in self.fields :
			raise Exception('{} is not a valid field key'.format(key))
	self.fields.keyOrder = field_order
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
437
0
Gpt3D_Clone437_0.py 1 11
Gpt3D_Clone437_0.py 13 21

----------------------------------------

def __init__(self) :
	self.fields = []
	for field_name in dir(self) :
		field = getattr(self, field_name)
		if isinstance(field, Field) :
			field.name = field_name
			self.fields.append(field)
	self.fields.sort(key = operator.attrgetter('count'))
----------------------------------------

def __init__(self) :
	self.fields = []
	for field_name in getmembers(self)[3:] :
		field = getattr(self, field_name)
		if isinstance(field, Field) :
			field.name = field_name
			self.fields.append(field)
	self.fields.sort(key = attrgetter('count'))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
437
1
Gpt3D_Clone437_1.py 1 11
Gpt3D_Clone437_1.py 13 21

----------------------------------------

def __init__(self) :
	self.fields = []
	for field_name in dir(self) :
		field = getattr(self, field_name)
		if isinstance(field, Field) :
			field.name = field_name
			self.fields.append(field)
	self.fields.sort(key = operator.attrgetter('count'))
----------------------------------------

def __init__(self):
	self.fields = []
	for field_name in dir(self):
		field = self.__getattribute__(field_name)
		if type(field) is Field:
			field.name = field_name
			self.fields.append(field)
	self.fields.sort(key=operator.attrgetter('count'))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
0
Gpt3D_Clone439_0.py 1 11
Gpt3D_Clone439_0.py 13 21

----------------------------------------

def almostIncreasingSequence(sequence) :
	t = 0
	for i in range(len(sequence)) :
		temp = sequence.copy()
		del temp [i]
		if temp == sorted(temp) and not (any(i == j for i, j in zip(sorted(temp), sorted(temp) [1 :]))) :
			t += 1
	return t > 0
----------------------------------------

def almostIncreasingSequence(sequence) :
	t = 0
	for i in range(len(sequence)) :
		temp = sequence.copy()
		del temp [i]
		if sorted(temp) == temp and not any(i == j for i, j in zip(sorted(temp), sorted(temp) [1 :])) :
			t += 1
	return not t == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
0
Gpt3D_Clone43_0.py 1 17
Gpt3D_Clone43_0.py 19 35

----------------------------------------

def bubble_sort(l) :
	exchanged = True
	iteration = 0
	n = len(l)
	while (exchanged) :
		iteration += 1
		exchanged = False
		for i in range(n - 1) :
			if l [i] > l [i + 1] :
				exchanged = True
				l [i], l [i + 1] = l [i + 1], l [i]
		n -= 1
	print 'Iterations: %s' % (iteration)
	return l
----------------------------------------

def bubble_sort4(l):
    exchanged = True
    iteration = 0
    n = len(l)
    while exchanged:
        exchanged = False
        iteration += 1
        for i in range(n - 1):
            if l[i] > l[i + 1]:
                exchanged = True
                temp = l[i]
                l[i] = l[i + 1]
                l[i + 1] = temp
        n -= 1
    print('Iterations: %s' % (iteration))
    return l
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
1
Gpt3D_Clone43_1.py 1 17
Gpt3D_Clone43_1.py 19 37

----------------------------------------

def bubble_sort(l) :
	exchanged = True
	iteration = 0
	n = len(l)
	while (exchanged) :
		iteration += 1
		exchanged = False
		for i in range(n - 1) :
			if l [i] > l [i + 1] :
				exchanged = True
				l [i], l [i + 1] = l [i + 1], l [i]
		n -= 1
	print 'Iterations: %s' % (iteration)
	return l
----------------------------------------

def bubble_sort3(l):
    exchanged = True
    iterations = 0
    list_len = len(l)
    while exchanged:
        exchanged = False
        iterations += 1
        for i in range(list_len - 1):
            if l[i] > l[i + 1]:
                exchanged = True
                temp = l[i]
                l[i] = l[i + 1]
                l[i + 1] = temp
        list_len -= 1
    print('Iterations: %s' % (iterations))
    return l
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
442
0
Gpt3D_Clone442_0.py 1 11
Gpt3D_Clone442_0.py 13 21

----------------------------------------

def almostIncreasingSequence(sequence) :
	t = 0
	for i in range(len(sequence)) :
		temp = sequence.copy()
		del temp [i]
		if temp == sorted(temp) and not (any(i == j for i, j in zip(sorted(temp), sorted(temp) [1 :]))) :
			t += 1
	return t > 0
----------------------------------------

def almostIncreasingSequence(sequence) :
	num = 0
	for i in range(len(sequence)) :
		templ = list(sequence)
		del templ [i]
		if templ == sorted(templ) and not any(i == j for i, j in zip(sorted(templ), sorted(templ) [1 :])) :
			num += 1
	return num > 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
442
1
Gpt3D_Clone442_1.py 1 11
Gpt3D_Clone442_1.py 13 22

----------------------------------------

def almostIncreasingSequence(sequence) :
	t = 0
	for i in range(len(sequence)) :
		temp = sequence.copy()
		del temp [i]
		if temp == sorted(temp) and not (any(i == j for i, j in zip(sorted(temp), sorted(temp) [1 :]))) :
			t += 1
	return t > 0
----------------------------------------

def almostIncreasingSequence(sequence) :
	cnt = 0
	for i in range(len(sequence)) :
		temp = list(sequence)
		del temp [i]
		if temp == sorted(temp) and not any(i == j for i, j in zip(sorted(temp), sorted(temp) [1 :])) :
			cnt += 1
	return cnt > 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
442
2
Gpt3D_Clone442_2.py 1 11
Gpt3D_Clone442_2.py 13 22

----------------------------------------

def almostIncreasingSequence(sequence) :
	t = 0
	for i in range(len(sequence)) :
		temp = sequence.copy()
		del temp [i]
		if temp == sorted(temp) and not (any(i == j for i, j in zip(sorted(temp), sorted(temp) [1 :]))) :
			t += 1
	return t > 0
----------------------------------------

def almostIncreasingSequence(sequence) :
	counter = 0
	for i in range(len(sequence)) :
		tempLst = list(sequence)
		del tempLst [i]
		if tempLst == sorted(tempLst) and not any(i == j for i, j in zip(sorted(tempLst), sorted(tempLst) [1 :])) :
			counter += 1
	return counter > 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
443
0
Gpt3D_Clone443_0.py 1 16
Gpt3D_Clone443_0.py 18 27

----------------------------------------

def almostIncreasingSequence(sequence) :
	for i, x in enumerate(sequence) :
		ret = False
		s = sequence [: i] + sequence [i + 1 :]
		for j, y in enumerate(s [1 :]) :
			if s [j + 1] < = s [j] :
				ret = True
				break
			if ret :
				break
		if not ret :
			return True
	return False
----------------------------------------

def almostIncreasingSequence(sequence) :
	for i, x in enumerate(sequence) :
		tmp = sequence [: i] + sequence [i + 1 :]
		for j, y in enumerate(tmp [1 :]) :
			if tmp [j + 1] < = tmp [j] :
				return False
			if tmp [j + 1] > tmp [j] :
				return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
445
0
Gpt3D_Clone445_0.py 1 8
Gpt3D_Clone445_0.py 10 14

----------------------------------------

def do_loop(self) :
	for line in self.connections [0].iter_lines() :
		if self.new_conn.is_set() :
			break
		print line
----------------------------------------

def do_loop_type3(self) :
	for line in self.connections[0].iter_lines() :
		if self.new_conn.is_set() :
			return
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
448
0
Gpt3D_Clone448_0.py 1 10
Gpt3D_Clone448_0.py 12 20

----------------------------------------

def update(self, instance, validated_data) :
	user_data = validated_data.pop('user', {})
	user_serializer = UserSerializer(instance.user, data = user_data, partial = True)
	user_serializer.is_valid(raise_exception = True)
	user_serializer.update(instance.user, user_data)
	super(ProfileSerializer, self).update(instance, validated_data)
	return instance
----------------------------------------

def update(self, instance, validated_data) :
	user_data = validated_data.pop('user', {})
	user_serializer = UserSerializer(instance.user, data = user_data)
	user_serializer.is_valid(raise_exception = True)
	user_serializer.update(instance.user, user_data)
	super(ProfileSerializer, self).update(instance, validated_data)
	instance.save() 
	return instance
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
450
2
Gpt3D_Clone450_2.py 1 7
Gpt3D_Clone450_2.py 9 17

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq) :
	idx = 0
	for i, item in enumerate(seq) :
		if not pred(item) :
			idx = i 
			break 
	return seq[:idx], seq[idx:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
0
Gpt3D_Clone451_0.py 1 7
Gpt3D_Clone451_0.py 9 16

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq):
	first_false = 0
	for i, item in enumerate(seq):
		if not pred(item):
			first_false = i
			break
	return seq[:first_false], seq[first_false:]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
2
Gpt3D_Clone451_2.py 1 7
Gpt3D_Clone451_2.py 9 14

----------------------------------------

def split_at_first_false(pred, seq) :
	for i, item in enumerate(seq) :
		if not pred(item) :
			return seq [: i], seq [i :]
----------------------------------------

def split_at_first_false(pred, seq) :
	non_pred = find_the_first_non_pred(pred, seq)
	for i, item in enumerate(seq) :
		if item == non_pred :
			return seq [: i], seq [i :]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
0
Gpt3D_Clone453_0.py 1 9
Gpt3D_Clone453_0.py 11 18

----------------------------------------

def split_at_first_false(pred, seq) :
	index = 0
	while index < len(seq) :
		if not pred(seq [index]) :
			return seq [: index], seq [index + 1 :]
		index += 1
----------------------------------------

def split_at_first_false_4(pred, array):
	index = 0
	length = len(array)
	while index < length:
		if not pred(array[index]):
			return array[:index], array[index+1:]
		index += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
454
0
Gpt3D_Clone454_0.py 1 10
Gpt3D_Clone454_0.py 12 23

----------------------------------------

def split_at_first_false(pred, seq) :
	if not isinstance(seq, list) :
		seq = list(seq)
	for i, x in enumerate(seq) :
		if not pred(x) :
			return seq [: i], seq [i :]
	return seq, []
----------------------------------------

def split_at_first_false(pred, seq):
  if not isinstance(seq, list):
    seq = list(seq)
  idx = -1
  for i, x in enumerate(seq):
    if not pred(x):
      idx = i
      break
  if idx >= 0:
    return seq [: idx], seq [idx :] 
  return seq, []
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
454
1
Gpt3D_Clone454_1.py 1 10
Gpt3D_Clone454_1.py 12 20

----------------------------------------

def split_at_first_false(pred, seq) :
	if not isinstance(seq, list) :
		seq = list(seq)
	for i, x in enumerate(seq) :
		if not pred(x) :
			return seq [: i], seq [i :]
	return seq, []
----------------------------------------

def split_at_first_false(pred, seq):
  if not isinstance(seq, list):
    seq = list(seq)
  i = 0
  while i < len(seq) and pred(seq[i]):
    i += 1
  return seq [: i], seq [i :]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
0
Gpt3D_Clone455_0.py 1 15
Gpt3D_Clone455_0.py 17 28

----------------------------------------

def draw() :
	for x in range(0, 10) :
		for y in range(0, 10) :
			item = canvas.create_rectangle((x * 40) + 10, (y * 40) + 10,
			(x * 40) + 50, (y * 40) + 50)
			if (coord [i] [j] == 0) :
				canvas.itemconfig(item, fill = "white")
			if (coord [i] [j] == 1) :
				canvas.itemconfig(item, fill = "red")
			if (coord [i] [j] == 2) :
				canvas.itemconfig(item, fill = "darkorange")
	canvas.after(30, draw)
----------------------------------------

def draw(): 
	for x in range(0, 10): 
		for y in range(0, 10): 
			item = canvas.create_rectangle((x * 40) + 10, (y * 40) + 10, (x * 40) + 50, (y * 40) + 50) 
			if (coord[i][j] == 0): 
				canvas.itemconfig(item, fill="magenta") 
			elif (coord[i][j] == 1): 
				canvas.itemconfig(item, fill="purple") 
			elif (coord[i][j] == 2):
				canvas.itemconfig(item, fill="blue") 
	canvas.after(30, draw)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
1
Gpt3D_Clone455_1.py 1 15
Gpt3D_Clone455_1.py 17 28

----------------------------------------

def draw() :
	for x in range(0, 10) :
		for y in range(0, 10) :
			item = canvas.create_rectangle((x * 40) + 10, (y * 40) + 10,
			(x * 40) + 50, (y * 40) + 50)
			if (coord [i] [j] == 0) :
				canvas.itemconfig(item, fill = "white")
			if (coord [i] [j] == 1) :
				canvas.itemconfig(item, fill = "red")
			if (coord [i] [j] == 2) :
				canvas.itemconfig(item, fill = "darkorange")
	canvas.after(30, draw)
----------------------------------------

def draw(): 
	for x in range(0, 10): 
		for y in range(0, 10): 
			item = canvas.create_rectangle((x * 40) + 10, (y * 40) + 10, (x * 40) + 50, (y * 40) + 50) 
			if (coord[i][j] == 0): 
				canvas.itemconfig(item, fill="cyan") 
			elif (coord[i][j] == 1): 
				canvas.itemconfig(item, fill="green") 
			elif (coord[i][j] == 2):
				canvas.itemconfig(item, fill="yellow") 
	canvas.after(30, draw)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
457
0
Gpt3D_Clone457_0.py 1 9
Gpt3D_Clone457_0.py 11 20

----------------------------------------

def __call__(self) :
	while True :
		next_action = self.queue.get()
		success = next_action(* self.args, ** self.kwargs)
		if not success :
			self.add_task(next_action)
----------------------------------------

def __call__(self) :
	step = True
	while step :
		next_action = self.queue.get()
		success = next_action(* self.args, ** self.kwargs)
		if not success :
			self.add_task(next_action)
		else:
			step = False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
458
0
Gpt3D_Clone458_0.py 1 9
Gpt3D_Clone458_0.py 11 22

----------------------------------------

def __call__(self) :
	while True :
		next_action = self.queue.get()
		success = next_action(* self.args, ** self.kwargs)
		if not success :
			self.add_task(next_action)
----------------------------------------

def __call__(self) :
	while True :
		next_action = self.queue.get()
		while True :
			try :
				success = next_action(* self.args, ** self.kwargs)
				break;
			except Exception as e :
				success = False
		if not success :
			self.add_task(next_action)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
458
1
Gpt3D_Clone458_1.py 1 9
Gpt3D_Clone458_1.py 11 21

----------------------------------------

def __call__(self) :
	while True :
		next_action = self.queue.get()
		success = next_action(* self.args, ** self.kwargs)
		if not success :
			self.add_task(next_action)
----------------------------------------

def __call__(self) :
	while True :
		next_action = self.queue.get()
		try :
			success = next_action(* self.args, ** self.kwargs)
		except Exception as e :
			success = False
		if not success :
			self.add_task(next_action)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
0
Gpt3D_Clone459_0.py 1 9
Gpt3D_Clone459_0.py 11 17

----------------------------------------

def __call__(self) :
	while True :
		next_action = self.queue.get()
		success = next_action(* self.args, ** self.kwargs)
		if not success :
			self.add_task(next_action)
----------------------------------------

def __call__(self) :
	while True :
		act = self.queue.get()
		if not act(* self.args, ** self.kwargs) :
			self.add_task(act)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
45
0
Gpt3D_Clone45_0.py 1 10
Gpt3D_Clone45_0.py 12 19

----------------------------------------

def bubble(arr) :
	l = len(arr)
	for a in range(l) :
		for b in range(l - 1) :
			if (arr [a] < arr [b]) :
			arr [a], arr [b] = arr [b], arr [a]
	return arr
----------------------------------------

def bubble(arr) :
	l = len(arr)
	for a in range(l - 1) :
		for b in range(l) :
			if (arr [a] > arr [b]) :
			arr [a], arr [b] = arr [b], arr [a]
	return arr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
460
2
Gpt3D_Clone460_2.py 1 10
Gpt3D_Clone460_2.py 12 22

----------------------------------------

def __call__(self, n) :
	if n not in self.cache :
		if n == 0 :
			self.cache [n] = 1
		else :
			self.cache [n] = n * self.__call__(n - 1)
	return self.cache [n]
----------------------------------------

def __call__(self, n) :
	if n in self.cache :
		return self.cache [n]
	
	if n == 0 :
		self.cache [n] = 1
	else :
		self.cache [n] = n * self.__call__(n - 1)
	return self.cache [n]
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
460
3
Gpt3D_Clone460_3.py 1 10
Gpt3D_Clone460_3.py 12 21

----------------------------------------

def __call__(self, n) :
	if n not in self.cache :
		if n == 0 :
			self.cache [n] = 1
		else :
			self.cache [n] = n * self.__call__(n - 1)
	return self.cache [n]
----------------------------------------

def __call__(self, n) :
	if n not in self.cache :
		if n == 0 :
			value = 1
		else :
			value = n * self.__call__(n - 1)
		self.cache[n] = value
	return self.cache [n]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
462
0
Gpt3D_Clone462_0.py 1 9
Gpt3D_Clone462_0.py 11 20

----------------------------------------

def __call__(self, file) :
	hash = self.algorithm()
	with open(file, 'rb') as f :
		for chunk in iter(lambda : f.read(4096), '') :
			hash.update(chunk)
	return hash.hexdigest()
----------------------------------------

def __call__(self, file) :
	result = self.algorithm()
	with open(file, 'rb') as f :
		while True :
			chunk = f.read(4096) 
			if not chunk :
				break
			result.update(chunk)
	return result.hexdigest()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
462
1
Gpt3D_Clone462_1.py 1 9
Gpt3D_Clone462_1.py 11 19

----------------------------------------

def __call__(self, file) :
	hash = self.algorithm()
	with open(file, 'rb') as f :
		for chunk in iter(lambda : f.read(4096), '') :
			hash.update(chunk)
	return hash.hexdigest()
----------------------------------------

def __call__(self, file) :
	result = self.algorithm()
	with open(file, 'rb') as doc :
		chunk = doc.read(4096)
		while chunk != '' :
			result.update(chunk)
			chunk = doc.read(4096)
	return result.hexdigest()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
1
Gpt3D_Clone463_1.py 1 13
Gpt3D_Clone463_1.py 15 24

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang):
	neighbors = list()
	for face in triang.vertices:
		if pindex in face:
			for i in range(len(face)):
				if face[i] != pindex:
					neighbors.append(face[i])
	return list(set(neighbors))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
2
Gpt3D_Clone463_2.py 1 13
Gpt3D_Clone463_2.py 15 21

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang): 
    neigbors_list = [] 
    for item in triang.vertices: 
        if pindex in item: 
            [neigbors_list.append(item[i]) for i in range(len(item)) if item[i] != pindex] 
    return list(set(neigbors_list))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
3
Gpt3D_Clone463_3.py 1 13
Gpt3D_Clone463_3.py 15 21

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang):
	neighbors = set()
	for simplex in triang.vertices:
		if pindex in simplex:
			neighbors.update([point for point in simplex if point != pindex])
	return list(neighbors)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
464
1
Gpt3D_Clone464_1.py 1 13
Gpt3D_Clone464_1.py 15 23

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang):
	neighbors = list()
	for simplex in triang.vertices: 
		if pindex in simplex:
			idxs = [i for i in range(len(simplex)) 
			if simplex[i] != pindex]
			neighbors.extend([simplex[i] for i in idxs])
	return list(set(neighbors))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
464
2
Gpt3D_Clone464_2.py 1 13
Gpt3D_Clone464_2.py 15 23

----------------------------------------

def find_neighbors(pindex, triang) :
	neighbors = list()
	for simplex in triang.vertices :
		if pindex in simplex :
			neighbors.extend([simplex [i] for i in range(len(simplex)) if simplex [i] ! = pindex])
			'''
			this is a one liner for if a simplex contains the point we`re interested in,
			extend the neighbors list by appending all the *other* point indices in the simplex
			'''
	return list(set(neighbors))
----------------------------------------

def find_neighbors(pindex, triang):
	neighbors = list()
	for simplex in triang.vertices: 
		if pindex in simplex:
			for i in range(len(simplex)):
				if simplex[i] != pindex:
					neighbors.append(simplex[i])
	return list(set(neighbors))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
465
1
Gpt3D_Clone465_1.py 1 12
Gpt3D_Clone465_1.py 14 26

----------------------------------------

def find_neighbors(tess, points) :
	neighbors = {}
	for point in range(points.shape [0]) :
		neighbors [point] = []
	for simplex in tess.simplices :
		neighbors [simplex [0]] += [simplex [1], simplex [2]]
		neighbors [simplex [1]] += [simplex [2], simplex [0]]
		neighbors [simplex [2]] += [simplex [0], simplex [1]]
	return neighbors
----------------------------------------

def find_neighbors(tess, points) :
	neighbors_dict = {}
	for point in range(points.shape [0]) :
		neighbors_dict [point] = []
	
	for simplex in tess.simplices :
		x, y, z = simplex
		neighbors_dict [x] += [y, z]
		neighbors_dict [y] += [z, x]
		neighbors_dict [z] += [x, y]
	return neighbors_dict
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
466
1
Gpt3D_Clone466_1.py 1 11
Gpt3D_Clone466_1.py 13 20

----------------------------------------

def insert_sequence(dna1, dna2, number) :
	result = '';
	for ind, x in enumerate(dna1) :
		if ind == number :
			result = result + dna2 + x
		else :
			result = result + x
	print (result)
----------------------------------------

def insert_sequence4(dna1, dna2, number): 
	result = ''
	for ind, x in enumerate(dna1):
		if ind == number: 
			result = result + dna2 
		result = result + x
	print (result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
467
0
Gpt3D_Clone467_0.py 1 12
Gpt3D_Clone467_0.py 14 24

----------------------------------------

def insert_sequence(dna1, dna2, number) :
	index = 0
	result = ''
	for character in dna1 :
		if index == number :
			result = result + dna2
		result = result + character
		index += 1
	print (result)
----------------------------------------

def insert_sequence(dna1, dna2, number):
	index = 0
	result = ''
	dna1_length = len(dna1)
	while index < dna1_length:
		if index == number:
			result = result + dna2
		result = result + dna1[index]
		index += 1
	print (result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
467
1
Gpt3D_Clone467_1.py 1 12
Gpt3D_Clone467_1.py 14 23

----------------------------------------

def insert_sequence(dna1, dna2, number) :
	index = 0
	result = ''
	for character in dna1 :
		if index == number :
			result = result + dna2
		result = result + character
		index += 1
	print (result)
----------------------------------------

def insert_sequence(dna1, dna2, number):
	result = ''
	index = 0
	for character in dna1:
		if index == number:
			result += dna2
		result += character
		index += 1
	print(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
0
Gpt3D_Clone468_0.py 1 22
Gpt3D_Clone468_0.py 24 46

----------------------------------------

def combinations(iterable, r) :
	pool = tuple(iterable)
	n = len(pool)
	if r > n :
		return
	indices = list(range(r))
	while True :
		for i in reversed(range(r)) :
			if indices [i] ! = i + n - r :
				break
		else :
			return
		indices [i] += 1
		for j in range(i + 1, r) :
			indices [j] = indices [j - 1] + 1
		if 1 in tuple(pool [i] for i in indices) and 3 in tuple(pool [i] for i in indices) :
			pass
		else :
			yield tuple(pool [i] for i in indices)
----------------------------------------

def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = list(range(r))
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        is_1_or_3_present = False
        for e in tuple(pool[i] for i in indices):
            if (e == 1) or (e == 3):
                is_1_or_3_present = True
                break
        if not is_1_or_3_present:
            yield tuple(pool[i] for i in indices)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
0
Gpt3D_Clone469_0.py 1 18
Gpt3D_Clone469_0.py 20 44

----------------------------------------

def change(amount) :
	if amount < 24 :
		return [0]
	assert (amount > = 24)
	if amount == 24 :
		return [5, 5, 7, 7]
	if amount == 25 :
		return [5, 5, 5, 5, 5]
	if amount == 26 :
		return [5, 7, 7, 7]
	if amount > 1000 :
		return [0]
	coins = change(amount - 5)
	coins.append(5)
	return coins
----------------------------------------

def change(amount) :
	if amount < 24 :
		return [0]
	if amount == 24 :
		return [5, 5, 7, 7]
	if amount == 25 :
		return [5, 5, 5, 5, 5]
	if amount == 26 :
		return [5, 7, 7, 7]
	if amount > 1000 :
		return [0]
	coins = []
	remaining_amount = amount
	while remaining_amount > 0:
		if remaining_amount >= 5:
			coins.append(5)
			remaining_amount = remaining_amount - 5
		else:
			coins.append(remaining_amount)
			remaining_amount = 0
	return coins
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
46
0
Gpt3D_Clone46_0.py 1 10
Gpt3D_Clone46_0.py 12 19

----------------------------------------

def bubble(arr) :
	l = len(arr)
	for a in range(l) :
		for b in range(l - 1) :
			if (arr [a] < arr [b]) :
			arr [a], arr [b] = arr [b], arr [a]
	return arr
----------------------------------------

def bubble(arr) : 
	n = len(arr) 
	for i in range(n): 
		for j in range(0, n-i-1): 
			if arr[j] > arr[j+1] : 
				arr[j], arr[j+1] = arr[j+1], arr[j] 
	return arr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
0
Gpt3D_Clone470_0.py 1 12
Gpt3D_Clone470_0.py 14 27

----------------------------------------

def __new__(cls, name, value, base = None) :
	value = int(value) if base is None else int(value, base)
	if isinstance(value, int) :
		NamedNumber = Named
	else :
		NamedNumber = cls = NamedLong
	self = super(NamedNumber, cls).__new__(cls, value)
	super(NamedNumber, self).__setattr__('_name', name)
	return self
----------------------------------------

def __new__(cls, name, value, base=None):
	check_type = int(value)
	if base is None:
		check_type = int(value)
	else:
		check_type = int(value, base)
	if isinstance(check_type, int):
		NamedNumber = Named 
	else:
		NamedNumber = cls = NamedLong
	self = super(NamedNumber, cls).__new__(cls, check_type)
	super(NamedNumber, self).__setattr__('_name', name)
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
1
Gpt3D_Clone470_1.py 1 12
Gpt3D_Clone470_1.py 14 27

----------------------------------------

def __new__(cls, name, value, base = None) :
	value = int(value) if base is None else int(value, base)
	if isinstance(value, int) :
		NamedNumber = Named
	else :
		NamedNumber = cls = NamedLong
	self = super(NamedNumber, cls).__new__(cls, value)
	super(NamedNumber, self).__setattr__('_name', name)
	return self
----------------------------------------

def __new__(cls, name, value, base=None):
	check_type = int(value)
	if base is None:
		check_type = int(value)
	else:
		check_type = int(value, base)
	if isinstance(check_type, int):
		NamedNumber = Named 
	else:
		NamedNumber = cls = NamedLong
	obj = super(NamedNumber, cls).__new__(cls, check_type)
	super(NamedNumber, obj).__setattr__('_name', name)
	return obj
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
2
Gpt3D_Clone470_2.py 1 12
Gpt3D_Clone470_2.py 14 26

----------------------------------------

def __new__(cls, name, value, base = None) :
	value = int(value) if base is None else int(value, base)
	if isinstance(value, int) :
		NamedNumber = Named
	else :
		NamedNumber = cls = NamedLong
	self = super(NamedNumber, cls).__new__(cls, value)
	super(NamedNumber, self).__setattr__('_name', name)
	return self
----------------------------------------

def __new__(cls, name, value, base ) :
	if base is None : 
		value = int(value)
	else : 
		value = int(value, base)
	if isinstance(value, int) :
		NamedNumber = Named
	else :
		NamedNumber = cls = NamedLong
	self = super(NamedNumber, cls).__new__(cls, value)
	super(NamedNumber, self).__setattr__('_name', name)
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
3
Gpt3D_Clone470_3.py 1 12
Gpt3D_Clone470_3.py 14 23

----------------------------------------

def __new__(cls, name, value, base = None) :
	value = int(value) if base is None else int(value, base)
	if isinstance(value, int) :
		NamedNumber = Named
	else :
		NamedNumber = cls = NamedLong
	self = super(NamedNumber, cls).__new__(cls, value)
	super(NamedNumber, self).__setattr__('_name', name)
	return self
----------------------------------------

def __new__(cls, name, value, base = None):
	if base is None: 
		value = int(value)
	else: 
		value = int(value, base)
	NamedNumber = Named if isinstance(value, int) else cls = NamedLong
	self = super(NamedNumber, cls).__new__(cls, value)
	super(NamedNumber, self).__setattr__('_name', name)
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
0
Gpt3D_Clone472_0.py 1 16
Gpt3D_Clone472_0.py 18 31

----------------------------------------

def __init__(self, * args, ** kwargs) :
	super(MainFrame, self).__init__(None, * args, ** kwargs)
	self.Title = 'Basic wxPython module'
	self.SetMenuBar(MenuBar(self))
	self.ToolBar = MainToolbar(self)
	self.status_bar = StatusBar(self).status_bar
	self.Bind(wx.EVT_CLOSE, self.on_quit_click)
	panel = MainPanel(self)
	sizer = wx.BoxSizer()
	sizer.Add(panel)
	self.SetSizerAndFit(sizer)
	self.Centre()
	self.Show()
----------------------------------------

def __init__(self, * args, ** kwargs) :
	super(MainFrame, self).__init__(None, * args, ** kwargs)
	self.SetLabel('Basic wxPython module')
	self.SetMenuBar(MenuBar(self))
	self.ToolBar = MainToolbar(self)
	self.SetStatusBar(StatusBar(self).status_bar)
	self.Bind(wx.EVT_CLOSE, self.on_quit_click)
	panel = MainPanel(self)
	sizer = wx.BoxSizer(wx.HORIZONTAL)
	sizer.Add(panel, flag=wx.EXPAND)
	self.SetSizer(sizer)
	self.Centre()
	self.Show()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
0
Gpt3D_Clone475_0.py 1 11
Gpt3D_Clone475_0.py 13 22

----------------------------------------

def __init__(self, * args, ** kwargs) :
	wx.Frame.__init__(self, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer()
	self.sizer.Add(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Show()
----------------------------------------

def __init__(self, parent, * args, ** kwargs) :
	wx.Frame.__init__(self, parent, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer()
	self.sizer.Add(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Bind(wx.EVT_BUTTON, self.onButtonClicked)
	self.Show()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
1
Gpt3D_Clone475_1.py 1 11
Gpt3D_Clone475_1.py 13 22

----------------------------------------

def __init__(self, * args, ** kwargs) :
	wx.Frame.__init__(self, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer()
	self.sizer.Add(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Show()
----------------------------------------

def __init__(self, parent, id, title, * args, ** kwargs) :
	wx.Frame.__init__(self, parent, id, title, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer()
	self.sizer.Add(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Bind(wx.EVT_BUTTON, self.onButtonClicked)
	self.Show()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
477
0
Gpt3D_Clone477_0.py 1 11
Gpt3D_Clone477_0.py 13 20

----------------------------------------

def __init__(self, * args, ** kwargs) :
	wx.Frame.__init__(self, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer()
	self.sizer.Add(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Show()
----------------------------------------

def __init__(self, * args, ** kwargs) : 
	wx.Frame.__init__(self, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Show()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
477
1
Gpt3D_Clone477_1.py 1 11
Gpt3D_Clone477_1.py 13 19

----------------------------------------

def __init__(self, * args, ** kwargs) :
	wx.Frame.__init__(self, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.button = wx.Button(self.panel, label = "Test")
	self.sizer = wx.BoxSizer()
	self.sizer.Add(self.button)
	self.panel.SetSizerAndFit(self.sizer)
	self.Show()
----------------------------------------

def __init__(self, * args, ** kwargs) : 
	wx.Frame.__init__(self, * args, ** kwargs)
	self.panel = wx.Panel(self)
	self.sizer = wx.BoxSizer()
	self.addButton()
	self.panel.SetSizerAndFit(self.sizer)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
480
0
Gpt3D_Clone480_0.py 1 13
Gpt3D_Clone480_0.py 15 29

----------------------------------------

def is_valid_hostname(hostname) :
	if hostname [- 1] == "." :
		hostname = hostname [: - 1]
	if len(hostname) > 253 :
		return False
	labels = hostname.split(".")
	if re.match(r"[0-9]+$", labels [- 1]) :
		return False
	allowed = re.compile(r"(?!-)[a-z0-9-]{1,63}(?<!-)$", re.IGNORECASE)
	return all(allowed.match(label) for label in labels)
----------------------------------------

def is_valid_hostname(hostname):
	if hostname [- 1] == "." :
		hostname = hostname [: - 1]
	if len(hostname) > 253 :
		return False
	labels = hostname.split(".")
	for label in labels :
		if re.match(r"[0-9]+$", label) :
			return False
	allowed = re.compile(r"(?!-)[a-z0-9-]{1,63}(?<!-)$", re.IGNORECASE)
	if all(allowed.match(label) for label in labels) :
		return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
0
Gpt3D_Clone481_0.py 1 14
Gpt3D_Clone481_0.py 16 27

----------------------------------------

def pay_with_coins(amount) :
	coins = [0 for i in range(len(currencies))]
	amount = int(amount * 100)
	values = [c * 100 for c in currencies]
	for currency in values :
		i = values.index(currency)
		coins [i] = 0
		while amount > = currency :
			amount -= currency
			coins [i] += 1
	return coins
----------------------------------------

def pay_with_coins(amount) :
	coins = [0 for i in range(len(currencies))]
	amount = int(amount)
	values = [c for c in currencies]
	for currency in values :
		i = values.index(currency)
		coins [i] = 0
		while amount > = (currency * 0.01) :
			amount -= (currency * 0.01)
			coins [i] += 1
	return coins
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
483
0
Gpt3D_Clone483_0.py 1 12
Gpt3D_Clone483_0.py 14 31

----------------------------------------

def sanity_check(b, true_func, false_func) :
	if b :
		logfunc = log.debug
		execfunc = true_func
	else :
		logfunc = log.warning
		execfunc = false_func
	logfunc('exec: %s', execfunc.__name__)
	execfunc()
----------------------------------------

def sanity_check(b, true_func, false_func) :
	execfunc = None
	logfunc = None
	
	if b:
		execfunc = true_func
		
		if log.debug :
			logfunc = log.debug
		else:
			logfunc = log.warning
	else :
		logfunc = log.warning
		execfunc = false_func
		
	logfunc('exec: %s', execfunc.__name__)
	execfunc()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
487
0
Gpt3D_Clone487_0.py 1 12
Gpt3D_Clone487_0.py 14 30

----------------------------------------

def get_user_attributes(cls, exclude_methods = True) :
	base_attrs = dir(type('dummy', (object,), {}))
	this_cls_attrs = dir(cls)
	res = []
	for attr in this_cls_attrs :
		if base_attrs.count(attr) or (callable(getattr(cls, attr)) and exclude_methods) :
			continue
		res += [attr]
	return res
----------------------------------------

def get_user_attributes_v3(cls, exclude_attributes = True): 
	base_attrs = dir(type('dummy', (object,), {}))
	this_cls_attrs = dir(cls)
	response = []
	for attr in this_cls_attrs :
		if exclude_attributes and base_attrs.count(attr):
			continue
	
		if exclude_attributes and callable(getattr(cls, attr)) :
			continue
		response += [attr]
		
	return response
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
487
1
Gpt3D_Clone487_1.py 1 12
Gpt3D_Clone487_1.py 14 29

----------------------------------------

def get_user_attributes(cls, exclude_methods = True) :
	base_attrs = dir(type('dummy', (object,), {}))
	this_cls_attrs = dir(cls)
	res = []
	for attr in this_cls_attrs :
		if base_attrs.count(attr) or (callable(getattr(cls, attr)) and exclude_methods) :
			continue
		res += [attr]
	return res
----------------------------------------

def get_user_attributes_v4(cls, ignore_methods = True) :
	base_attrs = dir(type('dummy', (object,), {}))
	this_cls_attrs = dir(cls)
	result = []
	
	for attr in this_cls_attrs :
		if not ignore_methods and base_attrs.count(attr) :
			continue
		if ignore_methods and callable(getattr(cls, attr)) :
			continue
	
		result += [attr]
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
487
2
Gpt3D_Clone487_2.py 1 12
Gpt3D_Clone487_2.py 14 26

----------------------------------------

def get_user_attributes(cls, exclude_methods = True) :
	base_attrs = dir(type('dummy', (object,), {}))
	this_cls_attrs = dir(cls)
	res = []
	for attr in this_cls_attrs :
		if base_attrs.count(attr) or (callable(getattr(cls, attr)) and exclude_methods) :
			continue
		res += [attr]
	return res
----------------------------------------

def get_user_attributes(cls, exclude_methods=True):
	base_attrs = dir(type('dummy', (object, ), {}))
	this_cls_attrs = dir(cls)
	res = []
	for attr in this_cls_attrs:
		if exclude_methods and callable(getattr(cls, attr)):
			continue
		if base_attrs.count(attr):
			continue
		res += [attr]
	return res
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
488
0
Gpt3D_Clone488_0.py 1 15
Gpt3D_Clone488_0.py 17 29

----------------------------------------

def next_bigger(a) :
	a = map(int, str(a))
	tmp = list(reversed(a))
	for i, item_a in enumerate(reversed(a)) :
		for j in (range(i)) :
			if item_a < tmp [j] :
				tmp [i] = tmp [j]
				print (list(reversed(tmp [i :])))
				tmp [j] = item_a
				fin = list(reversed(tmp [i :])) + sorted(tmp [: i])
				return functools.reduce(lambda x, y : x * 10 + y, fin)
	return - 1
----------------------------------------

def next_bigger(a) :
	a = map(int, str(a))
	tmp = a[::-1]
	for i, item_a in enumerate(reversed(a)) :
		for j in (range(i)) :
			if item_a < tmp [j] :
				temp = tmp[j]
				tmp [i] = temp
				tmp [j] = item_a
				fin = list(reversed(tmp [i :])) + sorted(tmp [: i])
				return functools.reduce(lambda x, y : x * 10 + y, fin)
	return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
488
1
Gpt3D_Clone488_1.py 1 15
Gpt3D_Clone488_1.py 17 27

----------------------------------------

def next_bigger(a) :
	a = map(int, str(a))
	tmp = list(reversed(a))
	for i, item_a in enumerate(reversed(a)) :
		for j in (range(i)) :
			if item_a < tmp [j] :
				tmp [i] = tmp [j]
				print (list(reversed(tmp [i :])))
				tmp [j] = item_a
				fin = list(reversed(tmp [i :])) + sorted(tmp [: i])
				return functools.reduce(lambda x, y : x * 10 + y, fin)
	return - 1
----------------------------------------

def next_bigger(a) :
  a = map(int, str(a))
  tmp = list(reversed(a))
  for i, item_a in enumerate(reversed(a)) :
    for j in (range(i)) :
      if item_a < tmp [j] :
        tmp [i], tmp [j] = tmp [j], tmp [i]
        fin = list(reversed(tmp )[i :]) + sorted(tmp[: i])
        return functools.reduce(lambda x, y : x * 10 + y, fin)
  return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
488
2
Gpt3D_Clone488_2.py 1 15
Gpt3D_Clone488_2.py 17 28

----------------------------------------

def next_bigger(a) :
	a = map(int, str(a))
	tmp = list(reversed(a))
	for i, item_a in enumerate(reversed(a)) :
		for j in (range(i)) :
			if item_a < tmp [j] :
				tmp [i] = tmp [j]
				print (list(reversed(tmp [i :])))
				tmp [j] = item_a
				fin = list(reversed(tmp [i :])) + sorted(tmp [: i])
				return functools.reduce(lambda x, y : x * 10 + y, fin)
	return - 1
----------------------------------------

def next_bigger(a) :
  a = map(int, str(a))
  tmp = list(reversed(a))
  for i, item_a in enumerate(reversed(a)) :
    for j in (range(i)) :
      if item_a < tmp [j] :
        tmp [j], tmp [i] = tmp [i], tmp [j]
        fin = list(reversed(tmp[i :])) + sorted(tmp[: i])
        return functools.reduce(lambda x, y : x * 10 + y, fin)
  return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
0
Gpt3D_Clone492_0.py 1 9
Gpt3D_Clone492_0.py 11 20

----------------------------------------

def repeat(a, n, already_ran = 0) :
	if n == 0 :
		print (a * (n + already_ran))
	else :
		print (a * (n + already_ran))
		repeat(a, n - 1, already_ran + 1)
----------------------------------------

def repeat(a, n, already_ran = 0) :
	if n == 0 :
		print (a * (n + already_ran))
	elif n == 1 :
		print (a * (n + already_ran))
		repeat(a, n - 1, already_ran + 1)
	else :
		print (a * (n + already_ran))
		repeat(a, n - 1, already_ran + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
2
Gpt3D_Clone492_2.py 1 9
Gpt3D_Clone492_2.py 11 17

----------------------------------------

def repeat(a, n, already_ran = 0) :
	if n == 0 :
		print (a * (n + already_ran))
	else :
		print (a * (n + already_ran))
		repeat(a, n - 1, already_ran + 1)
----------------------------------------

def repeat(a, n, already_ran=0):
    if n == 0:
        print(a**(n + already_ran))
    else:
        print(a**(n + already_ran))
        repeat(a, n-1, already_ran + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
0
Gpt3D_Clone493_0.py 1 10
Gpt3D_Clone493_0.py 12 18

----------------------------------------

def treeview_sort_column(tv, col, reverse) :
	l = [(tv.set(k, col), k) for k in tv.get_children('')]
	l.sort(key = lambda t : int(t [0]), reverse = reverse)
	for index, (val, k) in enumerate(l) :
		tv.move(k, '', index)
	tv.heading(col,
	command = lambda : treeview_sort_column(tv, col, not reverse))
----------------------------------------

def treeview_sort_column(tv, col, reverse):
	l = [(tv.set(k, col), k) for k in tv.get_children('')]
	l.sort(key = lambda t : int(t[0]), reverse = reverse)
	for index, (val, k) in enumerate(l):
		tv.move(k, '', index)
	tv.heading(col, lambda: treeview_sort_column(tv, col, not reverse))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
495
0
Gpt3D_Clone495_0.py 1 12
Gpt3D_Clone495_0.py 14 24

----------------------------------------

def device_id_replace(filepath) :
	original_id = input("What device ID are you needing to replace?")
	new_id = input("What is the new device ID?")
	with open(filepath, 'r+') as devicetxt :
		string = devicetxt.read()
		string = string.replace(original_id, new_id)
		devicetxt.truncate(0)
		devicetxt.seek(0)
		devicetxt.write(string)
----------------------------------------

def device_id_replace(filepath) :
	original_id = input("What device ID are you needing to replace?")
	new_id = input("What is the new device ID?")
	fopen = open(filepath, 'r+') 
	data = fopen.read() 
	fopen.close()
	new_data = data.replace(original_id, new_id)
	fopen = open(filepath, 'w+') 
	fopen.write(new_data) 
	fopen.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
497
0
Gpt3D_Clone497_0.py 1 19
Gpt3D_Clone497_0.py 21 35

----------------------------------------

def rep_str(s, x, y) :
	result = ""
	skip = False
	if x in s :
		for i in range(len(s)) :
			if skip :
				skip = False
				continue
			if s [i : i + 2] == x :
				result += y
				skip = True
			else :
				result += s [i : i + 1]
		return result
	else :
		return s
----------------------------------------

def rep_str(s, x, y) : 
	result = ""
	if x in s : 
		i = 0
		while i < len(s) : 
			if s[i : i+2] == x : 
				result += y
				i += 1 
			else : 
				result += s[i]
			i += 1
		return result
	else : 
		return s 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
498
2
Gpt3D_Clone498_2.py 1 7
Gpt3D_Clone498_2.py 9 15

----------------------------------------

def rep_str(s, x, y) :
	while x in s :
		s = s [: s.index(x)] + y + s [s.index(x) + len(x) :]
	return s
----------------------------------------

def rep_str(a, b, c):
    while b in a:
        index = a.index(b)
        a = a[:index] + c + a[index + len(b):]
    return a
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
498
3
Gpt3D_Clone498_3.py 1 7
Gpt3D_Clone498_3.py 9 14

----------------------------------------

def rep_str(s, x, y) :
	while x in s :
		s = s [: s.index(x)] + y + s [s.index(x) + len(x) :]
	return s
----------------------------------------

def rep_str(string, x_string, y_string):
	while x_string in string:
		start_index = string.index(x_string)
		string = string[:start_index] + y_string + string[start_index + len(x_string):]
	return string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
499
1
Gpt3D_Clone499_1.py 1 16
Gpt3D_Clone499_1.py 18 30

----------------------------------------

def matched(str) :
	ope = []
	clo = []
	for i in range(0, len(str)) :
		l = str [i]
		if l == "(" :
			ope = ope + ["("]
		elif l == ")" :
			clo = clo + [")"]
	if len(ope) == len(clo) :
		return True
	else :
		return False
----------------------------------------

def matched(string):
	open_brackets = []
	close_brackets = []
	for symbol in string:
		if symbol == '(':
			open_brackets += '('
		elif symbol == ')':
			close_brackets += ')'
	if len(open_brackets) == len(close_brackets):
		return True
	else:
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
501
0
Gpt3D_Clone501_0.py 1 17
Gpt3D_Clone501_0.py 19 34

----------------------------------------

def matched(s) :
	p_list = []
	for i in range(0, len(s)) :
		if s [i] == '(' :
			p_list.append('(')
		elif s [i] == ')' :
			if not p_list :
				return False
			else :
				p_list.pop()
	if not p_list :
		return True
	else :
		return False
----------------------------------------

def matched(s):
  parentheses = []
  for char in s:
    if char == "(":
      parentheses.append(char)
    if char == ")":
      if not parentheses:
        return False
      else:
        parentheses.pop()
  if len(parentheses) == 0:
    return True
  else:
    return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
504
0
Gpt3D_Clone504_0.py 1 17
Gpt3D_Clone504_0.py 19 33

----------------------------------------

def execute(command) :
	process = subprocess.Popen(command, shell = True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
	while True :
		nextline = process.stdout.readline()
		if nextline == '' and process.poll() is not None :
			break
		sys.stdout.write(nextline)
		sys.stdout.flush()
	output = process.communicate() [0]
	exitCode = process.returncode
	if (exitCode == 0) :
		return output
	else :
		raise ProcessException(command, exitCode, output)
----------------------------------------

def execute(command):
	process = subprocess.Popen(command, shell = True, stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
	nextline = process.stdout.readline()
	while nextline != '':
		sys.stdout.write(nextline)
		sys.stdout.flush()
		nextline = process.stdout.readline()
	output = process.communicate()[0]
	exitCode = process.returncode
	if exitCode == 0:
		return output
	else:
		raise ProcessException(command, exitCode, output)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
1
Gpt3D_Clone505_1.py 1 11
Gpt3D_Clone505_1.py 13 24

----------------------------------------

def execute(cmd) :
	popen = subprocess.Popen(cmd, stdout = subprocess.PIPE, universal_newlines = True)
	for stdout_line in iter(popen.stdout.readline, "") :
		yield stdout_line
	popen.stdout.close()
	return_code = popen.wait()
	if return_code :
		raise subprocess.CalledProcessError(return_code, cmd)
----------------------------------------

def execute(cmd) :
	popen = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr =subprocess.PIPE, universal_newlines = True)
	for stdout_line in iter(stdout_line, ""):
		yield stdout_line
	for stderr_line in iter(stderr_line, ""):
		sys.stderr.write(stderr_line)
	popen.stderr.close()
	popen.stdout.close()
	return_code = popen.wait()
	if return_code :
		raise subprocess.CalledProcessError(return_code, cmd)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
0
Gpt3D_Clone506_0.py 1 23
Gpt3D_Clone506_0.py 25 42

----------------------------------------

def time_overlap_projected_graph_parallel(B, nodes) :
	G = nx.MultiGraph()
	G.add_nodes_from((n, B.node [n]) for n in nodes)
	cells = [n for n in B.nodes() if n [0] not in nodes]
	for cell in cells :
		for u, v in combinations(B [cell], 2) :
			for uspell in B.get_edge_data(u, cell).values() :
				ustart = uspell [1]
				uend = uspell [2]
				for vspell in B.get_edge_data(v, cell).values() :
					vstart = vspell [1]
					vend = vspell [2]
					if uend > vstart and vend > ustart :
						ostart = max(ustart, vstart)
						oend = min(uend, vend)
						olen = (oend - ostart + 1) / 86400
						ocell = cell
						if (v not in G [u] or ostart not in [edict [1] for edict in G [u] [v].values()]) :
							G.add_edge(u, v, {0 : olen, 1 : ostart, 2 : oend, 3 : ocell})
	return G
----------------------------------------

def time_overlap_projected_graph_parallel(B, nodes):
	G = nx.MultiGraph()
	G.add_nodes_from((n, B.node[n]) for n in nodes)
	cells = [n for n in B.nodes() if n[0] not in nodes]
	for cell in cells:
		for u, v in combinations(B[cell], 2):
			if not G.has_edge(u, v):
				for uspell in B.get_edge_data(u, cell).values():
					for vspell in B.get_edge_data(v, cell).values():
						if uspell[2] > vspell[1] and uspell[1] < vspell[2]:
							ostart = max(uspell[1], vspell[1])
							oend = min(uspell[2], vspell[2])
							olen = (oend - ostart + 1) / 86400
							ostride = oend - ostart
							ocell = cell
							G.add_edge(u, v, {0 : olen, 1 : ostart, 2 : oend, 3 : ostride, 4 : ocell})
	return G
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
1
Gpt3D_Clone508_1.py 1 8
Gpt3D_Clone508_1.py 10 16

----------------------------------------

def prime(n) :
	for x in range(2, int(math.sqrt(n)) + 1) :
		if n % x == 0 :
			print n / x
			return prime(n / x)
----------------------------------------

def prime(n):
	n_sqrt = int(math.sqrt(n))
	for x in range(2, n_sqrt + 1):
		if n % x == 0:
			print n / x
			return prime(n / x)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
2
Gpt3D_Clone508_2.py 1 8
Gpt3D_Clone508_2.py 10 15

----------------------------------------

def prime(n) :
	for x in range(2, int(math.sqrt(n)) + 1) :
		if n % x == 0 :
			print n / x
			return prime(n / x)
----------------------------------------

def prime(n) :
	for x in range(2, int(math.sqrt(n)) ) :
		if n % x == 0 :
			print(n / x)
			return prime(n / x)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
50
0
Gpt3D_Clone50_0.py 1 15
Gpt3D_Clone50_0.py 17 29

----------------------------------------

def palindrome(x, y) :
	lis = []
	for i in range(x, 317, - 1) :
		for a in range(y, 317, - 1) :
			s = str(i * a)
			if s [0] == s [5] and s [1] == s [4] and s [2] == s [3] :
				lis.append(i * a)
	largest = 0
	for i in range(0, len(lis)) :
		if lis [i] > largest :
			largest = lis [i]
	return largest
----------------------------------------

def palindrome(x, y) :
	lis = []
	for i in range(x, 317, -1) :
		for a in range(y, 317, -1) :
			s = i * a
			if str(s)[0] == str(s)[5] and str(s)[1] == str(s)[4] and str(s)[2] == str(s)[3] :
				lis.append(i * a)
	max_value = 0
	for value in lis :
		if value > max_value :
			max_value = value
	return max_value
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
50
1
Gpt3D_Clone50_1.py 1 15
Gpt3D_Clone50_1.py 17 30

----------------------------------------

def palindrome(x, y) :
	lis = []
	for i in range(x, 317, - 1) :
		for a in range(y, 317, - 1) :
			s = str(i * a)
			if s [0] == s [5] and s [1] == s [4] and s [2] == s [3] :
				lis.append(i * a)
	largest = 0
	for i in range(0, len(lis)) :
		if lis [i] > largest :
			largest = lis [i]
	return largest
----------------------------------------

def palindrome(x, y) :
	lis = []
	for i in range(x, 317, -1) :
		for a in range(y, 317, -1) :
			num = i * a
			if str(num)[0] == str(num)[5] and str(num)[1] == str(num)[4] and str(num)[2] == str(num)[3] :
				lis.append(num)
	largest = 0
	for i in range(len(lis)) :
		if lis[i] > largest :
			largest = lis[i]
	return largest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
50
2
Gpt3D_Clone50_2.py 1 15
Gpt3D_Clone50_2.py 17 26

----------------------------------------

def palindrome(x, y) :
	lis = []
	for i in range(x, 317, - 1) :
		for a in range(y, 317, - 1) :
			s = str(i * a)
			if s [0] == s [5] and s [1] == s [4] and s [2] == s [3] :
				lis.append(i * a)
	largest = 0
	for i in range(0, len(lis)) :
		if lis [i] > largest :
			largest = lis [i]
	return largest
----------------------------------------

def palindrome(x, y):
    lis = []
    for i in range(x, 317, -1):
        for a in range(y, 317, -1):
            s = str(i * a)
            if s[0] == s[5] and s[1] == s[4] and s[2] == s[3]:
                lis.append(i * a)
    largest = max(lis)
    return largest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
515
0
Gpt3D_Clone515_0.py 1 13
Gpt3D_Clone515_0.py 15 23

----------------------------------------

def func() :
	sql = " select some rows "
	dbconn = "connect and open to dtabase code"
	n = 0
	ret = execute(sql, n)
	while ret is not None :
		yield ret
		n += 1
		ret = execute(sql, n)
	dbclose()
----------------------------------------

def func() :
	sql = " select some rows "
	dbconn = "connect and open to dtabase code"
	ret = execute(sql, 0)
	while ret is not None :
		yield ret
		ret = execute(sql, dbconn.index(ret)+1)
	dbclose()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
0
Gpt3D_Clone519_0.py 1 8
Gpt3D_Clone519_0.py 10 17

----------------------------------------

def seq(start, end, step) :
	if step == 0 :
		raise ValueError("step must not be 0")
	sample_count = int(abs(end - start) / step)
	return itertools.islice(itertools.count(start, step), sample_count)
----------------------------------------

def seq_three(start, end, step): 
	if step == 0:
		raise ValueError("step must not be 0")
	else:
		sample_count = int((end - start) // step)
		return itertools.islice(itertools.count(start, step), sample_count)
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
51
0
Gpt3D_Clone51_0.py 1 10
Gpt3D_Clone51_0.py 12 19

----------------------------------------

def deep_reverse(p) :
	if p == [] :
		return p
	if not is_list(p [0]) :
		return deep_reverse(p [1 :]) + [p [0]]
	else :
		return deep_reverse(p [1 :]) + [deep_reverse(p [0])]
----------------------------------------

def deep_reverse_type4(p):
	if p == []:
		return p
	if not is_list(p[0]):
		return [p[0]] + deep_reverse_type4(p[1:])
	else:
		return [deep_reverse_type4(p[0])] + deep_reverse_type4(p[1:])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
1
Gpt3D_Clone520_1.py 1 8
Gpt3D_Clone520_1.py 10 17

----------------------------------------

def seq(start, end, step) :
	if step == 0 :
		raise ValueError("step must not be 0")
	sample_count = int(abs(end - start) / step)
	return itertools.islice(itertools.count(start, step), sample_count)
----------------------------------------

def seq(start, end, step):
    if step == 0:
        raise ValueError("step must not be 0")
    else:
        sample_count = int(abs(end - start) / step)
        for ctr in range(sample_count+1):
            yield (start + ctr*step)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
522
0
Gpt3D_Clone522_0.py 1 11
Gpt3D_Clone522_0.py 13 26

----------------------------------------

def seq(start, stop, step = 1) :
	n = int(round((stop - start) / float(step)))
	if n > 1 :
		return ([start + step * i for i in range(n + 1)])
	elif n == 1 :
		return ([start])
	else :
		return ([])
----------------------------------------

def seq(start_val, stop_val, step_count = 1):
	n = int(round((stop_val - start_val) / float(step_count)))
	ans = []
	if n > 1 :
		index = 0
		while index <= n:
			ans.append(start_val + step_count * index)
			index += 1
	elif n == 1 :
		return ([start_val])
	else :
		return ([])
	return ans
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
522
1
Gpt3D_Clone522_1.py 1 11
Gpt3D_Clone522_1.py 13 24

----------------------------------------

def seq(start, stop, step = 1) :
	n = int(round((stop - start) / float(step)))
	if n > 1 :
		return ([start + step * i for i in range(n + 1)])
	elif n == 1 :
		return ([start])
	else :
		return ([])
----------------------------------------

def seq(begin, end, count = 1):
	n = int(round((stop - start) / float(count)))
	if n > 1 :
		new_lst = []
		for i in range(n + 1):
			new_lst.append(start + count * i)
		return new_lst
	elif n == 1 :
		return ([start])
	else :
		return ([])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
52
0
Gpt3D_Clone52_0.py 1 10
Gpt3D_Clone52_0.py 12 19

----------------------------------------

def deep_reverse(p) :
	if p == [] :
		return p
	if not is_list(p [0]) :
		return deep_reverse(p [1 :]) + [p [0]]
	else :
		return deep_reverse(p [1 :]) + [deep_reverse(p [0])]
----------------------------------------

def deep_reverse(p) :
	if not p or not isinstance(p, list):
		return p
	if not isinstance(p[0], list):
		return deep_reverse(p[1:]) + [p[0]]
	else:
		return deep_reverse(p[1:]) + [deep_reverse(p[0])]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
52
1
Gpt3D_Clone52_1.py 1 10
Gpt3D_Clone52_1.py 12 21

----------------------------------------

def deep_reverse(p) :
	if p == [] :
		return p
	if not is_list(p [0]) :
		return deep_reverse(p [1 :]) + [p [0]]
	else :
		return deep_reverse(p [1 :]) + [deep_reverse(p [0])]
----------------------------------------

def deep_reverse_type3(p) :
	if p == [] :
		return p
	elif not is_list(p [0]) :
		return [p[0]] + deep_reverse_type3(p [1 :]) 
	else :
		return [deep_reverse_type3(p[0])] + deep_reverse_type3(p [1 :]) 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
0
Gpt3D_Clone530_0.py 1 10
Gpt3D_Clone530_0.py 12 20

----------------------------------------

def __init__(self, some_var) :
	QtCore.QObject.__init__(self, parent = None)
	self.some_var = some_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_complex_processing,
	args = (self.queue,))
----------------------------------------

def __init__(self, some_var, other_var) :
	QtCore.QObject.__init__(self, parent = None)
	self.some_var = some_var
	self.other_var = other_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_complex_processing,
	args = (self.queue, self.some_var, self.other_var))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
1
Gpt3D_Clone530_1.py 1 10
Gpt3D_Clone530_1.py 12 19

----------------------------------------

def __init__(self, some_var) :
	QtCore.QObject.__init__(self, parent = None)
	self.some_var = some_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_complex_processing,
	args = (self.queue,))
----------------------------------------

def __init__(self, some_var, parent=None) :
	QtCore.QObject.__init__(self, parent=parent)
	self.some_var = some_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_complex_processing,
	kwargs = {'queue': self.queue})
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
0
Gpt3D_Clone532_0.py 1 10
Gpt3D_Clone532_0.py 12 20

----------------------------------------

def __init__(self, some_var) :
	QtCore.QObject.__init__(self, parent = None)
	self.some_var = some_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_complex_processing,
	args = (self.queue,))
----------------------------------------

def __init__(self, some_var, other_var) :
	QtCore.QObject.__init__(self, parent = None)
	self.some_var = some_var
	self.other_var = other_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_different_processing,
	args = (self.queue, other_var))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
1
Gpt3D_Clone532_1.py 1 10
Gpt3D_Clone532_1.py 12 21

----------------------------------------

def __init__(self, some_var) :
	QtCore.QObject.__init__(self, parent = None)
	self.some_var = some_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_complex_processing,
	args = (self.queue,))
----------------------------------------

def __init__(self, some_var, other_var) :
	QtCore.QObject.__init__(self, parent = None)
	self.some_var = some_var
	self.other_var = other_var
	self.queue = mp.Queue()
	self.process = mp.Process(
	target = workermodule.some_complex_processing,
	args = (self.queue, other_var))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
0
Gpt3D_Clone538_0.py 1 12
Gpt3D_Clone538_0.py 14 25

----------------------------------------

def __enter__(self) :
	super().__enter__()
	try :
		self.i = self.enter_context(open(self.in_file_name, 'r'))
		self.o = self.enter_context(open(self.out_file_name, 'w'))
	except :
		if not self.__exit__(* sys.exc_info()) :
			raise
	return self
----------------------------------------

def __enter__(self) :
	super().__enter__()
	try :
		fp1 = open(self.in_file_name, 'r')
		self.i = self.enter_context(fp1)
		fp2 = open (self.out_file_name, 'w')
		self.o = self.enter_context(fp2)
	except :
		if not self.__exit__(* sys.exc_info()) :
			raise
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
1
Gpt3D_Clone538_1.py 1 12
Gpt3D_Clone538_1.py 14 25

----------------------------------------

def __enter__(self) :
	super().__enter__()
	try :
		self.i = self.enter_context(open(self.in_file_name, 'r'))
		self.o = self.enter_context(open(self.out_file_name, 'w'))
	except :
		if not self.__exit__(* sys.exc_info()) :
			raise
	return self
----------------------------------------

def __enter__(self) :
	super().__enter__()
	try :
		self.i = open(self.in_file_name, 'r')
		self.enter_context(self.i)
		self.o = open (self.out_file_name, 'w')
		self.enter_context(self.o)
	except :
		if not self.__exit__(* sys.exc_info()) :
			raise
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
0
Gpt3D_Clone541_0.py 1 8
Gpt3D_Clone541_0.py 10 16

----------------------------------------

def touch(fname) :
	if os.path.exists(fname) :
		os.utime(fname, None)
	else :
		open(fname, 'a').close()
----------------------------------------

def refresh_file(fname):
    if os.path.exists(fname):
        os.utime(fname, None)
    else:
        new_file = open(fname, 'a')
        new_file.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
543
0
Gpt3D_Clone543_0.py 1 10
Gpt3D_Clone543_0.py 12 20

----------------------------------------

def touch(file_name) :
	if not os.path.exists(file_name) :
		return
	try :
		os.utime(file_name, None)
	except Exception :
		open(file_name, 'a').close()
----------------------------------------

def touch_4(file_name) :
	if not os.path.exists(file_name) :
		return
	try :
		os.utime(file_name, None)
	except Exception :
		with open(file_name, 'w+') as f:
			pass
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
1
Gpt3D_Clone544_1.py 1 8
Gpt3D_Clone544_1.py 10 15

----------------------------------------

def touch(fname, mode = 0o666, dir_fd = None, ** kwargs) :
	flags = os.O_CREAT | os.O_APPEND
	with os.fdopen(os.open(fname, flags = flags, mode = mode, dir_fd = dir_fd)) as f :
		os.utime(f.fileno() if os.utime in os.supports_fd else fname,
		dir_fd = None if os.supports_fd else dir_fd, ** kwargs)
----------------------------------------

def touch(fname, mode = 0o666, dir_fd = None, ** kwargs) :
	flags = os.O_CREAT | os.O_RDWR
	with os.fdopen(os.open(fname, flags = flags, mode = mode, dir_fd = dir_fd)) as f :
		os.utime(fname, dir_fd = None if os.supports_fd else dir_fd, ** kwargs)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
0
Gpt3D_Clone545_0.py 1 10
Gpt3D_Clone545_0.py 12 21

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	for n in range(2, (x) - 1) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	i = 2
	while i < x :
		if x % i == 0 :
			return False
		i += 1
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
1
Gpt3D_Clone545_1.py 1 10
Gpt3D_Clone545_1.py 12 18

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	for n in range(2, (x) - 1) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	for n in [i for i in range(2, (x) - 1) if x % i == 0] :
		return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
0
Gpt3D_Clone546_0.py 1 10
Gpt3D_Clone546_0.py 12 23

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	for n in range(2, (x) - 1) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime_3(x):
  if x < 2:
    return False
  else:
    i = 2
    while i < x:
      if x % i == 0:
        return False
      i += 1
    return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
1
Gpt3D_Clone546_1.py 1 10
Gpt3D_Clone546_1.py 12 21

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	for n in range(2, (x) - 1) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime_4(x):
  if x < 2:
    return False
  else:
    for i in range (2, x):
      if x % i == 0:
        return False
  return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
0
Gpt3D_Clone547_0.py 1 10
Gpt3D_Clone547_0.py 12 21

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	for n in range(2, (x) - 1) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime_3(x) :
	if x < 2 :
		return False
	y = 2
	while  y < (x) - 1:
		if x % y == 0 :
			return False
		y += 1
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
1
Gpt3D_Clone547_1.py 1 10
Gpt3D_Clone547_1.py 12 19

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	for n in range(2, (x) - 1) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime(x):
	if x <= 2:
		return 0
	for i in range(2, int(sqrt(x)) + 1):
		if x % i == 0:
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
549
0
Gpt3D_Clone549_0.py 1 12
Gpt3D_Clone549_0.py 14 25

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	elif x == 2 :
		return True
	for n in range(2, x) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime(x):
	if x <= 1:
		return False
	elif x == 2: 
		return True
	i = 2
	while i < x:
		if x % i == 0:
			return False
		i += 1
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
549
1
Gpt3D_Clone549_1.py 1 12
Gpt3D_Clone549_1.py 14 23

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	elif x == 2 :
		return True
	for n in range(2, x) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime(x):
    if x == 2:
        return True
    if x < 2 or x % 2 == 0:
        return False
    for n in range(3, int(x/2)+1, 2):
        if x % n == 0:
            return False
    return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
549
2
Gpt3D_Clone549_2.py 1 12
Gpt3D_Clone549_2.py 14 21

----------------------------------------

def is_prime(x) :
	if x < 2 :
		return False
	elif x == 2 :
		return True
	for n in range(2, x) :
		if x % n == 0 :
			return False
	return True
----------------------------------------

def is_prime(x):
    if x < 2:
        return False
    for n in range(2, int(x/2)+1):
        if x % n == 0:
            return False
    return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
551
0
Gpt3D_Clone551_0.py 1 9
Gpt3D_Clone551_0.py 11 16

----------------------------------------

def is_member(x) :
	a = [1, 5, 3, 9, 4, 100]
	for i in range(len(a)) :
		if x == a [i] :
			return True
	return False
----------------------------------------

def is_member(x) :
	a = [1, 5, 3, 9, 4, 100]
	if x in a :
		return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
554
0
Gpt3D_Clone554_0.py 1 12
Gpt3D_Clone554_0.py 14 25

----------------------------------------

def chunks(iterable, n) :
	values = []
	for i, item in enumerate(iterable, 1) :
		values.append(item)
		if i % n == 0 :
			yield values
			values = []
	if values :
		yield values
----------------------------------------

def chunks(iterable, n) :
	values = []
	i=1
	for item in iterable :
		values.append(item)
		if i % n == 0 :
			yield values
			values = []
		i+=1
	if values :
		yield values
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
554
1
Gpt3D_Clone554_1.py 1 12
Gpt3D_Clone554_1.py 14 25

----------------------------------------

def chunks(iterable, n) :
	values = []
	for i, item in enumerate(iterable, 1) :
		values.append(item)
		if i % n == 0 :
			yield values
			values = []
	if values :
		yield values
----------------------------------------

def chunks(iterable, n) :
	values = []
	i=1
	for item in iterable :
		values.append(item)
		if i % n == 0 :
			yield values
			values.clear()
		i+=1
	if values :
		yield values
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
554
2
Gpt3D_Clone554_2.py 1 12
Gpt3D_Clone554_2.py 14 24

----------------------------------------

def chunks(iterable, n) :
	values = []
	for i, item in enumerate(iterable, 1) :
		values.append(item)
		if i % n == 0 :
			yield values
			values = []
	if values :
		yield values
----------------------------------------

def chunks_3(iterable, n) :
	values = []
	for i in range(len(iterable)) :
		item = iterable[i]
		values.append(item)
		if (i+1) % n == 0 :
			yield values
			values = []
	if values :
		yield values
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
559
2
Gpt3D_Clone559_2.py 1 8
Gpt3D_Clone559_2.py 10 17

----------------------------------------

def access(obj, indexes) :
	try :
		return reduce(list.__getitem__, indexes, obj)
	except Exception :
		return None
----------------------------------------

def access_4(obj, indexes) :
	try :
		for index in indexes :
			obj = obj[index]
		return obj
	except Exception :
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
562
0
Gpt3D_Clone562_0.py 1 10
Gpt3D_Clone562_0.py 12 22

----------------------------------------

def convert(X, Y) :
	new_dict = {}
	for x_key, x_value in X.items() :
		for y_key, y_value in Y.items() :
			if x_key == y_key :
				new_dict [y_value] = x_value
	return new_dict
----------------------------------------

def convert(X, Y) :
	new_dict = {}
	for x_key, x_value in X.items() :
		for y_key, y_value in Y.items() :
			if x_key == y_key :
				if y_value in new_dict :
					new_dict[y_value] = x_value + new_dict[y_value]
				else:
					new_dict [y_value] = x_value
	return new_dict
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
565
0
Gpt3D_Clone565_0.py 1 9
Gpt3D_Clone565_0.py 11 18

----------------------------------------

def brute_force() :
	for length in range(min_length, max_length + 1) :
		for p in product(chars, repeat = length) :
			guess = ''.join(p)
			if guess == password :
				return guess
----------------------------------------

def brute_force() :
	password_options = []
	for i in range(min_length, max_length + 1) :
		password_options.extend([''.join(p) for p in product(chars, repeat = i)])
	for guess in password_options :
		if guess == password :
			return guess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
565
1
Gpt3D_Clone565_1.py 1 9
Gpt3D_Clone565_1.py 11 17

----------------------------------------

def brute_force() :
	for length in range(min_length, max_length + 1) :
		for p in product(chars, repeat = length) :
			guess = ''.join(p)
			if guess == password :
				return guess
----------------------------------------

def brute_force() :
	for str_len in range(min_length, max_length + 1) :
		password_options = [''.join(p) for p in product(chars, repeat = str_len)]
		for guess in password_options :
			if guess == password :
				return guess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
1
Gpt3D_Clone567_1.py 1 8
Gpt3D_Clone567_1.py 10 16

----------------------------------------

def strtr(strng, replace) :
	if replace and strng :
		s, r = replace.popitem()
		return r.join(strtr(subs, dict(replace)) for subs in strng.split(s))
	return strng
----------------------------------------

def strtr(strng, replace):
	if replace and strng:
		s, r = replace.popitem()
		new_sub = [subs.replace(s, r) for subs in strng.split(s)]
		return r.join(new_sub)
	return strng
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
2
Gpt3D_Clone567_2.py 1 8
Gpt3D_Clone567_2.py 10 16

----------------------------------------

def strtr(strng, replace) :
	if replace and strng :
		s, r = replace.popitem()
		return r.join(strtr(subs, dict(replace)) for subs in strng.split(s))
	return strng
----------------------------------------

def strtr(strng, replace) : 
	if replace != None and strng != None : 
		s, r = replace.popitem() 
		return ''.join([strtr(subs, dict(replace)) for subs in strng.split(s)])
	return strng
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
3
Gpt3D_Clone567_3.py 1 8
Gpt3D_Clone567_3.py 10 15

----------------------------------------

def strtr(strng, replace) :
	if replace and strng :
		s, r = replace.popitem()
		return r.join(strtr(subs, dict(replace)) for subs in strng.split(s))
	return strng
----------------------------------------

def strtr(strng, replace) : 
	if replace is not None and strng is not None : 
		s, r = replace.popitem() 
		return ''.join(list(map(lambda sub: strtr(sub, dict(replace)), strng.split(s))))
	return strng
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
568
0
Gpt3D_Clone568_0.py 1 8
Gpt3D_Clone568_0.py 10 18

----------------------------------------

def stemming(verb) :
	suffix = ["ing", "ed", "es", "s"]
	for i in suffix :
		verb = verb.replace(i, "")
	return verb
----------------------------------------

def stemming(verb):
    suffixes = ["ing", "ed", "es", "s"]
    new_verb = ""
    for i in verb:
        if i in suffixes:
            new_verb += verb.replace(i, "")
    return new_verb
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
568
1
Gpt3D_Clone568_1.py 1 8
Gpt3D_Clone568_1.py 10 17

----------------------------------------

def stemming(verb) :
	suffix = ["ing", "ed", "es", "s"]
	for i in suffix :
		verb = verb.replace(i, "")
	return verb
----------------------------------------

def stemmer(verb):
    word_endings = ["ing", "ed", "es", "s"]
    new_verb = ""
    for x in verb:
        if x in word_endings:
            new_verb += verb.replace(x, "")
    return new_verb
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
0
Gpt3D_Clone572_0.py 1 8
Gpt3D_Clone572_0.py 10 18

----------------------------------------

def emit(self, record) :
	if record.exc_info :
		record.exc_text = self.formatException(record.exc_info)
		record.exc_info = None
	self.queue.put(record)
----------------------------------------

def emit(self, record):
    if record.exc_info:
        record.exc_text = self.formatException(record.exc_info)
        record.exc_info = None
    try:
        self.queue.put(record)
    except:
        print("Error Occured")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
1
Gpt3D_Clone572_1.py 1 8
Gpt3D_Clone572_1.py 10 18

----------------------------------------

def emit(self, record) :
	if record.exc_info :
		record.exc_text = self.formatException(record.exc_info)
		record.exc_info = None
	self.queue.put(record)
----------------------------------------

def emit(self, record):
    if record.exc_info:
        try:
            record.exc_text = self.formatException(record.exc_info)
            record.exc_info = None
            self.queue.put(record)
        except:
            print("Error Occured")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
2
Gpt3D_Clone572_2.py 1 8
Gpt3D_Clone572_2.py 10 15

----------------------------------------

def emit(self, record) :
	if record.exc_info :
		record.exc_text = self.formatException(record.exc_info)
		record.exc_info = None
	self.queue.put(record)
----------------------------------------

def emit(self, record):
    if record.exc_info is not None:
        record.exc_text = self._formatException(record.exc_info)
    record.exc_info = None
    self.putRecord(record)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
573
0
Gpt3D_Clone573_0.py 1 14
Gpt3D_Clone573_0.py 16 28

----------------------------------------

def receive(self) :
	while True :
		try :
			record = self.queue.get()
			self._handler.emit(record)
		except (KeyboardInterrupt, SystemExit) :
			raise
		except EOFError :
			break
		except :
			traceback.print_exc(file = sys.stderr)
----------------------------------------

def receive(self) :
	while True :
		try :
			record = self.queue.get()
			self._handler.emit(record)
		except EOFError :
			break
		except (KeyboardInterrupt, SystemExit) :
			raise
		except Exception as ex :
			print("Unexpected exception: {}, traceback: {}".format(ex, traceback.format_exc()), file = sys.stderr)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
573
1
Gpt3D_Clone573_1.py 1 14
Gpt3D_Clone573_1.py 16 27

----------------------------------------

def receive(self) :
	while True :
		try :
			record = self.queue.get()
			self._handler.emit(record)
		except (KeyboardInterrupt, SystemExit) :
			raise
		except EOFError :
			break
		except :
			traceback.print_exc(file = sys.stderr)
----------------------------------------

def receive(self) :
	while True :
		try :
			record = self.queue.get()
			self._handler.emit(record)
		except EOFError :
			break
		except (InterruptedError, KeyboardInterrupt, SystemExit) :
			raise
		except Exception as ex :
			logger.error("Unexpected exception: {}, traceback: {}".format(ex, traceback.format_exc()))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
575
1
Gpt3D_Clone575_1.py 1 8
Gpt3D_Clone575_1.py 10 15

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string):
  tmp = ""
  for i in range(len(string)):
    tmp += string[-1-i] 
  return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
575
2
Gpt3D_Clone575_2.py 1 8
Gpt3D_Clone575_2.py 10 15

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string):
  temp = ""
  for i in reversed(range(0, len(string))):
    temp += string[i]
  return temp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
2
Gpt3D_Clone576_2.py 1 8
Gpt3D_Clone576_2.py 10 15

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) :
    rev = ''
    for i in range(-1, -len(string) - 1, -1) :
        rev += string[i]
    return rev
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
1
Gpt3D_Clone577_1.py 1 8
Gpt3D_Clone577_1.py 10 15

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string):
	tmp = ""
	for i in reversed(range(len(string))):
		tmp += string[i]
	return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
2
Gpt3D_Clone577_2.py 1 8
Gpt3D_Clone577_2.py 10 15

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) : 
  tmp = ""
  for i in reversed(range(len(string))):
    tmp += string[i]
  return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
2
Gpt3D_Clone578_2.py 1 8
Gpt3D_Clone578_2.py 10 15

----------------------------------------

def reverse(string) :
	tmp = ""
	for i in range(1, len(string) + 1) :
		tmp += string [len(string) - i]
	return tmp
----------------------------------------

def reverse(string) :
  tmp = ""
  for char in string[::-1] :
    tmp += char
  return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
579
0
Gpt3D_Clone579_0.py 1 12
Gpt3D_Clone579_0.py 14 22

----------------------------------------

def rev(test) :
	test = list(test)
	i = len(test) - 1
	result = []
	print test
	while i > = 0 :
		result.append(test.pop(i))
		i -= 1
	return "".join(result)
----------------------------------------

def rev(test):
	test = list(test)
	length = len(test)
	result = []
	print test
	for i in list(range(length-1, -1, -1)):
		result.append(test.pop(i)) 
	return ''.join(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
579
1
Gpt3D_Clone579_1.py 1 12
Gpt3D_Clone579_1.py 14 23

----------------------------------------

def rev(test) :
	test = list(test)
	i = len(test) - 1
	result = []
	print test
	while i > = 0 :
		result.append(test.pop(i))
		i -= 1
	return "".join(result)
----------------------------------------

def rev(test):
	test = list(test)
	length = len(test)
	result = []
	print test
	for i in range(length-1, -1, -1):
		result.append(test.pop(i)) 
	return "".join(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
579
2
Gpt3D_Clone579_2.py 1 12
Gpt3D_Clone579_2.py 14 22

----------------------------------------

def rev(test) :
	test = list(test)
	i = len(test) - 1
	result = []
	print test
	while i > = 0 :
		result.append(test.pop(i))
		i -= 1
	return "".join(result)
----------------------------------------

def rev(test):
	test = list(test)
	result = []
	print test
	while test:
		result.append(test.pop())
	return "".join(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
0
Gpt3D_Clone582_0.py 1 10
Gpt3D_Clone582_0.py 12 18

----------------------------------------

def reverse(s) :
	i = len(s) - 1
	sNew = ''
	while i > = 0 :
		sNew = sNew + str(s [i])
		i = i - 1
	return sNew
----------------------------------------

def reverse(s):
	i=len(s)-1
	sNew=''
	for j in range(i, -1, -1):
		sNew=sNew+str(s[j])
	return sNew
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
1
Gpt3D_Clone582_1.py 1 10
Gpt3D_Clone582_1.py 12 18

----------------------------------------

def reverse(s) :
	i = len(s) - 1
	sNew = ''
	while i > = 0 :
		sNew = sNew + str(s [i])
		i = i - 1
	return sNew
----------------------------------------

def reverse(s):
	sNew = ''
	for i in range (len(s)-1, -1, -1):
		sNew = sNew + str(s[i])
	return sNew
  
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
1
Gpt3D_Clone583_1.py 1 10
Gpt3D_Clone583_1.py 12 20

----------------------------------------

def reverse(s) :
	i = len(s) - 1
	sNew = ''
	while i > = 0 :
		sNew = sNew + str(s [i])
		i = i - 1
	return sNew
----------------------------------------

def reve(s): 
	i = len(s) - 1
	rev_s = ''
	while i >= 0: 
		rev_s += s[i]
		i -= 1
	return rev_s 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
1
Gpt3D_Clone584_1.py 1 8
Gpt3D_Clone584_1.py 10 15

----------------------------------------

def reverse(text) :
	reversed_text = ""
	for n in range(len(text)) :
		reversed_text += text [- 1 - n]
	return reversed_text
----------------------------------------

def reverse_three(text): 
	reversed_text = ""
	for n in reversed(range(len(text))): 
		reversed_text += text[n] 
	return reversed_text 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
0
Gpt3D_Clone585_0.py 1 10
Gpt3D_Clone585_0.py 12 20

----------------------------------------

def reverse(s) :
	t = - 1
	s2 = ''
	while abs(t) < len(s) + 1 :
		s2 = s2 + s [t]
		t = t - 1
	return s2
----------------------------------------

def reverse(s) :
	length = len(s)
	s2 = ''
	while length > 0 :
		s2 = s2 + s [length - 1]
		length = length - 1
	return s2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
2
Gpt3D_Clone585_2.py 1 10
Gpt3D_Clone585_2.py 12 17

----------------------------------------

def reverse(s) :
	t = - 1
	s2 = ''
	while abs(t) < len(s) + 1 :
		s2 = s2 + s [t]
		t = t - 1
	return s2
----------------------------------------

def reverse(s) :
	s2 = ''
	for i in range(len(s) -1, -1, -1) :
		s2 = s2 + s[i]
	return s2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
0
Gpt3D_Clone586_0.py 1 10
Gpt3D_Clone586_0.py 12 19

----------------------------------------

def reverse(s) :
	t = - 1
	s2 = ''
	while abs(t) < len(s) + 1 :
		s2 = s2 + s [t]
		t = t - 1
	return s2
----------------------------------------

def reverse(s):
  t = len(s) - 1
  s2 = ''
  while t >= 0:
    s2 = s2 + s[t]
    t = t - 1
  return s2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
1
Gpt3D_Clone586_1.py 1 10
Gpt3D_Clone586_1.py 12 20

----------------------------------------

def reverse(s) :
	t = - 1
	s2 = ''
	while abs(t) < len(s) + 1 :
		s2 = s2 + s [t]
		t = t - 1
	return s2
----------------------------------------

def reverse(s):
	t = len(s) - 1
	s2 = ''
	while t >= 0 :
		s2 = s2 + s[t]
		t = t - 1
	return s2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
587
1
Gpt3D_Clone587_1.py 1 9
Gpt3D_Clone587_1.py 11 17

----------------------------------------

def reverse(s) :
	rev = [_t for _t in s]
	t = ''
	while len(rev) ! = 0 :
		t += rev.pop()
	return t
----------------------------------------

def reverse(s) :
	rev = list(s)
	t = ''
	while len(rev) != 0 :
		t += rev.pop(-1)
	return t
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
589
0
Gpt3D_Clone589_0.py 1 11
Gpt3D_Clone589_0.py 13 23

----------------------------------------

def find(l, elem) :
	for row, i in enumerate(l) :
		try :
			column = i.index(elem)
		except ValueError :
			continue
		return row, column
	return - 1
----------------------------------------

def search(listing, item):
	row_count = 0
	for each_line in listing:
		try:
			column_count = each_line.index(item)
		except:
			row_count += 1
			continue
		return row_count, column_count
	return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
589
1
Gpt3D_Clone589_1.py 1 11
Gpt3D_Clone589_1.py 13 23

----------------------------------------

def find(l, elem) :
	for row, i in enumerate(l) :
		try :
			column = i.index(elem)
		except ValueError :
			continue
		return row, column
	return - 1
----------------------------------------

def lookup(list, element):
	rows = 0 
	for line in list:
		try:
			columns = line.index(element)
		except:
			rows += 1 
			continue
		return rows, columns
	return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
3
Gpt3D_Clone593_3.py 1 8
Gpt3D_Clone593_3.py 10 15

----------------------------------------

def decorator(function) :
	if after :
		return afterDecorator(function, event)
	else :
		return beforeDecorator(function, event)
----------------------------------------

def decorator(function) :
	if after == False:
		return beforeDecorator(function, event)
	elif after == True:
		return afterDecorator(function, event)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
0
Gpt3D_Clone594_0.py 1 8
Gpt3D_Clone594_0.py 10 14

----------------------------------------

def decorator(function) :
	if after :
		return afterDecorator(function, event)
	else :
		return beforeDecorator(function, event)
----------------------------------------

def decorator(func) :
	if not after :
		return beforeDecorator(func, event)
	return afterDecorator(func, event)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
1
Gpt3D_Clone596_1.py 1 9
Gpt3D_Clone596_1.py 11 21

----------------------------------------

def printFigure(rows) :
	for x in range(rows) :
		items = [str(i) for i in range(1, x + 1)]
		if x % 2 == 0 :
			items = items [: : - 1]
		print (''.join(items))
----------------------------------------

def printFigures(rows) :
	for x in range(rows) :
		items = [str(i) for i in range(1, x + 1)]
		if x % 2 == 0 :
			items = items[::-1]
		result = ""
		for item in items :
			result += item
		print(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
59
0
Gpt3D_Clone59_0.py 1 15
Gpt3D_Clone59_0.py 17 33

----------------------------------------

def arePermsEqualParity(perm0, perm1) :
	perm1 = list(perm1)
	perm1_map = dict((v, i) for i, v in enumerate(perm1))
	transCount = 0
	for loc, p0 in enumerate(perm0) :
		p1 = perm1 [loc]
		if p0 ! = p1 :
			sloc = perm1_map [p0]
			perm1 [loc], perm1 [sloc] = p0, p1
			perm1_map [p0], perm1_map [p1] = loc, sloc
			transCount += 1
	return (transCount % 2) == 0
----------------------------------------

def arePermsEqualParity(perm0, perm1):
    perm1 = list(perm1)
    perm1_map = dict((v, i)for i, v in enumerate(perm1))
    transCount = 0
 
    for loc, p0 in enumerate(perm0):
        p1 = perm1[loc]
        if p0 != p1:
            sloc = perm1_map[p0]
            while(sloc != loc):
                loc += 1
                sloc -= 1
                perm1[loc], perm1[sloc] = perm1[sloc], perm1[loc]
                perm1_map[p0], perm1_map[p1] = loc, sloc
            transCount += 1                      
    return (transCount % 2) == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
0
Gpt3D_Clone601_0.py 1 17
Gpt3D_Clone601_0.py 19 33

----------------------------------------

def all_pairs(lst) :
	if len(lst) < 2 :
		yield []
		return
	if len(lst) % 2 == 1 :
		for i in range(len(lst)) :
			for result in all_pairs(lst [: i] + lst [i + 1 :]) :
				yield result
	else :
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				yield [pair] + rest
----------------------------------------

def all_pairs(lst):
  if len(lst) < 2:
    yield []
    return
  if len(lst) % 2 == 1:
    for i in range(len(lst)-1):
      for result in all_pairs(lst[:i] + lst[i+1:]):
        yield result
  else:
    c = lst[-1]
    for j in range(len(lst)-1):
      pair = (lst[j], c)
      for rest in all_pairs(lst[:j] + lst[j+1:-1]):
        yield [pair] + rest
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
1
Gpt3D_Clone601_1.py 1 17
Gpt3D_Clone601_1.py 19 29

----------------------------------------

def all_pairs(lst) :
	if len(lst) < 2 :
		yield []
		return
	if len(lst) % 2 == 1 :
		for i in range(len(lst)) :
			for result in all_pairs(lst [: i] + lst [i + 1 :]) :
				yield result
	else :
		a = lst [0]
		for i in range(1, len(lst)) :
			pair = (a, lst [i])
			for rest in all_pairs(lst [1 : i] + lst [i + 1 :]) :
				yield [pair] + rest
----------------------------------------

def all_pairs(lst) :
	if len(lst) < 2 :
		yield []
		return
	b = lst[0]
	for i in range(1, len(lst)) :
		pair = (b, lst[i])
		for result in all_pairs(lst [1 : i] + lst [i + 1 :]) :
			yield [pair] + result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
0
Gpt3D_Clone606_0.py 1 11
Gpt3D_Clone606_0.py 13 23

----------------------------------------

def sigmoid(x) :
	"Numerically-stable sigmoid function."
	if x > = 0 :
		z = exp(- x)
		return 1 / (1 + z)
	else :
		z = exp(x)
		return z / (1 + z)
----------------------------------------

def sigmoid(x):
    "Numerically-stable sigmoid function."
    if x >= 0:
        z = math.exp(-x)
        return 1 / (1 + z)
    else:
        z = math.exp(x)
        return z / (1 + z)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
0
Gpt3D_Clone607_0.py 1 19
Gpt3D_Clone607_0.py 21 39

----------------------------------------

def some_function(eggs) :
	error_code = 0
	if eggs == 1 :
		do_something_1()
	elif eggs == 2 :
		do_something_2()
	elif eggs == 3 :
		do_something_3()
	else :
		do_error()
		error_code = 1
	if error_code == 0 :
		do_something_4()
		do_something_5()
		do_something_6()
	return
----------------------------------------

def some_function(eggs):
	error_code = 0
	if eggs == 1:
		do_something_1()
	if eggs == 2:
		do_something_2()
	if eggs == 3:
		do_something_3()
	if eggs != 1 and eggs != 2 and eggs != 3:
		do_error()
		error_code = 1
	if error_code == 0:
		do_something_4()
	if error_code == 0:
		do_something_5()
	if error_code == 0: 
		do_something_6()
	return
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
1
Gpt3D_Clone607_1.py 1 19
Gpt3D_Clone607_1.py 21 31

----------------------------------------

def some_function(eggs) :
	error_code = 0
	if eggs == 1 :
		do_something_1()
	elif eggs == 2 :
		do_something_2()
	elif eggs == 3 :
		do_something_3()
	else :
		do_error()
		error_code = 1
	if error_code == 0 :
		do_something_4()
		do_something_5()
		do_something_6()
	return
----------------------------------------

def some_function_routine_1(eggs):
	if eggs == 1:
		do_something_1()
	elif eggs == 2:
		do_something_2()
	elif eggs == 3:
		do_something_3()
	else:
		do_error()
		error_code = 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
609
0
Gpt3D_Clone609_0.py 1 9
Gpt3D_Clone609_0.py 11 18

----------------------------------------

def get_dir_size(root) :
	size = 0
	for path, dirs, files in os.walk(root) :
		for f in files :
			size += os.path.getsize(os.path.join(path, f))
	return size
----------------------------------------

def get_dir_size(root):
	total_size = 0
	for roots, folders, filenames in os.walk(root):
		for filename in filenames:
			new_path = os.path.join(roots,filename)
			total_size += os.path.getsize(new_path)
	return total_size
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
609
1
Gpt3D_Clone609_1.py 1 9
Gpt3D_Clone609_1.py 11 18

----------------------------------------

def get_dir_size(root) :
	size = 0
	for path, dirs, files in os.walk(root) :
		for f in files :
			size += os.path.getsize(os.path.join(path, f))
	return size
----------------------------------------

def get_dir_list(root): 
    """Returns list of directories in root""" 
    dir_list = [] 
    for path, dirs, files in os.walk(root) :
        for d in dirs: 
            dir_list.append(os.path.join(path,d)) 
    return dir_list 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
609
2
Gpt3D_Clone609_2.py 1 9
Gpt3D_Clone609_2.py 11 18

----------------------------------------

def get_dir_size(root) :
	size = 0
	for path, dirs, files in os.walk(root) :
		for f in files :
			size += os.path.getsize(os.path.join(path, f))
	return size
----------------------------------------

def get_file_name_list(root): 
    """Returns list of files names in root""" 
    file_list = [] 
    for path, dirs, files in os.walk(root) :
        for f in files: 
            file_list.append(f) 
    return file_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
0
Gpt3D_Clone60_0.py 1 15
Gpt3D_Clone60_0.py 17 28

----------------------------------------

def arePermsEqualParity(perm0, perm1) :
	perm1 = list(perm1)
	perm1_map = dict((v, i) for i, v in enumerate(perm1))
	transCount = 0
	for loc, p0 in enumerate(perm0) :
		p1 = perm1 [loc]
		if p0 ! = p1 :
			sloc = perm1_map [p0]
			perm1 [loc], perm1 [sloc] = p0, p1
			perm1_map [p0], perm1_map [p1] = loc, sloc
			transCount += 1
	return (transCount % 2) == 0
----------------------------------------

def arePermsEqualParity(perm0, perm1):
    transCount = 0
    for loc, p0 in enumerate(perm0):
        if p0 not in perm1:
            transCount += 1
            continue
        p1 = perm1[loc]
        if p0 != p1:
            if perm1.index(p0) > loc:
                transCount += 1
    return (transCount % 2) == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
0
Gpt3D_Clone610_0.py 1 16
Gpt3D_Clone610_0.py 18 36

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				item = left_side.pop(0)
				result.append(item)
			else :
				item = right_side.pop(0)
				result.append(item)
		elif len(left_side) > 0 :
			item = left_side.pop(0)
			result.append(item)
		elif len(right_side) > 0 :
			item = right_side.pop(0)
			result.append(item)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
1
Gpt3D_Clone610_1.py 1 16
Gpt3D_Clone610_1.py 18 34

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side[0])
			left_side.pop(0)
		elif len(right_side) > 0 :
			result.append(right_side[0])
			right_side.pop(0)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
2
Gpt3D_Clone610_2.py 1 16
Gpt3D_Clone610_2.py 18 31

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while left_side or right_side :
		if left_side and right_side :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif left_side :
			result.append(left_side.pop(0))
		elif right_side :
			result.append(right_side.pop(0))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
0
Gpt3D_Clone611_0.py 1 16
Gpt3D_Clone611_0.py 18 33

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] <= right_side [0] :
				pop_value = left_side.pop(0)
				result.append(pop_value)
			else :
				pop_value = right_side.pop(0)
				result.append(pop_value)
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
1
Gpt3D_Clone611_1.py 1 16
Gpt3D_Clone611_1.py 18 31

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] <= right_side [0] :
				result.append(left_side.pop(-1))
			else :
				result.append(right_side.pop(-1))
		elif len(left_side) > 0 :
			result.append(left_side.pop(-1))
		elif len(right_side) > 0 :
			result.append(right_side.pop(-1))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
0
Gpt3D_Clone612_0.py 1 16
Gpt3D_Clone612_0.py 18 30

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if left_side [0] < right_side [0] :
			result.append(left_side.pop(0))
		else :
			result.append(right_side.pop(0))
	while len(left_side) > 0 :
		result.append(left_side.pop())
	while len(right_side) > 0 :
		result.append(right_side.pop())
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
1
Gpt3D_Clone612_1.py 1 16
Gpt3D_Clone612_1.py 18 32

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 and len(right_side) > 0 :
		if left_side [0] > right_side [0] :
			result.append(right_side.pop(0))
		else :
			result.append(left_side.pop(0))
	while len(left_side) > 0 :
		result.append(left_side.pop(0))
	while len(right_side) > 0 :
		result.append(right_side.pop(0))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
0
Gpt3D_Clone614_0.py 1 16
Gpt3D_Clone614_0.py 18 31

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while left_side or right_side :
		if left_side and right_side :
			if left_side[0] < = right_side[0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif left_side :
			result.append(left_side.pop(0))
		else :
			result.append(right_side.pop(0))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
1
Gpt3D_Clone614_1.py 1 16
Gpt3D_Clone614_1.py 18 28

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while left_side and right_side :
		if left_side[0] < = right_side[0] :
			result.append(left_side.pop(0))
		else :
			result.append(right_side.pop(0))
	result += left_side + right_side
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
1
Gpt3D_Clone615_1.py 1 16
Gpt3D_Clone615_1.py 18 31

----------------------------------------

def merge(left_side, right_side) :
	result = []
	while len(left_side) > 0 or len(right_side) > 0 :
		if len(left_side) > 0 and len(right_side) > 0 :
			if left_side [0] < = right_side [0] :
				result.append(left_side.pop(0))
			else :
				result.append(right_side.pop(0))
		elif len(left_side) > 0 :
			result.append(left_side.pop(0))
		elif len(right_side) > 0 :
			result.append(right_side.pop(0))
	return result
----------------------------------------

def merge(left_side, right_side) :
	result = []
	while left_side and right_side :
		if left_side [0] < = right_side [0] :
			result.append(left_side.pop(0))
		else :
			result.append(right_side.pop(0))
	while left_side or right_side :
		if left_side :
			result.append(left_side.pop(0))
		elif right_side :
			result.append(right_side.pop(0))
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
0
Gpt3D_Clone61_0.py 1 14
Gpt3D_Clone61_0.py 16 27

----------------------------------------

def arePermsEqualParity(perm0, perm1) :
	transCount = 0
	for loc in range(len(perm0) - 1) :
		if perm0 [loc] ! = perm1 [loc] :
			sloc = perm1.index(perm0 [loc])
			perm1 [loc], perm1 [sloc] = perm1 [sloc], perm1 [loc]
			transCount += 1
	if (transCount % 2) == 0 :
		return True
	else :
		return False
----------------------------------------

def arePermsEqualParity(perm0, perm1):
 	transCount = 0
	for (index, elem) in enumerate(perm0):
		if elem != perm1[index]:
			swap_loc = perm1.index(elem)
			perm1[index], perm1[swap_loc] = perm1[swap_loc], perm1[index]
			transCount += 1
	if (transCount % 2) == 0:
		return True
	else:
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
1
Gpt3D_Clone61_1.py 1 14
Gpt3D_Clone61_1.py 16 24

----------------------------------------

def arePermsEqualParity(perm0, perm1) :
	transCount = 0
	for loc in range(len(perm0) - 1) :
		if perm0 [loc] ! = perm1 [loc] :
			sloc = perm1.index(perm0 [loc])
			perm1 [loc], perm1 [sloc] = perm1 [sloc], perm1 [loc]
			transCount += 1
	if (transCount % 2) == 0 :
		return True
	else :
		return False
----------------------------------------

def arePermsEqualParity(perm0, perm1):
	transCount = 0
	for i in range(len(perm0)):
		if perm0[i] != perm1[i]:
			swap_loc = perm1.index(perm0[i])
			perm1[i], perm1[swap_loc] = perm1[swap_loc], perm1[i]  
			transCount += 1
	return (transCount % 2) == 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
621
0
Gpt3D_Clone621_0.py 1 10
Gpt3D_Clone621_0.py 12 23

----------------------------------------

def merge_sort(data) :
	if len(data) == 1 :
		return data
	middle = len(data) / / 2
	left_data = merge_sort(data [: middle])
	right_data = merge_sort(data [middle :])
	return merge(left_data, right_data)
----------------------------------------

def merge_sort(data):
	if len(data) == 1:
		return data
	middle = len(data) // 2
	left_data = data [: middle]
	right_data = data [middle:]
	
	left_data = merge_sort(left_data)
	right_data = merge_sort(right_data)
	
	return merge(left_data, right_data)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
0
Gpt3D_Clone623_0.py 1 25
Gpt3D_Clone623_0.py 27 54

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) // 2
	left = merge_sort(arr[:half])
	right = merge_sort(arr[half:])
	out = []
	li = ri = 0
	while True :
		if li >= len(left) :
			out.extend(right[ri:])
			break
		if ri >= len(right) :
			out.extend(left[li:])
			break
		if left[li] <= right[ri] :
			out.append(left[li])
			li += 1
		elif left[li] > right[ri] :
			out.append(right[ri])
			ri += 1
		elif left[li] == right[ri] :
			out.append(right[ri])
			ri += 1
			out.append(left[li])
			li += 1
	return out
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
1
Gpt3D_Clone623_1.py 1 25
Gpt3D_Clone623_1.py 27 47

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) : 
	if len(arr) < 2 : 
		return arr 
	half = len(arr) / / 2 
	left = merge_sort(arr[:half]) 
	right = merge_sort(arr[half:]) 
	out = [] 
	li = ri = 0 
	while li < len(left) and ri < len(right): 
		if left[li] < right[ri]:
			out.append(left[li])
			li += 1
		else:
			out.append(right[ri])
			ri += 1
	out.extend(arr[li:])
	out.extend(arr[ri:])
	return out
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
2
Gpt3D_Clone623_2.py 1 25
Gpt3D_Clone623_2.py 27 46

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) : 
	if len(arr) < 2 : 
		return arr 
	half = len(arr) / / 2 
	left = merge_sort(arr[:half]) 
	right = merge_sort(arr[half:]) 
	out = [] 
	li = ri = 0 
	while li < len(left) and ri < len(right): 
		if left[li] > right[ri]:
			out.append(right[ri])
			ri += 1
		else:
			out.append(left[li])
			li += 1
	out.extend(left[li:])
	out.extend(right[ri:])
	return out
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
0
Gpt3D_Clone624_0.py 1 25
Gpt3D_Clone624_0.py 27 46

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) : 
	if len(arr) < 2 :
		return arr
	half = len(arr) // 2 
	left = merge_sort(arr[:half])
	right = merge_sort(arr[half:])
	out = []
	li = ri = 0
	while li < len(left) and ri < len(right):
		if left[li] < right[ri]:
			out.append(left[li])
			li += 1 
		else:
			out.append(right[ri])
			ri += 1
	out.extend(left[li:])
	out.extend(right[ri:])
	return out
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
1
Gpt3D_Clone624_1.py 1 25
Gpt3D_Clone624_1.py 27 46

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) : 
	if len(arr) < 2 : 
		return arr
	half = len(arr) // 2 
	left = merge_sort(arr[:half])
	right = merge_sort(arr[half:])
	out = []
	li = ri = 0
	while li < len(left) and ri < len(right):
		if left[li] <= right[ri]:
			out.append(left[li])
			li += 1 
		else:
			out.append(right[ri])
			ri += 1
	out.extend(left[li:])
	out.extend(right[ri:])
	return sorted(out)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
0
Gpt3D_Clone625_0.py 1 25
Gpt3D_Clone625_0.py 27 51

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) // 2
	left = merge_sort(arr[:half])
	right = merge_sort(arr[half:])
	out = []
	li = ri = 0
	while li < len(left) and ri < len(right):
		if li < len(left) and left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	while li < len(left) or ri < len(right):
		if li < len(left) :
			out.extend(left [li:])
			break
		if ri < len(right) :
			out.extend(right [ri:])
			break
			
	return out
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
1
Gpt3D_Clone625_1.py 1 25
Gpt3D_Clone625_1.py 27 45

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) :
	if len(arr) <= 1 :
		return arr
	half = len(arr) // 2
	left = merge_sort(arr[: half])
	right = merge_sort(arr[half :])
	out = []
	i, j = 0, 0
	while i < len(left) and j < len(right):
		if left[i] <= right[j]:
			out.append(left[i])
			i += 1
		else :
			out.append(right[j])
			j += 1
	out += left[i : ]
	out += right[j : ]
	return out
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
2
Gpt3D_Clone625_2.py 1 25
Gpt3D_Clone625_2.py 27 46

----------------------------------------

def merge_sort(arr) :
	if len(arr) < 2 :
		return arr
	half = len(arr) / / 2
	left = merge_sort(arr [: half])
	right = merge_sort(arr [half :])
	out = []
	li = ri = 0
	while True :
		if li > = len(left) :
			out.extend(right [ri :])
			break
		if ri > = len(right) :
			out.extend(left [li :])
			break
		if left [li] < right [ri] :
			out.append(left [li])
			li += 1
		else :
			out.append(right [ri])
			ri += 1
	return out
----------------------------------------

def merge_sort(arr) :
	if len(arr) <= 1 :
		return arr
	half = len(arr) // 2
	left = merge_sort(arr[: half])
	right = merge_sort(arr[half :])
	out = []
	i, j = 0, 0
	while i < len(left) and j < len(right) :
		if left[i] < right[j]:
			out.append(left[i])
			i += 1
		else :
			out.append(right[j])
			j += 1
	out += left[i : ]
	out += right[j : ]
	return out
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
629
0
Gpt3D_Clone629_0.py 1 24
Gpt3D_Clone629_0.py 26 52

----------------------------------------

def merge(a, low, mid, high) :
	l = a [low : mid + 1]
	r = a [mid + 1 : high + 1]
	k = 0; i = 0; j = 0;
	c = [0 for i in range(low, high + 1)]
	while (i < len(l) and j < len(r)) :
		if (l [i] < = r [j]) :
			c [k] = (l [i])
			k += 1
			i += 1
		else :
			c [k] = (r [j])
			j += 1
			k += 1
	while (i < len(l)) :
		c [k] = (l [i])
		k += 1
		i += 1
	while (j < len(r)) :
		c [k] = (r [j])
		k += 1
		j += 1
	a [low : high + 1] = c
----------------------------------------

def merge(arr, left, middle, right) :
	l = arr[left : middle + 1]
	r = arr[middle + 1 : right + 1]
	i = 0
	j = 0
	count = 0
	c = [0 for _ in range(left, right + 1)]
	while (i < len(l) and j < len(r)) :
		if (l[i] <= r[j]) :
			c[count] = l[i]
			i += 1
			count += 1
		else :
			c[count] = r[j]
			j += 1
			count += 1
	while (i < len(l)) :
		c[count] = l[i]
		i += 1
		count += 1
	while (j < len(r)) :
		c[count] = r[j]
		j += 1
		count += 1
	arr[left : right + 1] = c
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
629
1
Gpt3D_Clone629_1.py 1 24
Gpt3D_Clone629_1.py 26 49

----------------------------------------

def merge(a, low, mid, high) :
	l = a [low : mid + 1]
	r = a [mid + 1 : high + 1]
	k = 0; i = 0; j = 0;
	c = [0 for i in range(low, high + 1)]
	while (i < len(l) and j < len(r)) :
		if (l [i] < = r [j]) :
			c [k] = (l [i])
			k += 1
			i += 1
		else :
			c [k] = (r [j])
			j += 1
			k += 1
	while (i < len(l)) :
		c [k] = (l [i])
		k += 1
		i += 1
	while (j < len(r)) :
		c [k] = (r [j])
		k += 1
		j += 1
	a [low : high + 1] = c
----------------------------------------

def merge(arr, left, mid, right) :
	l = arr[left : mid + 1]
	r = arr[mid + 1 : right + 1]
	i = 0
	j = 0
	k = left 
	while (i < len(l) and j < len(r)) :
		if (l[i] <= r[j]) :
			arr[k] = l[i]
			k += 1
			i += 1
		else :
			arr[k] = r[j]
			k += 1
			j += 1
	while (i < len(l)) :
		arr[k] = l[i]
		k += 1
		i += 1
	while (j < len(r)) :
		arr[k] = r[j]
		k += 1
		j += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
0
Gpt3D_Clone630_0.py 1 10
Gpt3D_Clone630_0.py 12 22

----------------------------------------

def merge_sort(sequence) :
	if len(sequence) < 2 :
		return sequence
	mid = len(sequence) / / 2
	left_sequence = merge_sort(sequence [: mid])
	right_sequence = merge_sort(sequence [mid :])
	return merge(left_sequence, right_sequence)
----------------------------------------

def merge_sort(sequence):
	if len(sequence) < 2 :
		return sequence
	start = 0
	midpoint = len(sequence) // 2
	end = len(sequence)
	left_sequence = merge_sort(sequence[start : midpoint])
	right_sequence = merge_sort(sequence[midpoint : end])
	return merge(left_sequence, right_sequence)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
1
Gpt3D_Clone630_1.py 1 10
Gpt3D_Clone630_1.py 12 29

----------------------------------------

def merge_sort(sequence) :
	if len(sequence) < 2 :
		return sequence
	mid = len(sequence) / / 2
	left_sequence = merge_sort(sequence [: mid])
	right_sequence = merge_sort(sequence [mid :])
	return merge(left_sequence, right_sequence)
----------------------------------------

def merge_sort(arr): 
	if len(arr) < 2 :
		return arr
  
	# determine the midpoint of the array
	mid = len(arr) // 2
  
	# split the array into two halves
	left_half = arr[:mid] 
	right_half = arr[mid:] 
  
	# recursively call merge_sort to divide the array
	left_half = merge_sort(left_half) 
	right_half = merge_sort(right_half) 
  
	# return the sorted array after merge operation
	return merge(left_half, right_half)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
634
0
Gpt3D_Clone634_0.py 1 16
Gpt3D_Clone634_0.py 18 31

----------------------------------------

def merge(left, right) :
	result = []
	i = j = 0
	while i < len(left) and j < len(right) :
		if left [i] < right [j] :
			result.append(left [i])
			i += 1
		else :
			result.append(right [j])
			j += 1
	result += left [i :]
	result += right [j :]
	return result
----------------------------------------

def merge(left, right) :
	result = []
	i = j = 0
	while i < len(left) or j < len(right) :
		if j == len(right) or (i < len(left) and left[i] <= right[j]) :
			result.append(left[i])
			i += 1
		else :
			result.append(right[j])
			j += 1
	result.extend(left[i:])
	result.extend(right[j:])
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
634
1
Gpt3D_Clone634_1.py 1 16
Gpt3D_Clone634_1.py 18 29

----------------------------------------

def merge(left, right) :
	result = []
	i = j = 0
	while i < len(left) and j < len(right) :
		if left [i] < right [j] :
			result.append(left [i])
			i += 1
		else :
			result.append(right [j])
			j += 1
	result += left [i :]
	result += right [j :]
	return result
----------------------------------------

def merge(left, right) :
	result = []
	i = j = 0
	while i < len(left) or j < len(right) :
		if j == len(right) or (i < len(left) and left[i] < right[j]) :
			result.append(left [i])
			i += 1
		else :
			result.append(right [j])
			j += 1
	return result + left [i :] + right [j :] 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
0
Gpt3D_Clone637_0.py 1 11
Gpt3D_Clone637_0.py 13 22

----------------------------------------

def mergeSort(L, compare = operator.lt) :
	if len(L) < 2 :
		return L [:]
	else :
		middle = int(len(L) / 2)
		left = mergeSort(L [: middle], compare)
		right = mergeSort(L [middle :], compare)
		return merge(left, right, compare)
----------------------------------------

def mergeSort(L, compare):
	if len(L) < 2:
		return L[:]
	else:
		middle = len(L) // 2
		left = mergeSort(L[:middle], compare)
		right = mergeSort(L[middle:], compare)
		return merge(left, right, compare)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
1
Gpt3D_Clone637_1.py 1 11
Gpt3D_Clone637_1.py 13 21

----------------------------------------

def mergeSort(L, compare = operator.lt) :
	if len(L) < 2 :
		return L [:]
	else :
		middle = int(len(L) / 2)
		left = mergeSort(L [: middle], compare)
		right = mergeSort(L [middle :], compare)
		return merge(left, right, compare)
----------------------------------------

def mergeSort(a, cmp):
	if len(a) < 2:
		return a[:]
	else:
		m = len(a) // 2
		l = mergeSort(a[:m], cmp)
		r = mergeSort(a[m:], cmp)
		return merge(l, r, cmp)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
0
Gpt3D_Clone638_0.py 1 11
Gpt3D_Clone638_0.py 13 22

----------------------------------------

def mergeSort(L, compare = operator.lt) :
	if len(L) < 2 :
		return L [:]
	else :
		middle = int(len(L) / 2)
		left = mergeSort(L [: middle], compare)
		right = mergeSort(L [middle :], compare)
		return merge(left, right, compare)
----------------------------------------

def mergeSort(List, compare = operator.lt): 
	length = len(List) 
	if length < 2: 
		return List[:]
	else: 
		middle = int(length / 2) 
		left = mergeSort(List[: middle], compare) 
		right = mergeSort(List[middle :], compare) 
		return merge(left, right, compare)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
1
Gpt3D_Clone638_1.py 1 11
Gpt3D_Clone638_1.py 13 22

----------------------------------------

def mergeSort(L, compare = operator.lt) :
	if len(L) < 2 :
		return L [:]
	else :
		middle = int(len(L) / 2)
		left = mergeSort(L [: middle], compare)
		right = mergeSort(L [middle :], compare)
		return merge(left, right, compare)
----------------------------------------

def mergeSort(L, compare=operator.lt): 
    if len(L) <= 1: 
        return L[:] 
    else: 
        middle = len(L) // 2
        left = mergeSort(L[:middle], compare)
        right = mergeSort(L[middle:], compare)
        return merge(left, right, compare)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
0
Gpt3D_Clone641_0.py 1 31
Gpt3D_Clone641_0.py 33 60

----------------------------------------

def mergeSort(alist) :
	print ("Splitting ", alist)
	if len(alist) > 1 :
		mid = len(alist) / / 2
		lefthalf = alist [: mid]
		righthalf = alist [mid :]
		mergeSort(lefthalf)
		mergeSort(righthalf)
		i = 0
		j = 0
		k = 0
		while i < len(lefthalf) and j < len(righthalf) :
			if lefthalf [i] < righthalf [j] :
				alist [k] = lefthalf [i]
				i = i + 1
			else :
				alist [k] = righthalf [j]
				j = j + 1
			k = k + 1
		while i < len(lefthalf) :
			alist [k] = lefthalf [i]
			i = i + 1
			k = k + 1
		while j < len(righthalf) :
			alist [k] = righthalf [j]
			j = j + 1
			k = k + 1
	print ("Merging ", alist)
----------------------------------------

def merge_sort(l):
    if len(l) > 1:
        mid = len(l)//2
        left_half = l[:mid]
        right_half = l[mid:]
        merge_sort(left_half)
        merge_sort(right_half)
        i = 0
        j = 0
        k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                l[k] = left_half[i]
                i += 1
            else:
                l[k] = right_half[j]
                j += 1
            k += 1
        while i < len(left_half):
            l[k] = left_half[i]
            i += 1
            k += 1
        while j < len(right_half):
            l[k] = right_half[j]
            j += 1
            k += 1
    print("Merging ", l)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
1
Gpt3D_Clone641_1.py 1 31
Gpt3D_Clone641_1.py 33 61

----------------------------------------

def mergeSort(alist) :
	print ("Splitting ", alist)
	if len(alist) > 1 :
		mid = len(alist) / / 2
		lefthalf = alist [: mid]
		righthalf = alist [mid :]
		mergeSort(lefthalf)
		mergeSort(righthalf)
		i = 0
		j = 0
		k = 0
		while i < len(lefthalf) and j < len(righthalf) :
			if lefthalf [i] < righthalf [j] :
				alist [k] = lefthalf [i]
				i = i + 1
			else :
				alist [k] = righthalf [j]
				j = j + 1
			k = k + 1
		while i < len(lefthalf) :
			alist [k] = lefthalf [i]
			i = i + 1
			k = k + 1
		while j < len(righthalf) :
			alist [k] = righthalf [j]
			j = j + 1
			k = k + 1
	print ("Merging ", alist)
----------------------------------------

def mergeSort(in_list):
    if len(in_list) > 1:
        mid = len(in_list)//2
        lefthalf = in_list[:mid]
        righthalf = in_list[mid:]
        mergeSort(lefthalf)
        mergeSort(righthalf)
        i = 0
        j = 0
        k = 0
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                in_list[k] = lefthalf[i]
                i += 1
            else:
                in_list[k] = righthalf[j]
                j += 1
            k += 1
        while i < len(lefthalf):
            in_list[k] = lefthalf[i]
            i += 1
            k += 1
        while j < len(righthalf):
            in_list[k] = righthalf[j]
            j += 1
            k += 1
    print("Merging ", in_list)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
1
Gpt3D_Clone643_1.py 1 5
Gpt3D_Clone643_1.py 7 12

----------------------------------------

def smart_func(terms) :
	params = []
	for n in range(terms) :
		params.append(2 * n * np.pi)
----------------------------------------

def smart_func(terms) :
	params = []
	for n in range(terms) :
		params.append(2 * n * 3.14159)
	return np.tan(params)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
0
Gpt3D_Clone644_0.py 1 17
Gpt3D_Clone644_0.py 19 36

----------------------------------------

def func(t, freq, offset, * args) :
	an = []
	bn = []
	for i in range(len(args)) :
		if i % 2 == 0 :
			an.append(args [i])
		else :
			bn.append(args [i])
	result = 0
	pairs = zip(an, bn)
	for (q, ab) in zip(params, pairs) :
		ai, bi = ab
		result += ai * np.sin(q * freq * t) + bi * np.cos(q * freq * t)
	return result
----------------------------------------

def func(t, freq, offset, * args) :
	an = []
	bn = []
	for i in range(len(args)) :
		if i % 2 == 0 :
			an.append(args [i])
		else :
			bn.append(args [i])
	result = 0
	num_pairs = int(len(args) / 2)
	for i in range(num_pairs) :
		ai = an[i]
		bi = bn[i]
		q = params[i]
		result += ai * np.sin(q * freq * t) + bi * np.cos(q * freq * t)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
0
Gpt3D_Clone648_0.py 1 11
Gpt3D_Clone648_0.py 13 24

----------------------------------------

def shift_cipher_noloop(plain, i) :
	if (plain == "") :
		return ""
	else :
		if len(plain) > 3 and i > 0 :
			return shift_cipher_noloop(plain [1 :] + plain [0], i - 1)
		else :
			return plain
----------------------------------------

def shift_cipher_noloop(plain, i) :
	if (plain == "") :
		return ""
	for j in range(i):
		if len(plain) > 3 :
			plain = plain[1:] + plain[0]
		else :
			break
	return plain
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
1
Gpt3D_Clone648_1.py 1 11
Gpt3D_Clone648_1.py 13 22

----------------------------------------

def shift_cipher_noloop(plain, i) :
	if (plain == "") :
		return ""
	else :
		if len(plain) > 3 and i > 0 :
			return shift_cipher_noloop(plain [1 :] + plain [0], i - 1)
		else :
			return plain
----------------------------------------

def shift_cipher_noloop(plain, i) :
	if plain != "" :
		if len(plain) > 3 and i > 0 :
			return shift_cipher_noloop(plain [1 :] + plain [0], i - 1)
		else :
			return plain
	else :
		return ""
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
0
Gpt3D_Clone64_0.py 1 14
Gpt3D_Clone64_0.py 16 31

----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	try :
		prev = it.next()
	except StopIteration :
		return True
	for x in it :
		if prev > x :
			return False
		prev = x
	return True
----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	try :
		prev = it.next()
	except StopIteration :
		return True
	while True :
		try : 
			x = it.next()
			if prev > x :
				return False
			prev = x
		except StopIteration :
			break
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
1
Gpt3D_Clone64_1.py 1 14
Gpt3D_Clone64_1.py 16 24

----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	try :
		prev = it.next()
	except StopIteration :
		return True
	for x in it :
		if prev > x :
			return False
		prev = x
	return True
----------------------------------------

def is_sorted(lst) :
	it = iter(lst)
	prev = it.next()
	for x in it :
		if prev > x :
			return False
		prev = x
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
650
0
Gpt3D_Clone650_0.py 1 14
Gpt3D_Clone650_0.py 16 25

----------------------------------------

def __init__(self) :
	super().__init__()
	self.label = QLabel("0")
	self.obj = worker.Worker()
	self.thread = QThread()
	self.obj.intReady.connect(self.onIntReady)
	self.obj.moveToThread(self.thread)
	self.obj.finished.connect(self.thread.quit)
	self.thread.started.connect(self.obj.procCounter)
	self.thread.start()
	self.initUI()
----------------------------------------

def __init__(self) :
	super().__init__()
	self.label = QLabel("0")
	self.obj = worker.Worker()
	self.thread = QThread()
	self.obj.intReady.connect(self.onIntReady)
	self.obj.moveToThread(self.thread)
	self.initUI()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
650
1
Gpt3D_Clone650_1.py 1 14
Gpt3D_Clone650_1.py 16 22

----------------------------------------

def __init__(self) :
	super().__init__()
	self.label = QLabel("0")
	self.obj = worker.Worker()
	self.thread = QThread()
	self.obj.intReady.connect(self.onIntReady)
	self.obj.moveToThread(self.thread)
	self.obj.finished.connect(self.thread.quit)
	self.thread.started.connect(self.obj.procCounter)
	self.thread.start()
	self.initUI()
----------------------------------------

def executeTask(self):
	self.obj.intReady.connect(self.onIntReady)
	self.obj.moveToThread(self.thread)
	self.obj.finished.connect(self.thread.quit)
	self.thread.started.connect(self.obj.procCounter)
	self.thread.start()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
650
2
Gpt3D_Clone650_2.py 1 14
Gpt3D_Clone650_2.py 16 24

----------------------------------------

def __init__(self) :
	super().__init__()
	self.label = QLabel("0")
	self.obj = worker.Worker()
	self.thread = QThread()
	self.obj.intReady.connect(self.onIntReady)
	self.obj.moveToThread(self.thread)
	self.obj.finished.connect(self.thread.quit)
	self.thread.started.connect(self.obj.procCounter)
	self.thread.start()
	self.initUI()
----------------------------------------

def __init__(self) :
	super().__init__()
	self.label = QLabel("0")
	self.obj = worker.Worker()
	self.thread = QThread()
	
	self.initUI()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
652
0
Gpt3D_Clone652_0.py 1 22
Gpt3D_Clone652_0.py 24 44

----------------------------------------

def my_txt(text, target) :
	count = 0
	last_was_space = False
	start = end = 0
	for index, letter in enumerate(text) :
		if letter.isspace() :
			if not last_was_space :
				end = index
			last_was_space = True
		elif last_was_space :
			last_was_space = False
			count += 1
			if count > target :
				return text [start : end]
			elif count == target :
				start = index
	if count == target :
		return text [start :].strip()
	raise ValueError("Word not found")
----------------------------------------

def my_txt(text, target) :
	count = 0
	start = end = 0
	last_was_space = False
	for index, letter in enumerate(text) :
		if letter.isspace() :
			if not last_was_space :
				end = index
			last_was_space = True
		else:
			if last_was_space :
				count += 1
				if count > target :
					return text [start : end]
				elif count == target :
					start = index
			last_was_space = False
	if count == target :
		return text [start : end-1].strip()
	raise ValueError("Word not found")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
652
1
Gpt3D_Clone652_1.py 1 22
Gpt3D_Clone652_1.py 24 44

----------------------------------------

def my_txt(text, target) :
	count = 0
	last_was_space = False
	start = end = 0
	for index, letter in enumerate(text) :
		if letter.isspace() :
			if not last_was_space :
				end = index
			last_was_space = True
		elif last_was_space :
			last_was_space = False
			count += 1
			if count > target :
				return text [start : end]
			elif count == target :
				start = index
	if count == target :
		return text [start :].strip()
	raise ValueError("Word not found")
----------------------------------------

def my_txt(text, target) :
	count = 0
	last_was_space = False
	start = end = 0
	for index, letter in enumerate(text) :
		if not letter.isspace() :
			if last_was_space :
				count += 1
				if count > target :
					return text [start : end]
				elif count == target :
					start = index
			last_was_space = False
		elif not last_was_space :
			end = index
			last_was_space = True
	if count == target :
		return text [start :].strip()
	raise ValueError("Word not found") 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
653
2
Gpt3D_Clone653_2.py 1 9
Gpt3D_Clone653_2.py 11 17

----------------------------------------

def sum_even(a, b) :
	if (a % 2 == 1) :
		a += 1
	if (b % 2 == 1) :
		b -= 1
	return a * (0.5 - 0.25 * a) + b * (0.25 * b + 0.5)
----------------------------------------

def sum_even(a, b) :
	if (a % 2 == 1) :
		a += 1
	if (b % 2 == 1) :
		b += 1
	return a * (0.25 * a + 0.5) + b * (0.5 - 0.25 * b)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
654
2
Gpt3D_Clone654_2.py 1 9
Gpt3D_Clone654_2.py 11 17

----------------------------------------

def sum_even(a, b) :
	count = 0
	for i in range(a, b, 1) :
		if (i % 2 == 0) :
			count += i
	return count
----------------------------------------

def sum_even(a, b) :
	total = 0
	for i in range(a, b + 1):
		if i % 2 == 0:
			total += i
	return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
654
3
Gpt3D_Clone654_3.py 1 9
Gpt3D_Clone654_3.py 11 17

----------------------------------------

def sum_even(a, b) :
	count = 0
	for i in range(a, b, 1) :
		if (i % 2 == 0) :
			count += i
	return count
----------------------------------------

def sum_even(a, b) :
	count = 0
	for i in range(a, b+1, 1) :
		if not i % 2 :
			count += i
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
0
Gpt3D_Clone660_0.py 1 9
Gpt3D_Clone660_0.py 11 17

----------------------------------------

def decrypt(string, password) :
	key = password_to_key(password)
	IV = string [: AES.block_size]
	decryptor = AES.new(key, AES.MODE_CBC, IV)
	string = decryptor.decrypt(string [AES.block_size :])
	return unpad_string(string)
----------------------------------------

def decrypt(string, password):
	key = password_to_key(password)
	IV = string [AES.block_size:]
	decryptor = AES.new(key, AES.MODE_CBC, IV)
	string = decryptor.decrypt(string[:AES.block_size])
	return unpad_string(string)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
1
Gpt3D_Clone660_1.py 1 9
Gpt3D_Clone660_1.py 11 17

----------------------------------------

def decrypt(string, password) :
	key = password_to_key(password)
	IV = string [: AES.block_size]
	decryptor = AES.new(key, AES.MODE_CBC, IV)
	string = decryptor.decrypt(string [AES.block_size :])
	return unpad_string(string)
----------------------------------------

def decrypt(string, password):
	key = password_to_key(password)
	IV = string [AES.block_size:]
	decryptor = AES.new(key, AES.MODE_CFB, IV)
	string = decryptor.decrypt(string[:AES.block_size])
	return unpad_string(string)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
0
Gpt3D_Clone664_0.py 1 12
Gpt3D_Clone664_0.py 14 45

----------------------------------------

def list_routes() :
	import urllib
	output = []
	for rule in app.url_map.iter_rules() :
		methods = ','.join(rule.methods)
		line = urllib.unquote("{:50s} {:20s} {}".format(rule.endpoint, methods, rule))
		output.append(line)
	for line in sorted(output) :
		print (line)
----------------------------------------

def list_routes() :
	import urllib2
	output = []
	for rule in app.url_map.iter_rules() :
		methods = set()
		for method in rule.methods :
			methods.add(method)
		method_string = ','.join(methods)
		line = urllib2.unquote("{:50s} {:20s} {}".format(rule.endpoint, method_string, rule))
		output.append(line)
	for line in sorted(output, reverse = True) :
		print (line)
# Type 3
import urllib
output = []
for rule in app.url_map.iter_rules() :
	item = (rule.endpoint, ','.join(rule.methods), urllib.unquote(rule))
	output.append(item)
for line in sorted(output) :
	print ("{:50s} {:20s} {}".format(*line))
# Type 4
import urllib
output = []
for rule in app.url_map.iter_rules() :
	item = (rule.endpoint, ','.join(rule.methods), urllib.unquote(rule))
	output.append(item)
output.sort()
for item in output :
	print ("{:50s} {:20s} {}".format(*item))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
1
Gpt3D_Clone664_1.py 1 12
Gpt3D_Clone664_1.py 14 27

----------------------------------------

def list_routes() :
	import urllib
	output = []
	for rule in app.url_map.iter_rules() :
		methods = ','.join(rule.methods)
		line = urllib.unquote("{:50s} {:20s} {}".format(rule.endpoint, methods, rule))
		output.append(line)
	for line in sorted(output) :
		print (line)
----------------------------------------

def list_routes() :
	import urllib
	output = []
	for rule in app.url_map.iter_rules() :
		methods = set()
		for method in rule.methods :
			methods.add(method)
		method_string = ','.join(methods)
		line = urllib.unquote("{:50s} {:20s} {}".format(rule.endpoint, method_string, rule))
		output.append(line)
	for line in sorted(output) :
		print (line)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
1
Gpt3D_Clone667_1.py 1 12
Gpt3D_Clone667_1.py 14 29

----------------------------------------

def pascal(n) :
	array = [None for y in range(n)]
	row = [1]
	array [0] = row
	k = [0]
	for x in range(max(n, 0) - 1) :
		row = [l + r for l, r in zip(row + k, k + row)]
		array [x + 1] = row
	return array
----------------------------------------

def pascal3(n): 
    array = [None for y in range(n)] 
    row = [1] 
    array[0] = row 
    k = [0] 
    for x in range(max(n, 0) - 1): 
        new_row = [] 
        for i in range(len(row) + 1): 
            left = row[i - 1] if i > 0 else 0 
            right = row[i] if i < len(row) else 0 
            new_row.append(left + right) 
        row = new_row 
        array[x + 1] = row 
    return array 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
2
Gpt3D_Clone667_2.py 1 12
Gpt3D_Clone667_2.py 14 23

----------------------------------------

def pascal(n) :
	array = [None for y in range(n)]
	row = [1]
	array [0] = row
	k = [0]
	for x in range(max(n, 0) - 1) :
		row = [l + r for l, r in zip(row + k, k + row)]
		array [x + 1] = row
	return array
----------------------------------------

def pascal(n):
	array = []
	row = [1]
	array.append(row)
	k = [0]
	for x in range(max(n, 0) - 1):
		row = [sum(x) for x in zip(row + k, k + row)]
		array.append(row)
	return array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
668
0
Gpt3D_Clone668_0.py 1 14
Gpt3D_Clone668_0.py 16 26

----------------------------------------

def onselect(evt) :
	w = evt.widget
	x = 0
	index = int(w.curselection() [0])
	value = w.get(index)
	print ('You selected item %d: "%s"' % (index, value))
	for y in enable :
		for item in list_for_listbox :
			globals() ["checkbox{}{}".format(item, y)].place_forget()
		globals() ["checkbox{}{}".format(value, y)].place(x = 300, y = 0 + x)
		x += 50
----------------------------------------

def onselect(evt) :
	w = evt.widget
	index = int(w.curselection() [0])
	value = w.get(index)
	print ('You selected item %d: "%s"' % (index, value))
	for y in enable :
		for item in list_for_listbox :
			globals() ["checkbox{}{}".format(item, y)].place_forget()
		globals() ["checkbox{}{}".format(value, y)].place(x = 0, y = 50 * y)
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
670
0
Gpt3D_Clone670_0.py 1 10
Gpt3D_Clone670_0.py 12 23

----------------------------------------

def a(name) :
	global_variables = globals()
	try :
		name_of_passed_in_variable = [x for x in global_variables if id(global_variables [x]) == id(name)] [0]
	except Exception :
		name_of_passed_in_variable = "unknown"
	print name_of_passed_in_variable, name
----------------------------------------

def c(name) :
	global_variables = globals()
	try :
		name_of_passed_in_variable = [x for x in global_variables if id(global_variables [x]) == id(name)]
		if name_of_passed_in_variable :
			name_of_passed_in_variable = name_of_passed_in_variable[0]
		else :
			name_of_passed_in_variable = "unknown"
	except Exception :
		name_of_passed_in_variable = "unknown"
	print name_of_passed_in_variable, name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
670
1
Gpt3D_Clone670_1.py 1 10
Gpt3D_Clone670_1.py 12 20

----------------------------------------

def a(name) :
	global_variables = globals()
	try :
		name_of_passed_in_variable = [x for x in global_variables if id(global_variables [x]) == id(name)] [0]
	except Exception :
		name_of_passed_in_variable = "unknown"
	print name_of_passed_in_variable, name
----------------------------------------

def a_clone_3(name):
	global_variables = globals()
	try:
		name_of_passed_in_variable = [x for x in global_variables.values() if id(x) == id(name)][0]
	except Exception:
		name_of_passed_in_variable = "unknown"
	print(name_of_passed_in_variable, name)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
670
2
Gpt3D_Clone670_2.py 1 10
Gpt3D_Clone670_2.py 12 19

----------------------------------------

def a(name) :
	global_variables = globals()
	try :
		name_of_passed_in_variable = [x for x in global_variables if id(global_variables [x]) == id(name)] [0]
	except Exception :
		name_of_passed_in_variable = "unknown"
	print name_of_passed_in_variable, name
----------------------------------------

def a_clone_4(name):
	global_variables = globals()
	try:
		name_of_passed_in_variable = [key for key, value in global_variables.items() if id(value) == id(name)][0]
	except Exception:
		name_of_passed_in_variable = "unknown"
	print(name_of_passed_in_variable, name)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
0
Gpt3D_Clone673_0.py 1 14
Gpt3D_Clone673_0.py 16 28

----------------------------------------

def __init__(self, t) :
	self.i = Tkinter.PhotoImage(width = 100, height = 100)
	colors = [[random.randint(0, 255) for i in range(0, 3)] for j in range(0, 10000)]
	row = 0; col = 0
	for color in colors :
		self.i.put('#%02x%02x%02x' % tuple(color), (row, col))
		col += 1
		if col == 100 :
			row += 1; col = 0
	c = Tkinter.Canvas(t, width = 100, height = 100); c.pack()
	c.create_image(0, 0, image = self.i, anchor = Tkinter.NW)
----------------------------------------

def __init__(self, t) :
	self.i = Tkinter.PhotoImage(width = 100, height = 100)
	colors = [[random.randint(0, 255) for i in range(0, 3)] for j in range(0, 10000)]
	row, col = 0, 0
	for _ in range(0, 10000):
		color = colors[row*col]
		self.i.put('#%02x%02x%02x' % tuple(color), (row, col))
		col += 1
		if col == 100:
			row += 1; col = 0
	c = Tkinter.Canvas(t, width = 100, height = 100); c.pack()
	c.create_image(0, 0, image = self.i, anchor = Tkinter.NW)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
1
Gpt3D_Clone673_1.py 1 14
Gpt3D_Clone673_1.py 16 25

----------------------------------------

def __init__(self, t) :
	self.i = Tkinter.PhotoImage(width = 100, height = 100)
	colors = [[random.randint(0, 255) for i in range(0, 3)] for j in range(0, 10000)]
	row = 0; col = 0
	for color in colors :
		self.i.put('#%02x%02x%02x' % tuple(color), (row, col))
		col += 1
		if col == 100 :
			row += 1; col = 0
	c = Tkinter.Canvas(t, width = 100, height = 100); c.pack()
	c.create_image(0, 0, image = self.i, anchor = Tkinter.NW)
----------------------------------------

def __init__(self, t) :
	self.i = Tkinter.PhotoImage(width = 100, height = 100)
	colors = [[random.randint(0, 255) for i in range(0, 3)] for j in range(0, 10000)]
	for row in range(0, 100):
		for col in range(0, 100):
			color = colors[row*col]
			self.i.put('#%02x%02x%02x' % tuple(color), (row, col))
	c = Tkinter.Canvas(t, width = 100, height = 100); c.pack()
	c.create_image(0, 0, image = self.i, anchor = Tkinter.NW)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
0
Gpt3D_Clone675_0.py 1 13
Gpt3D_Clone675_0.py 15 27

----------------------------------------

def char_first_index(s, c) :
	if len_rec(s) == 0 :
		return None
	if s [0] == c :
		return 0
	answer = char_first_index(s [1 :], c)
	if answer is not None :
		return 1 + answer
	else :
		return answer
----------------------------------------

def char_first_index(s, c) :
	if len_rec(s) is 0 :
		return None 
	elif s[0] is c : 
		return 0
	else : 
		answer = char_first_index(s[1:], c)
		if answer is not None : 
			return 1 + answer
		else : 
			return answer
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
0
Gpt3D_Clone676_0.py 1 9
Gpt3D_Clone676_0.py 11 19

----------------------------------------

def char_first_index(s, c, index = 0) :
	if len(s) == index :
		return None
	if s [index] == c :
		return index
	return char_first_index(s, c, index + 1)
----------------------------------------

def char_first_index2(s, c, index = 0) :
	if len(s) == index :
		return None
	if s.count(c) > 0:
		for i in range(index, len(s)):
			if s[i] == c:
				return i
	return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
1
Gpt3D_Clone676_1.py 1 9
Gpt3D_Clone676_1.py 11 19

----------------------------------------

def char_first_index(s, c, index = 0) :
	if len(s) == index :
		return None
	if s [index] == c :
		return index
	return char_first_index(s, c, index + 1)
----------------------------------------

def char_first_index3(s, c, index = 0) :
	if len(s) == index :
		return None
	if s.find(c) > -1:
		for i in range(index, len(s)):
			if s[i] == c:
				return i
	return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
677
0
Gpt3D_Clone677_0.py 1 9
Gpt3D_Clone677_0.py 11 17

----------------------------------------

def plotPerfect(df, spline) :
	ax = df.plot()
	if not spline :
		for i in ['top', 'right', 'bottom', 'left'] :
			ax.spines [i].set_visible(False)
	return (ax)
----------------------------------------

def plotPerfect(df, spline):
	ax = df.plot()
	if spline == False:
		for i in ['top', 'right', 'bottom', 'left']:
			ax.spines[i].set_visible(False)
	return ax
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
677
1
Gpt3D_Clone677_1.py 1 9
Gpt3D_Clone677_1.py 11 16

----------------------------------------

def plotPerfect(df, spline) :
	ax = df.plot()
	if not spline :
		for i in ['top', 'right', 'bottom', 'left'] :
			ax.spines [i].set_visible(False)
	return (ax)
----------------------------------------

def plotPerfect(df, spline) :
        ax = df.plot()
	if not spline :
		[ax.spines[position].set_visible(False) for position in ['top', 'right', 'bottom', 'left']]
	return(ax)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
677
2
Gpt3D_Clone677_2.py 1 9
Gpt3D_Clone677_2.py 11 17

----------------------------------------

def plotPerfect(df, spline) :
	ax = df.plot()
	if not spline :
		for i in ['top', 'right', 'bottom', 'left'] :
			ax.spines [i].set_visible(False)
	return (ax)
----------------------------------------

def plotPerfect(df, spline) :
	ax = df.plot()
	if not spline :
		[ax.spines[x].set_visible(False) for x in ['top', 'right', 'bottom', 'left']]
	return(ax)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
0
Gpt3D_Clone678_0.py 1 9
Gpt3D_Clone678_0.py 11 20

----------------------------------------

def modify_duplicates_ordered(original) :
	result = []
	for val in original :
		while val in result :
			val += 0.0001
		result.append(val)
----------------------------------------

def modify_duplicates_ordered_type3(original) :
	result = []
	for val in original :
		if val in result :
			temp_val = val
			while temp_val in result :
				temp_val += 0.0001
			val = temp_val
		result.append(val)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
1
Gpt3D_Clone679_1.py 1 11
Gpt3D_Clone679_1.py 13 27

----------------------------------------

def two_pair(ranks) :
	newlist = []
	for i in set(ranks) :
		if ranks.count(i) == 2 :
			newlist.append(i)
	newlist.sort(reverse = True)
	newlist = tuple(newlist)
	return None if newlist == () else newlist
----------------------------------------

def two_pair(ranks) :
	newlist = []
	count = 0
	for i in set(ranks) :
                if ranks.count(i) == 2 :
			newlist.append(i)
			count += 1
	if count > 0:
		newlist.sort(reverse = True)
		newlist = tuple(newlist)
		return newlist
	else:
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
2
Gpt3D_Clone679_2.py 1 11
Gpt3D_Clone679_2.py 13 24

----------------------------------------

def two_pair(ranks) :
	newlist = []
	for i in set(ranks) :
		if ranks.count(i) == 2 :
			newlist.append(i)
	newlist.sort(reverse = True)
	newlist = tuple(newlist)
	return None if newlist == () else newlist
----------------------------------------

def two_pair(ranks):
  result_list = []
  for item in set(ranks):
    if ranks.count(item) == 2:
      result_list.append(item)
  result_list.reverse()
  result_tuple = tuple(result_list)
  if len(result_tuple) == 0:
    return None
  else:
    return result_tuple
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
0
Gpt3D_Clone681_0.py 1 12
Gpt3D_Clone681_0.py 14 28

----------------------------------------

def getPrint(thefun, * a, ** k) :
	savstdout = sys.stdout
	sys.stdout = cStringIO.StringIO()
	try :
		thefun(* a, ** k)
	finally :
		v = sys.stdout.getvalue()
		sys.stdout = savstdout
	return v
----------------------------------------

def getPrint4(thefun, * args, ** kwargs) :
	"""Function to save the output of a function to a variable"""
	stdout = sys.stdout  #stores sys.stdout in stdout
	saved_stdout = cStringIO.StringIO()  #creates a StringIO instance
	sys.stdout = saved_stdout  #replaces sys.stdout with saved_stdout
	try :
		thefun(* args, ** kwargs)  #calls passed function with parameters
	finally :
		v = saved_stdout.getvalue()  #stores output from StringIO instance in v
		sys.stdout = stdout  #restores sys.stdout to original instance
	return v
#Type 3
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
0
Gpt3D_Clone682_0.py 1 15
Gpt3D_Clone682_0.py 17 32

----------------------------------------

def find_longest_path(graph, start) :
	cache = {}
	maxlen = find_longest_path_rec(graph, start, cache)
	path = [start]
	for i in range(maxlen - 1, 0, - 1) :
		for node in graph [path [- 1]] :
			if cache [node] == i :
				path.append(node)
				break
		else :
			assert (0)
	return path
----------------------------------------

def find_longest_path(graph, start):
    cache = {}
    maxlen = find_longest_path_rec(graph, start, cache)
    path = [start]
    for i in range(maxlen - 1, 0, -1):
        for node in graph[path[-1]]:
            if cache[node] == i:
                path.append(node)
                break
        else:
            if len(path) == maxlen:
                return path
            else:
                raise Exception("No valid path found!")
    return path
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
0
Gpt3D_Clone684_0.py 1 14
Gpt3D_Clone684_0.py 16 30

----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	for items in soup.select("ul.list-unstyled") :
		try :
			phone = items.select_one("a[href^='tel:']").text
		except :
			continue
		else :
			print (title, phone)
			break
----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	found = False
	for items in soup.select("ul.list-unstyled") :
		try :
			found = True
			phone = items.select_one("a[href^='tel:']").text
		except :
			continue
		else :
			break
	if found:
		print(title, phone)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
0
Gpt3D_Clone685_0.py 1 13
Gpt3D_Clone685_0.py 15 26

----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	for items in soup.select("ul.list-unstyled") :
		if len(items.select("a[href^='tel:']")) :
			phone = items.select("a[href^='tel:']") [0].text
			break
		else :
			phone = "N/A"
	print (title, phone)
----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	for items in soup.select("ul.list-unstyled") :
		phone_element = items.select("a[href^='tel:']")
		if len(phone_element) :
			phone = phone_element[0].text
			break
		else :
			phone = "N/A"
	print (title, phone)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
2
Gpt3D_Clone685_2.py 1 13
Gpt3D_Clone685_2.py 15 25

----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	for items in soup.select("ul.list-unstyled") :
		if len(items.select("a[href^='tel:']")) :
			phone = items.select("a[href^='tel:']") [0].text
			break
		else :
			phone = "N/A"
	print (title, phone)
----------------------------------------

def get_info(session, title, url) :
	r = session.get(url)
	soup = BeautifulSoup(r.text, "lxml")
	phone_element = soup.select("ul.list-unstyled a[href^='tel:']")
	if len(phone_element) :
		phone = phone_element[0].text
	else :
		phone = "N/A"
	print (title, phone)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
686
0
Gpt3D_Clone686_0.py 1 9
Gpt3D_Clone686_0.py 11 18

----------------------------------------

def foo(thing = None, thing_seq = None) :
	if thing_seq is not None :
		for _thing in thing_seq :
			foo(thing = _thing)
	if thing is not None :
		print "did foo with", thing
----------------------------------------

def foo(thing = None, thing_seq = None): 
	if thing is None:
		if thing_seq is not None:
			for _thing in thing_seq:
				foo(thing=_thing)
			return
	print "did foo with", thing
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
686
1
Gpt3D_Clone686_1.py 1 9
Gpt3D_Clone686_1.py 11 18

----------------------------------------

def foo(thing = None, thing_seq = None) :
	if thing_seq is not None :
		for _thing in thing_seq :
			foo(thing = _thing)
	if thing is not None :
		print "did foo with", thing
----------------------------------------

def foo(thing = None, thing_seq = None):
	if thing_seq is None:
		if thing is not None:
			print "did foo with", thing
		return
	for _thing in thing_seq:
		foo(thing=_thing)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
686
2
Gpt3D_Clone686_2.py 1 9
Gpt3D_Clone686_2.py 11 18

----------------------------------------

def foo(thing = None, thing_seq = None) :
	if thing_seq is not None :
		for _thing in thing_seq :
			foo(thing = _thing)
	if thing is not None :
		print "did foo with", thing
----------------------------------------

def foo(thing = None, thing_seq = None) :
	if thing is not None :
		print "did foo with", thing
	if thing_seq is not None :
		for _thing in thing_seq :
			foo(thing = _thing)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
0
Gpt3D_Clone687_0.py 1 12
Gpt3D_Clone687_0.py 14 27

----------------------------------------

def __setattr__(self, name, value) :
	if name in ("_proxy", "collection") :
		object.__setattr__(self, name, value)
	else :
		proxied = self._proxy
		collection = self._collection
		old = getattr(proxied, name)
		setattr(proxy, name, value)
		collection.signal_change(proxied, name, old, value)
----------------------------------------

def __setattr___v2(self, name, value) :
	if name in ("_proxy", "collection") :
		object.__setattr__(self, name, value)
	else :
		proxied = self._proxy
		collection = self._collection
		try:
			old = getattr(proxied, name)
			setattr(proxy, name, value)
			collection.signal_change(proxied, name, old, value)
		except AttributeError:
			return
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
0
Gpt3D_Clone688_0.py 1 10
Gpt3D_Clone688_0.py 12 24

----------------------------------------

def go(iterable) :
	itr = iter(iterable)
	try :
		next(num for num in itr if num % 2 == 1)
		return next(i for i, num in enumerate(itr, 1) if num % 2 == 0)
	except StopIteration :
		return - 1
----------------------------------------

def go(iterable):
  itr = iter(iterable)
  flag = False
  try:
    next(num for num in itr if num % 3 == 0)
    flag = True
    return next(i for i, num in enumerate(itr, 1) if num % 2 == 0)
  except StopIteration:
    if not flag:
      return -1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
1
Gpt3D_Clone690_1.py 1 8
Gpt3D_Clone690_1.py 10 16

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored_4(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for badWord in bad_words :
			numAstrisks = len(badWord)
			sentence = sentence.replace(badWord, '*' * numAstrisks)
	return sentence
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
692
1
Gpt3D_Clone692_1.py 1 8
Gpt3D_Clone692_1.py 10 17

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :  
	formatted_sentence = sentence  
	if bad_words != None :  
		for word in bad_words :  
			formatted_sentence = formatted_sentence.replace(word, '*' * len(word))  
	return formatted_sentence
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
692
3
Gpt3D_Clone692_3.py 1 8
Gpt3D_Clone692_3.py 10 16

----------------------------------------

def censored(sentence, bad_words = EXCLUDED_WORDS) :
	if bad_words :
		for word in bad_words :
			sentence = sentence.replace(word, '*' * len(word))
	return sentence
----------------------------------------

def censored(text, bad_words = EXCLUDED_WORDS) :  
	edited_text = text  
	if bad_words != None :  
		for word in bad_words :  
			edited_text = edited_text.replace(word, '*' * len(word))  
	return edited_text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
0
Gpt3D_Clone693_0.py 1 14
Gpt3D_Clone693_0.py 16 28

----------------------------------------

def find_items_within(list1, list2, within) :
	i2_idx = 0
	shared = []
	for i1 in list1 :
		while shared and abs(shared [0] - i1) > within :
			shared.pop(0)
		while i2_idx < len(list2) and abs(list2 [i2_idx] - i1) < = within :
			shared.append(list2 [i2_idx])
			i2_idx += 1
		for result in zip([i1] * len(shared), shared) :
			yield result
----------------------------------------

def find_items_within_3(list1, list2, within):
	i2_idx = 0
	shared = []
	for i1 in list1:
		shared = []
		i2_idx = 0
		while abs(list2[i2_idx] - i1) <= within:
			shared.append(list2[i2_idx])
			i2_idx += 1
		for result in zip([i1] * len(shared), shared):
			yield result	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
1
Gpt3D_Clone693_1.py 1 14
Gpt3D_Clone693_1.py 16 25

----------------------------------------

def find_items_within(list1, list2, within) :
	i2_idx = 0
	shared = []
	for i1 in list1 :
		while shared and abs(shared [0] - i1) > within :
			shared.pop(0)
		while i2_idx < len(list2) and abs(list2 [i2_idx] - i1) < = within :
			shared.append(list2 [i2_idx])
			i2_idx += 1
		for result in zip([i1] * len(shared), shared) :
			yield result
----------------------------------------

def find_items_within_4(list1, list2, within):
	shared = []
	for i1 in list1:
		i2_idx = 0
		while i2_idx < len(list2) and abs(list2[i2_idx] - i1) <= within:
			shared.append(list2[i2_idx])
			i2_idx += 1
		for result in zip([i1] * len(shared), shared):
			yield result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
694
0
Gpt3D_Clone694_0.py 1 13
Gpt3D_Clone694_0.py 15 26

----------------------------------------

def __init__(self) :
	tk.Tk.__init__(self)
	self.queue = queue.Queue()
	self.listbox = tk.Listbox(self, width = 20, height = 5)
	self.progressbar = ttk.Progressbar(self, orient = 'horizontal',
	length = 300, mode = 'determinate')
	self.button = tk.Button(self, text = "Start", command = self.spawnthread)
	self.listbox.pack(padx = 10, pady = 10)
	self.progressbar.pack(padx = 10, pady = 10)
	self.button.pack(padx = 10, pady = 10)
----------------------------------------

def __init__(self) :
	tk.Tk.__init__(self)
	self.queue = queue.Queue()
	self.listbox = tk.Listbox(self, width = 20, height = 5)
	self.progressbar = ttk.Progressbar(self, orient = 'horizontal',
	length = 300, mode = 'determinate')
	self.button = tk.Button(self, text = "Start", command = self.spawnthread)
	self.listbox.place(x = 10, y = 10, relwidth = 1, relheight = 0.33)
	self.progressbar.place(x = 10, y = 30, relwidth = 1, relheight = 0.33)
	self.button.place(x = 10, y = 50, relwidth = 1, relheight = 0.33)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
694
1
Gpt3D_Clone694_1.py 1 13
Gpt3D_Clone694_1.py 15 25

----------------------------------------

def __init__(self) :
	tk.Tk.__init__(self)
	self.queue = queue.Queue()
	self.listbox = tk.Listbox(self, width = 20, height = 5)
	self.progressbar = ttk.Progressbar(self, orient = 'horizontal',
	length = 300, mode = 'determinate')
	self.button = tk.Button(self, text = "Start", command = self.spawnthread)
	self.listbox.pack(padx = 10, pady = 10)
	self.progressbar.pack(padx = 10, pady = 10)
	self.button.pack(padx = 10, pady = 10)
----------------------------------------

def __init__(self) :
	tk.Tk.__init__(self)
	self.queue = queue.Queue()
	self.listbox = tk.Listbox(self, width = 20, height = 5)
	self.listbox.grid(row = 0, column = 0, rowspan = 3, padx = 10, pady = 10)
	self.progressbar = ttk.Progressbar(self, orient = 'horizontal',
	length = 300, mode = 'determinate')
	self.progressbar.grid(row = 0, column = 1, rowspan = 1,  padx = 10, pady = 10)
	self.button = tk.Button(self, text = "Start", command = self.spawnthread)
	self.button.grid(row = 3, column = 1, rowspan = 0,  padx = 10, pady = 10)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
2
Gpt3D_Clone696_2.py 1 8
Gpt3D_Clone696_2.py 10 16

----------------------------------------

def sublistExists(list, sublist) :
	for i in range(len(list) - len(sublist) + 1) :
		if sublist == list [i : i + len(sublist)] :
			return True
	return False
----------------------------------------

def sublistExists(list, sublist) : 
	for i in range(0, len(list) - len(sublist) + 1) : 
		if sublist == list[i : i + len(sublist) + 1] : 
			return True 
	return False 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
0
Gpt3D_Clone698_0.py 1 11
Gpt3D_Clone698_0.py 13 21

----------------------------------------

def biggest() :
	big_x, big_y, max_seen = 0, 0, 0
	for x in xrange(999, 99, - 1) :
		for y in xrange(x, 99, - 1) :
			if x * y < max_seen : continue
			if is_palindrome(x * y) :
				big_x, big_y, max_seen = x, y, x * y
	return big_x, big_y, max_seen
----------------------------------------

def biggest() :
	big_x, big_y, max_seen = 0, 0, 0
	for x in reversed(range(99, 1000)) :
		for y in reversed(range(x, 99)) :
			if x * y <= max_seen : continue
			if is_palindrome(x * y) :
				big_x, big_y, max_seen = x, y, x * y
	return big_x, big_y, max_seen
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
1
Gpt3D_Clone698_1.py 1 11
Gpt3D_Clone698_1.py 13 21

----------------------------------------

def biggest() :
	big_x, big_y, max_seen = 0, 0, 0
	for x in xrange(999, 99, - 1) :
		for y in xrange(x, 99, - 1) :
			if x * y < max_seen : continue
			if is_palindrome(x * y) :
				big_x, big_y, max_seen = x, y, x * y
	return big_x, big_y, max_seen
----------------------------------------

def greatest() :
	big_x, big_y, max_seen = 0, 0, 0
	for x in reversed(range(99, 999)) :
		for y in reversed(range(x, 99)) :
			if x * y < max_seen : continue
			if is_palindrome(x * y) :
				big_x, big_y, max_seen = x, y, x * y
	return big_x, big_y, max_seen
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
699
0
Gpt3D_Clone699_0.py 1 10
Gpt3D_Clone699_0.py 12 20

----------------------------------------

def tone(self, frequency, length = 1000, play = False, ** kwargs) :
	number_of_frames = int(self.bitrate * length / 1000.)
	phInc = 2 * math.pi * frequency / self.bitrate
	for x in xrange(number_of_frames) :
		y = math.sin(self._phase)
		_phase += phaseInc;
		self._queue.append(chr(int(y)))
----------------------------------------

def tone(self, frequency, length = 1000, play = False, ** kwargs) :
	number_of_frames = int(self.bitrate * length / 1000.)
	pInc = 2 * math.sin(math.pi * frequency / self.bitrate)
	for x in xrange(number_of_frames) :
		z = math.sin(self._phase)
		self._phase += pInc
		self._queue.append(chr(int(z)))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
2
Gpt3D_Clone700_2.py 1 8
Gpt3D_Clone700_2.py 10 16

----------------------------------------

def xirr(values, dates) :
	try :
		return scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
	except RuntimeError :
		return scipy.optimize.brentq(lambda r : xnpv(r, values, dates), - 1.0, 1e10)
----------------------------------------

def xirr(vals, dts):
        try:
            return scipy.optimize.brentq(lambda r : xnpv(r, vals, dts), -1.0, 1e10)
        except RuntimeError:
            return scipy.optimize.root_scalar(lambda r : xnpv(r, vals, dts), method='newton', x0=0.0).root
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
3
Gpt3D_Clone700_3.py 1 8
Gpt3D_Clone700_3.py 10 16

----------------------------------------

def xirr(values, dates) :
	try :
		return scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
	except RuntimeError :
		return scipy.optimize.brentq(lambda r : xnpv(r, values, dates), - 1.0, 1e10)
----------------------------------------

def xirr(vals, dates):
        try:
            return scipy.optimize.root_scalar(lambda r : xnpv(r, vals, dates), method='brentq', bracket=[-1.0, 1e10]).root
        except RuntimeError:
            return scipy.optimize.root_scalar(lambda r : xnpv(r, vals, dates), method='newton', x0=0.0).root
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
4
Gpt3D_Clone700_4.py 1 8
Gpt3D_Clone700_4.py 10 16

----------------------------------------

def xirr(values, dates) :
	try :
		return scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
	except RuntimeError :
		return scipy.optimize.brentq(lambda r : xnpv(r, values, dates), - 1.0, 1e10)
----------------------------------------

def xirr(values, dates):
        try:
            return scipy.optimize.root_scalar(lambda r : xnpv(r, values, dates), method='brentq', bracket=[-1.0, 1e10]).root
        except RuntimeError:
            return scipy.optimize.newton(lambda r : xnpv(r, values, dates), 0.0)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
0
Gpt3D_Clone704_0.py 1 10
Gpt3D_Clone704_0.py 12 23

----------------------------------------

def __enter__(self) :
	self.interrupted = False
	self.released = False
	for sig in self.signals :
		self.original_handlers [sig] = signal.getsignal(sig)
		signal.signal(sig, self.handler)
	return self
----------------------------------------

def __enter__ (self):
	self.interrupted = False
	self.released = False
	for sig in self.signals:
		try:
			self.original_handlers[sig] = signal.getsignal(sig)
			signal.signal(sig, self.handler)
		except:
			logging.error('Failed to initialize signal handlers')
			return None
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
1
Gpt3D_Clone704_1.py 1 10
Gpt3D_Clone704_1.py 12 22

----------------------------------------

def __enter__(self) :
	self.interrupted = False
	self.released = False
	for sig in self.signals :
		self.original_handlers [sig] = signal.getsignal(sig)
		signal.signal(sig, self.handler)
	return self
----------------------------------------

def __enter__(self):
	self.interrupted = False
	self.released = False
	for sig in self.signals:
		try:
			self.original_handlers[sig] = signal.getsignal(sig)
			signal.signal(sig, self.handler)
		except:
			raise Exception('Failed to initialize signal handlers')
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
2
Gpt3D_Clone704_2.py 1 10
Gpt3D_Clone704_2.py 12 21

----------------------------------------

def __enter__(self) :
	self.interrupted = False
	self.released = False
	for sig in self.signals :
		self.original_handlers [sig] = signal.getsignal(sig)
		signal.signal(sig, self.handler)
	return self
----------------------------------------

def __enter__(self):
	self.interrupted = False
	self.released = False
	for sig in self.signals:
		handler = signal.getsignal(sig)
		self.original_handlers[sig] = handler
		signal.signal(sig, self.handler)
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
3
Gpt3D_Clone704_3.py 1 10
Gpt3D_Clone704_3.py 12 20

----------------------------------------

def __enter__(self) :
	self.interrupted = False
	self.released = False
	for sig in self.signals :
		self.original_handlers [sig] = signal.getsignal(sig)
		signal.signal(sig, self.handler)
	return self
----------------------------------------

def __enter__(self):
	self.interrupted = False
	self.released = False
	for sig in self.signals:
		handler = signal.getsignal(sig)
		self.original_handlers.update({sig: handler})
		signal.signal(sig, self.handler)
	return self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
705
0
Gpt3D_Clone705_0.py 1 10
Gpt3D_Clone705_0.py 12 19

----------------------------------------

def release(self) :
	if self.released :
		return False
	for sig in self.signals :
		signal.signal(sig, self.original_handlers [sig])
	self.released = True
	return True
----------------------------------------

def release(self) :
	if not self.released :
		for sig in self.signals :
			signal.signal(sig, self.original_handlers[sig])
		self.released = True
		return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
0
Gpt3D_Clone708_0.py 1 9
Gpt3D_Clone708_0.py 11 17

----------------------------------------

def square(x = None) :
	try :
		return float(x) ** 2
	except TypeError :
		print "You did not enter a real number"
		return None
----------------------------------------

def square(x = None):
	 try:
		 return pow(float(x),2)
	 except TypeError:
		 print("You did not enter a real number")
		 return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
1
Gpt3D_Clone708_1.py 1 9
Gpt3D_Clone708_1.py 11 17

----------------------------------------

def square(x = None) :
	try :
		return float(x) ** 2
	except TypeError :
		print "You did not enter a real number"
		return None
----------------------------------------

def square(x = None):
	 try:
		 return x ** 2
	 except TypeError:
		 print("You did not enter a real number")
		 return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
2
Gpt3D_Clone708_2.py 1 9
Gpt3D_Clone708_2.py 11 17

----------------------------------------

def square(x = None) :
	try :
		return float(x) ** 2
	except TypeError :
		print "You did not enter a real number"
		return None
----------------------------------------

def power(x = None, exponent = None) :
	try :
		return float(x) ** exponent
	except TypeError :
		print "You did not enter a real number"
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
0
Gpt3D_Clone709_0.py 1 9
Gpt3D_Clone709_0.py 11 18

----------------------------------------

def square(x = None) :
	try :
		return float(x) ** 2
	except TypeError :
		print "You did not enter a real number"
		return None
----------------------------------------

def power(x = None):
	try:
		return pow(float(x), 2)
	except TypeError:
		print("You did not enter a real number")
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
1
Gpt3D_Clone709_1.py 1 9
Gpt3D_Clone709_1.py 11 17

----------------------------------------

def square(x = None) :
	try :
		return float(x) ** 2
	except TypeError :
		print "You did not enter a real number"
		return None
----------------------------------------

def square_number(x = None):
	try:
		return x*x
	except TypeError:
		print("You did not enter a real number")
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
2
Gpt3D_Clone709_2.py 1 9
Gpt3D_Clone709_2.py 11 17

----------------------------------------

def square(x = None) :
	try :
		return float(x) ** 2
	except TypeError :
		print "You did not enter a real number"
		return None
----------------------------------------

def power(x = None, y = 2) :
	try :
		return float(x) ** y
	except TypeError :
		print "You did not enter a real number"
		return None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
0
Gpt3D_Clone70_0.py 1 15
Gpt3D_Clone70_0.py 17 26

----------------------------------------

def get_client_ip(request) :
	remote_address = request.META.get('REMOTE_ADDR')
	ip = remote_address
	x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
	if x_forwarded_for :
		proxies = x_forwarded_for.split(',')
		while (len(proxies) > 0 and
		proxies [0].startswith(PRIVATE_IPS_PREFIX)) :
			proxies.pop(0)
		if len(proxies) > 0 :
			ip = proxies [0]
	return ip
----------------------------------------

def get_client_ip(request) :
	remote_address = request.META.get('REMOTE_ADDR')
	ip = remote_address
	x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
	if x_forwarded_for :
		proxies = [x for x in x_forwarded_for.split(',') if not x.startswith(PRIVATE_IPS_PREFIX)]
		if len(proxies) > 0 :
			ip = proxies[0]
	return ip
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
1
Gpt3D_Clone70_1.py 1 15
Gpt3D_Clone70_1.py 17 28

----------------------------------------

def get_client_ip(request) :
	remote_address = request.META.get('REMOTE_ADDR')
	ip = remote_address
	x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
	if x_forwarded_for :
		proxies = x_forwarded_for.split(',')
		while (len(proxies) > 0 and
		proxies [0].startswith(PRIVATE_IPS_PREFIX)) :
			proxies.pop(0)
		if len(proxies) > 0 :
			ip = proxies [0]
	return ip
----------------------------------------

def get_client_ip(request) :
	remote_address = request.META.get('REMOTE_ADDR')
	ip = remote_address
	x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
	if x_forwarded_for :
		proxies = filter(lambda x : not x.startswith(PRIVATE_IPS_PREFIX), x_forwarded_for.split(','))
		if len(proxies) > 0 :
			ip = next(proxies)
	return ip
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
0
Gpt3D_Clone713_0.py 1 12
Gpt3D_Clone713_0.py 14 24

----------------------------------------

def Max(s) :
	if len(s) == 1 :
		return s [0]
	else :
		m = Max(s [1 :])
		if m > s [0] :
			return m
		else :
			return s [0]
----------------------------------------

def Max(s) :
	if len(s) == 1 :
		return s[0]
	else :
		tmp = s[0]
		m = Max(s[1:])
		if m > tmp:
			return m
		else:
			return tmp + 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
1
Gpt3D_Clone713_1.py 1 12
Gpt3D_Clone713_1.py 14 25

----------------------------------------

def Max(s) :
	if len(s) == 1 :
		return s [0]
	else :
		m = Max(s [1 :])
		if m > s [0] :
			return m
		else :
			return s [0]
----------------------------------------

def Max(s) :
	if len(s) == 1 :
		return s[0]
	else :
		tmp = s[0]
		m = Max(s[1:])
		if m > tmp:
			return m
		else :
			return tmp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
2
Gpt3D_Clone713_2.py 1 12
Gpt3D_Clone713_2.py 14 21

----------------------------------------

def Max(s) :
	if len(s) == 1 :
		return s [0]
	else :
		m = Max(s [1 :])
		if m > s [0] :
			return m
		else :
			return s [0]
----------------------------------------

def Max(s) : 
	if len(s) == 1 : 
		return s[0] 
	else : 
		m = Max(s[1:]) 
		return m if m > s[0] else s[0] 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
0
Gpt3D_Clone719_0.py 1 18
Gpt3D_Clone719_0.py 20 35

----------------------------------------

def index(filename, lst) :
	infile = open('raven.txt', 'r')
	lines = infile.readlines()
	words = []
	dic = {}
	for line in lines :
		line_words = line.split(' ')
		words.append(line_words)
	for i in range(len(words)) :
		for j in range(len(words [i])) :
			if words [i] [j] in lst :
				if words [i] [j] not in dic.keys() :
					dic [words [i] [j]] = set()
				dic [words [i] [j]].add(i + 1)
	return dic
----------------------------------------

def index(filename, lst) :
	infile = open('raven.txt', 'r')
	lines = infile.readlines()
	words = []
	dic = {}
	for line in lines :
		line_words = line.split(' ')
		words.append(line_words)
	for i in range(len(words)) :
		for j in range(len(words [i])) :
			if words [i] [j].upper() in lst :
				if words [i] [j].upper() not in dic.keys() :
					dic [words [i] [j].upper()] = set()
				dic [words [i] [j].upper()].add(i + 1)
	return dic
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
1
Gpt3D_Clone719_1.py 1 18
Gpt3D_Clone719_1.py 20 35

----------------------------------------

def index(filename, lst) :
	infile = open('raven.txt', 'r')
	lines = infile.readlines()
	words = []
	dic = {}
	for line in lines :
		line_words = line.split(' ')
		words.append(line_words)
	for i in range(len(words)) :
		for j in range(len(words [i])) :
			if words [i] [j] in lst :
				if words [i] [j] not in dic.keys() :
					dic [words [i] [j]] = set()
				dic [words [i] [j]].add(i + 1)
	return dic
----------------------------------------

def index(filename, lst) :
	infile = open('raven.txt', 'r')
	lines = infile.readlines()
	words = []
	dic = {}
	for line in lines :
		line_words = line.split(' ')
		words.append(line_words)
	for i in range(len(words)) :
		for j in range(len(words [i])) :
			if words [i] [j].lower() in lst :
				if words [i] [j].lower() not in dic.keys() :
					dic [words [i] [j].lower()] = set()
				dic [words [i] [j].lower()].add(i + 1)
	return dic
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
0
Gpt3D_Clone720_0.py 1 11
Gpt3D_Clone720_0.py 13 23

----------------------------------------

def get_data(self) :
	k = ''
	while True :
		c = timeout_call(sys.stdin.read, args = [1], timeout_duration = 0.05)
		if c is None :
			break
		k += c
	return k if k else False
----------------------------------------

def get_data(self):
	k = ''
	while True:
		c = timeout_call(sys.stdin.read, args=[1], timeout_duration=0.05)
		if c is not None:
			k += c
		else:
			break
	return k if k else False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
1
Gpt3D_Clone720_1.py 1 11
Gpt3D_Clone720_1.py 13 22

----------------------------------------

def get_data(self) :
	k = ''
	while True :
		c = timeout_call(sys.stdin.read, args = [1], timeout_duration = 0.05)
		if c is None :
			break
		k += c
	return k if k else False
----------------------------------------

def get_data(self):
	k = ""
	while 1:
		c = timeout_call(sys.stdin.read, args=[1], timeout_duration=0.05)
		if c != None:
			k += c
		else:
			break
	return k if k else False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
2
Gpt3D_Clone720_2.py 1 11
Gpt3D_Clone720_2.py 13 22

----------------------------------------

def get_data(self) :
	k = ''
	while True :
		c = timeout_call(sys.stdin.read, args = [1], timeout_duration = 0.05)
		if c is None :
			break
		k += c
	return k if k else False
----------------------------------------

def get_data(self) :
	k = ''
	while True :
		c = timeout_call(sys.stdin.read, args = [1], timeout_duration = 0.05)
		if c is None :
			break
		k = k + c
	return False if k == '' else k
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
0
Gpt3D_Clone721_0.py 1 13
Gpt3D_Clone721_0.py 15 29

----------------------------------------

def window(seq, n = 2) :
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	it = iter(seq)
	result = tuple(islice(it, n))
	if len(result) == n :
		yield result
	for elem in it :
		result = result [1 :] + (elem,)
		yield result
----------------------------------------

def window_type4(seq, n = 2) :
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	it = iter(seq)
	result = tuple(islice(it, n))
	if len(result) == n :
		yield result
	start = 0
	for elem in it :
		result = result [1 :] + (elem,)
		start += 1
		if (start == n):
			yield result
			start = 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
1
Gpt3D_Clone721_1.py 1 13
Gpt3D_Clone721_1.py 15 28

----------------------------------------

def window(seq, n = 2) :
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	it = iter(seq)
	result = tuple(islice(it, n))
	if len(result) == n :
		yield result
	for elem in it :
		result = result [1 :] + (elem,)
		yield result
----------------------------------------

def window_type3(seq, n = 2) :
	"Returns a sliding window (of width n) over data from the iterable"
	"   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
	count = 0
	it = iter(seq)
	result = tuple(islice(it, n))
	if len(result) == n :
		yield result
	for elem in it :
		count += 1
		result = result [1 :] + (elem,)
		if (count % n == 0):
			yield result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
722
0
Gpt3D_Clone722_0.py 1 22
Gpt3D_Clone722_0.py 24 39

----------------------------------------

def update_position(self) :
	rotation = self.get_rotation()
	self.set_rotation(0)
	self.set_va(self.__Va)
	self.set_ha(self.__Ha)
	renderer = self.axes.figure.canvas.get_renderer()
	bbox1 = self.get_window_extent(renderer = renderer)
	self.set_va('center')
	self.set_ha('center')
	bbox2 = self.get_window_extent(renderer = renderer)
	dr = np.array(bbox2.get_points() [0] - bbox1.get_points() [0])
	rad = np.deg2rad(rotation)
	rot_mat = np.array([
	[np.cos(rad), np.sin(rad)],
	[- np.sin(rad), np.cos(rad)]])
	drp = np.dot(dr, rot_mat)
	offset = matplotlib.transforms.Affine2D().translate(- drp [0], - drp [1])
	self.set_rotation(rotation)
	return offset
----------------------------------------

def update_position(self) :
	rotation = self.get_rotation()
	self.set_rotation(0)
	self.set_va(self.__Va)
	self.set_ha(self.__Ha)
	renderer = self.axes.figure.canvas.get_renderer()
	bbox1 = self.get_window_extent(renderer = renderer)
	self.set_va('center')
	self.set_ha('center')
	bbox2 = self.get_window_extent(renderer = renderer)
	dr = np.array(bbox2.get_points() [0] - bbox1.get_points() [0])
	rad = np.deg2rad(rotation)
	offset = matplotlib.transforms.Affine2D().rotate(- rad).translate(- dr[0], - dr[1])
	self.set_rotation(rotation)
	return offset
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
725
0
Gpt3D_Clone725_0.py 1 16
Gpt3D_Clone725_0.py 18 38

----------------------------------------

def to_bool(value) :
	valid = {'true' : True, 't' : True, '1' : True,
	'false' : False, 'f' : False, '0' : False,
	}
	if isinstance(value, bool) :
		return value
	if not isinstance(value, basestring) :
		raise ValueError('invalid literal for boolean. Not a string.')
	lower_value = value.lower()
	if lower_value in valid :
		return valid [lower_value]
	else :
		raise ValueError('invalid literal for boolean: "%s"' % value)
----------------------------------------

def to_bool_4(input_value):
	options = {
		'true': True,
		't': True,
		'1': True,
		'false': False,
		'f': False,
		'0': False
	}
	
	if isinstance(input_value, bool):
		return input_value
	elif not isinstance(input_value, str):
		raise ValueError('invalid literal for boolean. Not a string.')
		
	checked_value = input_value.lower()
	if checked_value in options:
		return options[checked_value]
	else:
		raise ValueError('invalid literal for boolean: "%s"' % input_value)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
730
0
Gpt3D_Clone730_0.py 1 8
Gpt3D_Clone730_0.py 10 15

----------------------------------------

def hit(bx, by, r, px, py, h) :
	if bx > = px - r and py < = by < = py + h :
		True
	else :
		False
----------------------------------------

def hit(bx, by, r, px, py, h) :
	if bx > = px - r and py < = by < = py + h :
		return True
	else : 
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
731
0
Gpt3D_Clone731_0.py 1 12
Gpt3D_Clone731_0.py 14 28

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True : 
		elts = set()
		for x in closure:
			for y in closure: 
				for q in closure:
					if q == y:
						elts.add((x, w))
		closure_until_now = closure | elts
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
731
1
Gpt3D_Clone731_1.py 1 12
Gpt3D_Clone731_1.py 14 28

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure(a) : 
	closure = set(a)
	while True : 
		temp = set()
		for x, y in closure : 
			for q,w in closure : 
				if q == y : 
					temp.add((x, w))
		closure_until_now = closure | temp
		if closure_until_now == closure : 
			break
		closure = closure_until_now
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
1
Gpt3D_Clone732_1.py 1 12
Gpt3D_Clone732_1.py 14 27

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure_3(a):
	closure = set(a)
	while True:
		new_relations = set()
		for x, y in closure:
			for q, w in closure:
				if q == y:
					new_relations.add((x, w))
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
3
Gpt3D_Clone732_3.py 1 12
Gpt3D_Clone732_3.py 14 25

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure_4(a):
	closure = set(a)
	while True:
		new_relations = set([(x, w) for x, y in closure 
							for q, w in closure 
							if q == y])
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
0
Gpt3D_Clone733_0.py 1 12
Gpt3D_Clone733_0.py 14 27

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure(a):
	closure = set(a)
	while True:
		new_relations = set()
		for x, y in closure:
			for q, w in closure:
				if q == y:
					new_relations.add((x, w))
		closure_until_now = closure | new_relations
		if closure_until_now == closure:
			break
		closure = closure_until_now
	return closure
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
1
Gpt3D_Clone733_1.py 1 12
Gpt3D_Clone733_1.py 14 23

----------------------------------------

def transitive_closure(a) :
	closure = set(a)
	while True :
		new_relations = set((x, w) for x, y in closure for q, w in closure if q == y)
		closure_until_now = closure | new_relations
		if closure_until_now == closure :
			break
		closure = closure_until_now
	return closure
----------------------------------------

def transitive_closure3(a):
	closure3 = set(a)
	while True :
		new_relations3 = set((x, w) for x, y in closure3 for q, w in closure3 if q == y)		
		if closure3 | new_relations3 == closure3 :
			break
		closure3=closure3|new_relations3
	return closure3
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
737
0
Gpt3D_Clone737_0.py 1 8
Gpt3D_Clone737_0.py 10 15

----------------------------------------

def remove_user(self, user) :
	if hasattr(user, "name") :
		self.remove(user.name)
	else :
		self.remove(user)
----------------------------------------

def remove_user(self, user) :
	if user.__contains__("name") :
		self.remove(user["name"])
	else :
		self.remove(user)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
0
Gpt3D_Clone740_0.py 1 15
Gpt3D_Clone740_0.py 17 29

----------------------------------------

def pairsum_n(list1, value) :
	set1 = set(list1)
	list1 = sorted(set1)
	solution = []
	maxi = value / 2
	for i in list1 :
		if i > = maxi :
			break
		j = value - i
		if j in set1 :
			solution.append((i, j))
	return solution
----------------------------------------

def pairsum_n4(list1, value) :
	set1 = set(list1)
	list1 = sorted(set1)
	solution = []
	maxi = value / 2
	i = 0
	while i < maxi :
		j = maxi - i
		if j in set1 :
			solution.append((i,j))
 		i = i + 1
	return solution
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
0
Gpt3D_Clone742_0.py 1 9
Gpt3D_Clone742_0.py 11 21

----------------------------------------

def package_contents(package_name) :
	file, pathname, description = imp.find_module(package_name)
	if file :
		raise ImportError('Not a package: %r', package_name)
	return set([os.path.splitext(module) [0] for module in os.listdir(pathname)
	if module.endswith(MODULE_EXTENSIONS)])
----------------------------------------

def package_contents(package_name):
	try:
		file, pathname, description = imp.find_module(package_name)
		if file:
			raise ImportError('Not a package: %r', package_name)
		return set([os.path.splitext(module) [0] for module in os.listdir(pathname)
		if module.endswith(MODULE_EXTENSIONS)])
	except Exception as e:
		raise e
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
1
Gpt3D_Clone742_1.py 1 9
Gpt3D_Clone742_1.py 11 20

----------------------------------------

def package_contents(package_name) :
	file, pathname, description = imp.find_module(package_name)
	if file :
		raise ImportError('Not a package: %r', package_name)
	return set([os.path.splitext(module) [0] for module in os.listdir(pathname)
	if module.endswith(MODULE_EXTENSIONS)])
----------------------------------------

def package_details(package_name):
	try:
		file, pathname, description = imp.find_module(package_name)
		if file:
			raise ImportError('Not a package: %r', package_name)
		return list([os.path.splitext(module) [0] for module in os.listdir(pathname)
		if module.endswith(MODULE_EXTENSIONS)])
	except Exception as e:
		raise e
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
0
Gpt3D_Clone743_0.py 1 13
Gpt3D_Clone743_0.py 15 23

----------------------------------------

def translate_non_alphanumerics(to_translate, translate_to = u'_') :
	not_letters_or_digits = u'!"#%\'()*+,-./:;<=>?@[\]^_`{|}~'
	if isinstance(to_translate, unicode) :
		translate_table = dict((ord(char), unicode(translate_to)) for char in not_letters_or_digits)
	else :
		assert isinstance(to_translate, str)
		translate_table = string.maketrans(not_letters_or_digits,
		translate_to
		* len(not_letters_or_digits))
	return to_translate.translate(translate_table)
----------------------------------------

def translate_non_alphanumerics3(to_translate, translate_to = u'-'):
	not_letters_or_digits = u'!"#%\'()*+,-./:;<=>?@[\]^_`{|}~'
	if isinstance(to_translate, unicode):
		translate_table = dict((ord(char), unicode(translate_to)) for char in not_letters_or_digits)
	else:
		assert isinstance(to_translate, str)
		translate_table = string.maketrans(not_letters_or_digits,translate_to * len(not_letters_or_digits))
	return to_translate.translate(translate_table)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
749
0
Gpt3D_Clone749_0.py 1 10
Gpt3D_Clone749_0.py 12 19

----------------------------------------

def has_add_permission(self, request) :
	base_add_permission = super(SettingAdmin, self).has_add_permission(request)
	if base_add_permission :
		count = Setting.objects.all().count()
		if count == 0 :
			return True
	return False
----------------------------------------

def has_add_permission(self, request) :
	base_add_permission = super(SettingAdmin, self).has_add_permission(request)
	if base_add_permission :
		if Setting.objects.filter(is_counted=True).count() == 0 :
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
749
1
Gpt3D_Clone749_1.py 1 10
Gpt3D_Clone749_1.py 12 18

----------------------------------------

def has_add_permission(self, request) :
	base_add_permission = super(SettingAdmin, self).has_add_permission(request)
	if base_add_permission :
		count = Setting.objects.all().count()
		if count == 0 :
			return True
	return False
----------------------------------------

def has_add_permission(self, request) :
	base_add_permission = super(SettingAdmin, self).has_add_permission(request)
	if base_add_permission :
		if Setting.objects.filter(is_active=True).count() == 0 :
			return True
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
1
Gpt3D_Clone74_1.py 1 10
Gpt3D_Clone74_1.py 12 22

----------------------------------------

def flatten(container) :
	for i in container :
		if isinstance(i, (list, tuple)) :
			for j in flatten(i) :
				yield j
		else :
			yield i
----------------------------------------

def flatten(container) :
	for i in container :
		if isinstance(i, list) :
			for j in flatten(i) :
				yield j
		elif isinstance(i, tuple) :
			for j in flatten(list(i)) :
				yield j
		else :
			yield i
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
1
Gpt3D_Clone752_1.py 1 13
Gpt3D_Clone752_1.py 15 28

----------------------------------------

def fib(n) :
	if n == 2 :
		try :
			fib.two_count += 1
		except AttributeError :
			fib.two_count = 1
	if n == 0 or n == 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n == 2 :
		try :
			fib.two_count += 1
		except AttributeError :
			fib.two_count = 1
	if n <= 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		return fib(n - 2) + fib(n - 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
3
Gpt3D_Clone752_3.py 1 13
Gpt3D_Clone752_3.py 15 25

----------------------------------------

def fib(n) :
	if n == 2 :
		try :
			fib.two_count += 1
		except AttributeError :
			fib.two_count = 1
	if n == 0 or n == 1 :
		return n
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n==0 or n==1 :
		return n
	else :
		return fib(n-1) + fib(n-2)
	if n == 2 :
		try :
			fib.two_count += 1
		except AttributeError :
			fib.two_count = 1	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
2
Gpt3D_Clone754_2.py 1 9
Gpt3D_Clone754_2.py 11 20

----------------------------------------

def checkLen() :
	days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	for position, day in enumerate(days) :
		if day == "Monday" :
			print ("Found it")
			print (position)
----------------------------------------

def checkLen() :
	days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	index = 0
	for day in days :
		if day == "Monday" :
			break
		index += 1
	print ("Found it")
	print (index)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
3
Gpt3D_Clone754_3.py 1 9
Gpt3D_Clone754_3.py 11 20

----------------------------------------

def checkLen() :
	days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	for position, day in enumerate(days) :
		if day == "Monday" :
			print ("Found it")
			print (position)
----------------------------------------

def checkLen() :
	days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	index = 0
	for day in days :
		if day == "Monday" :
			print ("Found it")
			print (index)
		index += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
0
Gpt3D_Clone756_0.py 1 8
Gpt3D_Clone756_0.py 10 16

----------------------------------------

def checkLen() :
	days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	if "Monday" in days :
		print "found"
		print days.index("Monday")
----------------------------------------

def checkLen() :
	weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
	if "Monday" in weekdays :
		print "found"
		dayNum = weekdays.index("Monday")
		print dayNum
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
759
2
Gpt3D_Clone759_2.py 1 8
Gpt3D_Clone759_2.py 10 16

----------------------------------------

def queryset(self, request, queryset) :
	if self.value() :
		return set(comment for comment in queryset if comment.posted_by_guest())
	elif not self.value() :
		return set(comment for comment in queryset if not comment.posted_by_guest())
----------------------------------------

def queryset(self, request, queryset) :
	if self.value() :
		return set(comment for comment in queryset if not comment.posted_by_member())
	elif not self.value() :
		return set(comment for comment in queryset if comment.posted_by_member())
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
760
0
Gpt3D_Clone760_0.py 1 12
Gpt3D_Clone760_0.py 14 34

----------------------------------------

def main() :
	cap = VideoCapture()
	shape = cap.get_size()
	shared_array_base = Array(ctypes.c_uint8, shape [0] * shape [1] * shape [2])
	frame = np.ctypeslib.as_array(shared_array_base.get_obj())
	frame = frame.reshape(shape [0], shape [1], shape [2])
	finished = Value('i', 0)
	video_process = Process(target = stream,
	args = (cap, shared_array_base, finished))
	video_process.start()
	time.sleep(2)
----------------------------------------

def main() :
	cap = VideoCapture()
	shape = cap.get_size()
	shared_array_base = Array(ctypes.c_uint8, shape [0] * shape [1] * shape [2])
	frame = np.ctypeslib.as_array(shared_array_base.get_obj())
	frame = frame.reshape(shape [0], shape [1], shape [2])
	finished = Value('i', 0)
	video_process = Process(target = stream,
	args = (cap, shared_array_base, finished))
	video_process.start()
	time.sleep(2)
	while not finished.value :
		resized = cv2.resize(frame, (540, 450), interpolation = cv2.INTER_LINEAR)
		# Show the current frame
		cv2.imshow('Frame', resized)
		# Whether the user pressed Esc key
		c = cv2.waitKey(1)
		if c == 27 :
			break
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
760
1
Gpt3D_Clone760_1.py 1 12
Gpt3D_Clone760_1.py 14 33

----------------------------------------

def main() :
	cap = VideoCapture()
	shape = cap.get_size()
	shared_array_base = Array(ctypes.c_uint8, shape [0] * shape [1] * shape [2])
	frame = np.ctypeslib.as_array(shared_array_base.get_obj())
	frame = frame.reshape(shape [0], shape [1], shape [2])
	finished = Value('i', 0)
	video_process = Process(target = stream,
	args = (cap, shared_array_base, finished))
	video_process.start()
	time.sleep(2)
----------------------------------------

def main() :
	cap = VideoCapture()
	shape = cap.get_size()
	shared_array_base = Array(ctypes.c_uint8, shape [0] * shape [1] * shape [2])
	frame = np.ctypeslib.as_array(shared_array_base.get_obj())
	frame = frame.reshape(shape [0], shape [1], shape [2])
	finished = Value('i', 0)
	video_process = Process(target = stream,
	args = (cap, shared_array_base, finished))
	video_process.start()
	time.sleep(2)
	while not finished.value :
		resized = cv2.resize(frame, (560, 420), interpolation = cv2.INTER_LINEAR)
		# Show the current frame
		cv2.imshow('Frame', resized)
		# Whether the user pressed Esc key
		c = cv2.waitKey(1)
		if c == 27 :
			break
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
0
Gpt3D_Clone762_0.py 1 21
Gpt3D_Clone762_0.py 23 39

----------------------------------------

def get_size(start_path = '.') :
	total_size = 0
	seen = {}
	for dirpath, dirnames, filenames in os.walk(start_path) :
		for f in filenames :
			fp = os.path.join(dirpath, f)
			try :
				stat = os.stat(fp)
			except OSError :
				continue
			try :
				seen [stat.st_ino]
			except KeyError :
				seen [stat.st_ino] = True
			else :
				continue
			total_size += stat.st_size
	return total_size
----------------------------------------

def get_size_alternate_2(start_path = '.') :
	total_size = 0
	seen = {}
	for dirpath, dirnames, filenames in os.walk(start_path) :
		for f in filenames :
			fp = os.path.join(dirpath, f)
			try :
				stat = os.stat(fp)
			except OSError :
				continue
			if stat.st_ino in seen :
				continue
			else :
				seen[stat.st_ino] = True
			total_size += stat.st_size
	return total_size
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
763
0
Gpt3D_Clone763_0.py 1 12
Gpt3D_Clone763_0.py 14 21

----------------------------------------

def __call__(cls, alias, * args, ** kwargs) :
	if cls ! = Bullet :
		raise TypeError("Bullet subclass %r objects should not to "
		"be explicitly constructed." % cls.__name__)
	elif alias not in cls.registry :
		raise NotImplementedError("Unknown Bullet subclass %r" %
		str(alias))
	subclass = cls.registry [alias]
	return type.__call__(subclass, * args, ** kwargs)
----------------------------------------

def __call__(cls, alias, *args, **kwargs): 
	if cls != Bullet: 
		raise TypeError("Bullet subclass %r objects should not be explicitly constructed." % cls.__name__)
	elif alias not in cls.registry:
		raise NotImplementedError("Unknown Bullet subclass %r" % str(alias))
	subclass = cls.registry[alias] 
	return type.__call__(subclass, *args, **kwargs)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
763
1
Gpt3D_Clone763_1.py 1 12
Gpt3D_Clone763_1.py 14 22

----------------------------------------

def __call__(cls, alias, * args, ** kwargs) :
	if cls ! = Bullet :
		raise TypeError("Bullet subclass %r objects should not to "
		"be explicitly constructed." % cls.__name__)
	elif alias not in cls.registry :
		raise NotImplementedError("Unknown Bullet subclass %r" %
		str(alias))
	subclass = cls.registry [alias]
	return type.__call__(subclass, * args, ** kwargs)
----------------------------------------

def __call__(cls, alias, * args, ** kwargs) :
	if cls is not Bullet:
		raise TypeError("Bullet subclass %r objects should not be explicitly constructed." % cls.__name__)
	elif alias not in cls.registry:
		raise NotImplementedError("Unknown Bullet subclass %r" % str(alias))
	subclass = cls.registry[alias]
	return type.__call__(subclass, *args, **kwargs)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
1
Gpt3D_Clone766_1.py 1 12
Gpt3D_Clone766_1.py 14 21

----------------------------------------

def postalValidate(S) :
	S = S.replace(" ", "")
	if len(S) ! = 6 or S.isalpha() or S.isdigit() :
		return False
	if not S [0 : 5 : 2].isalpha() :
		return False
	if not S [1 : 6 : 2].isdigit() :
		return False
	return S.upper()
----------------------------------------

def postalValidate(S) :
	S = S.replace(" ", "")
	if len(S) != 6:
		return False
	if any([S.isalpha(), S.isdigit(), not S[0:5:2].isalpha(), not S[1:6:2].isdigit()]):
		return False
	return S.upper()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
767
0
Gpt3D_Clone767_0.py 1 12
Gpt3D_Clone767_0.py 14 27

----------------------------------------

def oddn(x, y, z) :
	odd_number_keeper = []
	for item in [x, y, z] :
		if item % 2 == 1 :
			odd_number_keeper.append(item)
	if not odd_number_keeper :
		print 'No odd number is found'
		return
	return max(odd_number_keeper)
----------------------------------------

def oddn(x, y, z) :
	odd_keep = []
	list_num = [x, y, z]
	for elem in list_num :
		remainder = elem%2
		if remainder == 1 :
			odd_keep.append(elem)
	if not odd_keep :
		print 'No odd number is found'
		return
	return max(odd_keep)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
76
0
Gpt3D_Clone76_0.py 1 8
Gpt3D_Clone76_0.py 10 18

----------------------------------------

def run(self) :
	while True :
		image = self.tasks_q.get()
		time.sleep(1)
		self.results_q.put("text")
----------------------------------------

def run(self) :
        while True :
                image = self.tasks_q.get()
                startTime = time.time()
                time.sleep(1)
                self.results_q.put("text")
                endTime = time.time()
                print('Time elapsed:', endTime-startTime)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
76
1
Gpt3D_Clone76_1.py 1 8
Gpt3D_Clone76_1.py 10 17

----------------------------------------

def run(self) :
	while True :
		image = self.tasks_q.get()
		time.sleep(1)
		self.results_q.put("text")
----------------------------------------

def run(self) :
        while True :
                image = self.tasks_q.get()
                startTime = time.time()
                time.sleep(1)
                print('Time elapsed:', time.time()-startTime)
                self.results_q.put("text")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
772
1
Gpt3D_Clone772_1.py 1 17
Gpt3D_Clone772_1.py 19 37

----------------------------------------

def bitwise_or(num1, num2) :
	new_num1 = list(num1 [2 :])
	new_num2 = list(num2 [2 :])
	if len(num1) > len(num2) :
		new_num2 [: 0] = '0' * (len(num1) - len(num2))
	elif len(num1) < len(num2) :
		new_num1 [: 0] = '0' * (len(num2) - len(num1))
	new_num = []
	for c1, c2 in zip(new_num1, new_num2) :
		if c1 == "1" or c2 == "1" :
			new_num.append("1")
		else :
			new_num.append(c1)
	return '0b' + ''.join(new_num)
----------------------------------------

def bitwise_or(num1, num2):
    new_num1 = list(num1[2:])
    new_num2 = list(num2[2:])
    if len(num1) > len(num2):
        new_num2[:0] = '0' * (len(num1) - len(num2))
    elif len(num1) < len(num2):
        new_num1[:0] = '0' * (len(num2) - len(num1))
    new_num = []
    it = 0
    while it < len(new_num1):        
        if new_num1[it] == "1" or new_num2[it] == "1":
            new_num.append("1")
        else:
            new_num.append(new_num1[it])
        it += 1
    return '0b' + ''.join(new_num)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
773
0
Gpt3D_Clone773_0.py 1 9
Gpt3D_Clone773_0.py 11 18

----------------------------------------

def backspace(self) :
	self.current = self.current [0 : len(self.current) - 1]
	if self.current == "" :
		self.new_num = True
		self.current = "0"
	self.dsiplay(self.current)
----------------------------------------

def backspace(self):
    if len(self.current) > 0:
        self.current = self.current[:-1]
    if len(self.current) == 0:
        self.new_num = True
        self.current = '0'
    self.dsiplay(self.current)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
773
1
Gpt3D_Clone773_1.py 1 9
Gpt3D_Clone773_1.py 11 18

----------------------------------------

def backspace(self) :
	self.current = self.current [0 : len(self.current) - 1]
	if self.current == "" :
		self.new_num = True
		self.current = "0"
	self.dsiplay(self.current)
----------------------------------------

def backspace(self):
    if self.current != '':
        self.current = self.current[:-1]
    if len(self.current) == 0:
        self.new_num = True
        self.current = '0'
    self.dsiplay(self.current)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
773
2
Gpt3D_Clone773_2.py 1 9
Gpt3D_Clone773_2.py 11 17

----------------------------------------

def backspace(self) :
	self.current = self.current [0 : len(self.current) - 1]
	if self.current == "" :
		self.new_num = True
		self.current = "0"
	self.dsiplay(self.current)
----------------------------------------

def backspace(self):
    self.current = self.current[:-1]
    if len(self.current) == 0:
        self.new_num = True
        self.current = '0'
    self.dsiplay(self.current)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
773
3
Gpt3D_Clone773_3.py 1 9
Gpt3D_Clone773_3.py 11 17

----------------------------------------

def backspace(self) :
	self.current = self.current [0 : len(self.current) - 1]
	if self.current == "" :
		self.new_num = True
		self.current = "0"
	self.dsiplay(self.current)
----------------------------------------

def backspace(self):
    self.current = self.current[:-1]
    if not self.current:
        self.new_num = True
        self.current = "0"
    self.dsiplay(self.current)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
776
0
Gpt3D_Clone776_0.py 1 14
Gpt3D_Clone776_0.py 16 29

----------------------------------------

def removeRec(node, value) :
	if node.value == value :
		node.value = node.next.value
		node.next = node.next.next
		return True
	if node.next == None :
		return False
	if node.next.value == value :
		node.next = node.next.next
		return True
	return removeRec(node.next, value)
----------------------------------------

def removeRec3(node, value) :
	if node.value == value :
		temp = node.next
		node.value = temp.value
		node.next = temp.next
		return True
	if node.next == None :
		return False
	if node.next.value == value :
		node.next = node.next.next
		return True
	return removeRec3(node.next, value)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
1
Gpt3D_Clone777_1.py 1 15
Gpt3D_Clone777_1.py 17 29

----------------------------------------

def swap(inp) :
	inp = inp.split()
	out = []
	d1 = ['i am', 'you are', 'i\'m', 'you\'re', 'my', 'your', 'I', 'my', 'you']
	d2 = ['you are', 'I am', 'you\'re', 'I\'m', 'your', 'my', 'you', 'your', 'I']
	for item in inp :
		itm = item.replace(',', '')
		if itm not in d1 :
			out.append(item)
		else : out.append(d2 [d1.index(itm)])
	return ' '.join(out)
	print (swap('you love your version of my couch because I love you, and you\'re a couch-lover.'))
----------------------------------------

def swap(inp) :
	inp = inp.split()
	out = []
	dd = {'i am': 'you are', 'you are': 'i am', 'i\'m': 'you\'re', 'you\'re': 'i\'m', 'my': 'your', 'your': 'my', 'I': 'you', 'my': 'your', 'you': 'I'}
	for item in inp :
		itm = item.replace(',', '')
		if itm not in dd :
			out.append(item)
		else : out.append( dd[itm])
	return ' '.join(out)
	print (swap('you love your version of my couch because I love you, and you\'re a couch-lover.'))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
0
Gpt3D_Clone778_0.py 1 11
Gpt3D_Clone778_0.py 13 23

----------------------------------------

def softmax(z) :
	assert len(z.shape) == 2
	s = np.max(z, axis = 1)
	s = s [:, np.newaxis]
	e_x = np.exp(z - s)
	div = np.sum(e_x, axis = 1)
	div = div [:, np.newaxis]
	return e_x / div
----------------------------------------

def softmax(z) :
	assert len(z.shape) == 2
	s = np.max(z, axis = 0)
	s = s [np.newaxis, :]
	e_x = np.exp(z - s)
	div = np.sum(e_x, axis = 0)
	div = div [np.newaxis, :]
	return e_x / div
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
1
Gpt3D_Clone778_1.py 1 11
Gpt3D_Clone778_1.py 13 22

----------------------------------------

def softmax(z) :
	assert len(z.shape) == 2
	s = np.max(z, axis = 1)
	s = s [:, np.newaxis]
	e_x = np.exp(z - s)
	div = np.sum(e_x, axis = 1)
	div = div [:, np.newaxis]
	return e_x / div
----------------------------------------

def softmax (z):
	assert len(z.shape) == 2
	s = z.max(axis=1)
	s = s[:, np.newaxis]
	e_x = np.exp(z - s)
	div = e_x.sum(axis=1)
	div = div[:, np.newaxis]
	return e_x / div
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
2
Gpt3D_Clone778_2.py 1 11
Gpt3D_Clone778_2.py 13 20

----------------------------------------

def softmax(z) :
	assert len(z.shape) == 2
	s = np.max(z, axis = 1)
	s = s [:, np.newaxis]
	e_x = np.exp(z - s)
	div = np.sum(e_x, axis = 1)
	div = div [:, np.newaxis]
	return e_x / div
----------------------------------------

def softmax (z):
	assert len(z.shape) == 2
	s = np.amax(z, axis = 1)
	s = s[:, np.newaxis]
	e_x = np.exp(z - s)
	div = np.sum(e_x, axis = 1, keepdims = True)
	return e_x / div
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
0
Gpt3D_Clone779_0.py 1 8
Gpt3D_Clone779_0.py 10 14

----------------------------------------

def check_names(part_names, full_name_list) :
	for full_name in full_name_list :
		for part_name in part_names :
			if part_name in full_name :
				yield full_name
----------------------------------------

def check_names(part_names, full_name_list) :
	for full_name in full_name_list :
		if any(part_name in full_name for part_name in part_names):
			yield full_name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
781
1
Gpt3D_Clone781_1.py 1 11
Gpt3D_Clone781_1.py 13 24

----------------------------------------

def __op__(self, op, args) :
	try :
		other = args [0]
	except IndexError :
		other = None
	print "%s %s %s" % (self, op, other)
	self, other = coerce(self, other)
	return getattr(self, op)(* args)
----------------------------------------

def __op__(self, ops, args):
    try:
        other = args[0]
    except IndexError:
        other = None
    print("%s %s %s" % (self, ops, other))
    self, other = coerce(self, other)
    if hasattr(self, ops):
        return getattr(self, ops)(*args)
    else:
        raise ValueError('Unknown operator "%s"' % ops)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
0
Gpt3D_Clone786_0.py 1 14
Gpt3D_Clone786_0.py 16 25

----------------------------------------

def overlap(string1, string2) :
	count = 0;
	len1 = len(string1)
	len2 = len(string2)
	smallLen = len1
	if len2 < len1 :
		smallLen = len2
	for i in range(smallLen) :
		if string1 [i] == string2 [i] :
			count += 1
	return count
----------------------------------------

def overlap_4(input1, input2) :
	score = 0
	smallLen = len(input1)
	if len(input2) < len(input1) :
		smallLen = len(input2)
	for charIndex in range(smallLen) :
		if input1 [charIndex] == input2 [charIndex] :
			score += 1
	return score
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
787
1
Gpt3D_Clone787_1.py 1 8
Gpt3D_Clone787_1.py 10 17

----------------------------------------

def split(s, n) :
	new_list = []
	for i in range(0, len(s), n) :
		new_list.append(s [i : i + n])
	return new_list
----------------------------------------

def split_3(s, n):
	new_list = []
	start_index = 0
	while start_index < len(s):
		new_list.append(s[start_index : start_index + n])
		start_index += n
	return new_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
787
2
Gpt3D_Clone787_2.py 1 8
Gpt3D_Clone787_2.py 10 17

----------------------------------------

def split(s, n) :
	new_list = []
	for i in range(0, len(s), n) :
		new_list.append(s [i : i + n])
	return new_list
----------------------------------------

def split(s, n) :
	new_list = []
	start = 0
	while start < len(s) :
		new_list.append(s[start : start+n])
		start += n
	return new_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
787
3
Gpt3D_Clone787_3.py 1 8
Gpt3D_Clone787_3.py 10 16

----------------------------------------

def split(s, n) :
	new_list = []
	for i in range(0, len(s), n) :
		new_list.append(s [i : i + n])
	return new_list
----------------------------------------

def split(s, n) :
	new_list = []
	for i in range(len(s)//n) :
		new_list.append(s[i * n : (i + 1) * n])
	return new_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
0
Gpt3D_Clone789_0.py 1 9
Gpt3D_Clone789_0.py 11 18

----------------------------------------

def __enter__(self) :
	if self.level is not None :
		self.old_level = self.logger.level
		self.logger.setLevel(self.level)
	if self.handler :
		self.logger.addHandler(self.handler)
----------------------------------------

def __enter__(self) :
	if self.level is not None :
		temp_level = self.logger.level
		self.logger.setLevel(self.level)
		self.old_level = temp_level
	if self.handler :
		self.logger.addHandler(self.handler)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
1
Gpt3D_Clone789_1.py 1 9
Gpt3D_Clone789_1.py 11 18

----------------------------------------

def __enter__(self) :
	if self.level is not None :
		self.old_level = self.logger.level
		self.logger.setLevel(self.level)
	if self.handler :
		self.logger.addHandler(self.handler)
----------------------------------------

def __enter__(self) :
	if self.level is not None :
		old_level = self.logger.level
		self.logger.setLevel(self.level)
	if self.handler :
		self.logger.addHandler(handler)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
78
0
Gpt3D_Clone78_0.py 1 17
Gpt3D_Clone78_0.py 19 36

----------------------------------------

def parse(self, response) :
	log.msg("Begin Parsing", level = log.INFO)
	log.msg("Response from: %s" % response.url, level = log.INFO)
	hxs = HtmlXPathSelector(response)
	sites = hxs.select("//*[@id='moduleData8460']")
	items = response.meta ['items']
	for site in sites :
		item = MlboddsItem()
		item ['header'] = site.select('//div[@class="scoreboard-bar"]//h2//span[position()>1]//text()').extract()
		item ['game1'] = site.select('/*//table[position()=1]//tr//td[@class="tbl-odds-c2"]//text()').extract()
		items.append(item)
	if self.other_urls :
		return Request(self.other_urls.pop(0), meta = {'items' : items})
	return items
----------------------------------------

def parse(self, response) :
	log.msg("Begin Parsing", level = log.INFO)
	log.msg("Response from: %s" % response.url, level = log.INFO)
	hxs = HtmlXPathSelector(response)
	sites = hxs.select("//*[@id='moduleData8460']")
	items = response.meta ['items']
	for site in sites:
		item = MlboddsItem()
		item ['header'] = site.select('//div[@class="scoreboard-bar"]//h2//span[position()>1]//text()').extract()
		item ['game1'] = site.select('/*//table[position()=1]//tr//td[@class="tbl-odds-c2"]//text()').extract()
		items.append(item)
	temp_urls = self.other_urls
	if temp_urls :
		next_req = Request(temp_urls.pop(0), meta = {'items' : items})
		self.other_urls = temp_urls
		return next_req
	return items
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
0
Gpt3D_Clone790_0.py 1 10
Gpt3D_Clone790_0.py 12 20

----------------------------------------

def __exit__(self, et, ev, tb) :
	if self.level is not None :
		self.logger.setLevel(self.old_level)
	if self.handler :
		self.logger.removeHandler(self.handler)
	if self.handler and self.close :
		self.handler.close()
----------------------------------------

def __exit__(self, et, ev, tb):
	if self.level is not None:
		self.logger.setLevel(self.old_level)
	if self.handler is not None:
		self.logger.removeHandler(self.handler)
	if self.handler is not None and self.close:
		self.handler.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
1
Gpt3D_Clone790_1.py 1 10
Gpt3D_Clone790_1.py 12 19

----------------------------------------

def __exit__(self, et, ev, tb) :
	if self.level is not None :
		self.logger.setLevel(self.old_level)
	if self.handler :
		self.logger.removeHandler(self.handler)
	if self.handler and self.close :
		self.handler.close()
----------------------------------------

def __exit__(self, et, ev, tb) :
	if self.level is not None :
		self.logger.setLevel(self.old_level)
	if self.handler is not None :
		self.logger.removeHandler(self.handler)
	if self.handler is not None and self.close is not None:
		self.handler.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
791
0
Gpt3D_Clone791_0.py 1 13
Gpt3D_Clone791_0.py 15 26

----------------------------------------

def __setattr__(self, a, v) :
	propobj = getattr(self.__class__, a, None)
	if isinstance(propobj, property) :
		print "setting attr %s using property's fset" % a
		if propobj.fset is None :
			raise AttributeError("can't set attribute")
		propobj.fset(self, v)
	else :
		print "setting attr %s" % a
		super(Test, self).__setattr__(a, v)
----------------------------------------

def __setattr__(self, a, v) :
	propobj = getattr(self.__class__, a, None)
	if isinstance(propobj, property) :
		if propobj.fset is not None :
			print "setting attr %s using property's fset" % a
			propobj.fset(self, v)
		else :
			raise AttributeError("can't set attribute")
	else :
		print "setting attr %s" % a
		super(Test, self).__setattr__(a, v)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
0
Gpt3D_Clone793_0.py 1 9
Gpt3D_Clone793_0.py 11 22

----------------------------------------

def square(x) :
	try :
		y = [e ** 2 for e in x]
	except TypeError :
		y = x ** 2
	return y
----------------------------------------

def square(x):
	y = 0
	if isinstance(x, list):
		try:
			y = [f ** 2 for f in x]
		except TypeError:
			y = x ** 2
	else:
		z = x ** 2
		y = [z]
	return y
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
1
Gpt3D_Clone793_1.py 1 9
Gpt3D_Clone793_1.py 11 22

----------------------------------------

def square(x) :
	try :
		y = [e ** 2 for e in x]
	except TypeError :
		y = x ** 2
	return y
----------------------------------------

def square(x):
	y = 0
	if isinstance(x, list):
		try:
			y = [e ** 2 for e in x]
		except TypeError:
			y = x ** 2
	else:
		y = x ** 2   
	return y
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
795
0
Gpt3D_Clone795_0.py 1 12
Gpt3D_Clone795_0.py 14 24

----------------------------------------

def encrypt(key, plaintext) :
	padded_key = key.ljust(KEY_SIZE, '\0')
	padded_text = plaintext + (BLOCK_SIZE - len(plaintext) % BLOCK_SIZE) * '\0'
	r = rijndael.rijndael(padded_key, BLOCK_SIZE)
	ciphertext = ''
	for start in range(0, len(padded_text), BLOCK_SIZE) :
		ciphertext += r.encrypt(padded_text [start : start + BLOCK_SIZE])
	encoded = base64.b64encode(ciphertext)
	return encoded
----------------------------------------

def encrypt(key, plaintext) :
        padded_key = key.zfill(KEY_SIZE)
        padded_text = plaintext + (BLOCK_SIZE - len(plaintext) % BLOCK_SIZE) * '\0'
	r = rijndael.rijndael(padded_key, BLOCK_SIZE)
        ciphertext = ''
        for start in range(BLOCK_SIZE, len(padded_text), BLOCK_SIZE) :
                ciphertext += r.encrypt(padded_text [start : start + BLOCK_SIZE])
	encoded = base64.b64encode(ciphertext)
	encoded = encoded.decode("utf-8")
        return encoded
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
0
Gpt3D_Clone797_0.py 1 11
Gpt3D_Clone797_0.py 13 21

----------------------------------------

def count(list1) :
	x = 0
	total = 0
	while x < len(list1) :
		total += list [x]
		print total
		x = x + 1
	return total
----------------------------------------

def count(list1):
	x = 0 
	total = 0 
	for i in list1:
		total += i
		print total
		x = x + 1
	return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
1
Gpt3D_Clone797_1.py 1 11
Gpt3D_Clone797_1.py 13 21

----------------------------------------

def count(list1) :
	x = 0
	total = 0
	while x < len(list1) :
		total += list [x]
		print total
		x = x + 1
	return total
----------------------------------------

def calculate(list2):
	x = 0 
	total = 0 
	while x < len(list2):
		total += list2[x]
		print("The total is:", total)
		x += 1
	return("The sum of the items in list2 is: ", total)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
1
Gpt3D_Clone798_1.py 1 11
Gpt3D_Clone798_1.py 13 19

----------------------------------------

def count(list1) :
	x = 0
	total = 0
	while x < len(list1) :
		total += list [x]
		print total
		x = x + 1
	return total
----------------------------------------

def count(list1) :
	total = 0
	for x in range(len(list1)):
		total += list1[x]
		print total
	return total
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
799
0
Gpt3D_Clone799_0.py 1 12
Gpt3D_Clone799_0.py 14 25

----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		try :
			if elem [0] == letter :
				count = count + 1
		except Exception, ex :
			print ex.message
	return count
----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	i = 0
	while i < len(p) :
		try :
			if p[i][0] == letter :
				count = count + 1
		except Exception, ex :
			print ex.message
		i = i + 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
799
1
Gpt3D_Clone799_1.py 1 12
Gpt3D_Clone799_1.py 14 21

----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		try :
			if elem [0] == letter :
				count = count + 1
		except Exception, ex :
			print ex.message
	return count
----------------------------------------

def count_occurrences(p, letter):
	count = 0
	i = 0
	for elem in p:
		if letter in elem.split(' ')[0]:
			count = count + 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
799
2
Gpt3D_Clone799_2.py 1 12
Gpt3D_Clone799_2.py 14 20

----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		try :
			if elem [0] == letter :
				count = count + 1
		except Exception, ex :
			print ex.message
	return count
----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		if type(elem) is str and elem[0] == letter :
			count = count + 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
799
3
Gpt3D_Clone799_3.py 1 12
Gpt3D_Clone799_3.py 14 20

----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		try :
			if elem [0] == letter :
				count = count + 1
		except Exception, ex :
			print ex.message
	return count
----------------------------------------

def count_occurrences(p, letter) :
	count = 0
	for elem in p :
		if elem and elem[0] == letter :
			count = count + 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
0
Gpt3D_Clone801_0.py 1 12
Gpt3D_Clone801_0.py 14 23

----------------------------------------

def sumvars(x, y, z, d = None) :
	s = x
	if not d is None :
		d ['first_step'] = s
	s += y
	if not d is None :
		d ['second_step'] = s
	s += z
	return s
----------------------------------------

def sumvars(x, y, z, d=dict() ) :
	s = x
	if d is not None:
		d['first_step'] = s
	s += y
	if d is not None:
		d['second_step'] = s
	s += z
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
1
Gpt3D_Clone801_1.py 1 12
Gpt3D_Clone801_1.py 14 22

----------------------------------------

def sumvars(x, y, z, d = None) :
	s = x
	if not d is None :
		d ['first_step'] = s
	s += y
	if not d is None :
		d ['second_step'] = s
	s += z
	return s
----------------------------------------

def sumvars(x, y, z, d = None) :
	s = x
	s += y
	s += z
	if not d is None :
		d ['third_step'] = s
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
2
Gpt3D_Clone801_2.py 1 12
Gpt3D_Clone801_2.py 14 21

----------------------------------------

def sumvars(x, y, z, d = None) :
	s = x
	if not d is None :
		d ['first_step'] = s
	s += y
	if not d is None :
		d ['second_step'] = s
	s += z
	return s
----------------------------------------

def sumvars(x, y, z, d = { }) :
	s = x
	d['first_step'] = s
	s += y
	d['second_step'] = s
	s += z
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
3
Gpt3D_Clone801_3.py 1 12
Gpt3D_Clone801_3.py 14 21

----------------------------------------

def sumvars(x, y, z, d = None) :
	s = x
	if not d is None :
		d ['first_step'] = s
	s += y
	if not d is None :
		d ['second_step'] = s
	s += z
	return s
----------------------------------------

def sumvars(x, y, z, d = {}) :
	s = x
	d ['first_step'] = s
	s += y
	d ['second_step'] = s
	s += z
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
802
0
Gpt3D_Clone802_0.py 1 13
Gpt3D_Clone802_0.py 15 26

----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd, tl = lst [0], lst [1 :]
	if isinstance(hd, list) :
		return flat_sum(hd) + flat_sum(tl)
	elif isinstance(hd, Number) :
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd = lst[0]
	tl = lst[1:]
	if type(hd) is list :
		return flat_sum(hd) + flat_sum(tl)
	elif isinstance(hd, (int, float)) :
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
802
1
Gpt3D_Clone802_1.py 1 13
Gpt3D_Clone802_1.py 15 26

----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd, tl = lst [0], lst [1 :]
	if isinstance(hd, list) :
		return flat_sum(hd) + flat_sum(tl)
	elif isinstance(hd, Number) :
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd = lst [0]
	tl = lst [1 :]
	if type(hd) is list :
		return flat_sum(hd) + flat_sum(tl)
	elif isinstance(hd, int) :
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
802
2
Gpt3D_Clone802_2.py 1 13
Gpt3D_Clone802_2.py 15 26

----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd, tl = lst [0], lst [1 :]
	if isinstance(hd, list) :
		return flat_sum(hd) + flat_sum(tl)
	elif isinstance(hd, Number) :
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd = lst [0]
	tl = lst [1 :]
	if type(hd) is list :
		return flat_sum(hd) + flat_sum(tl)
	elif is_number(hd) :
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
802
3
Gpt3D_Clone802_3.py 1 13
Gpt3D_Clone802_3.py 15 26

----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd, tl = lst [0], lst [1 :]
	if isinstance(hd, list) :
		return flat_sum(hd) + flat_sum(tl)
	elif isinstance(hd, Number) :
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
----------------------------------------

def flat_sum(lst) :
	if len(lst) == 0 :
		return 0
	hd = lst[0]
	tl = lst[1:]
	if type(hd) is list :
		return flat_sum(hd) + flat_sum(tl)
	elif type(hd) is int or type(hd) is float:
		return hd + flat_sum(tl)
	else :
		return flat_sum(tl)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
0
Gpt3D_Clone803_0.py 1 17
Gpt3D_Clone803_0.py 19 32

----------------------------------------

def do_GET(self) :
	path = self.path
	self.uri = path.split("/") [1 :]
	actions = {
	"folder" : self.folder,
	}
	resource = self.uri [0]
	if not resource :
		return self.get_static_content()
	action = actions.get(resource)
	if action :
		print "action from looking up '%s' is:" % resource, action
		return self.wfile.write(action())
	SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
----------------------------------------

def do_GET(self) :
	uri = self.path.split("/") [1:]
	actions = {
	"folder" : self.folder,
	}
	resource = uri[0]
	if not resource :
		return self.get_static_content()
	action = actions.get(resource)
	if action :
		print("action from looking up '%s' is:" % resource, action)
		return self.wfile.write(action())
	SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
0
Gpt3D_Clone804_0.py 1 9
Gpt3D_Clone804_0.py 11 20

----------------------------------------

def backtrack(res, temp, nums, start) :
	res.append(temp [:])
	for i in range(start, len(nums)) :
		temp.append(nums [i])
		backtrack(res, temp, nums, i + 1)
		temp.pop()
----------------------------------------

def backtrack(res, temp, nums, start) :
	res.append(temp [:])
	i = start
	while i < len(nums) :
		temp.append(nums [i])
		backtrack(res, temp, nums, i + 1)
		temp.pop()
		i += 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
1
Gpt3D_Clone804_1.py 1 9
Gpt3D_Clone804_1.py 11 19

----------------------------------------

def backtrack(res, temp, nums, start) :
	res.append(temp [:])
	for i in range(start, len(nums)) :
		temp.append(nums [i])
		backtrack(res, temp, nums, i + 1)
		temp.pop()
----------------------------------------

def backtrack(res, temp, nums, start) :
	res.append(temp.copy())
	for i in range(start, len(nums)) :
        val = nums[i]
        temp.append(val)
        backtrack(res, temp, nums, i + 1)
        temp.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
2
Gpt3D_Clone804_2.py 1 9
Gpt3D_Clone804_2.py 11 18

----------------------------------------

def backtrack(res, temp, nums, start) :
	res.append(temp [:])
	for i in range(start, len(nums)) :
		temp.append(nums [i])
		backtrack(res, temp, nums, i + 1)
		temp.pop()
----------------------------------------

def backtrack(res, temp, nums, start) :
	res.append(temp [:])
	
	for num in nums[start:] :
		temp.append(num)
		backtrack(res, temp, nums, start+1)
		temp.pop()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
0
Gpt3D_Clone805_0.py 1 16
Gpt3D_Clone805_0.py 18 36

----------------------------------------

def __init__(self, iterable = {}, ** kwargs) :
	super(StrictDict, self).__init__({})
	keys = set(iterable.keys()).union(set(kwargs.keys()))
	if not keys.issuperset(self.required) :
		msg = str(self.__class__.__name__) + " requires: " + str([str(key) for key in self.required])
		raise AttributeError(msg)
	if len(list(self.at_least_one_required)) and len(list(keys.intersection(self.at_least_one_required))) < 1 :
		msg = str(self.__class__.__name__) + " requires at least one: " + str([str(key) for key in self.at_least_one_required])
		raise AttributeError(msg)
	for key, val in iterable.iteritems() :
		self.__setitem__(key, val)
	for key, val in kwargs.iteritems() :
		self.__setitem__(key, val)
----------------------------------------

def __init__(self, iterable={}, **kwargs) :
    super(StrictDict, self).__init__({})
    all_keys = set(iterable.keys()) 
    all_keys.update(kwargs.keys())
    miss_required_keys = self.required - all_keys
    if miss_required_keys:
        msg = str(self.__class__.__name__) + " requires: " + str([str(key) for key in self.required])
        raise AttributeError(msg)
    least_encounter_keys = set(self.at_least_one_required) & all_keys
    if len(list(self.at_least_one_required)) and len(list(least_encounter_keys)) < 1 :
        msg = str(self.__class__.__name__) + " requires at least one: " + str([str(key) for key in self.at_least_one_required])
        raise AttributeError(msg)
    for key, val in iterable.items():
        self.__setitem__(key, val)
    for key, val in kwargs.items():
        self.__setitem__(key, val)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
1
Gpt3D_Clone805_1.py 1 16
Gpt3D_Clone805_1.py 18 31

----------------------------------------

def __init__(self, iterable = {}, ** kwargs) :
	super(StrictDict, self).__init__({})
	keys = set(iterable.keys()).union(set(kwargs.keys()))
	if not keys.issuperset(self.required) :
		msg = str(self.__class__.__name__) + " requires: " + str([str(key) for key in self.required])
		raise AttributeError(msg)
	if len(list(self.at_least_one_required)) and len(list(keys.intersection(self.at_least_one_required))) < 1 :
		msg = str(self.__class__.__name__) + " requires at least one: " + str([str(key) for key in self.at_least_one_required])
		raise AttributeError(msg)
	for key, val in iterable.iteritems() :
		self.__setitem__(key, val)
	for key, val in kwargs.iteritems() :
		self.__setitem__(key, val)
----------------------------------------

def __init__(self, iterable = {}, ** kwargs) :
	super().__init__({})
	keys = set(iterable.keys()).union(set(kwargs.keys()))
	if not keys.issuperset(self.required) :
		msg = self.__class__.__name__ + " requires: " + [key for key in self.required]
		raise AttributeError(msg)
	if len(self.at_least_one_required) and len(keys.intersection(self.at_least_one_required)) < 1 :
		msg = self.__class__.__name__ + " requires at least one: " + [key for key in self.at_least_one_required]
		raise AttributeError(msg)
	for key, val in iterable.items() :
		self[key] = val
	for key, val in kwargs.items() :
		self[key] = val
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
806
1
Gpt3D_Clone806_1.py 1 13
Gpt3D_Clone806_1.py 15 26

----------------------------------------

def power_function(decimal, integer) :
	num = 1
	for function in range(abs(integer)) :
		if integer > 0 :
			num *= decimal
		if integer < 0 :
			num *= 1.0 / decimal
		if integer == 0 :
			num = 1
	return num
----------------------------------------

def power_function(decimal, integer):
   num = 1
   if integer > 0:
      for function in range(integer):
         num *= decimal
   elif integer == 0:
      num = 1
   else:
      for function in range(abs(integer)):
         num *= 1.0/decimal
   return num
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
806
2
Gpt3D_Clone806_2.py 1 13
Gpt3D_Clone806_2.py 15 27

----------------------------------------

def power_function(decimal, integer) :
	num = 1
	for function in range(abs(integer)) :
		if integer > 0 :
			num *= decimal
		if integer < 0 :
			num *= 1.0 / decimal
		if integer == 0 :
			num = 1
	return num
----------------------------------------

def power_function(decimal, integer):
	num = 1
	if integer > 0:
		for function in range(abs(integer)):
			num *= decimal
	elif integer < 0:
		for function in range(abs(integer)):
			num *= 1.0 / decimal
	elif integer == 0 :
		num = 1
	return num
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
807
1
Gpt3D_Clone807_1.py 1 9
Gpt3D_Clone807_1.py 11 22

----------------------------------------

def is_continuous(seq) :
	non_null_indices = [i for i, obj in enumerate(seq) if obj is not None]
	for i, index in enumerate(non_null_indices [: - 1]) :
		if non_null_indices [i + 1] - index > 1 :
			return False
	return True
----------------------------------------

def is_continuous(seq):
    non_null_indices = []
    for i, obj in enumerate(seq):
        if obj is not None:
            non_null_indices.append(i)
    
    for i, index in enumerate(non_null_indices[:-1]):
        if non_null_indices[i+1] - index > 1:
            return False
    return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
808
0
Gpt3D_Clone808_0.py 1 10
Gpt3D_Clone808_0.py 12 19

----------------------------------------

def strip_output(nb) :
	for ws in nb.worksheets :
		for cell in ws.cells :
			if hasattr(cell, "outputs") :
				cell.outputs = []
			if hasattr(cell, "prompt_number") :
				del cell ["prompt_number"]
----------------------------------------

def strip_output(nb):
  for ws in nb.worksheets:
    for cell in ws.cells:
      if hasattr(cell, "outputs"):
        cell.outputs.clear()
    if hasattr(cell, "prompt_number"):
      cell["prompt_number"] = 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
1
Gpt3D_Clone80_1.py 1 9
Gpt3D_Clone80_1.py 11 18

----------------------------------------

def pdf_view(request) :
	with open('/path/to/my/file.pdf', 'r') as pdf :
		response = HttpResponse(pdf.read(), mimetype = 'application/pdf')
		response ['Content-Disposition'] = 'inline;filename=some_file.pdf'
		return response
	pdf.closed
----------------------------------------

def pdf_view(request) :
	file_name = '/path/to/my/file.pdf'
	with open(file_name, 'r') as pdf :
		response = HttpResponse(pdf.read(), mimetype = 'application/pdf')
		response ['Content-Disposition'] = 'inline;filename=' + file_name
		return response
	pdf.closed
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
0
Gpt3D_Clone812_0.py 1 15
Gpt3D_Clone812_0.py 17 30

----------------------------------------

def draw(self, win, rows, columns) :
	for day, (start, length) in self.schedule :
		box = Rectangle(
		Point(columns [day], rows [start]),
		Point(columns [day + 1], rows [start + length]))
		box.setFill(self.bg)
		box.setOutline(self.border)
		box.draw(win)
		label = Text(Point(columns [day] + 10, rows [start] + 40), self.name)
		label.fontSize = 9
		label.setFill(self.text)
		label.draw(win)
----------------------------------------

def draw(self, win, rows, columns) :
	for day, (start, length) in self.schedule :
		box = Rectangle(
		Point(columns [day], rows [start]),
		Point(columns [day + 1], rows [start + length]))
		box.setOutline("black")
		box.setFill("white")
		box.draw(win)
		label = Text(Point(columns [day] + 10, rows [start] + 40), self.name)
		label.fontSize = 9
		label.setFill("blue")
		label.draw(win)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
1
Gpt3D_Clone812_1.py 1 15
Gpt3D_Clone812_1.py 17 29

----------------------------------------

def draw(self, win, rows, columns) :
	for day, (start, length) in self.schedule :
		box = Rectangle(
		Point(columns [day], rows [start]),
		Point(columns [day + 1], rows [start + length]))
		box.setFill(self.bg)
		box.setOutline(self.border)
		box.draw(win)
		label = Text(Point(columns [day] + 10, rows [start] + 40), self.name)
		label.fontSize = 9
		label.setFill(self.text)
		label.draw(win)
----------------------------------------

def draw(self, win, rows, columns) :
	for day, (start, length) in self.schedule :
		box = Rectangle(
		Point(columns [day], rows [start]),
		Point(columns [day + 1], rows [start + length]))
		box.setOutline("red")
		box.setFill("yellow")
		box.draw(win)
		label = Text(Point(columns [day] + 10, rows [start] + 40), self.name)
		label.fontSize = 12
		label.setFill("green")
		label.draw(win)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
2
Gpt3D_Clone814_2.py 1 5
Gpt3D_Clone814_2.py 7 13

----------------------------------------

def get_icon_path(extension, size = 32) :
	type_, encoding = mimetypes.guess_type('x.' + extension)
	if type_ :
		icon = gio.content_type_get_icon(type_)
----------------------------------------

def get_icon_path(file_name, size = 32) :
	extension = file_name.split('.')[1]
	type_, encoding = mimetypes.guess_type('x.' + extension)
	if type_ :
		icon = gio.content_type_get_icon(type_)
		return icon.get_names().get_filename(size)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
5
Gpt3D_Clone814_5.py 1 5
Gpt3D_Clone814_5.py 7 13

----------------------------------------

def get_icon_path(extension, size = 32) :
	type_, encoding = mimetypes.guess_type('x.' + extension)
	if type_ :
		icon = gio.content_type_get_icon(type_)
----------------------------------------

def get_icon_path(file_name, size = 32) :
	type_, encoding = mimetypes.guess_type(file_name)
	if type_ :
		icon = gio.content_type_get_icon(type_)
		return icon.get_names().get_filename(size)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
0
Gpt3D_Clone816_0.py 1 20
Gpt3D_Clone816_0.py 22 35

----------------------------------------

def printTable(mylist) :
	maxLength = 0
	for item in mylist :
		for i in item :
			if len(i) > maxLength :
				maxLength = len(i)
			else :
				maxLength = maxLength
	for item in mylist :
		for i in range(len(item)) :
			item [i] = (item [i].rjust(maxLength))
	myNewlist = {0 : [], 1 : [], 2 : [], 3 : []}
	for i in range(len(item)) :
		for u in tableData :
			myNewlist [i].append(u [i])
	for key, value in myNewlist.items() :
		print (''.join(value))
----------------------------------------

def printTable(mylist) :
	tableData = [[x [i] for x in mylist] for i in range(len(mylist [0]))]
	maxLength = 0
	for item in mylist :
		for i in item :
			if len(i) > maxLength :
				maxLength = len(i)
			else :
				maxLength = maxLength
	for value in tableData :
		for i in range(len(value)) :
			value[i] = (value[i].rjust(maxLength))
		print (''.join(value))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
817
0
Gpt3D_Clone817_0.py 1 10
Gpt3D_Clone817_0.py 12 20

----------------------------------------

def get_value(d, ks) :
	for k in ks :
		try :
			d = d [k]
		except (KeyError, TypeError) :
			return 0
	return d
----------------------------------------

def get_value(d, ks):
	for k in ks:
		if hasattr(d, k):
			d = getattr(d, k)
		else:
			return 0
	return d
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
0
Gpt3D_Clone818_0.py 1 11
Gpt3D_Clone818_0.py 13 22

----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	assert os.access(csvfile, os.F_OK)
----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("The directory must be here: " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	if not os.access(csvfile, os.F_OK) :
		raise AssertionError("CSV file is missing: " + csvfile)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
1
Gpt3D_Clone818_1.py 1 11
Gpt3D_Clone818_1.py 13 23

----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	assert os.access(csvfile, os.F_OK)
----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("The fixture directory is missing: " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	if not os.access(csvfile, os.F_OK) :
		raise AssertionError("The CSV file does not exist: " + csvfile)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
3
Gpt3D_Clone818_3.py 1 11
Gpt3D_Clone818_3.py 13 21

----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	assert os.access(csvfile, os.F_OK)
----------------------------------------

def setup(self):
	import os.path as op
	self.fixture_dir = op.join(op.dirname(__file__), 'fixtures')
	if os.access(self.fixture_dir, os.F_OK) is False :
		raise AssertionError('Oops! the fixture dir should be here ' + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, 'profiles-source1.csv')
	assert os.access(csvfile, os.F_OK)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
1
Gpt3D_Clone819_1.py 1 11
Gpt3D_Clone819_1.py 13 21

----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.access(self.fixture_dir, os.F_OK) :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(self.fixture_dir, "profiles-source1.csv")
	assert os.access(csvfile, os.F_OK)
----------------------------------------

def setup(self) :
	import os.path as op
	self.fixture_dir = op.join(op.abspath(op.dirname(__file__)), "fixtures")
	if not os.path.exists(self.fixture_dir) :
		raise AssertionError("Oops! "
		"the fixture dir should be here " + self.fixture_dir)
	csvfile = op.join(op.dirname(self.fixture_dir), "profiles-source1.csv")
	assert os.path.exists(csvfile)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
1
Gpt3D_Clone820_1.py 1 10
Gpt3D_Clone820_1.py 12 24

----------------------------------------

def numPens(n) :
	if n < 5 :
		return False
	elif n == 5 or n == 8 or n == 24 :
		return True
	else :
		return numPens(n - 5) or numPens(n - 8) or numPens(n - 24)
----------------------------------------

def numPens(n) :
	if n < 5 : 
		return False
	elif n == 5 :
		return True
	elif n == 8 :
		return True
	elif n == 24 : 
		return True
	else :
		return numPens(n-5) or numPens(n-8) or numPens(n-24)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
2
Gpt3D_Clone820_2.py 1 10
Gpt3D_Clone820_2.py 12 24

----------------------------------------

def numPens(n) :
	if n < 5 :
		return False
	elif n == 5 or n == 8 or n == 24 :
		return True
	else :
		return numPens(n - 5) or numPens(n - 8) or numPens(n - 24)
----------------------------------------

def numPens(n): 
	if n < 5 :
		return False
	elif n == 5 :
		return True
	elif n == 8 :
		return True
	elif n == 24 :
		return True
	else :
		return numPens(n - 5) or numPens(n - 8) or numPens(n - 24)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
3
Gpt3D_Clone820_3.py 1 10
Gpt3D_Clone820_3.py 12 19

----------------------------------------

def numPens(n) :
	if n < 5 :
		return False
	elif n == 5 or n == 8 or n == 24 :
		return True
	else :
		return numPens(n - 5) or numPens(n - 8) or numPens(n - 24)
----------------------------------------

def numPens(n) :
	if n == 5 or n == 8 or n == 24 :
		return True
	elif n < 5 :
		return False
	else :
		return numPens(n - 5) or numPens(n - 8) or numPens(n - 24)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
821
0
Gpt3D_Clone821_0.py 1 12
Gpt3D_Clone821_0.py 14 24

----------------------------------------

def numPens(n) :
	if n < 0 :
		return False
	if n == 0 :
		return True
	for x in (24, 8, 5) :
		if numPens(n - x) :
			return True
	return False
----------------------------------------

def numPens(n) : 
	if n == 0:
		return True
	elif n < 0:
		return False
	else:
		for x in (20, 9, 5) :
			if numPens(n - x) :
				return True
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
0
Gpt3D_Clone823_0.py 1 11
Gpt3D_Clone823_0.py 13 26

----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	exceptionMessage = None
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	except Exception as e:
		exceptionMessage = e.message
	finally :
		timer.cancel()
	return exceptionMessage
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
824
0
Gpt3D_Clone824_0.py 1 11
Gpt3D_Clone824_0.py 13 21

----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
----------------------------------------

def run(cmd, timeout_sec):
	proc = Popen(shlex.split(cmd), stdin=PIPE, stdout=PIPE, stderr=PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try:
		timer.start()
		stdout, stderr = proc.communicate(timeout=timeout_sec)
	finally:
		timer.cancel()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
824
1
Gpt3D_Clone824_1.py 1 11
Gpt3D_Clone824_1.py 13 21

----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
----------------------------------------

def run(cmd, timeout_sec):
	proc = Popen(shlex.split(cmd), stdin = PIPE, stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdin, stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
824
2
Gpt3D_Clone824_2.py 1 11
Gpt3D_Clone824_2.py 13 21

----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
----------------------------------------

def run(cmd, timeout_sec):
	proc = Popen(shlex.split(cmd), stdin=PIPE, stdout=PIPE, stderr=PIPE, bufsize=0)
	timer = Timer(timeout_sec, proc.kill)
	try:
		timer.start()
		stdout, stderr = proc.communicate(timeout=timeout_sec)
	finally:
		timer.cancel()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
0
Gpt3D_Clone825_0.py 1 11
Gpt3D_Clone825_0.py 13 25

----------------------------------------

def run(cmd, timeout_sec) :
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	finally :
		timer.cancel()
----------------------------------------

def run (cmd, timeout_sec):
	proc = Popen(shlex.split(cmd), stdout = PIPE, stderr = PIPE)
	timer = Timer(timeout_sec, proc.kill)
	try :
		timer.start()
		stdout, stderr = proc.communicate()
	except :
		pass
	else :
		return
	finally :
		timer.cancel()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
0
Gpt3D_Clone826_0.py 1 11
Gpt3D_Clone826_0.py 13 22

----------------------------------------

def run(self):
    self.process = subprocess.Popen(self.cmd, stdout=self.outFile, stderr=self.errFile)
    while self.process.poll() is None and self.timeout > 0:
        time.sleep(1)
        self.timeout -= 1
    if not self.timeout > 0:
        self.process.terminate()
        self.timed_out = True
    else:
        self.timed_out = False
----------------------------------------

def run(self):
    self.process = subprocess.Popen(self.cmd, stdout=self.outFile, stderr=self.errFile)
    while self.timeout > 0:
        if self.process.poll() is not None:
            self.timed_out = False
            break
        time.sleep(1)
        self.timeout -= 1
    if self.timeout <= 0:
        self.process.terminate()
        self.timed_out = True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
1
Gpt3D_Clone826_1.py 1 13
Gpt3D_Clone826_1.py 15 25

----------------------------------------

def run(self) :
	self.process = subprocess.Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
	while (self.process.poll() is None and self.timeout > 0) :
		time.sleep(1)
		self.timeout -= 1
	if not self.timeout > 0 :
		self.process.terminate()
		self.timed_out = True
	else :
		self.timed_out = False
----------------------------------------

def run(self) :
	self.process = subprocess.Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
	end_time = time.time() + self.timeout
	while (self.process.poll() is None and end_time > time.time()) :
		time.sleep(1)
	if end_time <= time.time() :
		self.process.terminate()
		self.timed_out = True
	else :
		self.timed_out = False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
827
0
Gpt3D_Clone827_0.py 1 13
Gpt3D_Clone827_0.py 15 26

----------------------------------------

def run(self) :
	self.process = subprocess.Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
	while (self.process.poll() is None and self.timeout > 0) :
		time.sleep(1)
		self.timeout -= 1
	if not self.timeout > 0 :
		self.process.terminate()
		self.timed_out = True
	else :
		self.timed_out = False
----------------------------------------

def run(self): 
  self.process = subprocess.Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
  wait_limit = 1
  while (self.process.poll() is None and self.timeout > 0) : 
    time.sleep(wait_limit)
    self.timeout -= wait_limit
  if not self.timeout > 0 :
    self.process.terminate()
    self.timed_out = True
  else :
    self.timed_out = False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
827
2
Gpt3D_Clone827_2.py 1 13
Gpt3D_Clone827_2.py 15 25

----------------------------------------

def run(self) :
	self.process = subprocess.Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
	while (self.process.poll() is None and self.timeout > 0) :
		time.sleep(1)
		self.timeout -= 1
	if not self.timeout > 0 :
		self.process.terminate()
		self.timed_out = True
	else :
		self.timed_out = False
----------------------------------------

def run(self):
	self.process = subprocess.Popen(self.cmd, stdout = self.outFile, stderr = self.errFile)
	while (self.process.poll() is None) :
		sleep(1)
		self.timeout -= 1
	if not self.timeout > 0 :
		terminate(self.process)
		self.timed_out = True
	else :
		self.timed_out = False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
0
Gpt3D_Clone829_0.py 1 11
Gpt3D_Clone829_0.py 13 22

----------------------------------------

def breakdown(a) :
	y = []
	q = len(a)
	while q > 0 :
		y += [list(a)]
		a.pop()
		q -= 1
	return y
----------------------------------------

def breakdown_type3(a) :
	y = []
	q = len(a)
	i = 0
	while i < q :
		y += [list(a)]
		a.pop()
		i += 1
	return y
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
1
Gpt3D_Clone829_1.py 1 11
Gpt3D_Clone829_1.py 13 20

----------------------------------------

def breakdown(a) :
	y = []
	q = len(a)
	while q > 0 :
		y += [list(a)]
		a.pop()
		q -= 1
	return y
----------------------------------------

def breakdown_type4(a) :
	y = []
	q = len(a)
	for i in range(q) :
		y += [list(a)]
		a.pop()
	return y
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
0
Gpt3D_Clone830_0.py 1 14
Gpt3D_Clone830_0.py 16 25

----------------------------------------

def trans(transition, input, final, state) :
	for each in transition [state] [int(input [0])] :
		if each < 4 :
			state = each
			if len(input) == 1 :
				if (str(state) in final) :
					print "accepted"
					sys.exit()
				else :
					continue
			trans(transition, input [1 :], final, state)
----------------------------------------

def trans(transition, input, final, state) :
	for each in transition[state][int(input[0])] :
		if each < 4 :
			state = each
			if len(input) > 1 :
				trans(transition, input[1:], final, state)
			elif str(state) in final :
				print "accepted"
				sys.exit()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
1
Gpt3D_Clone831_1.py 1 8
Gpt3D_Clone831_1.py 10 17

----------------------------------------

def fib(n) :
	if n < = 2 :
		return 1
	else :
		return fib(n - 1) + fib(n - 2)
----------------------------------------

def fib(n) :
	if n <= 2 :
		return 1
	else :
		f1 = fib(n - 1)
		f2 = fib(n - 2)
		return f1 + f2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
0
Gpt3D_Clone834_0.py 1 13
Gpt3D_Clone834_0.py 15 27

----------------------------------------

def find_solution(low, high) :
	for num in xrange(low, high + 1) :
		lst = find_prime_factors(num)
		for n, count in lst :
			pf [n] = max(pf [n], count)
	print "prime factors:", pf
	solution = 1
	for n, count in pf.items() :
		solution *= n ** count
	return solution
----------------------------------------

def find_solution(low, high) :
	pf = {}
	for num in xrange(low, high + 1) :
		lst = find_prime_factors(num)
		for pair in lst :
			pf [pair[0]] = max(pf [pair[0]], pair[1])
	print("prime factors: "+ str(pf))
	solution = 1
	for n, count in pf.items() :
		solution *= n ** count
	return solution
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
835
0
Gpt3D_Clone835_0.py 1 15
Gpt3D_Clone835_0.py 17 28

----------------------------------------

def read(self, block_size = None) :
	block_size = block_size or self._block_size
	total_read = 0
	chunks = []
	for chunk in self._reader :
		chunks.append(chunk)
		total_read += len(chunk)
		if total_read > block_size :
			contents = ''.join(chunks)
			self._reader = chain([contents [block_size :]], self._reader)
			return contents [: block_size]
	return ''.join(chunks)
----------------------------------------

def read(self, block_size = None) :
    block_size = block_size or self._block_size
    total_read = 0
    contents = []
    for chunk in self._reader :
        contents.append(chunk)
        total_read += len(chunk)
        if total_read > block_size :
            self._reader = chain([ ''.join(contents) [block_size :]], self._reader)
            return ''.join(contents) [: block_size]
    return ''.join(contents)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
0
Gpt3D_Clone836_0.py 1 11
Gpt3D_Clone836_0.py 13 21

----------------------------------------

def contains_consecutive_duplicates(xs) :
	for i in xs :
		if xs.indexOf(i) == len(xs) :
			break
		if xs [i] == xs [i - 1] or xs [i] == xs [i + 1] :
			return True
		else :
			return False
----------------------------------------

def contains_consecutive_duplicates(xs):
	for i in range(len(xs)):
		if i != len(xs)-1:
			if xs[i] == xs[i-1] or xs[i] == xs[i+1]:
				return True
		else:
			break
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
0
Gpt3D_Clone838_0.py 1 11
Gpt3D_Clone838_0.py 13 26

----------------------------------------

def get_leaves(self, node) :
	kids = getchildren(node)
	for i in kids :
		if leafnode(i) :
			self.get_leaves(i)
		else :
			a = process_leaf(i)
			self.list_of_leaves.append(a)
----------------------------------------

def get_leaves(self, node):
	kids = getchildren(node)
	for i in kids:
		if leafnode(i):
			self.get_leaves(i)
		else:
			a = process_leaf(i)
			if check_conditions(self, i):
				self.list_of_leaves.append(a)
				b = compute_field(a)
				self.list_of_leaves.append(b)
			else:
				continue
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
839
0
Gpt3D_Clone839_0.py 1 10
Gpt3D_Clone839_0.py 12 20

----------------------------------------

def get_leaves(node) :
	for child in getchildren(node) :
		if leafnode(child) :
			for each in get_leaves(child) :
				yield each
		else :
			yield process_leaf(child)
----------------------------------------

def fetch_leaves(node) :
	for child in fetching_children(node) :
		if leaff_node(child) :
			for each_one in fetch_leaves(child) :
				yield each_one
		else :
			yielded = processing_leaf(child)
			yield yielded
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
839
1
Gpt3D_Clone839_1.py 1 10
Gpt3D_Clone839_1.py 12 20

----------------------------------------

def get_leaves(node) :
	for child in getchildren(node) :
		if leafnode(child) :
			for each in get_leaves(child) :
				yield each
		else :
			yield process_leaf(child)
----------------------------------------

def get_leaves(node) :
	for child in get_childrens(node) :
		if leaf_node(child) :
			for every in get_leaves(child) :
				yield every
		else :
			yielding = process_leaf(child) 
			yield yielding
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
83
1
Gpt3D_Clone83_1.py 1 8
Gpt3D_Clone83_1.py 10 16

----------------------------------------

def characters(nameLst) :
	outLst = []
	for i in range(len(nameLst)) :
		outLst = outlst.append(len(nameLst))
	return (outLst)
----------------------------------------

def characters(nameLst) :
	outLst = []
	for i, name in enumerate(nameLst) :
		outLst = outlst.append(len(nameLst[i]))
	return (outLst)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
83
2
Gpt3D_Clone83_2.py 1 8
Gpt3D_Clone83_2.py 10 15

----------------------------------------

def characters(nameLst) :
	outLst = []
	for i in range(len(nameLst)) :
		outLst = outlst.append(len(nameLst))
	return (outLst)
----------------------------------------

def characters(nameLst):
	outLst =[]
	for name in nameLst:
		outLst = outLst.append(len(nameLst))
	return outLst
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
0
Gpt3D_Clone841_0.py 1 11
Gpt3D_Clone841_0.py 13 22

----------------------------------------

def base_and_num(number, base) :
	number = int(number)
	while number ! = 0 :
		digit = number % 10
		if digit > base :
			return False
		number = number / 10
	return True
----------------------------------------

def base_and_num(number, base) :
	number = int(number)
	while number != 0 :
		digit = number % 10
		if digit <= 0 or digit >= base :
			return False
		number = number // 10
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
1
Gpt3D_Clone841_1.py 1 11
Gpt3D_Clone841_1.py 13 20

----------------------------------------

def base_and_num(number, base) :
	number = int(number)
	while number ! = 0 :
		digit = number % 10
		if digit > base :
			return False
		number = number / 10
	return True
----------------------------------------

def base_and_num(number, base) :
	number = int(number)
	while number != 0 : 
		if number % 10 <= 0 or number % 10 >= base :
			return False
		number = number // 10
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
0
Gpt3D_Clone842_0.py 1 10
Gpt3D_Clone842_0.py 12 21

----------------------------------------

def __call__(self, * args, ** kwargs) :
	if not hasattr(self, 'fn') :
		self.fn = args [0]
		return self
	print "In my decorator before call, with arg %s" % self.argument
	self.fn(* args, ** kwargs)
	print "In my decorator after call, with arg %s" % self.argument
----------------------------------------

def __call__(self, * args, ** kwargs) :
	if not hasattr(self, 'fn') :
		self.fn = args [0]
		return self
	else:
		print "In my decorator before call, with arg %s" % self.argument
		self.fn(*args, **kwargs)
		print("In my decorator after call, with arg %s" % self.argument)
	
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
1
Gpt3D_Clone844_1.py 1 10
Gpt3D_Clone844_1.py 12 21

----------------------------------------

def f(n) :
	if n == 0 :
		return 0
	if n == 1 :
		return 1
	else :
		return 0.5 * (f(n - 1) + f(n - 2))
----------------------------------------

def f(n) :
	if n == 0 :
		return 0
	elif n == 1 :
		return 1
	else :
		m1 = f(n - 1)
		m2 = f(n - 2)
		return 0.5 * (m1 + m2)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
0
Gpt3D_Clone846_0.py 1 10
Gpt3D_Clone846_0.py 12 22

----------------------------------------

def reader(fd) :
	with os.fdopen(fd, bufsize = bufsize) as f :
		while True :
			data = f.read(bufsize)
			if not data :
				break
			chomp(data)
----------------------------------------

def reader(fd) :
	f = os.fdopen(fd, bufsize = bufsize)
	try :
		while True :
			data = f.read(bufsize)
			if not data :
				break
			chomp(data)
	finally :
		f.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
1
Gpt3D_Clone846_1.py 1 10
Gpt3D_Clone846_1.py 12 22

----------------------------------------

def reader(fd) :
	with os.fdopen(fd, bufsize = bufsize) as f :
		while True :
			data = f.read(bufsize)
			if not data :
				break
			chomp(data)
----------------------------------------

def reader(fd) :	
	try :
		with os.fdopen(fd, bufsize = bufsize) as f :
			while True :
				data = f.read(bufsize)
				if not data :
					break
				chomp(data)
	finally :
		f.close()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
1
Gpt3D_Clone847_1.py 1 9
Gpt3D_Clone847_1.py 11 21

----------------------------------------

def remove_item(todolist, name) :
	result = [item for item in todolist if name ! = item [1]]
	if len(todolist) == len(result) :
		return False
	else :
		return result
----------------------------------------

def remove_item(todolist, name) :
	result = []
	for item in todolist :
		if name != item[1] : 
			result.append(item)
	if len(todolist) == len(result) :
		return False
	else :
		return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
2
Gpt3D_Clone847_2.py 1 9
Gpt3D_Clone847_2.py 11 22

----------------------------------------

def remove_item(todolist, name) :
	result = [item for item in todolist if name ! = item [1]]
	if len(todolist) == len(result) :
		return False
	else :
		return result
----------------------------------------

def remove_item(todolist, name): 
  result = [] 
  for item in todolist: 
    if name != item [1]: 
      result.append(item) 
  
  if len(todolist) == len(result): 
    return False 
  else: 
    return result
    
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
0
Gpt3D_Clone851_0.py 1 8
Gpt3D_Clone851_0.py 10 16

----------------------------------------

def not_raises(exception) :
	try :
		yield
	except exception :
		raise pytest.fail("DID RAISE {0}".format(exception))
----------------------------------------

def not_raises(exception) :
	try :
		yield
	except exception as err:
		raise pytest.fail(err)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
1
Gpt3D_Clone854_1.py 1 8
Gpt3D_Clone854_1.py 10 17

----------------------------------------

def fib(a = 0, b = 1) :
	yield a
	while True :
		yield b
		a, b = b, a + b
----------------------------------------

def fib(a = 0, b = 1):
	yield a
	while True:
		yield b
		temp = b 
		b = a + b
		a = temp 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
856
0
Gpt3D_Clone856_0.py 1 14
Gpt3D_Clone856_0.py 16 28

----------------------------------------

def choose(n, k) :
	if 0 < = k < = n :
		ntok = 1
		ktok = 1
		for t in xrange(1, min(k, n - k) + 1) :
			ntok *= n
			ktok *= t
			n -= 1
		return ntok / / ktok
	else :
		return 0
----------------------------------------

def choose(n, k):
	if 0 <= k <= n :
		start = min(k, n - k) + 1
		ntok = 1
		ktok = 1
		for t in xrange(1, start):
			ntok *= n
			ktok *= t
			n -= 1
		return int(ntok // ktok)
	else :
		return 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
856
1
Gpt3D_Clone856_1.py 1 14
Gpt3D_Clone856_1.py 16 27

----------------------------------------

def choose(n, k) :
	if 0 < = k < = n :
		ntok = 1
		ktok = 1
		for t in xrange(1, min(k, n - k) + 1) :
			ntok *= n
			ktok *= t
			n -= 1
		return ntok / / ktok
	else :
		return 0
----------------------------------------

def choose(n, k) :
	if 0 < = k < = n :
		res = 1
		i = 1
		while i <= min(k, n - k) :
			res = res * n / i
			n -= 1
			i += 1
		return res
	else :
		return 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
856
2
Gpt3D_Clone856_2.py 1 14
Gpt3D_Clone856_2.py 16 26

----------------------------------------

def choose(n, k) :
	if 0 < = k < = n :
		ntok = 1
		ktok = 1
		for t in xrange(1, min(k, n - k) + 1) :
			ntok *= n
			ktok *= t
			n -= 1
		return ntok / / ktok
	else :
		return 0
----------------------------------------

def choose(n, k) :
	if 0 < = k < = n :
		res = 1
		for t in xrange(1, min(k, n - k) + 1) :
			res = res * n / t
			n -= 1
		return res
	else :
		return 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
858
0
Gpt3D_Clone858_0.py 1 24
Gpt3D_Clone858_0.py 26 46

----------------------------------------

def viterbi(transition_probabilities, conditional_probabilities) :
	num_samples = conditional_probabilities.shape [1]
	num_states = transition_probabilities.shape [0]
	c = np.zeros(num_samples)
	viterbi = np.zeros((num_states, num_samples))
	best_path_table = np.zeros((num_states, num_samples))
	best_path = np.zeros(num_samples).astype(np.int32)
	viterbi [:, 0] = conditional_probabilities [:, 0]
	c [0] = 1.0 / np.sum(viterbi [:, 0])
	viterbi [:, 0] = c [0] * viterbi [:, 0]
	for t in range(1, num_samples) :
		for s in range(0, num_states) :
			trans_p = viterbi [:, t - 1] * transition_probabilities [:, s]
			best_path_table [s, t], viterbi [s, t] = max(enumerate(trans_p), key = operator.itemgetter(1))
			viterbi [s, t] = viterbi [s, t] * conditional_probabilities [s] [t]
		c [t] = 1.0 / np.sum(viterbi [:, t])
		viterbi [:, t] = c [t] * viterbi [:, t]
	best_path [num_samples - 1] = viterbi [:, num_samples - 1].argmax()
	for t in range(num_samples - 1, 0, - 1) :
		best_path [t - 1] = best_path_table [best_path [t], t]
	return best_path
----------------------------------------

def viterbi(transition_probabilities, conditional_probabilities):
	num_samples = conditional_probabilities.shape[1]
	num_states = transition_probabilities.shape[0]
	c = np.zeros(num_samples)
	viterbi = np.zeros((num_states, num_samples))
	best_path_table = np.zeros((num_states, num_samples))
	best_path = np.zeros(num_samples).astype(np.int32)
	viterbi[:, 0] = conditional_probabilities[:, 0]
	for t in range(1, num_samples):
		for s in range(0, num_states):
			trans_p = viterbi[:, t - 1] * transition_probabilities[:, s]
			viterbi[s, t], best_path_table[s, t] = max(enumerate(trans_p), key=operator.itemgetter(1))
			viterbi[s, t] *= conditional_probabilities[s][t]
		c[t] = 1.0 / viterbi[:, t].sum()
		viterbi[:, t] *= c[t]
	best_path[num_samples - 1] = viterbi[:, num_samples - 1].argmax()
	for t in reversed(range(0, num_samples - 1)):
		best_path[t] = best_path_table[best_path[t + 1], t + 1]
	return best_path
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
858
1
Gpt3D_Clone858_1.py 1 24
Gpt3D_Clone858_1.py 26 45

----------------------------------------

def viterbi(transition_probabilities, conditional_probabilities) :
	num_samples = conditional_probabilities.shape [1]
	num_states = transition_probabilities.shape [0]
	c = np.zeros(num_samples)
	viterbi = np.zeros((num_states, num_samples))
	best_path_table = np.zeros((num_states, num_samples))
	best_path = np.zeros(num_samples).astype(np.int32)
	viterbi [:, 0] = conditional_probabilities [:, 0]
	c [0] = 1.0 / np.sum(viterbi [:, 0])
	viterbi [:, 0] = c [0] * viterbi [:, 0]
	for t in range(1, num_samples) :
		for s in range(0, num_states) :
			trans_p = viterbi [:, t - 1] * transition_probabilities [:, s]
			best_path_table [s, t], viterbi [s, t] = max(enumerate(trans_p), key = operator.itemgetter(1))
			viterbi [s, t] = viterbi [s, t] * conditional_probabilities [s] [t]
		c [t] = 1.0 / np.sum(viterbi [:, t])
		viterbi [:, t] = c [t] * viterbi [:, t]
	best_path [num_samples - 1] = viterbi [:, num_samples - 1].argmax()
	for t in range(num_samples - 1, 0, - 1) :
		best_path [t - 1] = best_path_table [best_path [t], t]
	return best_path
----------------------------------------

def viterbi(transition_probabilities, conditional_probabilities):
	num_samples = conditional_probabilities.shape[1]
	num_states = transition_probabilities.shape[0]
	c = np.zeros(num_samples)
	viterbi = np.zeros((num_states, num_samples))
	best_path_table = np.zeros((num_states, num_samples))
	best_path = np.zeros(num_samples).astype(np.int32)
	viterbi[:, 0] = conditional_probabilities[:, 0]
	for t in range(1, num_samples):
		for s in range(0, num_states):
			trans_p = viterbi[:, t - 1] * transition_probabilities[:, s]
			best_path_table[s, t], viterbi[s, t] = max(enumerate(trans_p), key=operator.itemgetter(1))
			viterbi[s, t] *= conditional_probabilities[s][t]
		c[t] = 1.0 / np.sum(viterbi[:, t])
		viterbi[:, t] *= c[t]
	best_path[num_samples - 1] = np.argmax(viterbi[:, num_samples - 1])
	for t in range(num_samples - 2, -1, -1): 
		best_path[t] = best_path_table[best_path[t + 1], t + 1]
	return best_path
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
0
Gpt3D_Clone859_0.py 1 19
Gpt3D_Clone859_0.py 21 37

----------------------------------------

def viterbi(y, A, B, Pi = None) :
	K = A.shape [0]
	Pi = Pi if Pi is not None else np.full(K, 1 / K)
	T = len(y)
	T1 = np.empty((K, T), 'd')
	T2 = np.empty((K, T), 'B')
	T1 [:, 0] = Pi * B [:, y [0]]
	T2 [:, 0] = 0
	for i in range(1, T) :
		T1 [:, i] = np.max(T1 [:, i - 1] * A.T * B [np.newaxis, :, y [i]].T, 1)
		T2 [:, i] = np.argmax(T1 [:, i - 1] * A.T, 1)
	x = np.empty(T, 'B')
	x [- 1] = np.argmax(T1 [:, T - 1])
	for i in reversed(range(1, T)) :
		x [i - 1] = T2 [x [i], i]
	return x, T1, T2
----------------------------------------

def viterbi(y, A, B, Pi = None) :
	K = A.shape [0]
	Pi = Pi if Pi is not None else np.full(K, 1 / K)
	T = len(y)
	T1 = np.empty((K, T), 'd')
	T2 = np.empty((K, T), 'B')
	T1 [:, 0] = Pi * B [:, y [0]]
	T2 [:, 0] = 0
	for i in reversed(range(1, T)) :
		T1 [:, i] = np.max(T1 [:, i - 1] * A.T * B [np.newaxis, :, y [i]].T, 1)
		T2 [:, i] = np.argmax(T1 [:, i - 1] * A.T, 1)
	x = np.empty(T, 'B')
	x [0] = np.argmax(T1 [:, 0])
	for i in range(1, T) :
		x [i] = T2 [x [i - 1], i]
	return x, T1, T2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
1
Gpt3D_Clone859_1.py 1 19
Gpt3D_Clone859_1.py 21 37

----------------------------------------

def viterbi(y, A, B, Pi = None) :
	K = A.shape [0]
	Pi = Pi if Pi is not None else np.full(K, 1 / K)
	T = len(y)
	T1 = np.empty((K, T), 'd')
	T2 = np.empty((K, T), 'B')
	T1 [:, 0] = Pi * B [:, y [0]]
	T2 [:, 0] = 0
	for i in range(1, T) :
		T1 [:, i] = np.max(T1 [:, i - 1] * A.T * B [np.newaxis, :, y [i]].T, 1)
		T2 [:, i] = np.argmax(T1 [:, i - 1] * A.T, 1)
	x = np.empty(T, 'B')
	x [- 1] = np.argmax(T1 [:, T - 1])
	for i in reversed(range(1, T)) :
		x [i - 1] = T2 [x [i], i]
	return x, T1, T2
----------------------------------------

def viterbi(y, A, B, Pi = None) :
	K = A.shape [0]
	Pi = Pi if Pi is not None else np.full(K, 1 / K)
	T = len(y)
	T1 = np.empty((K, T), 'd')
	T2 = np.empty((K, T), 'B')
	T1 [:, 0] = Pi * B [:, y [T-1]]
	T2 [:, 0] = 0
	for i in reversed(range(1, T)) :
		T1 [:, i] = np.max(T1 [:, i - 1] * A.T * B [np.newaxis, :, y [T-i]].T, 1)
		T2 [:, i] = np.argmax(T1 [:, i - 1] * A.T, 1)
	x = np.empty(T, 'B')
	x [0] = np.argmax(T1 [:, 0])
	for i in range(1, T) :
		x [i] = T2 [x [i - 1], i]
	return x, T1, T2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
0
Gpt3D_Clone85_0.py 1 13
Gpt3D_Clone85_0.py 15 24

----------------------------------------

def save(self, * args, ** kwargs) :
	if self.image_url :
		import urllib, os
		from urlparse import urlparse
		file_save_dir = self.upload_path
		filename = urlparse(self.image_url).path.split('/') [- 1]
		urllib.urlretrieve(self.image_url, os.path.join(file_save_dir, filename))
		self.image = os.path.join(file_save_dir, filename)
		self.image_url = ''
	super(tweet_photos, self).save()
----------------------------------------

def save(self, * args, ** kwargs) :
	if self.image_url :
		import request, os
		file_save_dir = self.upload_path
		filename = self.image_url.rsplit('/', 1) [- 1]
		request.urlretrieve(url, os.path.join(file_save_dir, filename))
		self.image = os.path.join(file_save_dir, filename)
		self.image_url = ''
	super(tweet_photos, self).save()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
1
Gpt3D_Clone85_1.py 1 13
Gpt3D_Clone85_1.py 15 25

----------------------------------------

def save(self, * args, ** kwargs) :
	if self.image_url :
		import urllib, os
		from urlparse import urlparse
		file_save_dir = self.upload_path
		filename = urlparse(self.image_url).path.split('/') [- 1]
		urllib.urlretrieve(self.image_url, os.path.join(file_save_dir, filename))
		self.image = os.path.join(file_save_dir, filename)
		self.image_url = ''
	super(tweet_photos, self).save()
----------------------------------------

def save(self, * args, ** kwargs) :
	if self.image_url :
		import urllib.request, os
		file_save_dir = self.upload_path
		filename = self.image_url.split('/') [- 1]
		urllib.request.urlretrieve(url, os.path.join(file_save_dir, filename))
		self.image = os.path.join(file_save_dir, filename)
		self.image_url = ''
	super(tweet_photos, self).save()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
3
Gpt3D_Clone864_3.py 1 8
Gpt3D_Clone864_3.py 10 17

----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	for key, group in groupby(sorted(string.split(), key = lambda x : len(x)), lambda x : len(x)) :
		result [key] = list(group)
	return result
----------------------------------------

def n_letter_dictionary(string) :
	result = {}
	temp_list = sorted(string.split(), key = lambda x : len(x))
	for key, group in groupby(temp_list, lambda x : len(x)) :
		result [key] = list(group)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
0
Gpt3D_Clone868_0.py 1 8
Gpt3D_Clone868_0.py 10 18

----------------------------------------

def run(self) :
	try :
		self.run2()
	finally :
		self.cleanup()
----------------------------------------

def run(self) :
	try :
		self.run2()
	except :
		raise
	finally :
		self.cleanup()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
0
Gpt3D_Clone869_0.py 1 12
Gpt3D_Clone869_0.py 14 21

----------------------------------------

def standings(team) :
	for league, teams_dict in teams.items() :
		try :
			teams_dict [team]
			print (teams_dict [team], team)
			print (league)
			break
		except KeyError :
			continue
----------------------------------------

def standings(team):
    for league, teams_dict in teams.items():
        for team_name in teams_dict:
            if team_name == team:
                print(teams_dict[team], team)
                print(league)
                break
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
2
Gpt3D_Clone869_2.py 1 12
Gpt3D_Clone869_2.py 14 21

----------------------------------------

def standings(team) :
	for league, teams_dict in teams.items() :
		try :
			teams_dict [team]
			print (teams_dict [team], team)
			print (league)
			break
		except KeyError :
			continue
----------------------------------------

def standings(team) :
	for league, teams_dict in teams.items() :
		if team in teams_dict :
			print (teams_dict [team], team)
			print (league)
			break
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
86
0
Gpt3D_Clone86_0.py 1 11
Gpt3D_Clone86_0.py 13 25

----------------------------------------

def function(argument) :
	max_arg = max(argument)
	argument.remove(max_arg)
	for length in range(1, len(argument) + 1) :
		for combo in combinations(argument, length) :
			if sum(combo) == max_arg :
				return "true"
	return "false"
----------------------------------------

def function(argument) :
	max_arg = max(argument)
	argument.remove(max_arg)
	for length in range(1, len(argument) + 1) :
		for combo in combinations(argument, length) :
			total = 0
			for summand in combo :
				total += summand
			if total == max_arg :
				return "true"
	return "false"
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
872
0
Gpt3D_Clone872_0.py 1 11
Gpt3D_Clone872_0.py 13 23

----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		if el_a in b [last :] :
			last = b [last :].index(el_a)
		else :
			return False
	return True
----------------------------------------

def sublist(a, b):
   start = 0
   flag = True
   for el_a in a:
       if el_a in b[start:]:
           start += b[start:].index(el_a) + 1
       else:
           flag = False
           break
   return flag
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
0
Gpt3D_Clone873_0.py 1 11
Gpt3D_Clone873_0.py 13 23

----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		if el_a in b [last :] :
			last = b [last :].index(el_a)
		else :
			return False
	return True
----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		start_index = b.index(el_a, last)
		if start_index != -1:
			last = start_index
		else :
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
1
Gpt3D_Clone873_1.py 1 11
Gpt3D_Clone873_1.py 13 21

----------------------------------------

def sublist(a, b) :
	last = 0
	for el_a in a :
		if el_a in b [last :] :
			last = b [last :].index(el_a)
		else :
			return False
	return True
----------------------------------------

def is_sublist(a, b): 
	index = 0
	for elem in a: 
		if elem not in b[index:]: 
			return False
		else: 
			index = b[index:].index(elem) + index + 1
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
1
Gpt3D_Clone878_1.py 1 13
Gpt3D_Clone878_1.py 15 28

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while True :
				nxt = next(seq)
				if nxt != x : pass
				else :
					break
		else :
			return True
	except StopIteration :
		return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
2
Gpt3D_Clone878_2.py 1 13
Gpt3D_Clone878_2.py 15 29

----------------------------------------

def sublist(a, b) :
	seq = iter(b)
	try :
		for x in a :
			while next(seq) ! = x : pass
		else :
			return True
	except StopIteration :
		pass
	return False
----------------------------------------

def sublist(a, b) :
	index = 0
	try :
		for x in a :
			while b[index] != x : 
				index += 1
			index += 1
		else :	
			return True
	except IndexError :
		pass
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
0
Gpt3D_Clone880_0.py 1 10
Gpt3D_Clone880_0.py 12 19

----------------------------------------

def sublist(a, b) :
	if not a :
		return True
	for k in range(len(b)) :
		if a [0] == b [k] :
			return sublist(a [1 :], b [k + 1 :])
	return False
----------------------------------------

def sublist(a, b) :
	if not a :
		return True
	for k in range(len(b)) :
		if k < len(a) and a [k] == b [k] :
			return sublist(a [k + 1 :], b [k + 1 :])
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
0
Gpt3D_Clone883_0.py 1 12
Gpt3D_Clone883_0.py 14 24

----------------------------------------

def sublist(a, b) :
	i = - 1
	try :
		for e in a :
			i = b.index(e, i + 1)
	except ValueError :
		return False
	else :
		return True
----------------------------------------

def sublist(a, b) :
	i = -1
	for e in a :
		try:
			i = b.index(e, i + 1)
			if i == -1 :
				return False
		except ValueError :
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
1
Gpt3D_Clone883_1.py 1 12
Gpt3D_Clone883_1.py 14 21

----------------------------------------

def sublist(a, b) :
	i = - 1
	try :
		for e in a :
			i = b.index(e, i + 1)
	except ValueError :
		return False
	else :
		return True
----------------------------------------

def sublist(a, b) :
	i = -1
	for e in a :
		i = b.index(e, i + 1)
		if i == -1 :
			return False
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
1
Gpt3D_Clone886_1.py 1 7
Gpt3D_Clone886_1.py 9 13

----------------------------------------

def __init__(self, ** kwargs) :
	for k in kwargs.keys() :
		if k in [acceptable_keys_list] :
			self.__setattr__(k, kwargs [k])
----------------------------------------

def __init__(self, ** kwargs) :
	for k in kwargs.keys() :
		if k in [acceptable_keys_list] :
			self.__setattr__(k, kwargs [k] * 10)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
3
Gpt3D_Clone886_3.py 1 7
Gpt3D_Clone886_3.py 9 13

----------------------------------------

def __init__(self, ** kwargs) :
	for k in kwargs.keys() :
		if k in [acceptable_keys_list] :
			self.__setattr__(k, kwargs [k])
----------------------------------------

def __init__(self, ** kwargs) :
	for k in kwargs.keys() :
		if k in [acceptable_keys_list] :
			self.__setattr__(k, kwargs [k] - 10)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
0
Gpt3D_Clone887_0.py 1 23
Gpt3D_Clone887_0.py 25 45

----------------------------------------

def detect_color_image(file) :
	v = ImageStat.Stat(Image.open(file)).var
	is_monochromatic = reduce(lambda x, y : x and y < MONOCHROMATIC_MAX_VARIANCE, v, True)
	print file, '-->\t',
	if is_monochromatic :
		print "Monochromatic image",
	else :
		if len(v) == 3 :
			maxmin = abs(max(v) - min(v))
			if maxmin > COLOR :
				print "Color\t\t\t",
			elif maxmin > MAYBE_COLOR :
				print "Maybe color\t",
			else :
				print "grayscale\t\t",
			print "(", maxmin, ")"
		elif len(v) == 1 :
			print "Black and white"
		else :
			print "Don't know..."
----------------------------------------

def detect_color_image(file):
	v = ImageStat.Stat(Image.open(file)).var
	is_monochromatic = reduce(lambda x, y: x and y < MONOCHROMATIC_MAX_VARIANCE, v, True)
	print("file -->\t", end='')
	if is_monochromatic:
		print("Monochromatic image")
	else:
		if len(v) == 3:
			maxmin = abs(max(v) - min(v))
			if maxmin > COLOR:
				print("Color\t\t")
			elif maxmin > MAYBE_COLOR:
				print("Maybe color\t")
			else:
				print("grayscale\t")
			print("({})".format(maxmin))
		elif len(v) == 1:
			print("Black and white")
		else:
			print("Don't know...")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
1
Gpt3D_Clone887_1.py 1 23
Gpt3D_Clone887_1.py 25 45

----------------------------------------

def detect_color_image(file) :
	v = ImageStat.Stat(Image.open(file)).var
	is_monochromatic = reduce(lambda x, y : x and y < MONOCHROMATIC_MAX_VARIANCE, v, True)
	print file, '-->\t',
	if is_monochromatic :
		print "Monochromatic image",
	else :
		if len(v) == 3 :
			maxmin = abs(max(v) - min(v))
			if maxmin > COLOR :
				print "Color\t\t\t",
			elif maxmin > MAYBE_COLOR :
				print "Maybe color\t",
			else :
				print "grayscale\t\t",
			print "(", maxmin, ")"
		elif len(v) == 1 :
			print "Black and white"
		else :
			print "Don't know..."
----------------------------------------

def detect_color_image(file):
	v = ImageStat.Stat(Image.open(file)).var
	is_monochromatic = reduce(lambda a_, b_: a_ and b_ < MONOCHROMATIC_MAX_VARIANCE, v, True)
	print("file -->\t", end='')
	if is_monochromatic:
		print("Monochromatic image")
	else:
		if len(v) == 3:
			diff = abs(max(v) - min(v))
			if diff > COLOR:
				print("Color\t\t")
			elif diff > MAYBE_COLOR:
				print("Maybe color\t")
			else:
				print("grayscale\t")
			print("({})".format(diff))
		elif len(v) == 1:
			print("Black and white")
		else:
			print("Don't know...")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
1
Gpt3D_Clone888_1.py 1 10
Gpt3D_Clone888_1.py 12 18

----------------------------------------

def linspace(start, stop, n) :
	if n == 1 :
		yield stop
		return
	h = (stop - start) / (n - 1)
	for i in range(n) :
		yield start + h * i
----------------------------------------

def linspace(start, stop, n) :
	if n == 1 :
		return stop
	h = (stop - start) / (n - 1)
	for i in range(n) :
		yield start + (h * i) + (h * (i + 1))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
0
Gpt3D_Clone889_0.py 1 10
Gpt3D_Clone889_0.py 12 20

----------------------------------------

def f() :
	for key, val in measurements.items() :
		exec ('global {};{} = {}'.format(key, key, val))
	print ('tg: ', tg)
	vars = globals()
	for key in measurements.keys() :
		print ('Key: ', key, ', Value: ', vars [key])
----------------------------------------

def g() :
	for key, val in measurements.items() :
		exec 'global %s;%s = %s' % (key, key, val)
	print 'tg: ', tg
	vars = globals()
	for key in measurements.keys() :
		print 'Key: ', key, ', Value: ', vars[key]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
1
Gpt3D_Clone889_1.py 1 10
Gpt3D_Clone889_1.py 12 20

----------------------------------------

def f() :
	for key, val in measurements.items() :
		exec ('global {};{} = {}'.format(key, key, val))
	print ('tg: ', tg)
	vars = globals()
	for key in measurements.keys() :
		print ('Key: ', key, ', Value: ', vars [key])
----------------------------------------

def f() :
	for key, val in measurements.items() :
		exec ('global {};{} = {}'.format(key, key, val))
	print ('tg: ', tg)
	for key in measurements.keys() :
		val = globals() [key]
		print ('Key: ', key, ', Value: ', val)
		
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
2
Gpt3D_Clone889_2.py 1 10
Gpt3D_Clone889_2.py 12 19

----------------------------------------

def f() :
	for key, val in measurements.items() :
		exec ('global {};{} = {}'.format(key, key, val))
	print ('tg: ', tg)
	vars = globals()
	for key in measurements.keys() :
		print ('Key: ', key, ', Value: ', vars [key])
----------------------------------------

def f() :
	for key, val in measurements.items() :
		exec ('global {};{} = {}'.format(key, key, val))
	print ('tg: ', tg)
	for key in measurements.keys() :
		val = locals() [key]
		print ('Key: ', key, ', Value: ', val)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
890
0
Gpt3D_Clone890_0.py 1 10
Gpt3D_Clone890_0.py 12 21

----------------------------------------

def acquire_data(arg) :
	if isinstance(arg, file) :
		data = arg.read()
	elif isinstance(arg, basestring) :
		data = open(arg, 'r').read()
	else :
		data = arg
----------------------------------------

def acquire_data(arg) :
	if isinstance(arg, file) or hasattr(arg, 'read') :
		data = arg.read()
	elif isinstance(arg, basestring) :
		data = open(arg, 'r').read()
	elif not hasattr(arg, 'read') :
		data = arg
	else :
		raise TypeError("Argument must be a file, a string, or support a read method")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
890
1
Gpt3D_Clone890_1.py 1 10
Gpt3D_Clone890_1.py 12 20

----------------------------------------

def acquire_data(arg) :
	if isinstance(arg, file) :
		data = arg.read()
	elif isinstance(arg, basestring) :
		data = open(arg, 'r').read()
	else :
		data = arg
----------------------------------------

def acquire_data(arg) :
	try :
		data = arg.read()
	except AttributeError :
		data = open(arg, 'r').read()
	except :
		data = arg
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
891
0
Gpt3D_Clone891_0.py 1 9
Gpt3D_Clone891_0.py 11 20

----------------------------------------

def acquire_data(filename_or_list) :
	try :
		with open(filename_or_list) as f :
			data = list(f)
	except TypeError :
		data = list(filename_or_list)
----------------------------------------

def acquire_data(filename_or_list):
    try:
        if isinstance(filename_or_list, str):
            with open(filename_or_list) as f:
                data = list(f)
        else:
            data = list(filename_or_list)
    except TypeError:
        data = list(filename_or_list)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
891
1
Gpt3D_Clone891_1.py 1 9
Gpt3D_Clone891_1.py 11 20

----------------------------------------

def acquire_data(filename_or_list) :
	try :
		with open(filename_or_list) as f :
			data = list(f)
	except TypeError :
		data = list(filename_or_list)
----------------------------------------

def acquire_data(source) :
	try:
		if isinstance(source, str) :
			with open(source) as f :
				data = list(f)
		else :
			data = list(source)
	except TypeError :
		raise TypeError("Unsupported source type")
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
891
2
Gpt3D_Clone891_2.py 1 9
Gpt3D_Clone891_2.py 11 20

----------------------------------------

def acquire_data(filename_or_list) :
	try :
		with open(filename_or_list) as f :
			data = list(f)
	except TypeError :
		data = list(filename_or_list)
----------------------------------------

def acquire_data(filename_or_list):
    try:
        if type(filename_or_list) is str:
            with open(filename_or_list) as f:
                data = list(f)
        else:
            data = list(filename_or_list)
    except TypeError:
        data = list(filename_or_list)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
891
3
Gpt3D_Clone891_3.py 1 9
Gpt3D_Clone891_3.py 11 18

----------------------------------------

def acquire_data(filename_or_list) :
	try :
		with open(filename_or_list) as f :
			data = list(f)
	except TypeError :
		data = list(filename_or_list)
----------------------------------------

def acquire_data(filename_or_list) :
	if isinstance(filename_or_list, str) :
		with open(filename_or_list) as f :
			data = list(f)
	else : 
		data = list(filename_or_list)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
0
Gpt3D_Clone894_0.py 1 9
Gpt3D_Clone894_0.py 11 20

----------------------------------------

def int_to_roman(number) :
	result = ""
	for (arabic, roman) in ROMAN :
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
----------------------------------------

def int_to_roman_1(number) :
    result = ""
    for (arabic, roman) in ROMAN :
        (factor, number) = divmod(number, arabic)
        temp = ""
        for i in range(factor):
            temp += roman
        result += temp
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
2
Gpt3D_Clone894_2.py 1 9
Gpt3D_Clone894_2.py 11 21

----------------------------------------

def int_to_roman(number) :
	result = ""
	for (arabic, roman) in ROMAN :
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
----------------------------------------

def int_to_roman(number) :
	result = ""
	arabics = [x[0] for x in ROMAN]
	romans = [x[1] for x in ROMAN]
	for arabic, roman in zip(arabics, romans):
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
3
Gpt3D_Clone894_3.py 1 9
Gpt3D_Clone894_3.py 11 18

----------------------------------------

def int_to_roman(number) :
	result = ""
	for (arabic, roman) in ROMAN :
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
----------------------------------------

def int_to_roman_3(number) :
    result = ""
    for arabic in ROMAN :
        (factor, number) = divmod(number, arabic)
        tmp = ROMAN[arabic] * factor
        result += tmp
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
4
Gpt3D_Clone894_4.py 1 9
Gpt3D_Clone894_4.py 11 18

----------------------------------------

def int_to_roman(number) :
	result = ""
	for (arabic, roman) in ROMAN :
		(factor, number) = divmod(number, arabic)
		result += roman * factor
	return result
----------------------------------------

def int_to_roman_2(number) :
    result = ""
    for (arabic, roman) in ROMAN :
        (factor, number) = divmod(number, arabic)
        temp = roman * factor
        result += temp
    return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
0
Gpt3D_Clone896_0.py 1 11
Gpt3D_Clone896_0.py 13 24

----------------------------------------

def is_square(apositiveint) :
	x = apositiveint / / 2
	seen = set([x])
	while x * x ! = apositiveint :
		x = (x + (apositiveint / / x)) / / 2
		if x in seen : return False
		seen.add(x)
	return True
----------------------------------------

def is_square(apositiveint):
    x=apositiveint//2
    seen=set()
    seen.add(x)
    while x*x != apositiveint:
        x = (x + (apositiveint // x))//2
        if x in seen:
            return False
        seen.add(x)
    return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
1
Gpt3D_Clone896_1.py 1 11
Gpt3D_Clone896_1.py 13 23

----------------------------------------

def is_square(apositiveint) :
	x = apositiveint / / 2
	seen = set([x])
	while x * x ! = apositiveint :
		x = (x + (apositiveint / / x)) / / 2
		if x in seen : return False
		seen.add(x)
	return True
----------------------------------------

def is_square(apositiveint): 
	x = apositiveint // 2
	seen = set([x])
	while x*x != apositiveint:
		x = (x + (apositiveint//x)) //2
		if x in seen: 
			return False
		else:
			seen.add(x)
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
2
Gpt3D_Clone896_2.py 1 11
Gpt3D_Clone896_2.py 13 22

----------------------------------------

def is_square(apositiveint) :
	x = apositiveint / / 2
	seen = set([x])
	while x * x ! = apositiveint :
		x = (x + (apositiveint / / x)) / / 2
		if x in seen : return False
		seen.add(x)
	return True
----------------------------------------

def is_square(apositiveint): 
	x = apositiveint // 2
	seen = set([x])
	while x * x != apositiveint: 
		x = (x + (apositiveint/x)) //2
		if x in seen: 
			return False
		seen.add(x)
	return True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
900
0
Gpt3D_Clone900_0.py 1 7
Gpt3D_Clone900_0.py 9 14

----------------------------------------

def zipdir(path, ziph) :
	for root, dirs, files in os.walk(path) :
		for file in files :
			ziph.write(os.path.join(root, file))
----------------------------------------

def zipdir(path, ziph) :
	for root, dirs, files in os.walk(path) :
		for fname in files :
			file_path = os.path.join(root,fname)
			ziph.write(file_path)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
901
0
Gpt3D_Clone901_0.py 1 8
Gpt3D_Clone901_0.py 10 15

----------------------------------------

def avg(self) :
	if all(isinstance(item, int) for item in self) :
		return sum(self) / len(self)
	else :
		raise ValueError('Invalid item in list. All items need to be an integer.')
----------------------------------------

def avg(self) :
	try: 
		return sum(self) / len(self)
	except TypeError:
		raise ValueError('Invalid item in list. All items need to be an integer.')
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
2
Gpt3D_Clone902_2.py 1 8
Gpt3D_Clone902_2.py 10 16

----------------------------------------

def avg(self) :
	if all(isinstance(item, int) for item in self) :
		return sum(self) / len(self)
	else :
		raise ValueError('Invalid item in list. All items need to be an integer.')
----------------------------------------

def avg(self) :
	try : 
		return sum(self) / len(self)
	except TypeError :
		raise ValueError('Invalid item in list. All items need to be an integer.')
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
903
0
Gpt3D_Clone903_0.py 1 15
Gpt3D_Clone903_0.py 17 27

----------------------------------------

def test_run(files_dir) :
	queue = mp.Queue()
	procs = [mp.Process(target = worker, args = [queue]) for i in mp.cpu_count()]
	for p in procs :
		p.start()
	files = os.listdir(files_dir)
	for f1, f2 in IT.product(files, repeat = 2) :
		queue.put((f1, f2))
	for p in procs :
		queue.put(SENTINEL)
	for p in procs :
		p.join()
----------------------------------------

def test_run(files_dir) :
	queue = mp.Queue()
	files = os.listdir(files_dir)
	procs = [mp.Process(target = worker, args = [queue, f1, f2]) for f1, f2 in IT.product(files, repeat = 2)]
	for p in procs :
		p.start()
	for p in procs :
		queue.put(SENTINEL)
	for p in procs :
		p.join()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
0
Gpt3D_Clone909_0.py 1 14
Gpt3D_Clone909_0.py 16 32

----------------------------------------

def __init__(self) :
	super(Dialog, self).__init__()
	layoutMain = QtGui.QVBoxLayout(self)
	listWidget = QtGui.QListWidget(self)
	gripper = QtGui.QSizeGrip(listWidget)
	l = QtGui.QHBoxLayout(listWidget)
	l.setContentsMargins(0, 0, 0, 0)
	l.addWidget(gripper, 0, QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)
	layoutMain.addWidget(listWidget)
	layoutMain.addWidget(QtGui.QLabel("Test", self))
	self.setGeometry(200, 500, 200, 500)
----------------------------------------

def __init__(self) :
	super(Dialog, self).__init__()
	layoutMain = QtGui.QVBoxLayout(self)
	listWidget = QtGui.QListWidget(self)
	gripper = QtGui.QSizeGrip(listWidget)
	hlayout = QtGui.QHBoxLayout(listWidget)
	hlayout.setContentsMargins(0, 0, 0, 0)
	hlayout.addWidget(gripper, 0, QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)
	layoutMain.addWidget(listWidget)
	label1 = QtGui.QLabel("Test1", self)
	layoutMain.addWidget(label1)
	label2 = QtGui.QLabel("Test2", self)
	layoutMain.addWidget(label2)
	label1.setStyleSheet("color: blue; font-weight:bold") 
	label2.setStyleSheet("color: red; font-weight:bold") 
	self.setGeometry(300, 500, 200, 500)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
1
Gpt3D_Clone909_1.py 1 14
Gpt3D_Clone909_1.py 16 24

----------------------------------------

def __init__(self) :
	super(Dialog, self).__init__()
	layoutMain = QtGui.QVBoxLayout(self)
	listWidget = QtGui.QListWidget(self)
	gripper = QtGui.QSizeGrip(listWidget)
	l = QtGui.QHBoxLayout(listWidget)
	l.setContentsMargins(0, 0, 0, 0)
	l.addWidget(gripper, 0, QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)
	layoutMain.addWidget(listWidget)
	layoutMain.addWidget(QtGui.QLabel("Test", self))
	self.setGeometry(200, 500, 200, 500)
----------------------------------------

def __init__(self) :
	super(Dialog, self).__init__()
	layoutMain = QtGui.QVBoxLayout(self)
	listWidget = QtGui.QListWidget(self)
	gripper = QtGui.QSizeGrip(listWidget)
	layoutMain.addWidget(listWidget)
	layoutMain.addWidget(QtGui.QLabel("Test", self))
	self.setGeometry(200, 500, 200, 500)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
0
Gpt3D_Clone911_0.py 1 16
Gpt3D_Clone911_0.py 18 35

----------------------------------------

def deleteDir(dirPath) :
	deleteFiles = []
	deleteDirs = []
	for root, dirs, files in os.walk(dirPath) :
		for f in files :
			deleteFiles.append(os.path.join(root, f))
		for d in dirs :
			deleteDirs.append(os.path.join(root, d))
	for f in deleteFiles :
		os.remove(f)
	for d in deleteDirs :
		os.rmdir(d)
	os.rmdir(dirPath)
----------------------------------------

def deleteDir(dirPath): 
	deleteFiles = []
	deleteDirs = []
	for root, dirs, files in os.walk(dirPath): 
		while len(dirs): 
			dir = dirs.pop() 
			deleteDirs.append(os.path.join(root, dir))
		while len(files): 
			file = files.pop() 
			deleteFiles.append(os.path.join(root, file))
	for f in deleteFiles: 
		os.remove(f) 
	for d in deleteDirs: 
		os.rmdir(d)
	os.rmdir(dirPath) 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
1
Gpt3D_Clone911_1.py 1 16
Gpt3D_Clone911_1.py 18 31

----------------------------------------

def deleteDir(dirPath) :
	deleteFiles = []
	deleteDirs = []
	for root, dirs, files in os.walk(dirPath) :
		for f in files :
			deleteFiles.append(os.path.join(root, f))
		for d in dirs :
			deleteDirs.append(os.path.join(root, d))
	for f in deleteFiles :
		os.remove(f)
	for d in deleteDirs :
		os.rmdir(d)
	os.rmdir(dirPath)
----------------------------------------

def deleteDir(dirPath): 
	deleteFiles = []
	deleteDirs = [] 
	for root, dirs, files in os.walk(dirPath):
		for item in files: 
			deleteFiles.append(os.path.join(root, item)) 
		for item in dirs: 
			deleteDirs.append(os.path.join(root, item)) 
	while len(deleteFiles):
		os.remove(deleteFiles.pop()) 
	while len(deleteDirs): 
		os.rmdir(deleteDirs.pop())
	os.rmdir(dirPath)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
1
Gpt3D_Clone912_1.py 1 11
Gpt3D_Clone912_1.py 13 23

----------------------------------------

def countWords(s) :
	d = {}
	for word in s.split() :
		try :
			d [word] += 1
		except KeyError :
			d [word] = 1
	return d
----------------------------------------

def countWords(s):
	d = {}
	words = s.split()
	
	for word in words:
		if word in d:
			d[word] += 1
		else:
			d[word] = 1
	return d
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
2
Gpt3D_Clone912_2.py 1 11
Gpt3D_Clone912_2.py 13 23

----------------------------------------

def countWords(s) :
	d = {}
	for word in s.split() :
		try :
			d [word] += 1
		except KeyError :
			d [word] = 1
	return d
----------------------------------------

def countWords(s):
	d = {}
	split_s = s.split()
	for word in split_s:
		if word in d:
			d[word] += 1
		else:
			d[word] = 1
	return d
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
3
Gpt3D_Clone912_3.py 1 11
Gpt3D_Clone912_3.py 13 23

----------------------------------------

def countWords(s) :
	d = {}
	for word in s.split() :
		try :
			d [word] += 1
		except KeyError :
			d [word] = 1
	return d
----------------------------------------

def countWords(s):
	d = {}
	words = s.split()
	
	for word in words:
		if d.get(word):
			d[word] += 1
		else:
			d[word] = 1
	return d
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
0
Gpt3D_Clone917_0.py 1 15
Gpt3D_Clone917_0.py 17 28

----------------------------------------

def polyfit2d(x, y, f, deg) :
	from numpy.polynomial import polynomial
	import numpy as np
	x = np.asarray(x)
	y = np.asarray(y)
	f = np.asarray(f)
	deg = np.asarray(deg)
	vander = polynomial.polyvander2d(x, y, deg)
	vander = vander.reshape((- 1, vander.shape [- 1]))
	f = f.reshape((vander.shape [0],))
	c = np.linalg.lstsq(vander, f) [0]
	return c.reshape(deg + 1)
----------------------------------------

def polyfit2d(xvals, yvals, functions, degree):
    import numpy.polynomial as np
    x_list = np.asarray(xvals)
    y_list = np.asarray(yvals)
    f_list = np.asarray(functions)
    d_list = np.asarray(degree)
    vandermonde = np.polynomial.polyvander2d(x_list, y_list, d_list)
    vandermonde = vandermonde.reshape((- 1, vandermonde.shape [- 1]))
    f_arr = f_list.reshape((vandermonde.shape [0],))
    coefficients = np.linalg.lstsq(vandermonde, f_arr) [0]
    return coefficients.reshape(degree + 1)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
4
Gpt3D_Clone919_4.py 1 8
Gpt3D_Clone919_4.py 10 15

----------------------------------------

def reverseParentheses(s) :
	assert '(' in s and ')' in s
	while '(' in s :
		reverseParentheses(s)
	return s
----------------------------------------

def reverseParentheses(s) :
	assert s.count("(") > 0 and s.count(")") > 0
	while s.index("(") >= 0 :
		reverseParentheses(s)
	return s
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
1
Gpt3D_Clone921_1.py 1 8
Gpt3D_Clone921_1.py 10 18

----------------------------------------

def readlines(self) :
	lines = []
	for line in iter(self.readline, '') :
		lines.append(line)
	return lines
----------------------------------------

def readlines(self):
	lines = []
	for line in self.readline:
		if line == '' :
			break
		lines.append(line)
	return lines
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
0
Gpt3D_Clone922_0.py 1 12
Gpt3D_Clone922_0.py 14 24

----------------------------------------

def toc(self) :
	self.tend = self.get_time()
	if self.indentation :
		if len(self.tstart) > 0 :
			self.elapsed = self.tend - self.tstart.pop()
		else :
			self.elapsed = None
	else :
		self.elapsed = self.tend - self.tstart
----------------------------------------

def toc(self) :
	self.tend = self.get_time()
	if self.indentation :
		if len(self.tstart) > 0 :
			self.elapsed = self.tend - self.tstart.pop()
	else :
		if len(self.tstart) > 0 :
			self.elapsed = self.tend - self.tstart
		else :
			self.elapsed = None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
1
Gpt3D_Clone922_1.py 1 12
Gpt3D_Clone922_1.py 14 24

----------------------------------------

def toc(self) :
	self.tend = self.get_time()
	if self.indentation :
		if len(self.tstart) > 0 :
			self.elapsed = self.tend - self.tstart.pop()
		else :
			self.elapsed = None
	else :
		self.elapsed = self.tend - self.tstart
----------------------------------------

def toc(self) :
	self.tend = self.get_time()
	if len(self.tstart) > 0 :
		if self.indentation :
			self.elapsed = self.tend - self.tstart.pop()
		else :
			self.elapsed = self.tend - self.tstart
	else :
		self.elapsed = None
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
923
0
Gpt3D_Clone923_0.py 1 13
Gpt3D_Clone923_0.py 15 26

----------------------------------------

def transform_non_affine(self, a) :
	diff = np.zeros(len(a))
	total_shift = 0
	for left, right in self._breaks :
		pos = bisect.bisect_right(a, left - total_shift)
		if pos > = len(diff) :
			break
		diff [pos] = right - left
		total_shift += right - left
	return a + diff.cumsum()
----------------------------------------

def transform_non_affine(self, a) :
	diff = np.zeros(len(a))
	shift = 0
	for left, right in self._breaks :
		index = bisect.bisect_right(a, left - shift)
		if index > = len(diff) :
			break
		difference = right - left
		diff [index] = difference
		shift += difference
	return a + np.cumsum(diff)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
0
Gpt3D_Clone927_0.py 1 17
Gpt3D_Clone927_0.py 19 30

----------------------------------------

def select_weighted(d) :
	total = 0
	for key in d :
		total = total + len(d [key])
	accept_prob = float(1.0 / total)
	n_seen = 0
	for key in d :
		current_key = key
		for val in d [key] :
			dice_roll = random.random()
			accept_prob = float(1.0 / (total - n_seen))
			n_seen = n_seen + 1
			if dice_roll < = accept_prob :
				return current_key
----------------------------------------

def select_weighted(d): 
	total = 0
	for key in d: 
		total = total + len(d[key])
	for key in d: 
		current_key = key 
		for val in d[key]: 
			dice_roll = random.random() 
			if dice_roll <= 1.0 / total: 
				return current_key 
			total = total - len(d[key])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
929
0
Gpt3D_Clone929_0.py 1 11
Gpt3D_Clone929_0.py 13 24

----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	return subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo).communicate()
----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	proc = subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo)
	comm = proc.communicate()
	return comm[0], comm[1]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
929
1
Gpt3D_Clone929_1.py 1 11
Gpt3D_Clone929_1.py 13 24

----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	return subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo).communicate()
----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	process = subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo)
	stdout, stderr = process.communicate()
	return stdout, stderr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
929
2
Gpt3D_Clone929_2.py 1 11
Gpt3D_Clone929_2.py 13 24

----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	return subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo).communicate()
----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	with subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo) as process:
		stdout, stderr = process.communicate()
		return stdout, stderr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
929
3
Gpt3D_Clone929_3.py 1 11
Gpt3D_Clone929_3.py 13 22

----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	return subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo).communicate()
----------------------------------------

def run_command(cmd) :
	startupinfo = subprocess.STARTUPINFO()
	startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
	process = subprocess.Popen(cmd,
	stdout = subprocess.PIPE,
	stderr = subprocess.PIPE,
	stdin = subprocess.PIPE,
	startupinfo = startupinfo)
	return process.communicate()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
2
Gpt3D_Clone931_2.py 1 8
Gpt3D_Clone931_2.py 10 16

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	for x in l[n:]:
		l.remove(x)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
1
Gpt3D_Clone932_1.py 1 8
Gpt3D_Clone932_1.py 10 16

----------------------------------------

def unique(l) :
	s = set(); n = 0
	for x in l :
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
----------------------------------------

def unique4 (l) : 
	s = set(); n = 0
	for i in range (len(l)) :
		x = l[i]
		if x not in s : s.add(x); l [n] = x; n += 1
	del l [n :]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
0
Gpt3D_Clone933_0.py 1 11
Gpt3D_Clone933_0.py 13 21

----------------------------------------

def unique(items) :
	seen = set()
	for i in xrange(len(items) - 1, - 1, - 1) :
		it = items [i]
		if it in seen :
			del items [i]
		else :
			seen.add(it)
----------------------------------------

def unique(items) :
	seen = set()
	for i in range(len(items) - 1, - 1, - 1) :
		it = items [i]
		if it not in seen :
			seen.add(it)
		else :
			del items [i]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
934
0
Gpt3D_Clone934_0.py 1 11
Gpt3D_Clone934_0.py 13 23

----------------------------------------

def unique(items) :
	seen = set()
	for i in xrange(len(items) - 1, - 1, - 1) :
		it = items [i]
		if it in seen :
			del items [i]
		else :
			seen.add(it)
----------------------------------------

def unique(items):
	seen = set()
	i = len(items) - 1
	while i >= 0 :
		it = items[i]
		if it in seen:
			del items[i]
		else:
			seen.add(it)
		i -= 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
934
1
Gpt3D_Clone934_1.py 1 11
Gpt3D_Clone934_1.py 13 21

----------------------------------------

def unique(items) :
	seen = set()
	for i in xrange(len(items) - 1, - 1, - 1) :
		it = items [i]
		if it in seen :
			del items [i]
		else :
			seen.add(it)
----------------------------------------

def unique3(items):
	seen = {}
	for i in xrange(len(items)-1,-1,-1):
		it = items[i]
		if it in seen:
			del items[i]
		else:
			seen[it] = True
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
0
Gpt3D_Clone935_0.py 1 17
Gpt3D_Clone935_0.py 19 33

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique_three(list):
   result = {}
   output_list = []
   for x in list:
       if x in result:
           result[x] = result[x] + 1
       else:
           result[x] = 1
   for x in list:
       if x in result and result[x] > 0:
           result[x] = 0
           output_list.append(x)
   return output_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
1
Gpt3D_Clone935_1.py 1 17
Gpt3D_Clone935_1.py 19 32

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def unique_four(list):
   seen = {}
   output_list = []
   for x in list:
       if x in seen:
           seen[x] += 1
       else:
           seen[x] = 1
   for x in list:
       if x in seen and seen[x] > 0:
           seen[x] = 0
           output_list.append(x)
   return output_list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
0
Gpt3D_Clone937_0.py 1 17
Gpt3D_Clone937_0.py 19 24

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def reset_item_count(dictionary, item):
    count = dictionary[item]
    if (count > 0):
        s[item] = 0
    
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
937
1
Gpt3D_Clone937_1.py 1 17
Gpt3D_Clone937_1.py 19 24

----------------------------------------

def unique(list) :
	s = {}
	output = []
	for x in list :
		count = 1
		if (s.has_key(x)) :
			count = s [x] + 1
		s [x] = count
	for x in list :
		count = s [x]
		if (count > 0) :
			s [x] = 0
			output.append(x)
	return output
----------------------------------------

def set_item_count(dictionary, item):
    if (dictionary.has_key(item)) :
        count = dictionary[item] + 1
    else:
        count = 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
0
Gpt3D_Clone939_0.py 1 12
Gpt3D_Clone939_0.py 14 22

----------------------------------------

def unique(x) :
	output = []
	y = {}
	for item in x :
		y [item] = ""
	for item in x :
		if item in y :
			output.append(item)
	return output
----------------------------------------

def unique(x) :
	output = []
	y = []
	for item in x :
		if item not in y :
			y.append(item)
			output.append(item)
	return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
1
Gpt3D_Clone939_1.py 1 12
Gpt3D_Clone939_1.py 14 20

----------------------------------------

def unique(x) :
	output = []
	y = {}
	for item in x :
		y [item] = ""
	for item in x :
		if item in y :
			output.append(item)
	return output
----------------------------------------

def unique_4(x):
	output = []
	for item in x:
		if item not in output:
			output.append(item)
	return output
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
0
Gpt3D_Clone93_0.py 1 9
Gpt3D_Clone93_0.py 11 17

----------------------------------------

def checksum(msg) :
	s = 0
	for i in range(0, len(msg), 2) :
		w = ord(msg [i]) + (ord(msg [i + 1]) < < 8)
		s = carry_around_add(s, w)
	return ~ s & 0xffff
----------------------------------------

def checksum(msg):
	s = 0
	for i in range(0, len(msg)):
		w = ord(msg [i])
		s = carry_around_add(s, w)
	return ~ s & 0xffff
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
942
0
Gpt3D_Clone942_0.py 1 18
Gpt3D_Clone942_0.py 20 35

----------------------------------------

def json_debug_handler(obj) :
	print ("object received:")
	print type(obj)
	print ("\n\n")
	if isinstance(obj, collections.Mapping) :
		for key, value in obj.iteritems() :
			if isinstance(value, (collections.Mapping, collections.MutableSequence)) :
				value = json_debug_handler(value)
			obj [key] = convert(value)
	elif isinstance(obj, collections.MutableSequence) :
		for index, value in enumerate(obj) :
			if isinstance(value, (collections.Mapping, collections.MutableSequence)) :
				value = json_debug_handler(value)
			obj [index] = convert(value)
	return obj
----------------------------------------

def json_debug_handler(obj) :
	print ("object received:")
	print type(obj)
	print ("\n\n")
	if isinstance(obj, dict) :
		for key, value in obj.items() :
			if isinstance(value, (dict, list)) :
				value = json_debug_handler(value)
			obj [key] = convert(value)
	elif isinstance(obj, list) :
		for index, value in enumerate(obj) :
			if isinstance(value, (dict, list)) :
				value = json_debug_handler(value)
			obj [index] = convert(value)
	return obj
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
1
Gpt3D_Clone945_1.py 1 9
Gpt3D_Clone945_1.py 11 20

----------------------------------------

def download_file(url) :
	local_filename = url.split('/') [- 1]
	r = requests.get(url, stream = True)
	with open(local_filename, 'wb') as f :
		shutil.copyfileobj(r.raw, f)
	return local_filename
----------------------------------------

def download_file(url):
	try:
		local_filename = url.split('/') [- 1]
		r = requests.get(url, stream =True)
		with open(local_filename, 'wb') as f:
			shutil.copyfileobj(r.raw, f)
	except Exception as e:
		logger.error('Operation error: {}.'.format(e))
	return local_filename
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
2
Gpt3D_Clone945_2.py 1 9
Gpt3D_Clone945_2.py 11 19

----------------------------------------

def download_file(url) :
	local_filename = url.split('/') [- 1]
	r = requests.get(url, stream = True)
	with open(local_filename, 'wb') as f :
		shutil.copyfileobj(r.raw, f)
	return local_filename
----------------------------------------

def download_file(url):
	filename = url.split('/')[-1]
	r = requests.get(url,stream=True)
	with open(filename,'wb') as f:
		for chunk in r.iter_content(chunk_size=1024):
			if chunk:
				f.write(chunk)
	return filename
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
3
Gpt3D_Clone945_3.py 1 9
Gpt3D_Clone945_3.py 11 18

----------------------------------------

def download_file(url) :
	local_filename = url.split('/') [- 1]
	r = requests.get(url, stream = True)
	with open(local_filename, 'wb') as f :
		shutil.copyfileobj(r.raw, f)
	return local_filename
----------------------------------------

def download_file(url):
	filename = url.split('/')[-1]
	r = requests.get(url)
	data = r.text
	with open(filename,'w') as f:
		f.write(data)
	return filename
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
0
Gpt3D_Clone946_0.py 1 15
Gpt3D_Clone946_0.py 17 29

----------------------------------------

def _add(node, v) :
	new = [v, [], []]
	if node :
		left, right = node [1 :]
		if not left :
			left.extend(new)
		elif not right :
			right.extend(new)
		else :
			_add(left, v)
	else :
		node.extend(new)
----------------------------------------

def _add(node, v) :
	new = [v, [], []]
	if node :
		left, right = node [1 :]
		if not left :
			node [1] = new
		elif not right :
			node [2] = new
		else :
			_add(left, v)
	else :
		node = new
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
947
0
Gpt3D_Clone947_0.py 1 15
Gpt3D_Clone947_0.py 17 29

----------------------------------------

def _add(node, v) :
	new = [v, [], []]
	if node :
		left, right = node [1 :]
		if not left :
			left.extend(new)
		elif not right :
			right.extend(new)
		else :
			_add(left, v)
	else :
		node.extend(new)
----------------------------------------

def _add_t4(node, v) :
	new = [v, [], []]
	if node :
		left, right = node [1 :]
		if not left :
			left.extend([new])
		elif not right :
			right.extend([new])
		else :
			_add_t4(left, v)
	else :
		node.extend([new])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
949
2
Gpt3D_Clone949_2.py 1 8
Gpt3D_Clone949_2.py 10 16

----------------------------------------

def add(self, val) :
	if (self.root == None) :
		self.root = Node(val)
	else :
		self._add(val, self.root)
----------------------------------------

def add(self, val) :
	curr = self.root
	if (curr is None) :
		self.root = Node(val)
	else :
		self._add(val, self.root)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
0
Gpt3D_Clone950_0.py 1 18
Gpt3D_Clone950_0.py 20 35

----------------------------------------

def add(self, key, left_key = None, right_key = None) :
	if key not in self.nodes :
		self.nodes [key] = BinaryTreeNode(key)
	if left_key is None :
		self.nodes [key].left = None
	else :
		if left_key not in self.nodes :
			self.nodes [left_key] = BinaryTreeNode(left_key)
		self.nodes [key].left = self.nodes [left_key]
	if right_key == None :
		self.nodes [key].right = None
	else :
		if right_key not in self.nodes :
			self.nodes [right_key] = BinaryTreeNode(right_key)
		self.nodes [key].right = self.nodes [right_key]
----------------------------------------

def add(self, key, left_key = None, right_key = None) :
	if key not in self.nodes :
		self.nodes [key] = BinaryTreeNode(key)
	if left_key is None :
		self.nodes [key].left = None
	elif left_key not in self.nodes :
		self.nodes [left_key] = BinaryTreeNode(left_key)
	self.nodes [key].left = self.nodes [left_key]
	if right_key == None :
		self.nodes [key].right = None
	elif right_key not in self.nodes :
		self.nodes [right_key] = BinaryTreeNode(right_key)
	self.nodes [key].right = self.nodes [right_key]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
1
Gpt3D_Clone950_1.py 1 18
Gpt3D_Clone950_1.py 20 33

----------------------------------------

def add(self, key, left_key = None, right_key = None) :
	if key not in self.nodes :
		self.nodes [key] = BinaryTreeNode(key)
	if left_key is None :
		self.nodes [key].left = None
	else :
		if left_key not in self.nodes :
			self.nodes [left_key] = BinaryTreeNode(left_key)
		self.nodes [key].left = self.nodes [left_key]
	if right_key == None :
		self.nodes [key].right = None
	else :
		if right_key not in self.nodes :
			self.nodes [right_key] = BinaryTreeNode(right_key)
		self.nodes [key].right = self.nodes [right_key]
----------------------------------------

def add(self, key, left_key = None, right_key = None) :
	if key not in self.nodes : 
		self.nodes [key] = BinaryTreeNode(key)
	if not left_key : 
		self.nodes[key].left = None 
	elif left_key not in self.nodes :
		self.nodes [left_key] = BinaryTreeNode(left_key)
		self.nodes[key].left = self.nodes [left_key]
	if not right_key :
		self.nodes[key].right = None
	elif right_key not in self.nodes :
		self.nodes [right_key] = BinaryTreeNode(right_key)
		self.nodes[key].right = self.nodes [right_key]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
952
0
Gpt3D_Clone952_0.py 1 15
Gpt3D_Clone952_0.py 17 34

----------------------------------------

def long_substr(strings) :
	substr = ""
	if not strings :
		return substr
	reference = shortest_of(strings)
	length = len(reference)
	for i in xrange(length) :
		for j in xrange(i + len(substr) + 1, length + 1) :
			candidate = reference [i : j]
			if all(candidate in text for text in strings) :
				substr = candidate
	return substr
----------------------------------------

def long_substr(strings) :
	substr = ""
	if not strings :
		return substr
	reference = shortest_of(strings)
	length = len(reference)
	for i in xrange(length) :
		for j in xrange(i + len(substr) + 1, length + 1) :
			candidate = reference [i : j]
			found_flag = False
			for text in strings :
				if candidate in text :
					found_flag = True
					break
			if found_flag :
				substr = candidate
	return substr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
952
1
Gpt3D_Clone952_1.py 1 15
Gpt3D_Clone952_1.py 17 35

----------------------------------------

def long_substr(strings) :
	substr = ""
	if not strings :
		return substr
	reference = shortest_of(strings)
	length = len(reference)
	for i in xrange(length) :
		for j in xrange(i + len(substr) + 1, length + 1) :
			candidate = reference [i : j]
			if all(candidate in text for text in strings) :
				substr = candidate
	return substr
----------------------------------------

def long_substr(strings) :
	substr = ""
	if not strings :
		return substr
	reference = shortest_of(strings)
	length = len(reference)
	for i in xrange(length) :
		for j in xrange(i + len(substr) + 1, length + 1) :
			candidate = reference [i : j]
			found_flag = True
			for text in strings :
				if not candidate in text :
					found_flag = False
					break
			if found_flag :
				substr = candidate
	return substr
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
0
Gpt3D_Clone953_0.py 1 11
Gpt3D_Clone953_0.py 13 21

----------------------------------------

def todict(obj) :
	data = {}
	for key, value in obj.__dict__.iteritems() :
		try :
			data [key] = todict(value)
		except AttributeError :
			data [key] = value
	return data
----------------------------------------

def todict_3(obj) :
	data = {}
	for key, value in obj.__dict__.items() :
		if isinstance(value, attribute):
			data [key] = todict_3(value)
		else:
			data [key] = value
	return data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
1
Gpt3D_Clone953_1.py 1 11
Gpt3D_Clone953_1.py 13 21

----------------------------------------

def todict(obj) :
	data = {}
	for key, value in obj.__dict__.iteritems() :
		try :
			data [key] = todict(value)
		except AttributeError :
			data [key] = value
	return data
----------------------------------------

def todict_4(obj) :
	data = {}
	for key, value in obj.__dict__.items() :
		if hasattr(value, '__dict__'):
			data [key] = todict_4(value)
		else:
			data [key] = value
	return data
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
0
Gpt3D_Clone955_0.py 1 21
Gpt3D_Clone955_0.py 23 48

----------------------------------------

def todict(obj, classkey = None) :
	if isinstance(obj, dict) :
		data = {}
		for (k, v) in obj.items() :
			data [k] = todict(v, classkey)
		return data
	elif hasattr(obj, "_ast") :
		return todict(obj._ast())
	elif hasattr(obj, "__iter__") and not isinstance(obj, str) :
		return [todict(v, classkey) for v in obj]
	elif hasattr(obj, "__dict__") :
		data = dict([(key, todict(value, classkey)) for key, value in obj.__dict__.items()
		if not callable(value) and not key.startswith('_')])
		if classkey is not None and hasattr(obj, "__class__") :
			data [classkey] = obj.__class__.__name__
		return data
	else :
		return obj
----------------------------------------

def todict3(obj, classkey = None):
	if isinstance(obj, dict):
		data = dict()
		for (k,v) in obj.items():
			data[k] = todict3(v, classkey)
		return data
	elif hasattr(obj, "_ast"):
		return todict3(obj._ast())
	elif hasattr(obj, "__iter__") and not isinstance(obj, str):
		data = list()
		for v in obj:
			data.append(todict3(v, classkey))
		return data
	elif hasattr(obj, "__dict__"):
		d = obj.__dict__
		items = list()
		for key, value in d.items():
			if not callable(value) and not key.startswith('_'):
				items.append((key, todict3(value, classkey)))
		data = dict(items)
		if classkey is not None and hasattr(obj, "__class__"):
			data[classkey] = obj.__class__.__name__
		return data
	else:
		return obj
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
1
Gpt3D_Clone955_1.py 1 21
Gpt3D_Clone955_1.py 23 47

----------------------------------------

def todict(obj, classkey = None) :
	if isinstance(obj, dict) :
		data = {}
		for (k, v) in obj.items() :
			data [k] = todict(v, classkey)
		return data
	elif hasattr(obj, "_ast") :
		return todict(obj._ast())
	elif hasattr(obj, "__iter__") and not isinstance(obj, str) :
		return [todict(v, classkey) for v in obj]
	elif hasattr(obj, "__dict__") :
		data = dict([(key, todict(value, classkey)) for key, value in obj.__dict__.items()
		if not callable(value) and not key.startswith('_')])
		if classkey is not None and hasattr(obj, "__class__") :
			data [classkey] = obj.__class__.__name__
		return data
	else :
		return obj
----------------------------------------

def todict(obj, classkey = None): 
  if isinstance(obj, dict): 
    data = {} 
    for k, v in obj.items(): 
      data[k] = todict(v, classkey) 
    return data 
  elif hasattr(obj, "_ast"): 
    return todict(obj._ast()) 
  elif (hasattr(obj, "__iter__") and (not isinstance(obj, str))): 
    return [todict(v, classkey) for v in obj] 
  elif hasattr(obj, "__dict__"): 
    data = {}
    for key, value in obj.__dict__.items():
      if key.startswith('_'):
        continue
      elif callable(value):
        continue
      else:
        data[key] = todict(value, classkey)
    if classkey is not None and hasattr(obj, "__class__"): 
      data[classkey] = obj.__class__.__name__ 
    return data 
  else: 
    return obj
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
2
Gpt3D_Clone955_2.py 1 21
Gpt3D_Clone955_2.py 23 41

----------------------------------------

def todict(obj, classkey = None) :
	if isinstance(obj, dict) :
		data = {}
		for (k, v) in obj.items() :
			data [k] = todict(v, classkey)
		return data
	elif hasattr(obj, "_ast") :
		return todict(obj._ast())
	elif hasattr(obj, "__iter__") and not isinstance(obj, str) :
		return [todict(v, classkey) for v in obj]
	elif hasattr(obj, "__dict__") :
		data = dict([(key, todict(value, classkey)) for key, value in obj.__dict__.items()
		if not callable(value) and not key.startswith('_')])
		if classkey is not None and hasattr(obj, "__class__") :
			data [classkey] = obj.__class__.__name__
		return data
	else :
		return obj
----------------------------------------

def todict(obj, classkey = None): 
  if isinstance(obj, dict): 
    data = {} 
    for k, v in obj.items(): 
      data[k] = todict(v, classkey) 
    return data 
  elif hasattr(obj, "_ast"): 
    return todict(obj._ast()) 
  elif (hasattr(obj, "__iter__") and (not isinstance(obj, str))): 
    return [todict(v, classkey) for v in obj] 
  elif (hasattr(obj, "__dict__")): 
    data = dict([(key, todict(value, classkey)) for key, value in obj.__dict__.items() if ((callable(value) is False) and (key.startswith('_') is False))]) 
    if ((classkey is not None) and (hasattr(obj, "__class__"))): 
      data[classkey] = obj.__class__.__name__ 
    return data 
  else: 
    return obj 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
958
2
Gpt3D_Clone958_2.py 1 9
Gpt3D_Clone958_2.py 11 17

----------------------------------------

def md5sum(filename) :
	with open(filename, mode = 'rb') as f :
		d = hashlib.md5()
		for buf in iter(partial(f.read, 128), b'') :
			d.update(buf)
	return d.hexdigest()
----------------------------------------

def md5sum_custom_buffer(filename, buff):
	with open(filename, mode = 'rb') as f :
		d = hashlib.md5()
		for buf in iter(partial(f.read, buff), b'') :
			d.update(buf)
	return d.hexdigest()
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
0
Gpt3D_Clone962_0.py 1 8
Gpt3D_Clone962_0.py 10 16

----------------------------------------

def __init__(self, key, value = None) :
	self.key = key
	self.value = value
	if not key in Master.existent :
		Master.existent [key] = self
----------------------------------------

def __init__(self, key, value):
	self.key = key
	self.value = value
	if key not in Master.existent:
		Master.existent[key] = self
    
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
964
1
Gpt3D_Clone964_1.py 1 9
Gpt3D_Clone964_1.py 11 20

----------------------------------------

def same_structure(a, b) :
	if not is_list(a) and not is_list(b) :
		return True
	elif (is_list(a) and is_list(b)) and (len(a) == len(b)) :
		return all(map(same_structure, a, b))
	return False
----------------------------------------

def same_structure(a, b) :
        if not is_list(a) and not is_list(b) :
                return True
        elif (is_list(a) and is_list(b)) and (len(a) == len(b)) :
                result = []
                for i in range(len(a)): 
                        result.append(same_structure(a[i], b[i])) 
                return all(result)
        return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
964
2
Gpt3D_Clone964_2.py 1 9
Gpt3D_Clone964_2.py 11 19

----------------------------------------

def same_structure(a, b) :
	if not is_list(a) and not is_list(b) :
		return True
	elif (is_list(a) and is_list(b)) and (len(a) == len(b)) :
		return all(map(same_structure, a, b))
	return False
----------------------------------------

def same_structure(data_1, data_2) :
	if not is_list(data_1) and not is_list(data_2) :
		return True
	elif (is_list(data_1) and is_list(data_2)) and (len(data_1) == len(data_2)) :
		match_result = map(same_structure, data_1, data_2)
		return all(match_result)
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
964
3
Gpt3D_Clone964_3.py 1 9
Gpt3D_Clone964_3.py 11 18

----------------------------------------

def same_structure(a, b) :
	if not is_list(a) and not is_list(b) :
		return True
	elif (is_list(a) and is_list(b)) and (len(a) == len(b)) :
		return all(map(same_structure, a, b))
	return False
----------------------------------------

def same_structure(corpus_1, corpus_2) :
	if not is_list(corpus_1) and not is_list(corpus_2) :
		return True
	elif (is_list(corpus_1) and is_list(corpus_2)) and (len(corpus_1) == len(corpus_2)) :
		compared_result = map(same_structure, corpus_1, corpus_2)
		return all(compared_result)
	return False
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
0
Gpt3D_Clone965_0.py 1 12
Gpt3D_Clone965_0.py 14 26

----------------------------------------

def same_structure(a, b) :
	if a == [] or b == [] :
		return a == b
	elif is_list(a [0]) ! = is_list(b [0]) :
		return False
	elif not is_list(a [0]) :
		return same_structure(a [1 :], b [1 :])
	else :
		return same_structure(a [0], b [0]) and same_structure(a [1 :], b [1 :])
----------------------------------------

def same_structure(a, b) :
	if len(a) != len(b) :
		return False
	elif a == [] or b == [] :
		return a == b
	elif is_list(a [0]) ! = is_list(b [0]) :
		return False
	elif not is_list(a [0]) :
		return same_structure(a [1 :], b [1 :])
	else :
		return same_structure(a [0], b [0]) and same_structure(a [1 :], b [1 :])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
1
Gpt3D_Clone965_1.py 1 12
Gpt3D_Clone965_1.py 14 25

----------------------------------------

def same_structure(a, b) :
	if a == [] or b == [] :
		return a == b
	elif is_list(a [0]) ! = is_list(b [0]) :
		return False
	elif not is_list(a [0]) :
		return same_structure(a [1 :], b [1 :])
	else :
		return same_structure(a [0], b [0]) and same_structure(a [1 :], b [1 :])
----------------------------------------

def same_structure(a, b) :
	if len(a) != len(b) :
		return False
	elif a == [] and b == [] :
		return True
	elif is_list(a [0]) ! = is_list(b [0]) :
		return False
	elif not is_list(a [0]) :
		return same_structure(a [1 :], b [1 :])
	else :
		return same_structure(a [0], b [0]) and same_structure(a [1 :], b [1 :])
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
967
1
Gpt3D_Clone967_1.py 1 9
Gpt3D_Clone967_1.py 11 18

----------------------------------------

def obj_get(self, request = None, ** kwargs) :
	try :
		info = Info.get(kwargs ['pk'])
	except ResourceNotFound :
		raise ObjectDoesNotExist('Sorry, no results on that page.')
	return info
----------------------------------------

def obj_get(self, ** kwargs): 
	try: 
		info = Info.objects.get(pk=kwargs.pop('pk')) 
	except ResourceNotFound: 
		raise ObjectDoesNotExist('Sorry, no results on that page.') 
	return info 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
2
Gpt3D_Clone968_2.py 1 15
Gpt3D_Clone968_2.py 17 31

----------------------------------------

def qsort(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : i += 1
		while l [j] > pivot : j -= 1
		if i < = j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort(l, fst, j)
	qsort(l, i, lst)
----------------------------------------

def qsort(l, fst, lst) :
	if fst > = lst : return
	i, j = lst, fst
	pivot = l [random.randint(fst, lst)]
	while i > = j :
		while l [i] > pivot : i -= 1
		while l [j] < pivot : j += 1
		if i > = j :
			l [i], l [j] = l [j], l [i]
			i, j = i - 1, j + 1
	qsort(l, fst, j)
	qsort(l, i, lst)
 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
969
0
Gpt3D_Clone969_0.py 1 15
Gpt3D_Clone969_0.py 17 34

----------------------------------------

def qsort(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : i += 1
		while l [j] > pivot : j -= 1
		if i < = j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort(l, fst, j)
	qsort(l, i, lst)
----------------------------------------

def qsort2(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : 
			i += 1
		while l [j] > pivot : 
			j -= 1
		if i < = j :
			temp = l[i]
			l [i] = l [j]
			l [j] = temp
			i, j = i + 1, j - 1
	qsort2(l, fst, j)
	qsort2(l, i, lst)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
969
1
Gpt3D_Clone969_1.py 1 15
Gpt3D_Clone969_1.py 17 31

----------------------------------------

def qsort(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : i += 1
		while l [j] > pivot : j -= 1
		if i < = j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort(l, fst, j)
	qsort(l, i, lst)
----------------------------------------

def qsort3(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : 
			i += 1
		while l [j] > pivot : 
			j -= 1
		if i < = j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort3(l, fst, j)
	qsort3(l, i, lst)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
0
Gpt3D_Clone96_0.py 1 9
Gpt3D_Clone96_0.py 11 19

----------------------------------------

def SumOdds(x, y) :
	count = 0
	for i in range(x, y + 1) :
		if i % 2 == 1 :
			count = count + i
	print (count)
----------------------------------------

def SumOdds(x, y):
    count = 0
    i = x
    while i <= y:
        if i % 2 == 1:
            count = count + i
        i += 1
    print (count)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
2
Gpt3D_Clone96_2.py 1 9
Gpt3D_Clone96_2.py 11 18

----------------------------------------

def SumOdds(x, y) :
	count = 0
	for i in range(x, y + 1) :
		if i % 2 == 1 :
			count = count + i
	print (count)
----------------------------------------

def SumOdds(x, y) :
	values = []
	for i in range(x, y + 1):
		if i % 2 == 1:
			values.append(i)
	total = sum(values)
	print(total)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
3
Gpt3D_Clone96_3.py 1 9
Gpt3D_Clone96_3.py 11 18

----------------------------------------

def SumOdds(x, y) :
	count = 0
	for i in range(x, y + 1) :
		if i % 2 == 1 :
			count = count + i
	print (count)
----------------------------------------

def SumOdds(x, y):
    count = 0
    for num in range(x, y+1):
        remainder = num % 2
        if remainder == 1:
            count += num
    print(count)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
970
0
Gpt3D_Clone970_0.py 1 15
Gpt3D_Clone970_0.py 17 29

----------------------------------------

def qsort(l, fst, lst) :
	if fst > = lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i < = j :
		while l [i] < pivot : i += 1
		while l [j] > pivot : j -= 1
		if i < = j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort(l, fst, j)
	qsort(l, i, lst)
----------------------------------------

def qsort(l, fst, lst) :
	if fst >= lst : return
	i, j = fst, lst
	pivot = l [random.randint(fst, lst)]
	while i <= j :
		while l [i] < pivot : i+=1
		while l [j] > pivot : j-=1
		if i < j :
			l [i], l [j] = l [j], l [i]
			i, j = i + 1, j - 1
	qsort(l, fst, j-1)
	qsort(l, i+1, lst)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
1
Gpt3D_Clone974_1.py 1 10
Gpt3D_Clone974_1.py 12 21

----------------------------------------

def factorial(n) :
	result = 1
	i = n * (n - 1)
	while n > = 1 :
		result = result * n
		n = n - 1
	return result
----------------------------------------

def factorial(n) :
	if n == 0 :
		return 1
	else :
		result = 1
		while n > 0 :
			result = result * n
			n = n - 1
		return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
976
0
Gpt3D_Clone976_0.py 1 9
Gpt3D_Clone976_0.py 11 18

----------------------------------------

def wrapper(arg1) :
	result = func(arg1)
	for err in findError(result) :
		errors.append(err)
	print errors
	return result
----------------------------------------

def wrapper(arg1) :  
	result = func(arg1)
	errs  = findError(result)
	for err in errs :
		errors.append(err)
	print(errors)
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
977
0
Gpt3D_Clone977_0.py 1 9
Gpt3D_Clone977_0.py 11 20

----------------------------------------

def wrapper(arg1) :
	result = func(arg1)
	for err in findError(result) :
		errors.append(err)
	print errors
	return result
----------------------------------------

def wrapper(arg1) :
	result = func(arg1)
	failures = findError(result)
	if failures :
		for err in failures :
			errors.append(err)
		print errors
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
977
1
Gpt3D_Clone977_1.py 1 9
Gpt3D_Clone977_1.py 11 18

----------------------------------------

def wrapper(arg1) :
	result = func(arg1)
	for err in findError(result) :
		errors.append(err)
	print errors
	return result
----------------------------------------

def wrapper(arg1) :
	result = func(arg1)
	errorList = list(findError(result))
	for err in errorList :
		errors.append(err)
	print errors
	return result
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
0
Gpt3D_Clone978_0.py 1 11
Gpt3D_Clone978_0.py 13 21

----------------------------------------

def findError(result) :
	print result
	for k, v in result.iteritems() :
		error_nr = v % 2
		if error_nr == 0 :
			pass
		elif error_nr > 0 :
			yield MyException
----------------------------------------

def findError(result):
	print (result)
	for item in result.items():
		error_nr = item[1] % 2
		if error_nr == 0:
			pass
		elif error_nr > 0:
			yield MyException
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
1
Gpt3D_Clone978_1.py 1 11
Gpt3D_Clone978_1.py 13 21

----------------------------------------

def findError(result) :
	print result
	for k, v in result.iteritems() :
		error_nr = v % 2
		if error_nr == 0 :
			pass
		elif error_nr > 0 :
			yield MyException
----------------------------------------

def findError(result) :
	print(result)
	for item in result.items() :
		error_nr = item[1] % 2
		if error_nr == 0 :
			pass
		elif error_nr > 0 :
			yield MyException
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
2
Gpt3D_Clone978_2.py 1 11
Gpt3D_Clone978_2.py 13 21

----------------------------------------

def findError(result) :
	print result
	for k, v in result.iteritems() :
		error_nr = v % 2
		if error_nr == 0 :
			pass
		elif error_nr > 0 :
			yield MyException
----------------------------------------

def findError(result):
	print (result)
	for my_result in result.keys():
		error_nr = result[my_result] % 2
		if error_nr == 0:
			pass
		elif error_nr > 0:
			yield MyException
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
0
Gpt3D_Clone981_0.py 1 8
Gpt3D_Clone981_0.py 10 18

----------------------------------------

def myfunc(orientation, l, w) :
	if 1 < = orientation < = 8 :
		a = (- w, - l, - w, - l, w, l, w, l) [orientation - 1]
		b = (l, w, - l, - w) [(orientation - 1) % 4]
	return a, b
----------------------------------------

def myfunc2(orientation, l, w) :
	if 1 < = orientation < = 8 :
		a = (- w, - l, - w, - l, w, l, w, l) [orientation - 1]
		b = (l, w, - l, - w) [(orientation - 1) % 4]
	else:
		a, b = 0, 0
	return a, b
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
1
Gpt3D_Clone981_1.py 1 8
Gpt3D_Clone981_1.py 10 17

----------------------------------------

def myfunc(orientation, l, w) :
	if 1 < = orientation < = 8 :
		a = (- w, - l, - w, - l, w, l, w, l) [orientation - 1]
		b = (l, w, - l, - w) [(orientation - 1) % 4]
	return a, b
----------------------------------------

def myfunc3(orientation, l, w) :
	if 1 < = orientation < = 8 :
		a = (- w, - l, - w, - l, w, l, w, l) [orientation - 1]
		b = (l, w, - l, - w) [(orientation - 1) % 4]
	elif orientation == 9:
		a, b = w, l
	return a, b
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
3
Gpt3D_Clone981_3.py 1 8
Gpt3D_Clone981_3.py 10 14

----------------------------------------

def myfunc(orientation, l, w) :
	if 1 < = orientation < = 8 :
		a = (- w, - l, - w, - l, w, l, w, l) [orientation - 1]
		b = (l, w, - l, - w) [(orientation - 1) % 4]
	return a, b
----------------------------------------

def myfunc(orientation, l, w):
	if 1 <= orientation <= 8:
		a, b = (- w, - l, -w, -l, w, l, w, l)[orientation - 1], (l, w, -l, -w)[(orientation - 1) % 4]
	return a, b
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
0
Gpt3D_Clone982_0.py 1 8
Gpt3D_Clone982_0.py 10 18

----------------------------------------

def fileCount(path, extension) :
	count = 0
	for root, dirs, files in os.walk(path) :
		count += sum(f.endswith(extension) for f in files)
	return count
----------------------------------------

def fileCount(directory, file_extension):
	file_counter = 0
	for root, folders, files in os.walk(directory):
		for f in files:
			if(f.endswith(file_extension)):
				file_counter += 1
	return file_counter 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
0
Gpt3D_Clone983_0.py 1 8
Gpt3D_Clone983_0.py 10 18

----------------------------------------

def fileCount(path, extension) :
	count = 0
	for root, dirs, files in os.walk(path) :
		count += sum(f.endswith(extension) for f in files)
	return count
----------------------------------------

def fileCount(path, extension) :
	count = 0
	for root, dirs, files in os.walk(path) :
		for f in files :
			if f.endswith(extension) :
				count += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
1
Gpt3D_Clone983_1.py 1 8
Gpt3D_Clone983_1.py 10 17

----------------------------------------

def fileCount(path, extension) :
	count = 0
	for root, dirs, files in os.walk(path) :
		count += sum(f.endswith(extension) for f in files)
	return count
----------------------------------------

def fileCount(directoryPath, fileExtension) :
	count = 0
	for root, folders, listings in os.walk(directoryPath) :
		for name in listings :
			if name.endswith(fileExtension) :
				count += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
2
Gpt3D_Clone983_2.py 1 8
Gpt3D_Clone983_2.py 10 17

----------------------------------------

def fileCount(path, extension) :
	count = 0
	for root, dirs, files in os.walk(path) :
		count += sum(f.endswith(extension) for f in files)
	return count
----------------------------------------

def fileCount(path, extension) :
	count = 0
	for root, dirs, files in os.walk(path) :
		for f in files :
			if f.rsplit('.', 1)[-1] == extension :
				count += 1
	return count
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
0
Gpt3D_Clone984_0.py 1 15
Gpt3D_Clone984_0.py 17 32

----------------------------------------

def future6(A) :
	known = []
	result = []
	for idx in xrange(len(A) - 1, - 1, - 1) :
		value = A [idx]
		known = [(x, y) for x, y in known if y > value]
		if known :
			result.append(known [- 1] [0])
		else :
			result.append(- 1)
		known.append((idx, value))
	return np.array(result) [: : - 1]
----------------------------------------

def future6(A):
    known = []
    result = []
    temp_list = []
    for i in range(len(A)-1,-1,-1):    
        value = A [i]
        for x, y in known:
            if y > value:
                temp_list.append((x,y))
        if len(temp_list) > 0:
            result.append(temp_list[-1][0])
        else:
            result.append(-1)
        known.append((i,value))
    return np.array(result)[::-1]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
1
Gpt3D_Clone984_1.py 1 15
Gpt3D_Clone984_1.py 17 30

----------------------------------------

def future6(A) :
	known = []
	result = []
	for idx in xrange(len(A) - 1, - 1, - 1) :
		value = A [idx]
		known = [(x, y) for x, y in known if y > value]
		if known :
			result.append(known [- 1] [0])
		else :
			result.append(- 1)
		known.append((idx, value))
	return np.array(result) [: : - 1]
----------------------------------------

def future6(A):
	known = []
	result = []
	for idx in range(len(A)) :
		value = A [idx]
		known = [(x, y) for x, y in known if y < value]
		if known :
			result.append(known [- 1] [0])
		else :
			result.append(- 1)
		known.append((idx, value))
	return np.array(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
0
Gpt3D_Clone985_0.py 1 14
Gpt3D_Clone985_0.py 16 27

----------------------------------------

def merge_lists(h1, h2) :
	if h1 is None :
		return h2
	if h2 is None :
		return h1
	if (h1.value < h2.value) :
		h1.next = merge_lists(h1.next, h2)
		return h1
	else :
		h2.next = merge_lists(h2.next, h1)
		return h2
----------------------------------------

def merge_lists_3(h1, h2):
	if not h1: 
		return h2 
	if not h2: 
		return h1 
	if h1.value < h2.value: 
		h1.next = merge_lists_3(h1.next, h2) 
		return h1 
	else: 
		h2.next = merge_lists(h2.next, h1) 
		return h2 
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
1
Gpt3D_Clone985_1.py 1 14
Gpt3D_Clone985_1.py 16 27

----------------------------------------

def merge_lists(h1, h2) :
	if h1 is None :
		return h2
	if h2 is None :
		return h1
	if (h1.value < h2.value) :
		h1.next = merge_lists(h1.next, h2)
		return h1
	else :
		h2.next = merge_lists(h2.next, h1)
		return h2
----------------------------------------

def merge_lists_4(h1, h2):
	if h1 is None or not h1: 
		return h2 
	if h2 is None or not h2: 
		return h1 
	if h1.value < h2.value: 
		h1.next = merge_lists_4(h1.next, h2) 
		return h1 
	else: 
		h2.next = merge_lists(h2.next, h1) 
		return h2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
986
1
Gpt3D_Clone986_1.py 1 11
Gpt3D_Clone986_1.py 13 21

----------------------------------------

def __str__(self) :
	if self.cards :
		rep = ""
		for card in self.cards :
			rep += str(card) + "\t"
	else :
		rep = "<empty>"
	return rep
----------------------------------------

def __str__(self) :
	cards_str = ""
	if self.cards :
		for card in self.cards :
			cards_str += card.__str__() + "\t"
	else :
		cards_str = "<empty>"
	return cards_str
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
986
2
Gpt3D_Clone986_2.py 1 11
Gpt3D_Clone986_2.py 13 19

----------------------------------------

def __str__(self) :
	if self.cards :
		rep = ""
		for card in self.cards :
			rep += str(card) + "\t"
	else :
		rep = "<empty>"
	return rep
----------------------------------------

def __str__(self) : 
     if self.cards:
          rep = ''.join(map(str, self.cards)) + "\t"
     else:
          rep = "<empty>"
     return rep
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
988
0
Gpt3D_Clone988_0.py 1 14
Gpt3D_Clone988_0.py 16 27

----------------------------------------

def run_query(query, database, s3_output) :
	client = boto3.client('athena')
	response = client.start_query_execution(
	QueryString = query,
	QueryExecutionContext = {
	'Database' : database},
	ResultConfiguration = {
	'OutputLocation' : s3_output,
	})
	print ('Execution ID: ' + response ['QueryExecutionId'])
	return response
----------------------------------------

def run_query_type_4(query, database, s3_output) :
	env = os.environ.get('AWS_DEFAULT_REGION')
	client = boto3.client('athena', region_name = env)
	response = client.start_query_execution(
	QueryString = query,
	QueryExecutionContext = {
	'Database' : database, 
	'OutputLocation' : s3_output,
	})
	print ('Execution ID: ' + response ['QueryExecutionId'])
	return response
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
0
Gpt3D_Clone98_0.py 1 12
Gpt3D_Clone98_0.py 14 28

----------------------------------------

def matcher(x) :
	l = [item for item in physical if item.lower() in x.lower()]
	length = len(l)
	if length == 0 :
		return 'other'
	elif length == 1 :
		return l [0]
	else :
		return 'mix'
----------------------------------------

def matcher(x) :
	matches = []
	for item in physical :
		if item.lower() in x.lower() :
			matches.append(item)
	length = len(matches)
	if length == 0 :
		return 'other'
	elif length == 1 :
		return matches [0]
	else :
		return 'mix'
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
1
Gpt3D_Clone98_1.py 1 12
Gpt3D_Clone98_1.py 14 27

----------------------------------------

def matcher(x) :
	l = [item for item in physical if item.lower() in x.lower()]
	length = len(l)
	if length == 0 :
		return 'other'
	elif length == 1 :
		return l [0]
	else :
		return 'mix'
----------------------------------------

def matcher(x):
   l = [item for item in physical if item.lower() in x.lower()]
   length = len(l)
   
   if length == 0:
      return_val = 'other'
   elif length == 1:
      return_val = l[0]
   else:
      return_val = 'mix'
      
   return return_val
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
2
Gpt3D_Clone98_2.py 1 12
Gpt3D_Clone98_2.py 14 26

----------------------------------------

def matcher(x) :
	l = [item for item in physical if item.lower() in x.lower()]
	length = len(l)
	if length == 0 :
		return 'other'
	elif length == 1 :
		return l [0]
	else :
		return 'mix'
----------------------------------------

def matcher(x):
   l = [item for item in physical if item.lower() in x.lower()]
   length = len(l)
   
   if length == 0:
      return 'other'
   else:
      if length == 1:
         return l[0]
      elif length > 1:
         return 'mix'
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
991
0
Gpt3D_Clone991_0.py 1 21
Gpt3D_Clone991_0.py 23 42

----------------------------------------

def spiral(X, Y) :
	x = y = 0
	dx = 0
	dy = - 1
	for i in range(max(X, Y) ** 2) :
		if (- X / 2 < x < = X / 2) and (- Y / 2 < y < = Y / 2) :
			yield x, y
		if x == y or (x < 0 and x == - y) or (x > 0 and x == 1 - y) :
			dx, dy = - dy, dx
		x, y = x + dx, y + dy
	spiral_matrix_size = 5
	my_list = list(range(spiral_matrix_size ** 2))
	my_list = [my_list [x : x + spiral_matrix_size] for x in range(0, len(my_list), spiral_matrix_size)]
	print (my_list)
	for i, (x, y) in enumerate(spiral(spiral_matrix_size, spiral_matrix_size)) :
		diff = int(spiral_matrix_size / 2)
		my_list [x + diff] [y + diff] = i
	print (my_list)
----------------------------------------

def spiral(X, Y) :
	x, y, dx, dy = 0, 0, 0, -1
	for i in range(max(X, Y) ** 2):
		if (-X/2 < x <= X/2 and -Y/2 < y <= Y/2) :
			yield x, y
		if x == y or (x < 0 and x == -y) or (x > 0 and x == 1-y) :
			dx, dy = -dy, dx
		x, y = x+dx, y+dy
	spiral_matrix_size = 5
	my_list = list(range(spiral_matrix_size ** 2))
	my_list = [my_list[x : x + spiral_matrix_size] for x in range(0, len(my_list), spiral_matrix_size)]
	matrix_print(my_list)
	for i, (x, y) in enumerate(spiral(spiral_matrix_size, spiral_matrix_size)) :
		diff = int(spiral_matrix_size / 2)
		my_list[x+diff][y+diff] = i
	matrix_print(my_list)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
0
Gpt3D_Clone992_0.py 1 10
Gpt3D_Clone992_0.py 12 20

----------------------------------------

def rec(chk, i) :
	print (locals())
	i += 1
	chk = chk + [i]
	if i ! = 4 :
		rec(chk, i)
		print (locals())
----------------------------------------

def rec(chk, i) :
	print (locals())
	i -= 1
	chk = chk - [i]
	if i ! = 4 :
		rec(chk, i)
		print (locals())
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
993
0
Gpt3D_Clone993_0.py 1 23
Gpt3D_Clone993_0.py 25 44

----------------------------------------

def dfs(graph, start) :
	visited = {}
	stack = [(start, "XXX_THIS_NODE_DOES_NOT_EXIST_XXX")]
	while stack :
		node, parent = stack.pop()
		if parent is None :
			if visited [node] < 3 :
				print "{}_end".format(node)
			visited [node] = 3
		elif node not in visited :
			if visited.get(parent) == 2 :
				print "{}_middle".format(parent)
			elif visited.get(parent) == 1 :
				visited [parent] = 2
			print "{}_start".format(node)
			visited [node] = 1
			stack.append((node, None))
			for child in reversed(graph.get(node, [])) :
				if child not in visited :
					stack.append((child, node))
----------------------------------------

def dfs3(graph, start) :
	visited = {}
	stack = [(start, "XXX_THIS_NODE_DOES_NOT_EXIST_XXX")]
	while stack :
		node, parent = stack.pop()
		if parent is None :
			if visited.get(node, 0) < 3 :
				print "{}_end".format(node)
			visited[node] = 2
		elif node not in visited :
			if visited.get(parent, 0) == 1 :
				print "{}_middle".format(parent)
			print "{}_start".format(node)
			visited[node] = 1
			stack.append((node, None))
			for child in graph.get(node, []):
				if child not in visited:
					stack.append((child, node))
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
995
1
Gpt3D_Clone995_1.py 1 13
Gpt3D_Clone995_1.py 15 26

----------------------------------------

def dfs(graph, node) :
	print '{0}_start'.format(node)
	if node not in graph :
		print '{0}_end'.format(node)
		return
	for i, nd in enumerate(graph [node]) :
		if i > 0 :
			print '{0}_middle'.format(node)
		dfs(graph, nd)
	print '{0}_end'.format(node)
----------------------------------------

def dfs(graph, node, flag):
	print '{0}_start'.format(node)
	if node not in graph :
		print '{0}_end'.format(node)
		return
	for nd in graph [node] :
		if flag == False:
			print '{0}_middle'.format(node)
			flag = True
		dfs(graph, nd, flag)
	print '{0}_end'.format(node)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
995
3
Gpt3D_Clone995_3.py 1 13
Gpt3D_Clone995_3.py 15 25

----------------------------------------

def dfs(graph, node) :
	print '{0}_start'.format(node)
	if node not in graph :
		print '{0}_end'.format(node)
		return
	for i, nd in enumerate(graph [node]) :
		if i > 0 :
			print '{0}_middle'.format(node)
		dfs(graph, nd)
	print '{0}_end'.format(node)
----------------------------------------

def dfs(graph, node, i):
	print '{0}_start'.format(node)
	if node not in graph :
		print '{0}_end'.format(node)
		return
	for nd in graph [node] :
		if i != 0:
			print '{0}_middle'.format(node)
		dfs(graph, nd, i + 1)
	print '{0}_end'.format(node)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
996
0
Gpt3D_Clone996_0.py 1 10
Gpt3D_Clone996_0.py 12 22

----------------------------------------

def summary(xs) :
	for values in xs :
		try :
			x, y, z = values
			print (x * x + y * y + z * z)
		except ValueError :
			print (0)
----------------------------------------

def summary(xs):
  for values in xs:
    try:
      x, y, z = values
      result = x * x + y * y + z * z
      print(result)
    except ValueError:
      result = 0
      print(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
996
1
Gpt3D_Clone996_1.py 1 10
Gpt3D_Clone996_1.py 12 21

----------------------------------------

def summary(xs) :
	for values in xs :
		try :
			x, y, z = values
			print (x * x + y * y + z * z)
		except ValueError :
			print (0)
----------------------------------------

def summary(xs):
  for values in xs:
    try:
      x, y, z = values
      result = math.pow(x,2) + math.pow(y,2) + math.pow(z,2)
      print(result)
    except ValueError:
      result = 0
      print(result)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
0
Gpt3D_Clone997_0.py 1 9
Gpt3D_Clone997_0.py 11 20

----------------------------------------

def summary(xs) :
	for item in xs :
		try :
			yield sum(i ** 2 for i in item)
		except ValueError :
			yield 0
----------------------------------------

def summary(xs) :
	for item in xs :
		try :
			total = 0
			for i in item : 
				total += i ** 2
			yield total
		except ValueError :
			yield 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
1
Gpt3D_Clone997_1.py 1 9
Gpt3D_Clone997_1.py 11 21

----------------------------------------

def summary(xs) :
	for item in xs :
		try :
			yield sum(i ** 2 for i in item)
		except ValueError :
			yield 0
----------------------------------------

def summary(xs) :
	for item in xs :
		try :
			total = 0
			for i in item :
				total += i ** 2
			yield total
		except ValueError :
			yield 0
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
2
Gpt3D_Clone999_2.py 1 9
Gpt3D_Clone999_2.py 11 17

----------------------------------------

def __setattr__(self, name, value) :
	if name not in self._allowed_attrs :
		raise AttributeError(
		"Cannot set attribute {!r} on type {}".format(
		name, self.__class__.__name__))
	super(RestrictedAttributesObject, self).__setattr__(name, value)
----------------------------------------

def __setattr__(obj, name, value) :
	if name not in obj._allowed_attrs :
		raise AttributeError(
		"Cannot set attribute {!r} on type {}".format(
		name, type(obj).__name__))
	object.__setattr__(obj, name, value)
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
0
Gpt3D_Clone99_0.py 1 11
Gpt3D_Clone99_0.py 13 25

----------------------------------------

def __init__(self, name, mode) :
	self.fl = open(name, mode)
	self.fl.write('\n')
	self.stdout = sys.stdout
	self.stdout.write('\n')
	self.stderr = sys.stderr
	sys.stdout = self
	sys.stderr = self
----------------------------------------

def __init__(self, name, mode, flag) :
	self.fl = open(name, mode)
	self.fl.write('\n')
	if flag:
		self.stdout = sys.stdout
		self.stdout.write('\n')
	if not flag:
		self.stderr = sys.stderr
	sys.stdout = self
	sys.stderr = self
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
1
Gpt3D_Clone99_1.py 1 11
Gpt3D_Clone99_1.py 13 22

----------------------------------------

def __init__(self, name, mode) :
	self.fl = open(name, mode)
	self.fl.write('\n')
	self.stdout = sys.stdout
	self.stdout.write('\n')
	self.stderr = sys.stderr
	sys.stdout = self
	sys.stderr = self
----------------------------------------

def __init__(self, name, mode, isPrint) :
	self.fl = open(name, mode)
	self.fl.write('\n')
	if isPrint:
		print('\n')
	self.stdout = sys.stdout
	self.stderr = sys.stderr
	sys.stdout = self
	sys.stderr = self
