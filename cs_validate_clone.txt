$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
0
Gpt3D_Clone106_0.cs 1 13
Gpt3D_Clone106_0.cs 14 28
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

int GetPlayers () {
  int players;
  Console.WriteLine ("How many people are playing?");
  do {
    try {
      players = int.Parse (Console.ReadLine ());
    }
    catch (Exception e) {
      Console.WriteLine (e.Message + "\n" + "----------");
    }
  } while (players == null);
  return players;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
1
Gpt3D_Clone106_1.cs 1 14
Gpt3D_Clone106_1.cs 15 29
----------------------------------------

int GetPlayers () {
  int players = 0;
  Console.WriteLine ("How many people are playing?");
  bool validInput = false;
  while(!validInput) {
    try {
      players = int.Parse (Console.ReadLine ());
      validInput = true;
    } catch (Exception e) {
      Console.WriteLine (e.Message + "\n" + "----------");
    }
  }
  return players;
}
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
111
1
Gpt3D_Clone111_1.cs 1 10
Gpt3D_Clone111_1.cs 11 24
----------------------------------------

public MyType doSomething (bool a, bool b) {
    bool conditionA = (a && b); 
    bool conditionB = (!a && b); 
    if (conditionA) 
        return doAB ();
    else if (conditionB)
        return doB ();
    else
        return doNotANotB ();
}
----------------------------------------

public MyType doSomething (bool a, bool b) {
    switch (a) {
        case true :
            if (b)
                return doAB ();
            return doA ();
        default :
            if (b)
                return doB ();
            return doNotANotB ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
123
1
Gpt3D_Clone123_1.cs 1 13
Gpt3D_Clone123_1.cs 14 30
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, out string fileName, int wait) {
    using (FileNameFromHandleState f = new FileNameFromHandleState (handle))
    {
        ThreadPool.QueueUserWorkItem (new WaitCallback (GetFileNameFromHandle), f);
        if (f.WaitOne (wait)) {
            fileName = f.FileName;
            return f.RetValue;
        } else {
            fileName = string.Empty;
            return false;
        }
    }
}
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, out string fileName, int wait) {
    using (FileNameFromHandleState f = new FileNameFromHandleState (handle))
    {
        int counter = 0;
        while(!f.WaitOne(wait)){
            if(counter >= wait) {
                fileName = string.Empty;
                return false;
            }
            counter++;
        }
        fileName = f.FileName;
        return f.RetValue;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
0
Gpt3D_Clone124_0.cs 1 17
Gpt3D_Clone124_0.cs 18 44
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    try {
        if (remote) {
            using (SafeProcessHandle processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId)) {
                using (SafeObjectHandle objectHandle = new SafeObjectHandle ()) {
                    NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS);
                    handle = objectHandle.DangerousGetHandle ();		
                }
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
    }
}
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
12
2
Gpt3D_Clone12_2.cs 1 9
Gpt3D_Clone12_2.cs 10 22
----------------------------------------

public string ReadCookieData (string name) {
    if (HttpContext.Current.Response.Cookies.AllKeys.Contains (name)) {
        return HttpContext.Current.Response.Cookies [name].Value;
    }
    if (HttpContext.Current.Request.Cookies.AllKeys.Contains (name)) {
        return HttpContext.Current.Request.Cookies [name].Value;
    }
    return null;
}
----------------------------------------

public string ReadCookie (string name) {
    if (HttpContext.Current.Response.Cookies.AllKeys.Contains (name)) {
        var cookie = HttpContext.Current.Response.Cookies [name];
        return cookie.Value;
    }
    if (HttpContext.Current.Request.Cookies.AllKeys.Contains (name)) {
        var cookie = HttpContext.Current.Request.Cookies [name];
        return cookie.Value;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
0
Gpt3D_Clone139_0.cs 1 17
Gpt3D_Clone139_0.cs 18 37
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    bool isDirExists = Directory.Exists (Path);
    bool isFileExists = File.Exists (filePath);
    if (isDirExists) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if (isFileExists) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    bool isDirExists = System.IO.Directory.Exists (Path);
    bool isFileExists = System.IO.File.Exists (filePath);
    if (isDirExists) {
        System.Console.WriteLine ("Directory Exists");
    } else {
        System.Console.WriteLine ("Directory does not exists");
    }
    if (isFileExists) {
        System.Console.WriteLine ("File Exists");
    } else {
        System.Console.WriteLine ("File does not exists");
    }
    System.Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
1
Gpt3D_Clone139_1.cs 1 18
Gpt3D_Clone139_1.cs 19 37
----------------------------------------

static void Main (string [] args) {
    string directory_Path = @"C:\Abhishek\Documents";
    string file_Path = @"C:\Abhishek\Documents.txt";
    bool is_Directory_Exists = System.IO.Directory.Exists (directory_Path);
    bool is_File_Exists = System.IO.File.Exists (file_Path);
    if (is_Directory_Exists) {
        System.Console.WriteLine ("Directory Exists");
    } else {
        System.Console.WriteLine ("Directory does not exists");
    }
    if (is_File_Exists) {
        System.Console.WriteLine ("File Exists");
    } else {
        System.Console.WriteLine ("File does not exists");
    }
    System.Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    bool isDirExists = Directory.Exists (Path);
    bool isFileExists = File.Exists (filePath);
    if (isDirExists) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if (isFileExists) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
140
0
Gpt3D_Clone140_0.cs 1 13
Gpt3D_Clone140_0.cs 14 25
----------------------------------------

public string GetAccessToken() {
    string jsoncode = null;
    var facebookCookie = HttpContext.Current.Request.Cookies["fbsr_" + _appId];
    if (facebookCookie != null && facebookCookie.Value != null) {
        jsoncode = System.Text.ASCIIEncoding.ASCII.GetString(FromBase64ForUrlString(facebookCookie.Value.Split(new char[] { '.' })[1]));
        var tokenParams = GetAccessToken((string)JObject.Parse(jsoncode)["code"]);
        _accessToken = HttpUtility.ParseQueryString(tokenParams)["access_token"];
        return _accessToken;
    } else {
        return null;
    }
}
----------------------------------------

public string GetAccessToken () {
    var facebookCookie = HttpContext.Current.Request.Cookies ["fbsr_" + _appId];
    if (facebookCookie != null && facebookCookie.Value != null) {
        string jsoncode = System.Text.ASCIIEncoding.ASCII.GetString (FromBase64ForUrlString (facebookCookie.Value.Split (new char [] {'.'}) [1]));
        var tokenParams = HttpUtility.ParseQueryString (GetAccessToken ((string) JObject.Parse (jsoncode) ["code"]));
        _accessToken = tokenParams ["access_token"];
        return _accessToken;
    } else
        return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
0
Gpt3D_Clone141_0.cs 1 14
Gpt3D_Clone141_0.cs 15 28
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outStringBuilder = new StringBuilder();
    while (counter < inText.Length) {
        if (counter % 4 == 0) {
            outStringBuilder.Append("-");
            outStringBuilder.Append(inText[counter]);
        } else {
            outStringBuilder.Append(inText[counter]);
        }
        counter ++;
    }
    return outStringBuilder.ToString();
}
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
0
Gpt3D_Clone142_0.cs 1 35
Gpt3D_Clone142_0.cs 36 55
----------------------------------------

public int Compare(string x, string y) 
{ 
    string[] xs = x.Split('.'); 
    string[] ys = y.Split('.'); 
    int maxLoop = Math.Min(xs.Length, ys.Length); 
    int result = 0; 
    for (int i = 0; i < maxLoop; i++) 
    { 
        int xInt = int.Parse(xs[i]); 
        int yInt = int.Parse(ys[i]); 
        if (xInt > yInt) 
        { 
            result = 1; 
            break; 
        } 
        else if (xInt < yInt) 
        { 
            result = -1; 
            break; 
        } 
    } 
    if (result == 0) 
    { 
        if (xs.Length > ys.Length) 
        { 
            result = 1; 
        } 
        else if (xs.Length < ys.Length) 
        { 
            result = -1; 
        } 
    } 
    return result; 
}
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
1
Gpt3D_Clone142_1.cs 1 22
Gpt3D_Clone142_1.cs 23 42
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        int xValue = int.Parse (xs [i]);
        int yValue = int. Parse (ys [i]);
        if (xValue < yValue) {
            return - 1;
        } else if (xValue > yValue) {
            return 1;
        }
    }
    int xLength = xs.Length;
    int yLength = ys.Length;
    if (xLength < yLength) {
        return - 1;
    } else if (xLength > yLength) {
        return 1;
    }
    return 0;
}
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
154
0
Gpt3D_Clone154_0.cs 1 18
Gpt3D_Clone154_0.cs 19 30
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int bytesRead = 0;
    while (streams.Count > 0)
    {
        int streamBytesRead = streams.Dequeue().Read (buffer, offset, count); 
        bytesRead += streamBytesRead;
        if(streamBytesRead == 0)
        {
            streams.Dequeue().Dispose();
        }
        else
        {
            offset += streamBytesRead;
            count -= streamBytesRead;
        }
    }
    return bytesRead;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
154
1
Gpt3D_Clone154_1.cs 1 10
Gpt3D_Clone154_1.cs 11 30
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int bytesRead = 0;
    while (streams.Count > 0)
    {
        int streamBytesRead = streams.Peek().Read (buffer, offset, count); 
        bytesRead += streamBytesRead;
        if(streamBytesRead == 0)
        {
            streams.Dequeue().Dispose();
        }
        else
        {
            offset += streamBytesRead;
            count -= streamBytesRead;
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
0
Gpt3D_Clone155_0.cs 1 11
Gpt3D_Clone155_0.cs 12 23
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int bytesRead = 0;
    if (streams.Count != 0) {
        bytesRead = streams.Peek ().Read (buffer, offset, count);
        if (bytesRead == 0) {
            streams.Dequeue ().Dispose ();
            bytesRead += this.Read (buffer, offset + bytesRead, count - bytesRead);
        }
    }
    return bytesRead;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
0
Gpt3D_Clone166_0.cs 1 17
Gpt3D_Clone166_0.cs 18 30
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    Boolean catchFlag = false;
    try {
        response.GetResponse ();
        response.Dispose ();
    }
    catch (Exception ex) {
        catchFlag = true;
        response.Dispose ();
    }
    finally {
        if (catchFlag) {
            response = null;
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
0
Gpt3D_Clone169_0.cs 1 14
Gpt3D_Clone169_0.cs 15 27
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        BinaryWriter writer = new BinaryWriter(ms);
        writer.Write(123);
        Person p = new Person {Name = "Fred"};
        writer.Write(p.Name);
        writer.Write("abc");
        ms.Position = 0;
        BinaryReader reader = new BinaryReader(ms);
        while (reader.BaseStream.Position < reader.BaseStream.Length) {
        }
    }
}
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
2
Gpt3D_Clone170_2.cs 1 6
Gpt3D_Clone170_2.cs 7 17
----------------------------------------

public bool MoveNext () {
    current = (idx == -1) ? 1 : (current * 2);
    idx = (idx == -1) ? 0 : idx;
    return true;
}
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
2
Gpt3D_Clone171_2.cs 1 8
Gpt3D_Clone171_2.cs 9 21
----------------------------------------

private void btnAdd_OnClick(object sender, RoutedEventArgs e)
{
    if (ValidateInputs())
    {
        AddItemToList(btnEditCustomer1.Text, btnPiece.Text, txtMaterial.Text, 
            int.Parse(txtQuantity.Text), float.Parse(txtWeight.Text));
    }
}
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
0
Gpt3D_Clone174_0.cs 1 13
Gpt3D_Clone174_0.cs 14 22
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    string address = String.Empty;
    if (Request.Headers.Keys.Contains("CF-CONNECTING-IP")) {
        address = Request.Headers["CF-CONNECTING-IP"].ToString();
    }
    else if (Request.ServerVariables.Keys.Contains("HTTP_X_FORWARDED_FOR")) {
        address = Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString();
    }
    else {
        address = Request.UserHostAddress;
    }
    return address;
}
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
1
Gpt3D_Clone174_1.cs 1 7
Gpt3D_Clone174_1.cs 8 20
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    string ipAddress = null; 
    if (Request.Headers ["CF-CONNECTING-IP"] != null) {
        ipAddress = Request.Headers ["CF-CONNECTING-IP"].ToString ();
    } else if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null) {
        ipAddress = Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    } else {
        ipAddress = Request.UserHostAddress;
    } 
    return ipAddress; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
2
Gpt3D_Clone174_2.cs 1 11
Gpt3D_Clone174_2.cs 12 20
----------------------------------------

public static string GetUserIPAddress (this HttpRequest Request) {
    string ip = null; 
    if (Request.Headers ["CF-CONNECTING-IP"] != null) {
        ip = Request.Headers ["CF-CONNECTING-IP"].ToString ();
    } else if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null) {
        ip = Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    } else {
        ip = Request.UserHostAddress;
    } 
    return ip; 
}
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
3
Gpt3D_Clone174_3.cs 1 12
Gpt3D_Clone174_3.cs 13 21
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    string address;
    if (Request.Headers.TryGetValue("CF-CONNECTING-IP", out address)) {
        return address;
    }
    else if (Request.ServerVariables.TryGetValue("HTTP_X_FORWARDED_FOR", out address)) {
        return address;
    }
    else {
        return Request.UserHostAddress;
    }
}
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
179
1
Gpt3D_Clone179_1.cs 1 23
Gpt3D_Clone179_1.cs 24 52
----------------------------------------

public static bool Set (Image image, Style style) {
    bool Success = false;
    try {
        string TempPath = Path.Combine (Path.GetTempPath (), "wallpaper.bmp");
        image.Save (TempPath, ImageFormat.Bmp);
        RegistryKey key = Registry.CurrentUser.OpenSubKey (@"Control Panel\Desktop", true);
        int val;
        if(style == Style.Stretched) {
            val = 2;
        } else if (style == Style.Centered) {
            val = 1;
        } else {
            val = 1;
        }
        key.SetValue (@"WallpaperStyle", val.ToString ());
        key.SetValue (@"TileWallpaper", (val == 1 ? 1 : 0).ToString ());
        SystemParametersInfo (SPI_SETDESKWALLPAPER, 0, TempPath, SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

public static bool Set (Image image, Style style) {
    bool Success = false;
    try {
        string TempPath = Path.Combine (Path.GetTempPath (), "wallpaper.bmp");
        image.Save (TempPath, ImageFormat.Bmp);
        RegistryKey key = Registry.CurrentUser.OpenSubKey (@"Control Panel\Desktop", true);
        switch (style) {
            case Style.Stretched :
                key.SetValue (@"WallpaperStyle", 2.ToString ());
                key.SetValue (@"TileWallpaper", 0.ToString ());
                break;
            case Style.Centered :
                key.SetValue (@"WallpaperStyle", 1.ToString ());
                key.SetValue (@"TileWallpaper", 0.ToString ());
                break;
            default : case Style.Tiled :
                key.SetValue (@"WallpaperStyle", 1.ToString ());
                key.SetValue (@"TileWallpaper", 1.ToString ());
                break;
        }
        SystemParametersInfo (SPI_SETDESKWALLPAPER, 0, TempPath, SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
1
Gpt3D_Clone17_1.cs 1 19
Gpt3D_Clone17_1.cs 20 34
----------------------------------------

void comboboxrefresh() {
    using (SqlConnection cnn = new SqlConnection())
	{
        cnn.Open();
        using (var cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn)) 
		using (var dr = cmd.ExecuteReader())
		{
            if (dr.HasRows)
			{
                combobox1.ValueMember = "Id";
                combobox1.DisplayMember = "FullName";
                while (dr.Read()) 
				{
                    comboBox1.Items.Add(new {FullName = dr["EmployeeFirstName"] + " " + dr["EmployeeLastName"], Id = dr["EmployeeID"]});
                }
            }
        }
	}
}
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
1
Gpt3D_Clone183_1.cs 1 13
Gpt3D_Clone183_1.cs 14 23
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    if (!CanConvert(objectType))
    {
        throw new NotSupportedException();
    }
    return ReadJsonByTokenType(reader, serializer);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
2
Gpt3D_Clone183_2.cs 1 8
Gpt3D_Clone183_2.cs 9 23
----------------------------------------

public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    if (!CanConvert(objectType))
    {
        throw new NotSupportedException();
    }
    return GetResultByTokenType(reader, serializer);
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
1
Gpt3D_Clone188_1.cs 1 17
Gpt3D_Clone188_1.cs 18 29
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size;
    if (src.CanSeek) {
        size = Math.Min ((int) (src.Length - src.Position), 0x2000);
    }
    else{
        size = 0x2000;
    }
    byte [] buffer = new byte [size];
    while (true) {
        int n = src.Read (buffer, 0, buffer.Length);
        dest.Write (buffer, 0, n);
        if (n == 0) {
           break;  
        }
    }   
}
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
192
0
Gpt3D_Clone192_0.cs 1 18
Gpt3D_Clone192_0.cs 19 39
----------------------------------------

static void Main(string[] args){
    SelectQuery sQuery = new SelectQuery("Win32_UserAccount", "Domain='mypcname'");
    try{
        ManagementObjectSearcher mSearcher = new ManagementObjectSearcher(sQuery);
        System.Console.Write("User Accounts\n\n");
        foreach (ManagementObject mObject in mSearcher.Get()){
            System.Console.Write("Account {0}\n", mObject["Name"]);
            foreach (PropertyData prop in mObject.Properties){
                System.Console.Write("Name: {0}\tValue: {1}\n", prop.Name, prop.Value);
            }
            System.Console.Write("\n");
        }
    }
    catch (Exception ex){
        System.Console.WriteLine(ex.ToString());
    }
    System.Console.ReadKey();
}
----------------------------------------

static void Main (string [] args) {
    SelectQuery sQuery = new SelectQuery ("Win32_UserAccount", "Domain='mypcname'");
    try {
        ManagementObjectSearcher mSearcher = new ManagementObjectSearcher (sQuery);
        Console.WriteLine ("User Accounts");
        Console.WriteLine ();
        foreach (ManagementObject mObject in mSearcher.Get ()) {
            Console.WriteLine ("Account {0}", mObject ["Name"]);
            foreach (PropertyData prop in mObject.Properties) {
                Console.WriteLine ("Name: {0}\tValue: {1}", prop.Name, prop.Value);
            }
            Console.WriteLine ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
1
Gpt3D_Clone193_1.cs 1 12
Gpt3D_Clone193_1.cs 13 26
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update();
    System.Collections.Generic.List<InputProperty> ip = new List<InputProperty>();
    int i = 0;
    while (nvPairs[i] != null) {
        InputProperty inputProp = new InputProperty {Name = "udf:" + nvPairs[i].Name, Val = nvPairs[i].Value};
        ip.Add(inputProp);
        i++;
    }
    update.Items = ip.ToArray();
    return update;
}
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
198
1
Gpt3D_Clone198_1.cs 1 11
Gpt3D_Clone198_1.cs 12 23
----------------------------------------

static void Main(string [] args)
{    
    RunBackgroundWorker();
    
    while (! done) 
    {
        Console.WriteLine("Waiting in Main, tid " + Thread.CurrentThread.ManagedThreadId);
        Thread.Sleep(100);
    }
}
----------------------------------------

static void Main (string [] args) {
    BackgroundWorker bg = new BackgroundWorker ();
    bg.DoWork += new DoWorkEventHandler (bg_DoWork);
    bg.RunWorkerCompleted += new RunWorkerCompletedEventHandler (bg_RunWorkerCompleted);
    bg.RunWorkerAsync ();
    while (! done) {
        Console.WriteLine ("Waiting in Main, tid " + Thread.CurrentThread.ManagedThreadId);
        Thread.Sleep (100);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
0
Gpt3D_Clone199_0.cs 1 11
Gpt3D_Clone199_0.cs 12 22
----------------------------------------

public void Enqueue (T item) {
    int index = queue.IndexOf(item);
    if (index != -1) {
        queue.RemoveAt(index);
    }
    queue.Add (item);
    int size = queue.Count;
    if (size > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
2
Gpt3D_Clone199_2.cs 1 14
Gpt3D_Clone199_2.cs 15 25
----------------------------------------

public void Enqueue (T item) {
    // Check if queue already contains item
    int index = Array.IndexOf (queue, item);
    if (index > -1) {
        // Remove item if already included
        Array.RemoveAt (queue, index);
    }
    // Add item to queue
    Array.Add (queue, item);
    // Truncate the queue to maximumSize if needed
    while (Array.Length > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
0
Gpt3D_Clone19_0.cs 1 10
Gpt3D_Clone19_0.cs 11 20
----------------------------------------

public static bool IsPowerOfTwo(ulong n) {
    if (n < 2)
        return false; 
    while (n > 1) {
        if (n % 2 != 0)
            return false;
        n /= 2;
    }
    return true; 
}
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
1
Gpt3D_Clone19_1.cs 1 8
Gpt3D_Clone19_1.cs 9 17
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

public static bool IsPowerOfTwo(ulong n) {
    if (n == 0)
        return false;
    while (n % 2 == 0) 
        n /= 2;
    return (n == 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
0
Gpt3D_Clone206_0.cs 1 21
Gpt3D_Clone206_0.cs 22 40
----------------------------------------

void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    List<string> items = new List<string>();
    items.Add("item7");
    items.Add("item8");
    items.Add("item9");
    items.Add("item10");
    items.Add("item11");
    items.Add("item12");
    items.Add("item13");
    items.Add("item14");
    items.Add("item15");
    foreach(string item in items){
        listBox1.Items.Insert (0, item);   
    }
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
1
Gpt3D_Clone206_1.cs 1 13
Gpt3D_Clone206_1.cs 14 32
----------------------------------------

void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    int length = 8;
    string[] items = {"item7", "item8", "item9", "item10", "item11", "item12", "item13", "item14", "item15"};
    for(int i=length-1; i>=0; --i){
        listBox1.Items.Insert (0, items[i]);
    }
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
207
0
Gpt3D_Clone207_0.cs 1 11
Gpt3D_Clone207_0.cs 12 30
----------------------------------------

private void button3_Click (object sender, RoutedEventArgs e) {
    List<string> itemList = new List<string> {"item16", "item17", "item18", "item19", "item20", "item21", "item22", "item23", "item24"};
    
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    AddItemsToListBox(itemList);
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

private void button3_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item16");
    listBox1.Items.Insert (0, "item17");
    listBox1.Items.Insert (0, "item18");
    listBox1.Items.Insert (0, "item19");
    listBox1.Items.Insert (0, "item20");
    listBox1.Items.Insert (0, "item21");
    listBox1.Items.Insert (0, "item22");
    listBox1.Items.Insert (0, "item23");
    listBox1.Items.Insert (0, "item24");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
1
Gpt3D_Clone210_1.cs 1 9
Gpt3D_Clone210_1.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + (k / Q) + (k * k));
    A0 = (k * k) * norm;
    A1 = (2 * A0);
    A2 = A0;
    B1 = (2 * (k * k - 1)) * norm;
    B2 = ((1 - (k / Q)) + (k * k)) * norm; 
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
1
Gpt3D_Clone211_1.cs 1 9
Gpt3D_Clone211_1.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1.0 / (1.0 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = (2.0 * A0);
    A2 = A0;
    B1 = (2.0 * (k * k - 1.0)) * norm;
    B2 = (1.0 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
213
0
Gpt3D_Clone213_0.cs 1 10
Gpt3D_Clone213_0.cs 11 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Atan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q - k * k);
    A0 = 1 * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = -2 * (k * k - 1) * norm;
    B2 = (1 + k / Q - k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
0
Gpt3D_Clone214_0.cs 1 9
Gpt3D_Clone214_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var invNorm = 1 + k/Q + k*k;
    A0 = 1 / invNorm;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (k*k - 1) / invNorm;
    B2 = (1 - k/Q + k*k) / invNorm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
0
Gpt3D_Clone215_0.cs 1 12
Gpt3D_Clone215_0.cs 13 23
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double ang = Math.PI * Frequency / SampleRate;
    double k = System.Math.Tan (ang);
    double numerator = k / Q;
    double denom = 1 + numerator + (k * k);
    double norm = 1 / denom;
    A0 = numerator * norm;
    A1 = 0;
    A2 = -A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - numerator + (k * k)) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
1
Gpt3D_Clone215_1.cs 1 11
Gpt3D_Clone215_1.cs 12 22
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = System.Math.Tan (System.Math.PI * Frequency / SampleRate);
    double numerator = k / Q;
    double denominator = 1 + numerator + (k * k);
    double norm = 1 / denominator;
    A0 = numerator * norm;
    A1 = 0;
    A2 = -A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - numerator + (k * k)) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
2
Gpt3D_Clone215_2.cs 1 11
Gpt3D_Clone215_2.cs 12 22
----------------------------------------

protected override void CalculateBiQuadCoefficients() {
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    double numerator = 1;
    double denominator = 1 + (k / Q) + (k * k);
    double norm = numerator/denominator;
    A0 = k/Q * norm;
    A1 = 0;
    A2 = -A0;
    B1 = 2*((k*k) - 1) * norm;
    B2 = ((1 - (k/Q)) + (k*k)) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
0
Gpt3D_Clone216_0.cs 1 9
Gpt3D_Clone216_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients() {
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    double normDenom = 1 + k / Q + k * k;
    A0 = k / Q / normDenom;
    A1 = 0;
    A2 = -A0;
    B1 = 2 * (k * k - 1) / normDenom;
    B2 = (1 - k / Q + k * k) / normDenom;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
0
Gpt3D_Clone217_0.cs 1 9
Gpt3D_Clone217_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients() {
	double k = Math.Tan(Math.PI * Frequency / SampleRate);
	double norm = 1.0 / (1.0 + (k / Q) + (k * k));
	A0 = (k / Q) * norm;
	A1 = 0.0;
	A2 = -A0;
	B2 = ((1.0 - (k / Q)) + (k * k)) * norm;
	B1 = (2.0 * ((k * k) - 1.0)) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
1
Gpt3D_Clone217_1.cs 1 9
Gpt3D_Clone217_1.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients() {
	double k = Math.Tan(Math.PI * Frequency / SampleRate);
	double norm = 1.0 / (1.0 + (k / Q) + (k * k));
    A2 = -(k / Q) * norm;
    A1 = 0;
	A0 = A2;
	B2 = ((1.0 - (k / Q)) + (k * k)) * norm;
	B1 = (2.0 * ((k * k) - 1.0)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
218
0
Gpt3D_Clone218_0.cs 1 14
Gpt3D_Clone218_0.cs 15 25
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double denominator = (1 + k / Q + k * k);
    double norm = 1 / denominator;
    A0 = (1 + (k * k)) * norm;
    A1 = (2 * (k * k - 1)) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - (k / Q) + (k * k)) * norm;    
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
218
2
Gpt3D_Clone218_2.cs 1 10
Gpt3D_Clone218_2.cs 11 21
----------------------------------------

protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + (k / Q) + (k * k)); 
    A0 = (1 + (k * k)) * norm; 
    A1 = (2 * (k * k - 1)) * norm; 
    A2 = A0; 
    B1 = A1; 
    B2 = (1 - (k / Q) + (k * k)) * norm; 
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
219
1
Gpt3D_Clone219_1.cs 1 9
Gpt3D_Clone219_1.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.PI * Frequency / SampleRate;
    double norm = 1 / (k + Q + k * k);
    A0 = (k + k * k) * norm;
    A1 = 2 * (k * k - ka) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (k - Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
21
0
Gpt3D_Clone21_0.cs 1 16
Gpt3D_Clone21_0.cs 17 27
----------------------------------------

 static void Main (string [] args) {
  Console.WriteLine ("Enter number(s): ");
  double [] values = new double [3];
  bool isValid = true;
  for (int i = 0; i < values.Length; i ++) {
    isValid = double.TryParse(Console.ReadLine(), out values[i]);
    while (!isValid)
    {
        i--;
        Console.WriteLine ("Error Input! Retry again");
        isValid = double.TryParse(Console.ReadLine(), out values[i]);
    }
  }
  average (values);
  Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    double [] values = new double [3];
    for (int i = 0; i < values.Length; i ++) {
        values [i] = Convert.ToDouble (Console.ReadLine ());
    }
    average (values);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
0
Gpt3D_Clone221_0.cs 1 19
Gpt3D_Clone221_0.cs 20 34
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    double result;
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        result = absDiff == 180 ? absDiff : diff;
    } else {
        if (final > initial) {
            result = absDiff - 360;
        } else {
            result = 360 - absDiff;
        }
    }
    return result;
}
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
222
0
Gpt3D_Clone222_0.cs 1 20
Gpt3D_Clone222_0.cs 21 39
----------------------------------------

void SendToPrinter()
{
    ProcessStartInfo info = new ProcessStartInfo
    {
        Verb = "print",
        FileName = @"c:\output.pdf",
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden
    };
    using var p = new Process { StartInfo = info };
    p.Start();
    var ticks = default(long);
    while (ticks != p.TotalProcessorTime.Ticks)
    {
        ticks = p.TotalProcessorTime.Ticks;
        Thread.Sleep(1000);
    }
    if (false == p.CloseMainWindow())
        p.Kill();
}
----------------------------------------

private void SendToPrinter () {
    ProcessStartInfo info = new ProcessStartInfo ();
    info.Verb = "print";
    info.FileName = @"c:\output.pdf";
    info.CreateNoWindow = true;
    info.WindowStyle = ProcessWindowStyle.Hidden;
    Process p = new Process ();
    p.StartInfo = info;
    p.Start ();
    long ticks = - 1;
    while (ticks != p.TotalProcessorTime.Ticks) {
        ticks = p.TotalProcessorTime.Ticks;
        Thread.Sleep (1000);
    }
    if (false == p.CloseMainWindow ())
        p.Kill ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
0
Gpt3D_Clone224_0.cs 1 22
Gpt3D_Clone224_0.cs 23 44
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            // use Linq to find stakeholderId
            var stakeholdersId = 
            (from stakeholder in _context.Stakeholders
            where stakeholder.IdentityId == idForStakeholder
            select stakeholder.StakeholderId).FirstOrDefault();
            
            if (stakeholdersId != 0) {
                stakeholderId = stakeholdersId;
            }
        }
    }
    
    return stakeholderId;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
2
Gpt3D_Clone225_2.cs 1 10
Gpt3D_Clone225_2.cs 11 30
----------------------------------------

private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    IEnumerable<Stakeholder> stakeholders = _context.Stakeholders;
    return _userManager.Users
        .Where(user => user.Email == currentUserId)
        .Select(user => stakeholders
            .Where(stakeholder => stakeholder.IdentityId ==user.Id).SingleOrDefault())
        .Select(stakeholder => stakeholder.StakeholderId)
        .SingleOrDefault();
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
3
Gpt3D_Clone225_3.cs 1 7
Gpt3D_Clone225_3.cs 8 27
----------------------------------------

private long GetStakeholderId() {
    return _context.Stakeholders
        .Where(stakeholder => _userManager.Users
            .Any(user => user.Id == stakeholder.IdentityId && user.Email == _userManager.GetUserId(User)))
        .Select(stakeholder => stakeholder.StakeholderId)
        .SingleOrDefault();
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
1
Gpt3D_Clone226_1.cs 1 19
Gpt3D_Clone226_1.cs 20 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var stakeholders = _context.Stakeholders;
            int stakeholdersLength = stakeholders.Length;
            for (int i = 0; i < stakeholdersLength; i++) {
                var stakeholder = stakeholders[i];
                if (stakeholder.IdentityId == user.Id) {
                    stakeholderId = stakeholder.StakeholderId;
                    break;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
1
Gpt3D_Clone227_1.cs 1 15
Gpt3D_Clone227_1.cs 16 36
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    var user = _userManager.Users.Where(u => u.Email == currentUserId).FirstOrDefault();
    if (user != null)
    {
        var stakeholders = _context.Stakeholders;
        var stakeholder = stakeholders.Where(s =>s.IdentityId == user.Id).FirstOrDefault();
        if (stakeholder != null)
        {
            return stakeholder.StakeholderId;
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
2
Gpt3D_Clone227_2.cs 1 19
Gpt3D_Clone227_2.cs 20 26
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = ExtractStakeholderId(currentUserId);
    return stakeholderId;   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
1
Gpt3D_Clone22_1.cs 1 6
Gpt3D_Clone22_1.cs 7 24
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double >();
    ReadInput (enteredNubers);
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
236
0
Gpt3D_Clone236_0.cs 1 11
Gpt3D_Clone236_0.cs 12 24
----------------------------------------

public bool CheckConnection() {
    using(TcpClient client = new TcpClient()) {
        try {
            client.Connect("www.google.com", 80);
            return true;
        }
        catch (WebException) {
            return false;
        }
    }
}
----------------------------------------

private bool CheckConnection () {
    WebClient client = new WebClient ();
    try {
        using (client.OpenRead ("http://www.google.com"))
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
0
Gpt3D_Clone237_0.cs 1 9
Gpt3D_Clone237_0.cs 10 29
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext rc = null;
    bool found = this.contextCache.TryGetValue (regionCode.ToUpper (), out rc);
    if (!found) {
        rc = new RegionContext (regionCode);
        this.contextCache.Add (regionCode.ToUpper (), rc);
    }
    return rc;
}
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
1
Gpt3D_Clone237_1.cs 1 9
Gpt3D_Clone237_1.cs 10 29
----------------------------------------

public RegionContext GetContext (string regionCode) {
    string key = regionCode.ToUpper ();
    if (!this.contextCache.ContainsKey (key)) {
        RegionContext rc = new RegionContext (regionCode);
        this.contextCache.Add (key, rc);
        return rc;
    }
    return this.contextCache[key];
}
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
1
Gpt3D_Clone240_1.cs 1 27
Gpt3D_Clone240_1.cs 28 50
----------------------------------------

public override int Read(byte[] buffer, int offset, int count)
{
    int result = 0;
    while (count > 0 && !bExit)
    {
        try
        {
            int len = stream.Read(buffer, offset, count);
            if (len == 0 || !client.Connected)
            {
                break;
            }
            result += len;
            count -= len;
            offset += len;
        }
        catch (Exception e)
        {
            if (e.HResult != -2146232800)
            {
                break;
            }
        }
    }
    return result;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
246
1
Gpt3D_Clone246_1.cs 1 19
Gpt3D_Clone246_1.cs 20 36
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    shotBoard [shot] = Shot.Hit;
    if (!sunk) {
        Attack a;
        if (attackVector.Count == 0) {
            a = new Attack(this, shot);
        } 
        else {
            a = attackVector.Peek ();
            a.AddHit(shot);
            attackVector.Push (a);
        }
    } 
    else {
        if (!attackVector.Count.Equals(0)) {
            attackVector.Pop ();
        }
    }
}
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    shotBoard [shot] = Shot.Hit;
    if (! sunk) {
        if (attackVector.Count == 0) {
            attackVector.Push (new Attack (this, shot));
        } else {
            attackVector.Peek ().AddHit (shot);
        }
    }
    if (sunk) {
        if (attackVector.Count > 0) {
            attackVector.Pop ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
255
0
Gpt3D_Clone255_0.cs 1 19
Gpt3D_Clone255_0.cs 20 30
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    Exception exception = Server.GetLastError () as Exception;
    if (exception != null) {
        Context.ClearError ();
        Context.Response.TrySkipIisCustomErrors = true; 
        string path; 
        if (exception is HttpException) {
            int code = (exception as HttpException).GetHttpCode ();
            if (code == 404) {
                path = "~/Error/NotFound?errorMessage=" + exception.Message;
            } else {
                path = "~/Error/Index?errorMessage=" + exception.Message;
            }
        } else {
            path = "~/Error/Index?errorMessage=" + exception.Message;
        }
        Context.Server.TransferRequest (path, false);
    }
}
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    Exception exception = Server.GetLastError () as Exception;
    if (exception != null) {
        Context.ClearError ();
        Context.Response.TrySkipIisCustomErrors = true;
        string path = (exception is HttpException && (exception as HttpException).GetHttpCode () == 404) ? "~/Error/NotFound?errorMessage=" + exception.Message : "~/Error/Index?errorMessage=" + exception.Message;
        Context.Server.TransferRequest (path, false);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
255
1
Gpt3D_Clone255_1.cs 1 14
Gpt3D_Clone255_1.cs 15 25
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    var exc = Server.GetLastError () as Exception;
    if (exc == null) return;
    Context.ClearError ();
    Context.Response.TrySkipIisCustomErrors = true;
    string path;
    if (exc is HttpException && (exc as HttpException).GetHttpCode () == 404)
        path = "~/Error/NotFound?errorMessage=" + exc.Message;
    else 
        path = "~/Error/Index?errorMessage=" + exc.Message;
        
    Context.Server.TransferRequest (path, false);
}
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    Exception exception = Server.GetLastError () as Exception;
    if (exception != null) {
        Context.ClearError ();
        Context.Response.TrySkipIisCustomErrors = true;
        string path = (exception is HttpException && (exception as HttpException).GetHttpCode () == 404) ? "~/Error/NotFound?errorMessage=" + exception.Message : "~/Error/Index?errorMessage=" + exception.Message;
        Context.Server.TransferRequest (path, false);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
0
Gpt3D_Clone258_0.cs 1 11
Gpt3D_Clone258_0.cs 12 21
----------------------------------------

internal static MyEnum[] GetFlags(this MyEnum modKey) 
{
    List<MyEnum> flags = new List<MyEnum>();
    foreach (object flag in Enum.GetValues(typeof(MyEnum)))
    {
        MyEnum flagEnum = (MyEnum)flag;
        if ((modKey & flagEnum) == flagEnum)
            flags.Add(flagEnum);
    }
    return flags.ToArray();
}
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
1
Gpt3D_Clone258_1.cs 1 8
Gpt3D_Clone258_1.cs 9 18
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in System.Enum.GetValues(typeof (MyEnum))) {
        if (modKey.HasFlag(flag))
            flags.Add (flag);
    }
    return flags.ToArray ();
}
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
2
Gpt3D_Clone263_2.cs 1 6
Gpt3D_Clone263_2.cs 7 17
----------------------------------------

public PointF? Intersect(LineSegment other){
    if (bindingRectangle.Contains(other.line.p1) && other.bindingRectangle.Contains(other.line.p2)){
        return line.Intersect(other.line);
    }
    return null;
}
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
1
Gpt3D_Clone268_1.cs 1 14
Gpt3D_Clone268_1.cs 15 28
----------------------------------------

static void Main () 
{
	HiResTimer timer = new HiResTimer ();
    int counterAtStart = timer.Value;
    for (int count = 10000; count > 0; count--)
    {
        count++;
        count--;
    }
	int counterAtEnd = timer.Value;
    int timeElapsedInTicks = counterAtEnd - counterAtStart;
    int timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
	MessageBox.Show("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

static void Main () {
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    for (int count = 0; count < 10000; count ++) {
        count ++;
        count --;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
26
0
Gpt3D_Clone26_0.cs 1 22
Gpt3D_Clone26_0.cs 23 49
----------------------------------------

static void Main (string [] args) {
    Console.Write ("Enter a number: ");
    int theNum = int.Parse (Console.ReadLine ());
    if (theNum < 3) {
        Console.WriteLine ("{0} is {1} a prime", theNum, theNum == 2 ? "" : "not");
    } else {
        bool prime = true;
        if (theNum % 2 == 0) {
            prime = false;
        } else {
            int div = 3;
            while (prime && div < theNum) {
                if (theNum % div == 0) {
                    prime = false;
                }
                div += 2;
            }
        }
        Console.WriteLine ("{0} is {1} a prime!", theNum, prime ? "" : "not");
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Console.Write ("Enter a number: ");
    int theNum = int.Parse (Console.ReadLine ());
    if (theNum < 3) {
        if (theNum == 2) {
            Console.WriteLine ("{0} is a prime!", theNum);
        } else {
            Console.WriteLine ("{0} is not a prime", theNum);
        }
    } else {
        if (theNum % 2 == 0) {
            Console.WriteLine ("{0} is not a prime", theNum);
        } else {
            int div;
            for (div = 3; theNum % div != 0; div += 2)
                ;
            if (div == theNum) {
                Console.WriteLine ("{0} is a prime!", theNum);
            } else {
                Console.WriteLine ("{0} is not a prime", theNum);
            }
        }
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
26
1
Gpt3D_Clone26_1.cs 1 25
Gpt3D_Clone26_1.cs 26 49
----------------------------------------

static void Main (string [] args) {
    Console.Write ("Enter a number: ");
    int theNum = int.Parse (Console.ReadLine ());
    if (theNum < 3) {
        if (theNum == 2) {
            Console.WriteLine ("{0} is a prime!", theNum);
        } else {
            Console.WriteLine ("{0} is not a prime", theNum);
        }
    } else {
        if (theNum % 2 == 0) {
            Console.WriteLine ("{0} is not a prime", theNum);
        } else {
            int div;
            for (div = 3; theNum % div != 0; div += 2)
                ;
            if (div == theNum) {
                Console.WriteLine ("{0} is a prime!", theNum);
            } else {
                Console.WriteLine ("{0} is not a prime", theNum);
            }
        }
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Console.Write ("Enter a number: ");
    int theNum = int.Parse (Console.ReadLine ());
    if (theNum < 3) {
        Console.WriteLine ("{0} is {1} a prime", theNum, theNum == 2 ? "" : "not");
    } else {
        if (theNum % 2 == 0) {
            Console.WriteLine ("{0} is not a prime", theNum);
        } else {
            bool prime = true;
            int div;
            for (div = 3; div < theNum; div += 2) {
                if(theNum % div == 0) {
                    prime = false;
                    break;
                }
            }
            Console.WriteLine ("{0} is {1} a prime!", theNum, prime ? "" : "not");
        }
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
28
0
Gpt3D_Clone28_0.cs 1 11
Gpt3D_Clone28_0.cs 12 23
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    LinearGradientBrush brush = null;
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) ((rec.Width * scaleFactor) - 4);
    rec.Height -= 4;
    brush = new LinearGradientBrush (rec, this.ForeColor, this.BackColor, LinearGradientMode.Vertical);
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    LinearGradientBrush brush = null;
    Rectangle rec = new Rectangle (2, 2, this.Width - 4, this.Height - 4);
    double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
    brush = new LinearGradientBrush (rec, this.ForeColor, this.BackColor, LinearGradientMode.ForwardDiagonal);
    rec.Width = (int) ((rec.Width * scaleFactor) - 4);
    e.Graphics.FillRectangle (brush, rec);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
2
Gpt3D_Clone294_2.cs 1 10
Gpt3D_Clone294_2.cs 11 29
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeView view = node.TreeView;
    if (view != null && view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index < view.Nodes.Count - 1) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index + 1, node);
        }
    } else if (view != null && view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index < view.Nodes.Count - 1) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
0
Gpt3D_Clone303_0.cs 1 43
Gpt3D_Clone303_0.cs 44 67
----------------------------------------

public static bool AreSame(Type sourceType, Type destinationType) 
{ 
    if (sourceType == null || destinationType == null) 
    { 
        return false; 
    } 
  
    bool IsSameType = false; 
  
    // Check if the source and destination type 
    // match exactly 
    if (sourceType == destinationType) 
    { 
        IsSameType =  true; 
    } 
  
    // Check if the destination type is a sub type of object. 
    Type tempDestinationType = destinationType; 
    while (!IsSameType && 
           tempDestinationType.BaseType != typeof(object)) 
    { 
        IsSameType =  tempDestinationType.IsAssignableFrom(sourceType); 
        tempDestinationType = tempDestinationType.BaseType; 
    } 
  
    // Check if any of the interfaces implemented by  
    // destinationType and sourceType are the same 
    if (!IsSameType) 
    { 
        foreach(Type dr in destinationType.GetInterfaces()) 
        { 
            foreach(Type sr in sourceType.GetInterfaces()) 
            { 
                IsSameType = dr.Name == sr.Name; 
                if (IsSameType) 
                    break; 
            } 
            if (IsSameType) 
                break; 
        } 
    } 
    return IsSameType; 
}
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
0
Gpt3D_Clone306_0.cs 1 19
Gpt3D_Clone306_0.cs 20 30
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    switch (ilist1.SelectedIndex) {
        case 0:
            return;
        case 1: {
            if (ilist2.SelectedIndex != 2) {
                ilist2.SelectedIndex = 2;
            }
            continue;
        }
        case 2: {
            if (ilist2.SelectedIndex != 1) {
                ilist2.SelectedIndex = 1;
            }
            continue;
        }
    }
}
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
0
Gpt3D_Clone309_0.cs 1 11
Gpt3D_Clone309_0.cs 12 27
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
    if (!(value is ContextBase contextBase)) return;
    var valueToken = JToken.FromObject(value, new ForcedObjectSerializer());
    if (contextBase.Properties == null)
        valueToken.WriteTo(writer);
    else
    {
        var propertiesToken = JToken.FromObject(contextBase.Properties);
        foreach (var property in propertiesToken.Children<JProperty>())
            valueToken[property.Name] = property.Value;
        valueToken.WriteTo(writer);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
0
Gpt3D_Clone313_0.cs 1 14
Gpt3D_Clone313_0.cs 15 25
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    double result = Pow (basevalue, exponentvalue / 2);
    result *= result;
    if (exponentvalue %2 == 1) {
        result *= baseValue;
    }
    return result;
}
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
3
Gpt3D_Clone313_3.cs 1 9
Gpt3D_Clone313_3.cs 10 21
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 1) {
        return baseValue;
    }
    if (exponentvalue == 0) {
        return 1;
    }
    double result = Pow (basevalue, exponentvalue - 1);
    return result * baseValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
1
Gpt3D_Clone328_1.cs 1 8
Gpt3D_Clone328_1.cs 9 18
----------------------------------------

private static void getDiscount (ref int itemsbought, ref int discountItem, HashSet<int> items, Dictionary<int, int> discount) {
    foreach (int item in items) {
        if (itemsbought > item) {
            discountItem = discount[item];
            break;
        }
    }
}
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
1
Gpt3D_Clone333_1.cs 1 11
Gpt3D_Clone333_1.cs 12 22
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    while (lstAvailableColors.Items.Count > 0) {
        ListItem item = lstAvailableColors.Items [lstAvailableColors.Items.Count - 1]; 
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.RemoveAt(lstAvailableColors.Items.Count - 1);
        } else {
            lstAvailableColors.Items.RemoveAt(lstAvailableColors.Items.Count - 1);
        }
    }
}
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
1
Gpt3D_Clone340_1.cs 1 17
Gpt3D_Clone340_1.cs 18 37
----------------------------------------

  
public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    Control sendCC = null;
    for (int i=0; i<pp.Controls.Count; i++) {
        if (pp.GetCellPosition (pp.Controls[i]).Column == col) {
            if (pp.GetCellPosition (pp.Controls[i]).Row == row) {
                sendCC = pp.Controls[i];
                break;
            }
        }
    }
    if (sendCC == null) {
        return null;
    } else {
        return sendCC;
    }
}
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
2
Gpt3D_Clone340_2.cs 1 18
Gpt3D_Clone340_2.cs 19 29
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col && pp.GetCellPosition (cc).Row == row) {
            return cc;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
0
Gpt3D_Clone341_0.cs 1 8
Gpt3D_Clone341_0.cs 9 20
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

public static Image Resize(this Image image, float scale)
{
    if (image == null)
        return null;
    scale = System.Math.Max(0.0F, scale);
    int width = Convert.ToInt32(image.Width * scale);
    int height = Convert.ToInt32(image.Height * scale);
    return image.Resize(new Size(width, height));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
346
0
Gpt3D_Clone346_0.cs 1 9
Gpt3D_Clone346_0.cs 10 35
----------------------------------------

static void Main (string [] args) {
    ClearAndSetConsoleColor ();
    var skins = GetSkins ();
    PrintHeader ();
    var champion = SelectChampion (skins);
    var rnd = new Random ();
    PrintSelection (champion);
    SelectSkin (skins, champion, rnd);
}
----------------------------------------

static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, string [] > skins = new Dictionary < string, string [] > ();
    skins.Add ("ahri", new string [] {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"});
    skins.Add ("leesin", new string [] {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"});
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        var tmpList = Enumerable.ToList (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Count)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Length)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
0
Gpt3D_Clone350_0.cs 1 11
Gpt3D_Clone350_0.cs 12 24
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    for (int i = 0; i < this.Rings.Count; i++) {
        sout.Write (BitConverter.GetBytes (this.Rings[i].Count), 0, 4);
        for (int j = 0; j < this.Rings[i].Count; j++) {
            this.Rings[i][j].WellKnownBinary (sout);
        }    
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
1
Gpt3D_Clone350_1.cs 1 11
Gpt3D_Clone350_1.cs 12 24
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Length), 0, 4);
    for (int i = 0; i < this.Rings.Length; i++) {
        sout.Write (BitConverter.GetBytes (this.Rings[i].Length), 0, 4);
        for (int j = 0; j < this.Rings[i].Length; j++) {
            this.Rings[i][j].WellKnownBinary (sout);
        }    
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
1
Gpt3D_Clone368_1.cs 1 22
Gpt3D_Clone368_1.cs 23 36
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

private static int Encode (int value, byte[] buffer, int index) {
    byte temp;
    byte holder;
    while (value > 0) {
        holder = (value >> 8) & 0xFF;
        temp = (byte)(value & 0xFF);
        buffer[index++] = holder;
        value >>= 8;
    }
    buffer[index++] = temp;
    return index;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
0
Gpt3D_Clone36_0.cs 1 33
Gpt3D_Clone36_0.cs 34 55
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    if(date.DayOfWeek == DayOfWeek.Tuesday && remainder > 3){
        date = date.AddDays (2);
    } else if(date.DayOfWeek == DayOfWeek.Wednesday && remainder > 2){
        date = date.AddDays (2);
    } else if(date.DayOfWeek == DayOfWeek.Thursday && remainder > 1){
        date = date.AddDays (2);
    } else if(date.DayOfWeek == DayOfWeek.Friday && remainder > 0){
        date = date.AddDays (2);
    } else if(date.DayOfWeek == DayOfWeek.Saturday && days > 0 && remainder !=0){
        date = date.AddDays (1);
    } else if(date.DayOfWeek == DayOfWeek.Sunday && days > 0 && remainder == 0){
        date = date.AddDays (1);
    }
    return date.AddDays (remainder);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
1
Gpt3D_Clone36_1.cs 1 20
Gpt3D_Clone36_1.cs 21 55
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays((days/5)*7);
    int remainder = days%5;
    if(date.DayOfWeek == DayOfWeek.Tuesday && remainder > 3){
        date = AddTwoDays(date);
    } else if(date.DayOfWeek == DayOfWeek.Wednesday && remainder > 2){
        date = AddTwoDays(date);
    } else if(date.DayOfWeek == DayOfWeek.Thursday && remainder > 1){
        date = AddTwoDays(date);
    } else if(date.DayOfWeek == DayOfWeek.Friday && remainder > 0){
        date = AddTwoDays(date);
    } else if(date.DayOfWeek == DayOfWeek.Saturday && days > 0 && remainder !=0){
        date = AddOneDay(date);
    } else if(date.DayOfWeek == DayOfWeek.Sunday && days > 0 && remainder == 0){
        date = AddOneDay(date);
    }
    return date.AddDays(remainder);
}
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
2
Gpt3D_Clone373_2.cs 1 14
Gpt3D_Clone373_2.cs 15 27
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg != 0x20a) {
        return false;
    }
    int posx = m.LParam.ToInt32() & 0xffff;
    int posy = m.LParam.ToInt32() >> 16;
    Point pos = new Point (posx, posy);
    IntPtr hWnd = WindowFromPoint (pos);
    if (hWnd == IntPtr.Zero || hWnd == m.HWnd || Control.FromHandle (hWnd) == null) {
        return false;
    }
    SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
    return true;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
376
0
Gpt3D_Clone376_0.cs 1 9
Gpt3D_Clone376_0.cs 10 21
----------------------------------------

public static void OnAutoScrollToCurrentItemChanged (DependencyObject obj, DependencyPropertyChangedEventArgs e) {
    var listBox = (ListBox) obj;
    if (listBox != null) {
        if ((bool) e.NewValue)
            listBox.SelectionChanged += listBoxSelectionChanged;
        else
            listBox.SelectionChanged -= listBoxSelectionChanged;
    }
}
----------------------------------------

public static void OnAutoScrollToCurrentItemChanged (DependencyObject obj, DependencyPropertyChangedEventArgs e) {
    var listBox = obj as ListBox;
    if (listBox == null)
        return;
    var newValue = (bool) e.NewValue;
    if (newValue)
        listBox.SelectionChanged += listBoxSelectionChanged;
    else
        listBox.SelectionChanged -= listBoxSelectionChanged;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
376
1
Gpt3D_Clone376_1.cs 1 7
Gpt3D_Clone376_1.cs 8 19
----------------------------------------

public static void OnAutoScrollToCurrentItemChanged (DependencyObject obj, DependencyPropertyChangedEventArgs e) {
    ListBox listBox = obj as ListBox;
    if (listBox != null && (bool) e.NewValue)
        listBox.SelectionChanged += listBoxSelectionChanged;
    else if (listBox != null)
        listBox.SelectionChanged -= listBoxSelectionChanged;
}
----------------------------------------

public static void OnAutoScrollToCurrentItemChanged (DependencyObject obj, DependencyPropertyChangedEventArgs e) {
    var listBox = obj as ListBox;
    if (listBox == null)
        return;
    var newValue = (bool) e.NewValue;
    if (newValue)
        listBox.SelectionChanged += listBoxSelectionChanged;
    else
        listBox.SelectionChanged -= listBoxSelectionChanged;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
2
Gpt3D_Clone377_2.cs 1 7
Gpt3D_Clone377_2.cs 8 17
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (!suppressNotification) {
        base.OnCollectionChanged (e);
        if (CollectionChanged != null)
            CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
0
Gpt3D_Clone37_0.cs 1 12
Gpt3D_Clone37_0.cs 13 25
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    int modulo = days % 7; //Determining an exact number of days to be added while taking into account the number of days in a week 
    int sign = Math.Sign (modulo); //Detecting the sign of the number 
    int absDays = Math.Abs (modulo); //Finding the absolute value of days 
    for (int i = 0; i < absDays; i ++) {
        do {
            current = current.AddDays (sign); 
        } while ((DateTime.DayOfWeek)current.DayOfWeek == DayOfWeek.Saturday 
            || (DateTime.DayOfWeek)current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
0
Gpt3D_Clone381_0.cs 1 7
Gpt3D_Clone381_0.cs 8 22
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
	String selectQuery = string.Empty;
	if (ddlcountry.Text != string.Empty) {
		selectQuery = string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text);
		BindSpeciePetList (selectQuery);
	}
}
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
1
Gpt3D_Clone381_1.cs 1 7
Gpt3D_Clone381_1.cs 8 22
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
	String selectQuery = string.Empty;
	if (ddlcountry.Text != string.Empty) {
		selectQuery = string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text);
		BindSpeciePetList (selectQuery);
	}
}
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
387
0
Gpt3D_Clone387_0.cs 1 18
Gpt3D_Clone387_0.cs 19 33
----------------------------------------

static void Main() {
    int total = 0;
    var chars = new Dictionary<char, int>(); 
    chars.Add('a', 1);
    chars.Add('e', 1);
    chars.Add('i', 1);
    chars.Add('o', 1);
    chars.Add('u', 1);
    Console.WriteLine("Enter a Sentence");
    string sentence = Console.ReadLine().ToLower();
    for (int i = 0; i < sentence.Length; i++) {
        int val = 0;
        chars.TryGetValue(sentence[i], out val);
        total += val;
    }
    Console.WriteLine("Your total number of vowels is: {0}", total);
    Console.ReadLine();
}
----------------------------------------

static void Main () {
    int total = 0;
    var vowels = new HashSet < char > {'a', 'e', 'i', 'o', 'u'};
    Console.WriteLine ("Enter a Sentence");
    string sentence = Console.ReadLine ().ToLower ();
    for (int i = 0; i < sentence.Length; i ++) {
        if (vowels.Contains (sentence [i])) {
            total ++;
        }
    }
    Console.WriteLine ("Your total number of vowels is: {0}", total);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
387
1
Gpt3D_Clone387_1.cs 1 9
Gpt3D_Clone387_1.cs 10 24
----------------------------------------

static void Main()
{
    int total = 0;
    var sentence = GetSentence();
    
    total = CountVowels(sentence);
    
    ShowResult(total);
}
----------------------------------------

static void Main () {
    int total = 0;
    var vowels = new HashSet < char > {'a', 'e', 'i', 'o', 'u'};
    Console.WriteLine ("Enter a Sentence");
    string sentence = Console.ReadLine ().ToLower ();
    for (int i = 0; i < sentence.Length; i ++) {
        if (vowels.Contains (sentence [i])) {
            total ++;
        }
    }
    Console.WriteLine ("Your total number of vowels is: {0}", total);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
394
0
Gpt3D_Clone394_0.cs 1 23
Gpt3D_Clone394_0.cs 24 39
----------------------------------------

public bool doFindSum (ref int [] nums, int index, int current, int target) {
    numberCalled ++;
    if (index + 1 == nums.Length) {
        if (current == target) {
            ++ answer;
            return true;
        } else {
            return false;
        }
    }
    bool add, minus;
    if(nums[index+1] == 0){
        minus = false;
        add = doFindSum (ref nums, index + 1, current + nums [index + 1], target);
    } else if(nums[index+1] > 0){
        add = doFindSum (ref nums, index + 1, current + nums [index + 1], target);
        minus = doFindSum (ref nums, index + 1, current - nums [index + 1], target);
    } else {
        add = doFindSum (ref nums, index + 1, current + nums [index + 1], target);
        minus = false;
    }
    return add || minus;
}
----------------------------------------

public bool doFindSum (ref int [] nums, int index, int current, int target) {
    numberCalled ++;
    if (index + 1 == nums.Length) {
        if (current == target) {
            ++ answer;
            return true;
        } else {
            return false;
        }
    }
    bool add = doFindSum (ref nums, index + 1, current + nums [index + 1], target);
    bool minus = doFindSum (ref nums, index + 1, current - nums [index + 1], target);
    return add || minus;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
0
Gpt3D_Clone397_0.cs 1 20
Gpt3D_Clone397_0.cs 21 48
----------------------------------------

public static short Asc (char String) {
    short num1 = Convert.ToInt16 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char[] chars = new char[1] { String };
        if (fileIoEncoding.IsSingleByte) {
            byte[] bytes = new byte[1];
            fileIoEncoding.GetBytes(chars, 0, 1, bytes, 0);
            return (short)bytes[0];
        } else {
            return fileIoEncoding.GetBytes(chars, 0, 1)[0];
        }
    }
     catch (Exception ex)
    {
        throw ex;
    }
}
----------------------------------------

public static int Asc (char String) {
    int num1 = Convert.ToInt32 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char [] chars = new char [1] {String};
        if (fileIoEncoding.IsSingleByte) {
            byte [] bytes = new byte [1];
            fileIoEncoding.GetBytes (chars, 0, 1, bytes, 0);
            return (int) bytes [0];
        }
        byte [] bytes1 = new byte [2];
        if (fileIoEncoding.GetBytes (chars, 0, 1, bytes1, 0) == 1)
            return (int) bytes1 [0];
        if (BitConverter.IsLittleEndian) {
            byte num2 = bytes1 [0];
            bytes1 [0] = bytes1 [1];
            bytes1 [1] = num2;
        }
        return (int) BitConverter.ToInt16 (bytes1, 0);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
1
Gpt3D_Clone403_1.cs 1 11
Gpt3D_Clone403_1.cs 12 22
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    long result = 0;
    try {
        result = decimal.ToInt64(value + adder);
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        result = long.MaxValue;
    }
    return result;
}
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
2
Gpt3D_Clone403_2.cs 1 11
Gpt3D_Clone403_2.cs 12 22
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    long result = 0;
    try {
        result = checked( (decimal.ToInt64(value + adder)) );
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        result = long.MaxValue;
    }
    return result;
}
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
409
0
Gpt3D_Clone409_0.cs 1 9
Gpt3D_Clone409_0.cs 10 20
----------------------------------------

static void Main (string [] args) {
    System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch ();
    stopWatch.Start ();
    System.Threading.Thread.Sleep (10000);
    stopWatch.Stop ();
    System.TimeSpan ts = stopWatch.Elapsed;
    string elapsedTime = System.String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
    System.Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

static void Main (string [] args) {
    Stopwatch stopWatch = new Stopwatch ();
    stopWatch.Start ();
    Thread.Sleep (10000);
    stopWatch.Stop ();
    TimeSpan ts = stopWatch.Elapsed;
    string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
    Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
409
1
Gpt3D_Clone409_1.cs 1 9
Gpt3D_Clone409_1.cs 10 20
----------------------------------------

static void Main (string [] args) {
    System.Diagnostics.Stopwatch myStopwatch = new System.Diagnostics.Stopwatch ();
    myStopwatch.Start ();
    System.Threading.Thread.Sleep (10000);
    myStopwatch.Stop ();
    System.TimeSpan timespan = myStopwatch.Elapsed;
    string elapsedTime = System.String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", timespan.Hours, timespan.Minutes, timespan.Seconds, timespan.Milliseconds / 10);
    System.Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

static void Main (string [] args) {
    Stopwatch stopWatch = new Stopwatch ();
    stopWatch.Start ();
    Thread.Sleep (10000);
    stopWatch.Stop ();
    TimeSpan ts = stopWatch.Elapsed;
    string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
    Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
0
Gpt3D_Clone417_0.cs 1 15
Gpt3D_Clone417_0.cs 16 27
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Courier", 9, FontStyle.Regular);
    int iCharactersFitted, iLinesFitted;
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    return iLinesFitted > 12;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
1
Gpt3D_Clone417_1.cs 1 9
Gpt3D_Clone417_1.cs 10 26
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat trimFormat = new StringFormat () { Trimming = StringTrimming.Word };
    RectangleF textRect = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics measureGraphics = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Calibri", 11, FontStyle.Regular);
    int charactersFitted, linesFitted;
    measureGraphics.MeasureString (enteredText, myFont, textRect.Size, trimFormat, out charactersFitted, out linesFitted);
    return linesFitted > 12;
}
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
0
Gpt3D_Clone434_0.cs 1 15
Gpt3D_Clone434_0.cs 16 26
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        int width = e.X - rec.X;
        int height = e.Y - rec.Y;
        if (width > 0 && height > 0) {
            rec.Width = width;
            rec.Height = height;
        }
    } else if (e.Button == MouseButtons.Right && MouseDownLocation != null) {
        int xPos = e.X - MouseDownLocation.X;
        int yPos = e.Y - MouseDownLocation.Y;
        rec.X = xPos;
        rec.Y = yPos;
    }
}
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
1
Gpt3D_Clone434_1.cs 1 13
Gpt3D_Clone434_1.cs 14 24
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        int newX = e.X - rec.X;
        int newY = e.Y - rec.Y;
        rec.Width = newX;
        rec.Height = newY;
    } else if (e.Button == MouseButtons.Right) {
        int newX = e.X - MouseDownLocation.X;
        int newY = e.Y - MouseDownLocation.Y;
        rec.X = newX;
        rec.Y = newY;
    }
}
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
2
Gpt3D_Clone434_2.cs 1 13
Gpt3D_Clone434_2.cs 14 24
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        int currentX = e.X - rec.X;
        int currentY = e.Y - rec.Y;
        rec.Width = currentX;
        rec.Height = currentY;
    } else if (e.Button == MouseButtons.Right) {
        int relativeX = e.X - MouseDownLocation.X;
        int relativeY = e.Y - MouseDownLocation.Y;
        rec.X = relativeX;
        rec.Y = relativeY;
    }
}
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
0
Gpt3D_Clone438_0.cs 1 15
Gpt3D_Clone438_0.cs 16 33
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    switch (item) {
        case FileInfo fileInfo:
            fileInfo.Rename (newName);
            break;
        case DirectoryInfo directoryInfo:
            directoryInfo.Rename (newName);
            break;
        default:
            throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
1
Gpt3D_Clone438_1.cs 1 16
Gpt3D_Clone438_1.cs 17 32
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    if (item is FileInfo) {
        ((FileInfo) item).Rename (newName);
        return;
    }
    if (item is DirectoryInfo) {
        ((DirectoryInfo) item).Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
0
Gpt3D_Clone439_0.cs 1 14
Gpt3D_Clone439_0.cs 15 32
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    if (item is FileInfo fileInfo) {
        fileInfo.Rename (newName);
    }
    else if (item is DirectoryInfo directoryInfo) {
        directoryInfo.Rename (newName);
    }
    else {
        throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
0
Gpt3D_Clone444_0.cs 1 11
Gpt3D_Clone444_0.cs 12 30
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

static void Main ()
{
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test2.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++) {
        for (int y = 0; y < height; y ++) {
            byte redMask = mask.GetPixel(x,y).R;
            if (redMask < 250) {
                Color maskPixel = mask.GetPixel(x,y);
                bmp.SetPixel(x,y, maskPixel);
            }
        }
    }
    bmp.Save (@"test4.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
1
Gpt3D_Clone451_1.cs 1 15
Gpt3D_Clone451_1.cs 16 35
----------------------------------------

public static int Delta (int a, int b) {
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b - 1) {
            a ++;
        }
        return b - a;
    } else {
        while (b < a - 1) {
            b ++;
        }
        return a - b;
    }
}
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
2
Gpt3D_Clone451_2.cs 1 13
Gpt3D_Clone451_2.cs 14 33
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else {
        int start = Math.min(a, b);
        int end = Math.max(a, b);
        for (int i = start; i < end; i ++) {
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
3
Gpt3D_Clone451_3.cs 1 12
Gpt3D_Clone451_3.cs 13 32
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    while (a != b) {
        if (a < b) {
            a ++;
        } else {
            b ++;
        }
        delta ++;
    }
    return delta;
}
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
0
Gpt3D_Clone452_0.cs 1 9
Gpt3D_Clone452_0.cs 10 34
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName;
    switch (KP.Key) {
        case ConsoleKey.A:
            UserName = "a" + Console.ReadLine ();
            break;
        case ConsoleKey.B:
            UserName = "b" + Console.ReadLine ();
            break;
        case ConsoleKey.C:
            UserName = "c" + Console.ReadLine ();
            break;
        default:
            UserName = KP.KeyChar + Console.ReadLine ();
            break;
    }
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
1
Gpt3D_Clone452_1.cs 1 18
Gpt3D_Clone452_1.cs 19 29
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName;
    if (KP.Key == ConsoleKey.A) {
        UserName = "a" + Console.ReadLine ();
    } else if (KP.Key == ConsoleKey.B) {
        UserName = "b" + Console.ReadLine ();
    } else if (KP.Key == ConsoleKey.C) {
        UserName = "c" + Console.ReadLine ();
    } else {
        UserName = KP.KeyChar + Console.ReadLine ();
    }
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
0
Gpt3D_Clone455_0.cs 1 5
Gpt3D_Clone455_0.cs 6 18
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! CheckInProgress ()) {
        StartChecking Process ();
    }
}
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
1
Gpt3D_Clone455_1.cs 1 5
Gpt3D_Clone455_1.cs 6 18
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! CheckInProgress ()) {
        TryGetAvailableFiles ();
    }
}
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
457
0
Gpt3D_Clone457_0.cs 1 12
Gpt3D_Clone457_0.cs 13 27
----------------------------------------

private static string ExtractCN (string dn) {
    string [] parts = dn.Split (',');
    for (int i = 0; i < parts.Length; i ++) {
        string[] elems = parts[i].Split('=');
        string t = elems [0].Trim ();
        string v = elems [1].Trim ();
        if ("CN".Equals(t.ToUpper())) {
            return v;
        }
    }
    return null;
}
----------------------------------------

private static string ExtractCN (string dn) {
    string [] parts = dn.Split (new char [] {','});
    for (int i = 0; i < parts.Length; i ++) {
        var p = parts [i];
        var elems = p.Split (new char [] {'='});
        var t = elems [0].Trim ().ToUpper ();
        var v = elems [1].Trim ();
        if (t == "CN") {
            return v;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
457
1
Gpt3D_Clone457_1.cs 1 13
Gpt3D_Clone457_1.cs 14 27
----------------------------------------

private static string ExtractCN (string dn) {
    string [] parts = dn.Split (new char [] {','});
    for (int i = 0; i < parts.Length; i ++) {
        var p = parts [i];
        var elems = p.Split (new char [] {'='});
        var t = elems [0].Trim ().ToUpper ();
        var v = elems [1].Trim ();
        if (t == "CN") {
            return v;
        }
    }
    return null;
}
----------------------------------------

private static string ExtractCN (string dn) {
    string [] parts = dn.Split (',');
    for (int i = 0; i < parts.Length; i ++) {
        string[] elems = parts[i].Split('=');
        string t = elems [0].Trim ().ToUpper ();
        string v = elems [1].Trim ();
        if (t == "CN") {
            return v;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
0
Gpt3D_Clone459_0.cs 1 10
Gpt3D_Clone459_0.cs 11 18
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

public override bool IsValid (DateTime value) {
    int age = DateTime.Today.Year - value.Year;
    if (value > DateTime.Today.AddYears (- age))
        age --;
    return age >= 18;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
1
Gpt3D_Clone459_1.cs 1 6
Gpt3D_Clone459_1.cs 7 18
----------------------------------------

public override bool IsValid (DateTime value) {
    int age = System.DateTime.Today.Year - value.Year;
    if (value > System.DateTime.Today.AddYears (- age))
        age --;
    return age < 18 ? false : true;
}
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
45
0
Gpt3D_Clone45_0.cs 1 15
Gpt3D_Clone45_0.cs 16 29
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    int textLength = textBox1.Text.Length - 1;
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textLength);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    int panelWidth = flowLayoutPanel1.Size.Width - 10;
    int panelHeight = flowLayoutPanel1.Size.Height - 10;
    if (caretLoc.X >= panelWidth) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= panelHeight) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
45
1
Gpt3D_Clone45_1.cs 1 15
Gpt3D_Clone45_1.cs 16 29
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    int indexOfLastChar = textBox1.Text.Length - 1;
    Point caretCoords = textBox1.GetPositionFromCharIndex (indexOfLastChar);
    Point absCaretLoc = new Point (InitialTextBoxLoc.X + caretCoords.X, InitialTextBoxLoc.Y + caretCoords.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    int maxPanelWidth = flowLayoutPanel1.Width - 10;
    int maxPanelHeight = flowLayoutPanel1.Height - 10;
    if (absCaretLoc.X >= maxPanelWidth) {
        scrollLoc.X = absCaretLoc.X;
    }
    if (absCaretLoc.Y >= maxPanelHeight) {
        scrollLoc.Y = absCaretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
0
Gpt3D_Clone461_0.cs 1 11
Gpt3D_Clone461_0.cs 12 29
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

public static string CreateZip(String stDirToZip)
{
    DirectoryInfo di = null;
    string stZipPath = "";
    try
    {
        di = new DirectoryInfo(stDirToZip);
        stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip(stZipPath, stDirToZip);
    }
    catch (Exception)
    {
        throw;
    }
    return stZipPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
1
Gpt3D_Clone461_1.cs 1 16
Gpt3D_Clone461_1.cs 17 29
----------------------------------------

public static string CreateZip_Variant_1(String stDirToZip)
{
    DirectoryInfo di = null;
    string stZipPath = "";
    try
    {
        di = new DirectoryInfo(stDirToZip);
        stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip(stZipPath, stDirToZip);
    }
    catch (Exception)
    {
        throw;
    }
    return stZipPath;
}
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
467
0
Gpt3D_Clone467_0.cs 1 19
Gpt3D_Clone467_0.cs 20 35
----------------------------------------

public static bool IsAnagram (string s1, string s2) {
    int[] s1CharCount = new int[256];
    int[] s2CharCount = new int[256];
    if (string.IsNullOrEmpty (s1) || string.IsNullOrEmpty (s2))
        return false;
    if (s1.Length != s2.Length)
        return false;
    for (int i = 0; i < s1.Length; i++) {
        int s1Char = Convert.ToInt32 (s1[i]);
        int s2Char = Convert.ToInt32 (s2[i]);
        s1CharCount[s1Char]++;
        s2CharCount[s2Char]++;
    }
    for (int i = 0; i < s2CharCount.Length; i++) {
        if (s1CharCount[i] != s2CharCount[i])
            return false;
    }
    return true;
}
----------------------------------------

public static bool IsAnagram (string s1, string s2) {
    if (string.IsNullOrEmpty (s1) || string.IsNullOrEmpty (s2))
        return false;
    if (s1.Length != s2.Length)
        return false;
    foreach (char c in s2) {
        int ix = s1.IndexOf (c);
        if (ix >= 0)
            s1 = s1.Remove (ix, 1);
        else
            return false;
    }
    return string.IsNullOrEmpty (s1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
467
1
Gpt3D_Clone467_1.cs 1 14
Gpt3D_Clone467_1.cs 15 25
----------------------------------------

public static bool IsAnagram (string s1, string s2) {
    if (string.IsNullOrEmpty (s1) || string.IsNullOrEmpty (s2))
        return false;
    if (s1.Length != s2.Length)
        return false;
    foreach (char c in s2) {
        int ix = s1.IndexOf (c);
        if (ix >= 0)
            s1 = s1.Remove (ix, 1);
        else
            return false;
    }
    return string.IsNullOrEmpty (s1);
}
----------------------------------------

public static bool IsAnagram (string s1, string s2) {
    int result = 0;
    for (int i = 0; i < s1.Length && i < s2.Length; i++) {
        int s1Char = Convert.ToInt32 (s1[i]);
        int s2Char = Convert.ToInt32 (s2[i]);
        result += (s1Char - s2Char);
    }
    return (result == 0); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
1
Gpt3D_Clone475_1.cs 1 8
Gpt3D_Clone475_1.cs 9 19
----------------------------------------

public void Add (Type type) {
    if (type.IsVisible) {
        var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
        for (int i = 0; i < members.Length; i++) {
            Add (type, members[i]);
        }
    }
}
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
479
0
Gpt3D_Clone479_0.cs 1 19
Gpt3D_Clone479_0.cs 20 44
----------------------------------------

public static void ExportToCSV (DataTable contentToexport) {
    StringBuilder csvData = new StringBuilder ();
    foreach (DataRow row in contentToexport.Rows) {
        foreach (DataColumn column in contentToexport.Columns) {
            csvData.Append (row [column].ToString () + ",");
        }
        csvData.Append ("\r\n");
    }
    string attachment = "attachment; filename=export.csv";
    HttpResponse response = HttpContext.Current.Response;
    response.Clear ();
    response.ClearHeaders ();
    response.ClearContent ();
    response.AddHeader ("content-disposition", attachment);
    response.ContentType = "application/csv";
    response.Write (csvData.ToString ());
    response.Flush ();
    response.Close ();
}
----------------------------------------

public static void ExportToCSV (DataTable contentToexport) {
    StringBuilder csvData = new StringBuilder ();
    StringBuilder headers = new StringBuilder ();
    foreach (DataRow row in contentToexport.Rows) {
        headers = string.Empty;
        foreach (DataColumn column in contentToexport.Columns) {
            csvData.Append (row [column].ToString () + ",");
            headers.Append (column.ColumnName + ",");
        }
        csvData.Append ("\r\n");
        headers.Append ("\r\n");
    }
    string contentToExport = headers.Append (csvData.ToString ()).ToString ();
    string attachment = "attachment; filename=export.csv";
    HttpContext.Current.Response.Clear ();
    HttpContext.Current.Response.ClearHeaders ();
    HttpContext.Current.Response.ClearContent ();
    HttpContext.Current.Response.AddHeader ("content-disposition", attachment);
    HttpContext.Current.Response.ContentType = "application/csv";
    HttpContext.Current.Response.AddHeader ("Pragma", "public");
    HttpContext.Current.Response.Write (contentToExport);
    HttpContext.Current.Response.End ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
1
Gpt3D_Clone492_1.cs 1 7
Gpt3D_Clone492_1.cs 8 17
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Visible = false;
    }
}
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
0
Gpt3D_Clone493_0.cs 1 13
Gpt3D_Clone493_0.cs 14 27
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine;
    FileStream f = new FileStream(filePath, FileMode.Open,FileAccess.Read);
    StreamReader sr = new StreamReader(f);
    while ((currentLine = sr.ReadLine ()) != null) {
        char separatorChar = ',';
        results.AddRange(currentLine.Split(separatorChar));
    }
    sr.Close();
    f.Close();
    lstbx.DataSource = results;
}
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
0
Gpt3D_Clone4_0.cs 1 15
Gpt3D_Clone4_0.cs 16 26
----------------------------------------

public static long fibo_n (long N) {
    int n1 = 0;
    int n2 = 1;
    int n3;
     
    if (N <= 0) return n1;
    if (N == 1) return n2;
 
    for (int i = 2; i <= N; i++) {
        n3 = n1 + n2;
        n1 = n2;
        n2 = n3;
    }
    return n2;
}
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
1
Gpt3D_Clone4_1.cs 1 9
Gpt3D_Clone4_1.cs 10 19
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

public static long fibo_n (long N) {
    if (N == 0) return 0;
    if (N == 1) return 1;
    if (N == 2) return 1;
    if (N == 3) return 2;
    if (N == 4) return 3;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
515
0
Gpt3D_Clone515_0.cs 1 42
Gpt3D_Clone515_0.cs 43 59
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    bool isValid = Guid.TryParse (input, out g);
    if (isValid) {
        return g;
    }
    else {
        if (input.Length != 8 &&
            input.Length != 32 &&
            input.Length != 36 &&
            input.Length != 38)
        {
            return null;
        }
        string[] tmp = input.Split('-');
        if (tmp.Length == 0)
            return null;
        if (tmp.Length > 5)
            return null;
        for(int i = 0; i<tmp.Length; i++)
        {
            if (tmp[i].Length != 8 &&
                tmp[i].Length != 12 &&
                tmp[i].Length != 16)
            {
                return null;
            }
        }
        var encodedString = HttpUtility.UrlEncode(input);
        var decodedString = HttpUtility.UrlDecode(encodedString);
        if (!Guid.TryParseExact(decodedString, "N", out g))
            return null;
        return g;
    }
}
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    if (Guid.TryParse (input, out g))
        return g;
    var bytes = HttpServerUtility.UrlTokenDecode (s);
    var result = new Guid (bytes);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
515
1
Gpt3D_Clone515_1.cs 1 41
Gpt3D_Clone515_1.cs 42 58
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    bool isValid = Guid.TryParse (input, out g);
    if (isValid) {
        return g;
    }
    else {
        if (input.Length != 8 &&
            input.Length != 32 &&
            input.Length != 36 &&
            input.Length != 38)
        {
            return null;
        }
        string[] tmp = input.Split('-');
        if(tmp.Length == 0)
            return null;
        if (tmp.Length > 5)
            return null;
        for(int i = 0; i<tmp.Length; i++)
        {
            if (tmp[i].Length != 8 &&
                tmp[i].Length != 12 &&
                tmp[i].Length != 16)
            {
                return null;
            }
        }
        var finalString = string.Join("-", tmp);
        if (!Guid.TryParseExact(finalString, "N", out g))
            return null;
        return g;
    }
}
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    if (Guid.TryParse (input, out g))
        return g;
    var bytes = HttpServerUtility.UrlTokenDecode (s);
    var result = new Guid (bytes);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
518
3
Gpt3D_Clone518_3.cs 1 16
Gpt3D_Clone518_3.cs 17 36
----------------------------------------

private Coordinate CalculateClone4 (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random (DateTime.Now.Millisecond);
    Coordinate randomCoordinate = new Coordinate ();
    double randomLatitude = random.Next ((int) Math.Floor (location4.Latitude), (int) Math.Floor (location2.Latitude));
    if (randomLatitude > location1.Latitude) {
        double m = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double maxLongitude = (randomLatitude - location2.Latitude) * m;
        randomCoordinate.Longitude = random.Next ((int)Math.Ceiling(location3.Longitude), (int)Math.Floor(maxLongitude));
    } else {
        double m = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double maxLongitude = (randomLatitude - location4.Latitude) * m;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (location3.Longitude), (int)Math.Floor(maxLongitude));
    }
    randomCoordinate.Latitude = randomLatitude;
    return randomCoordinate;
}
----------------------------------------

private Coordinate Calculate (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random (DateTime.Now.Millisecond);
    Coordinate randomCoordinate = new Coordinate () {Latitude = random.Next ((int) Math.Floor (location4.Latitude), (int) Math.Floor (location2.Latitude))};
    if (randomCoordinate.Latitude > location1.Latitude) {
        double m1 = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double m2 = (location2.Longitude - location3.Longitude) / (location2.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location2.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location2.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    } else {
        double m1 = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double m2 = (location4.Longitude - location3.Longitude) / (location4.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location4.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location4.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    }
    return randomCoordinate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
3
Gpt3D_Clone519_3.cs 1 10
Gpt3D_Clone519_3.cs 11 25
----------------------------------------

public override bool Equals (float a, float b) {
    if (a == b) {
        return true;
    } else if (Math.Abs (a) == 0 || Math.Abs (b) == 0 || Math.Abs (a - b) < InternalEpsilon) {
        return Math.Abs (a - b) < InternalEpsilon;
    } else {
        return Math.Abs (a - b) / (Math.Abs (a) + Math.Abs (b)) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
522
1
Gpt3D_Clone522_1.cs 1 10
Gpt3D_Clone522_1.cs 11 22
----------------------------------------

public void EnableControls (ControlCollection ctrl, bool isEnabled) {
    for (int i = 0; i < ctrl.Count; i++) {
        if (ctrl[i].HasControls ())
            EnableControls (ctrl[i].Controls, isEnabled);
        else if (ctrl[i] is WebControl)
            ((WebControl) ctrl[i]).Enabled = isEnabled;
        else if (ctrl[i] is HtmlControl)
            ((HtmlControl) ctrl[i]).Disabled = ! isEnabled;
    }
}
----------------------------------------

public void EnableControls (ControlCollection ctrl, bool isEnable) {
    foreach (Control item in ctrl) {
        if (item.HasControls ())
            EnableControls (item.Controls, isEnable);
        else if (item is WebControl)
            ((WebControl) item).Enabled = isEnable;
        else if (item is HtmlControl)
            ((HtmlControl) item).Disabled = ! isEnable;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
522
2
Gpt3D_Clone522_2.cs 1 10
Gpt3D_Clone522_2.cs 11 22
----------------------------------------

public void EnableControls (ControlCollection ctrl, bool isEnabled) {
    foreach (Control childCtrl in ctrl) {
        if (childCtrl.HasControls ())
            EnableControls (childCtrl.Controls, isEnabled);
        else if (childCtrl is WebControl webCtrl) 
            webCtrl.Enabled = isEnabled;
        else if (childCtrl is HtmlControl htmlCtrl)
            htmlCtrl.Disabled = ! isEnabled;
    }
}
----------------------------------------

public void EnableControls (ControlCollection ctrl, bool isEnable) {
    foreach (Control item in ctrl) {
        if (item.HasControls ())
            EnableControls (item.Controls, isEnable);
        else if (item is WebControl)
            ((WebControl) item).Enabled = isEnable;
        else if (item is HtmlControl)
            ((HtmlControl) item).Disabled = ! isEnable;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
0
Gpt3D_Clone526_0.cs 1 16
Gpt3D_Clone526_0.cs 17 39
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    int curr = k;
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == curr) {
            curr --;
            if (curr == 0) {
                return true;
            }
            else {
                continue;
            }
        }
    }
    return false;
}
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
0
Gpt3D_Clone527_0.cs 1 10
Gpt3D_Clone527_0.cs 11 28
----------------------------------------

static void Main (string [] args) {
    using (StreamReader sr = new StreamReader (args [0], Encoding.UTF8))
    using (StreamWriter sw = new StreamWriter (args [1], false, Encoding.Unicode))
    {
        string line;
        while ((line = sr.ReadLine ()) != null) {
            sw.WriteLine (line);
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    StreamReader sr = new StreamReader (args [0], Encoding.UTF8);
    StreamWriter sw = new StreamWriter (args [1], false, Encoding.Unicode);
    
    try {
        string line;
        while ((line = sr.ReadLine ()) != null) {
            sw.WriteLine (line);
        }
    } catch (Exception ex) {
        Console.WriteLine("Error occured writing file {0}", ex.Message);
    } finally {
        sr.Close();
        sw.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
549
2
Gpt3D_Clone549_2.cs 1 15
Gpt3D_Clone549_2.cs 16 35
----------------------------------------

private void CalculatePolicy (double tempPolicy, DateTime birthDate) {
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        tempPolicy += tempPolicy * Chauffeur;
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        tempPolicy  -= tempPolicy * Accountant;
    }
    if (birthDate.Age().Years() > 21 && birthDate.Age().Years() < 26) {
        tempPolicy += tempPolicy * age2125;
    } else if (birthDate.Age().Years() > 26 && birthDate.Age().Years() < 76) {
        tempPolicy -= tempPolicy * age2675;
    }
    txtPolicy.Text = tempPolicy.ToString();
}
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    double tempPolicy = policy;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        tempPolicy = (tempPolicy + tempPolicy * Chauffeur);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        tempPolicy = (tempPolicy - tempPolicy * Accountant);
        txtPolicy.Text = tempPolicy.ToString ();
    }
    DateTime birthDate = Convert.ToDateTime (dpkDOB.SelectedDate);
    if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
        tempPolicy = (tempPolicy + tempPolicy * age2125);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
        tempPolicy = (tempPolicy - tempPolicy * age2675);
        txtPolicy.Text = tempPolicy.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
1
Gpt3D_Clone54_1.cs 1 16
Gpt3D_Clone54_1.cs 17 44
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    StringBuilder sbOutFile = new StringBuilder ();
    Console.WriteLine ("DisplayName;IdentifyingNumber");
    sbOutFile.AppendLine ("Machine;DisplayName;Version");
    var registryInputFileReader = new RegistryInputFileReader(@"File_In/collectionMachines.txt");
    var registryReader = new RegistryReader(registry_key);
    var consoleWriter = new RegistryConsoleWriter(lines);
    var fileWriter = new RegistryFileWriter(sbOutFile);
    string [] lines = registryInputFileReader.ReadData();
    registryReader.ReadRegistryInformation(lines, registry_key, sbOutFile);
    consoleWriter.WriteToConsole(lines);
    fileWriter.WriteToFile(lines);
    Console.WriteLine ("Press enter to continue !");
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    StringBuilder sbOutFile = new StringBuilder ();
    Console.WriteLine ("DisplayName;IdentifyingNumber");
    sbOutFile.AppendLine ("Machine;DisplayName;Version");
    string [] lines = File.ReadAllLines (@"File_In/collectionMachines.txt");
    foreach (var machine in lines) {
        var registry_key = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
        using (Microsoft.Win32.RegistryKey key = RegistryKey.OpenRemoteBaseKey (RegistryHive.LocalMachine, machine).OpenSubKey (registry_key))
        {
            foreach (string subkey_name in key.GetSubKeyNames ()) {
                using (RegistryKey subkey = key.OpenSubKey (subkey_name))
                {
                    if (subkey.GetValue ("DisplayName") != null) {
                        Console.WriteLine (string.Format ("{0};{1};{2}", machine, subkey.GetValue ("DisplayName"), subkey.GetValue ("Version")));
                        sbOutFile.AppendLine (string.Format ("{0};{1};{2}", machine, subkey.GetValue ("DisplayName"), subkey.GetValue ("Version")));
                    }
                }}
        }}
    var fileOutName = string.Format (@"File_Out\{0}_{1}.csv", "Software_Inventory", DateTime.Now.ToString ("yyyy_MM_dd_HH_mmssfff"));
    using (var file = new System.IO.StreamWriter (fileOutName))
    {
        file.WriteLine (sbOutFile.ToString ());
    } Console.WriteLine ("Press enter to continue !");
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
2
Gpt3D_Clone54_2.cs 1 12
Gpt3D_Clone54_2.cs 13 40
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    StringBuilder sbOutFile = new StringBuilder ();
    Console.WriteLine ("DisplayName;IdentifyingNumber");
    sbOutFile.AppendLine ("Machine;DisplayName;Version");
    string [] lines = File.ReadAllLines (@"File_In/collectionMachines.txt");
    ReadRegistryInformation(lines, registry_key, sbOutFile);
    var fileOutName = string.Format (@"File_Out\{0}_{1}.csv", "Software_Inventory", DateTime.Now.ToString ("yyyy_MM_dd_HH_mmssfff"));
    WriteToFile (fileOutName, sbOutFile);
    Console.WriteLine ("Press enter to continue !");
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    StringBuilder sbOutFile = new StringBuilder ();
    Console.WriteLine ("DisplayName;IdentifyingNumber");
    sbOutFile.AppendLine ("Machine;DisplayName;Version");
    string [] lines = File.ReadAllLines (@"File_In/collectionMachines.txt");
    foreach (var machine in lines) {
        var registry_key = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
        using (Microsoft.Win32.RegistryKey key = RegistryKey.OpenRemoteBaseKey (RegistryHive.LocalMachine, machine).OpenSubKey (registry_key))
        {
            foreach (string subkey_name in key.GetSubKeyNames ()) {
                using (RegistryKey subkey = key.OpenSubKey (subkey_name))
                {
                    if (subkey.GetValue ("DisplayName") != null) {
                        Console.WriteLine (string.Format ("{0};{1};{2}", machine, subkey.GetValue ("DisplayName"), subkey.GetValue ("Version")));
                        sbOutFile.AppendLine (string.Format ("{0};{1};{2}", machine, subkey.GetValue ("DisplayName"), subkey.GetValue ("Version")));
                    }
                }}
        }}
    var fileOutName = string.Format (@"File_Out\{0}_{1}.csv", "Software_Inventory", DateTime.Now.ToString ("yyyy_MM_dd_HH_mmssfff"));
    using (var file = new System.IO.StreamWriter (fileOutName))
    {
        file.WriteLine (sbOutFile.ToString ());
    } Console.WriteLine ("Press enter to continue !");
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
2
Gpt3D_Clone552_2.cs 1 20
Gpt3D_Clone552_2.cs 21 61
----------------------------------------

private string [] splitString (string stringToSplit) {
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    int characterCount = 0;
    foreach (char character in stringToSplit.ToCharArray ()) {
        characterCount = characterCount + 1;
        if (character != ',') {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == stringToSplit.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray();
    return returnValue;
}
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
0
Gpt3D_Clone555_0.cs 1 8
Gpt3D_Clone555_0.cs 9 24
----------------------------------------

static void Main (string [] args) {
    string libreOfficePath = getLibreOfficePath();
    ProcessStartInfo procStartInfo = new ProcessStartInfo (libreOfficePath, string.Format (CreateParamString (args)));
    SetProcessStartInfoProperties(procStartInfo);
    Process process = new Process () {StartInfo = procStartInfo,};
    ExecuteProcess(process);
    ValidateProcessExitCode(process);
}
----------------------------------------

static void Main (string [] args) {
    string libreOfficePath = getLibreOfficePath ();
    ProcessStartInfo procStartInfo = new ProcessStartInfo (libreOfficePath, string.Format ("--convert-to pdf --nologo {0}", args [0]));
    procStartInfo.RedirectStandardOutput = true;
    procStartInfo.UseShellExecute = false;
    procStartInfo.CreateNoWindow = true;
    procStartInfo.WorkingDirectory = Environment.CurrentDirectory;
    Process process = new Process () {StartInfo = procStartInfo,};
    process.Start ();
    process.WaitForExit ();
    if (process.ExitCode != 0) {
        throw new LibreOfficeFailedException (process.ExitCode);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
1
Gpt3D_Clone555_1.cs 1 14
Gpt3D_Clone555_1.cs 15 19
----------------------------------------

static void Main (string [] args) {
    string libreOfficePath = getLibreOfficePath ();
    ProcessStartInfo procStartInfo = new ProcessStartInfo (libreOfficePath, string.Format ("--convert-to pdf --nologo {0}", args [0]));
    procStartInfo.RedirectStandardOutput = true;
    procStartInfo.UseShellExecute = false;
    procStartInfo.CreateNoWindow = true;
    procStartInfo.WorkingDirectory = Environment.CurrentDirectory;
    Process process = new Process () {StartInfo = procStartInfo,};
    process.Start ();
    process.WaitForExit ();
    if (process.ExitCode != 0) {
        throw new LibreOfficeFailedException (process.ExitCode);
    }
}
----------------------------------------

static void Main (string [] args) {
    RunConversionProcess(args);    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
558
1
Gpt3D_Clone558_1.cs 1 20
Gpt3D_Clone558_1.cs 21 28
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    var tableAttrs = tableType.GetCustomAttributes (typeof (TableAttribute), false);
    if (tableAttrs.Length > 0)
        tableName = ((TableAttribute) tableAttrs [0]).Name;
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        var attrs = prop.GetCustomAttributes (typeof (DisplayAttribute), false);
        if (attrs.Length > 0)
            SetColumnDescription (tableName, prop.Name, ((DisplayAttribute) attrs [0]).Name);
    }
}
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    string tableName = GetTableNameFromRegex (fullTableName);
    tableName = GetTableNameFromTableAttribute (tableName, tableType);
    SetColumnDescriptionsFromValueTypeProperties (tableType, tableName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
558
2
Gpt3D_Clone558_2.cs 1 4
Gpt3D_Clone558_2.cs 5 26
----------------------------------------

private void SetTableDescriptions (TableType tableType) {
    TableName tableName = GetTableName(tableType);
    tableName.SetColumnDescriptionsFromValueTypeProperties();
}
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    var tableAttrs = tableType.GetCustomAttributes (typeof (TableAttribute), false);
    if (tableAttrs.Length > 0)
        tableName = ((TableAttribute) tableAttrs [0]).Name;
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        var attrs = prop.GetCustomAttributes (typeof (DisplayAttribute), false);
        if (attrs.Length > 0)
            SetColumnDescription (tableName, prop.Name, ((DisplayAttribute) attrs [0]).Name);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
2
Gpt3D_Clone560_2.cs 1 13
Gpt3D_Clone560_2.cs 14 26
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.EnumerateDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete (true);
    }
    catch (System.IO.IOException) {
    }
    catch (System.UnauthorizedAccessException) {
    }
    catch (System.Security.SecurityException) {
    }
}
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
568
0
Gpt3D_Clone568_0.cs 1 17
Gpt3D_Clone568_0.cs 18 36
----------------------------------------

public static Bitmap ResizeImage (Image image, int width, int height) {
    var destRect = new Rectangle (0, 0, width, height);
    var destImage = new Bitmap (width, height);
    destImage.SetResolution (image.HorizontalResolution, image.VerticalResolution);
    using (var graphics = Graphics.FromImage (destImage))
    {
        graphics.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;
        graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
        graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
        graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
        graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
        using (var wrapMode = new System.Drawing.Imaging.ImageAttributes ())
        {
            wrapMode.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);
            graphics.DrawImage (image, destRect, 0, 0, image.Width, image.Height, System.Drawing.GraphicsUnit.Pixel, wrapMode);
        }} return destImage;
}
----------------------------------------

public static Bitmap ResizeImage (Image image, int width, int height) {
    var destRect = new Rectangle (0, 0, width, height);
    var destImage = new Bitmap (width, height);
    destImage.SetResolution (image.HorizontalResolution, image.VerticalResolution);
    using (var graphics = Graphics.FromImage (destImage))
    {
        graphics.CompositingMode = CompositingMode.SourceCopy;
        graphics.CompositingQuality = CompositingQuality.HighQuality;
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.SmoothingMode = SmoothingMode.HighQuality;
        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
        using (var wrapMode = new ImageAttributes ())
        {
            wrapMode.SetWrapMode (WrapMode.TileFlipXY);
            graphics.DrawImage (image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
        }} return destImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
568
1
Gpt3D_Clone568_1.cs 1 17
Gpt3D_Clone568_1.cs 18 36
----------------------------------------

public static System.Drawing.Bitmap ResizeImage (System.Drawing.Image image, int width, int height) {
    var destRect = new System.Drawing.Rectangle (0, 0, width, height);
    var destImage = new System.Drawing.Bitmap (width, height);
    destImage.SetResolution (image.HorizontalResolution, image.VerticalResolution);
    using (var graphics = System.Drawing.Graphics.FromImage (destImage))
    {
        graphics.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;
        graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
        graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
        graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
        graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
        using (var wrapMode = new System.Drawing.Imaging.ImageAttributes ())
        {
            wrapMode.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);
            graphics.DrawImage (image, destRect, 0, 0, image.Width, image.Height, System.Drawing.GraphicsUnit.Pixel, wrapMode);
        }} return destImage;
}
----------------------------------------

public static Bitmap ResizeImage (Image image, int width, int height) {
    var destRect = new Rectangle (0, 0, width, height);
    var destImage = new Bitmap (width, height);
    destImage.SetResolution (image.HorizontalResolution, image.VerticalResolution);
    using (var graphics = Graphics.FromImage (destImage))
    {
        graphics.CompositingMode = CompositingMode.SourceCopy;
        graphics.CompositingQuality = CompositingQuality.HighQuality;
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.SmoothingMode = SmoothingMode.HighQuality;
        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
        using (var wrapMode = new ImageAttributes ())
        {
            wrapMode.SetWrapMode (WrapMode.TileFlipXY);
            graphics.DrawImage (image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
        }} return destImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
1
Gpt3D_Clone577_1.cs 1 10
Gpt3D_Clone577_1.cs 11 20
----------------------------------------

public static string GetMessage (Exception i_oException, string i_sCulture) {
    CultureInfo oCultureInfo = null;
    try {
        oCultureInfo = new CultureInfo (i_sCulture);
    }
    catch {
        oCultureInfo = CultureInfo.InvariantCulture;
    }
    return GetMessage (i_oException, oCultureInfo);
}
----------------------------------------

public static string GetMessage (Exception i_oException, string i_sCulture) {
    try {  
        return GetMessage (i_oException, new CultureInfo (i_sCulture));
    }
    catch {
        return GetMessage (i_oException, CultureInfo.InvariantCulture);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
0
Gpt3D_Clone57_0.cs 1 10
Gpt3D_Clone57_0.cs 11 24
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null) 
        return int.MinValue;
    int result = StringComparer.CurrentCulture.Compare (x.name, y.name);
    if (result == 0) 
        result = x.date.CompareTo (y.date);
    if (result == 0)
        result = x.counter.CompareTo (y.counter);
    return result;
}
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return StringComparer.CurrentCulture.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.CompareTo (y.date);
    else if (x.counter != y.counter)
        return x.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
1
Gpt3D_Clone57_1.cs 1 12
Gpt3D_Clone57_1.cs 13 23
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return StringComparer.CurrentCulture.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.CompareTo (y.date);
    else if (x.counter != y.counter)
        return x.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name == y.name && x.date == y.date && x.counter == y.counter)
        return 0;
    return StringComparer.CurrentCulture.Compare (x.name, y.name) != 0 ?
        StringComparer.CurrentCulture.Compare (x.name, y.name) : 
        (x.date != y.date ?  x.date.CompareTo (y.date) : x.counter.CompareTo (y.counter));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
0
Gpt3D_Clone583_0.cs 1 21
Gpt3D_Clone583_0.cs 22 34
----------------------------------------

public static string GetString(object value) 
{
    string result;
    if (value is string s)
    {
        result = s;
    } 
    else if (value is System.Collections.IDictionary d)
    {
        result = GetString(d);
    }
    else if (value is System.Collections.IEnumerable e)
    {
        result = GetString(e);
    }
    else
    {
        result = value.ToString();
    }
    return result;
}
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
3
Gpt3D_Clone583_3.cs 1 11
Gpt3D_Clone583_3.cs 12 24
----------------------------------------

public static string GetString(object value) {
    if (value is string) {
        return (string)value;
    } else if (value is System.Collections.IDictionary) {
        return GetString((System.Collections.IDictionary)value);
    } else if (value is System.Collections.IEnumerable) {
        return GetString((System.Collections.IEnumerable)value);
    } else {
        return value.ToString();
    }
}
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
3
Gpt3D_Clone585_3.cs 1 10
Gpt3D_Clone585_3.cs 11 25
----------------------------------------

public bool Equals (int [] x, int [] y) {
	if (x == null || y == null || x.Length != y.Length)
		return false;
	for (int i = 0; i < x.Length; i++)
		if (x[i] != y[i])
			return false;
	return true;
}
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (Object.ReferenceEquals (x, y))
        return true;
    if (Object.ReferenceEquals (x, null) || Object.ReferenceEquals (y, null))
        return false;
    if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i ++) {
        if (x [i] != y [i])
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
0
Gpt3D_Clone5_0.cs 1 13
Gpt3D_Clone5_0.cs 14 27
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty > ; 
    if (target == null || newVal == null) {
        return;
    }
  
    target.SetResourceReference(newVal.Item2, newVal.Item1);
    if (newVal.Item1 == null){
        target.ClearValue(newVal.Item2);
        newVal.Item2.GetMetadata().DefaultValue;
    }
}
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
0
Gpt3D_Clone601_0.cs 1 29
Gpt3D_Clone601_0.cs 30 81
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = null;
    Stream outStream = null;
    try {
        inStream = File.OpenRead (srcFile);
        outStream = File.OpenWrite (dstFile);
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    } catch (Exception ex) { 
        // handle any exception
    } finally { 
        if (inStream != null) { 
            inStream.Close();
        }
        if (outStream != null) {
            outStream.Close();
        }
    }
}
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }}
#====================
#gpt output=============
// Type 3 
private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = null;
    Stream outStream = null;
    try {
        inStream = File.OpenRead (srcFile);
        outStream = File.OpenWrite (dstFile);
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    } catch (Exception ex) { 
        // handle any exception
    } finally { 
        if (inStream != null) { 
            inStream.Close();
        }
        if (outStream != null) {
            outStream.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
1
Gpt3D_Clone601_1.cs 1 50
Gpt3D_Clone601_1.cs 51 102
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }}
#====================
#gpt output=============
// Type 3 
private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = null;
    Stream outStream = null;
    try {
        inStream = File.OpenRead (srcFile);
        outStream = File.OpenWrite (dstFile);
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    } catch (Exception ex) { 
        // handle any exception
    } finally { 
        if (inStream != null) { 
            inStream.Close();
        }
        if (outStream != null) {
            outStream.Close();
        }
    }
}
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }}
#====================
#gpt output=============
// Type 3 
private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = null;
    Stream outStream = null;
    try {
        inStream = File.OpenRead (srcFile);
        outStream = File.OpenWrite (dstFile);
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    } catch (Exception ex) { 
        // handle any exception
    } finally { 
        if (inStream != null) { 
            inStream.Close();
        }
        if (outStream != null) {
            outStream.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
2
Gpt3D_Clone601_2.cs 1 50
Gpt3D_Clone601_2.cs 51 59
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }}
#====================
#gpt output=============
// Type 3 
private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = null;
    Stream outStream = null;
    try {
        inStream = File.OpenRead (srcFile);
        outStream = File.OpenWrite (dstFile);
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    } catch (Exception ex) { 
        // handle any exception
    } finally { 
        if (inStream != null) { 
            inStream.Close();
        }
        if (outStream != null) {
            outStream.Close();
        }
    }
}
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = File.OpenRead (srcFile);
    Stream outStream = File.OpenWrite (dstFile);
    copyHelper(inStream, outStream, offset, length, buffer);
    inStream.Close();
    outStream.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
3
Gpt3D_Clone601_3.cs 1 50
Gpt3D_Clone601_3.cs 51 59
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }}
#====================
#gpt output=============
// Type 3 
private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = null;
    Stream outStream = null;
    try {
        inStream = File.OpenRead (srcFile);
        outStream = File.OpenWrite (dstFile);
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    } catch (Exception ex) { 
        // handle any exception
    } finally { 
        if (inStream != null) { 
            inStream.Close();
        }
        if (outStream != null) {
            outStream.Close();
        }
    }
}
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    Stream inStream = File.OpenRead (srcFile);
    Stream outStream = File.OpenWrite (dstFile);
    copyHelper(inStream, outStream, offset, length, buffer);
    inStream.Close();
    outStream.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
0
Gpt3D_Clone602_0.cs 1 17
Gpt3D_Clone602_0.cs 18 28
----------------------------------------

public static long fibo_n (long N) {
    long prev1 = 0, prev2 = 0, result = 0;
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    dev1 = 0;
    dev2 = 1;
    for (long i = 2; i <= N; i++) {
        result = prev1 + prev2;
        prev2 = prev1;
        prev1 = result;
    }
    return result;
}
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
1
Gpt3D_Clone602_1.cs 1 16
Gpt3D_Clone602_1.cs 17 27
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    switch (N) {
        case 2: 
            return 1;
        case 3: 
            return 1;
        case 4: 
            return 2;
        default: 
            return fibo_n (N - 1) + fibo_n (N - 2);
    }
}
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
605
0
Gpt3D_Clone605_0.cs 1 4
Gpt3D_Clone605_0.cs 5 20
----------------------------------------

public static bool ChainNotNull<TFirst, TSecond, TThird, TFourth>(TFirst item1, Func<TFirst, TSecond> getItem2, Func<TSecond, TThird> getItem3, Func<TThird, TFourth> getItem4)
{
    return (item1 != null) && (getItem2(item1) != null) && (getItem3(getItem2(item1)) != null) && (getItem4(getItem3(getItem2(item1))) != null);
}
----------------------------------------

public static bool ChainNotNull < TFirst, TSecond, TThird, TFourth > (TFirst item1, Func < TFirst, TSecond > getItem2, Func < TSecond, TThird > getItem3, Func < TThird, TFourth > getItem4) {
    if (item1 == null)
        return false;
    var item2 = getItem2 (item1);
    if (item2 == null)
        return false;
    var item3 = getItem3 (item2);
    if (item3 == null)
        return false;
    var item4 = getItem4 (item3);
    if (item4 == null)
        return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
605
1
Gpt3D_Clone605_1.cs 1 4
Gpt3D_Clone605_1.cs 5 20
----------------------------------------

public static bool ChainNotNull<TFirst, TSecond, TThird, TFourth>(TFirst item1, Func<TFirst, TSecond> getItem2, Func<TSecond, TThird> getItem3, Func<TThird, TFourth> getItem4)
{
    return item1?.getItem2()?.getItem3()?.getItem4() != null;
}
----------------------------------------

public static bool ChainNotNull < TFirst, TSecond, TThird, TFourth > (TFirst item1, Func < TFirst, TSecond > getItem2, Func < TSecond, TThird > getItem3, Func < TThird, TFourth > getItem4) {
    if (item1 == null)
        return false;
    var item2 = getItem2 (item1);
    if (item2 == null)
        return false;
    var item3 = getItem3 (item2);
    if (item3 == null)
        return false;
    var item4 = getItem4 (item3);
    if (item4 == null)
        return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
0
Gpt3D_Clone60_0.cs 1 13
Gpt3D_Clone60_0.cs 14 23
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainder = this.dateTimePicker1.Value.Minute % 5;
    switch (remainder) {
        case 0:
            return;
        case 1:
            this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
            break;
        case 4:
            this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
            break;
    }
}
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
1
Gpt3D_Clone60_1.cs 1 8
Gpt3D_Clone60_1.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainder = this.dateTimePicker1.Value.Minute % 5;
    if (remainder == 0)
        return;
    else if (remainder == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    else if (remainder == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
2
Gpt3D_Clone60_2.cs 1 7
Gpt3D_Clone60_2.cs 8 17
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainder = this.dateTimePicker1.Value.Minute % 5;
    if (remainder == 0)
        return;
    if (remainder == 1 || remainder == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes ( remainder == 1 ? 4 : -4);
}
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
3
Gpt3D_Clone60_3.cs 1 7
Gpt3D_Clone60_3.cs 8 17
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainder = this.dateTimePicker1.Value.Minute % 5;
    if (remainder == 0 || remainder == 3)
        return;
    int minutesToAdd = remainder == 1 ? 4 : -4;
    this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (minutesToAdd);
}
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
0
Gpt3D_Clone610_0.cs 1 18
Gpt3D_Clone610_0.cs 19 33
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
   
    int numOfLists = list.Count;
    int firstListCount = list[0].Count;
    
    T[,] result = new T[numOfLists, firstListCount];
    for (int i = 0; i < numOfLists; i ++) {
        if (list[i].Count != firstListCount)
            throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
        
        for (int j = 0; j < firstListCount; j ++) {           
            result[i, j] = list[i][j];
        } 
    } 
    return result;
}
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
0
Gpt3D_Clone612_0.cs 1 21
Gpt3D_Clone612_0.cs 22 51
----------------------------------------

private bool uploadImage(ref Bitmap p) {
    using (SqlConnection con = new SqlConnection()) {
        con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings("ConnStringHere").ConnectionString;
        using (SqlCommand cmd = new SqlCommand())
        {
            cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
            cmd.CommandType = CommandType.Text;
            cmd.Connection = con;
            con.Open();
            if (IsImageValid(p, out byte[] data))
            {
                SqlParameter pFile1 = new SqlParameter("@File2", SqlDbType.Image);
                pFile1.Value = data;
                cmd.Parameters.Add(pFile1);
                int result = cmd.ExecuteNonQuery();
                return result > 0 ? true : false;
            }
        }
    }
    return false;
}
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
0
Gpt3D_Clone620_0.cs 1 12
Gpt3D_Clone620_0.cs 13 23
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner3, Action < T > op) where T : class {
    int attempts = 0;
    bool done = false;
    while (!done && attempts < 3) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner3 (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            done = true;
        attempts++;
    }
}
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
1
Gpt3D_Clone623_1.cs 1 19
Gpt3D_Clone623_1.cs 20 34
----------------------------------------

public String ReadCookie(string strCookieName) 
{ 
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) 
    {
        if (string.Equals(strCookie, strCookieName, StringComparison.InvariantCultureIgnoreCase)) 
        {
            return HttpContext.Current.Response.Cookies[strCookie].Value; 
        }
    } 
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) 
    {
        if (string.Equals(strCookie, strCookieName, StringComparison.InvariantCultureIgnoreCase)) 
        {
            return HttpContext.Current.Request.Cookies[strCookie].Value; 
        }
    } 
    return String.Empty; 
}
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
0
Gpt3D_Clone630_0.cs 1 11
Gpt3D_Clone630_0.cs 12 31
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words, StringComparer.InvariantCulture);
    File.WriteAllLines(@"the path here for the .txt", words);
}
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
63
0
Gpt3D_Clone63_0.cs 1 19
Gpt3D_Clone63_0.cs 20 31
----------------------------------------

protected void InitializeList (string sql) {
    DataHandler dh = null;
    DataTable dt = null;
    try {
        dh = new DataHandler ();
        dt = dh.RetrieveData (sql);
        if (dt != null) {
            this.InitializeList (dt);
        }
    } finally {
        if (dt != null) {
            dt.Dispose ();
        }
        dt = null;
        if (dh != null) {
           dh = null;
        }
    } 
}
----------------------------------------

protected void InitializeList (string sql) {
    DataHandler dh = new DataHandler ();
    DataTable dt = dh.RetrieveData (sql);
    if (dt != null) {
        this.InitializeList (dt);
        dt.Dispose ();
    }
    dt = null;
    dh = null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
63
2
Gpt3D_Clone63_2.cs 1 9
Gpt3D_Clone63_2.cs 10 21
----------------------------------------

protected void InitializeList (string sql) {
    using(DataHandler dh = new DataHandler ()) {
        using (DataTable dt = dh.RetrieveData (sql)) {
            if (dt != null) {
                this.InitializeList (dt);
            }
        }
    }
}
----------------------------------------

protected void InitializeList (string sql) {
    DataHandler dh = new DataHandler ();
    DataTable dt = dh.RetrieveData (sql);
    if (dt != null) {
        this.InitializeList (dt);
        dt.Dispose ();
    }
    dt = null;
    dh = null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
63
3
Gpt3D_Clone63_3.cs 1 9
Gpt3D_Clone63_3.cs 10 21
----------------------------------------

protected void InitializeList (string sql) {
    using (DataHandler dh = new DataHandler ()) {
        using (DataTable dt = dh.RetrieveData (sql)) {
            if (dt != null) {
                this.InitializeList (dt);
            }
        }
    }
}
----------------------------------------

protected void InitializeList (string sql) {
    DataHandler dh = new DataHandler ();
    DataTable dt = dh.RetrieveData (sql);
    if (dt != null) {
        this.InitializeList (dt);
        dt.Dispose ();
    }
    dt = null;
    dh = null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
653
0
Gpt3D_Clone653_0.cs 1 25
Gpt3D_Clone653_0.cs 26 42
----------------------------------------

public static void ProcessSQLScriptFile3 (string script) {
    var con = default(SqlConnection);
    var server = default(Server);
    try {
        con = new SqlConnection (Properties.Settings.Default.SQLConDefault);
        con.Open ();
        server = new Server (new ServerConnection (con));
        server.ConnectionContext.ExecuteNonQuery (script);
        con.Close ();
    }
    catch (SqlException e) {
        Console.WriteLine ("SQL Exception: " + e.Message);
    }
    catch (Exception e) {
        Console.WriteLine ("Exception: " + e.Message);
    }
    finally {
        if (con != null) {
            con.Dispose ();
        }
        if (server != null) {
            server.Dispose ();
        }
    }
}
----------------------------------------

public static void ProcessSQLScriptFile (string script) {
    try {
        SqlConnection con = new SqlConnection (Properties.Settings.Default.SQLConDefault);
        con.Open ();
        Server server = new Server (new ServerConnection (con));
        server.ConnectionContext.ExecuteNonQuery (script);
        con.Close ();
    }
    catch (SqlException e) {
        Console.WriteLine ("SQL Exception: " + e.Message);
    }
    catch (Exception e) {
        Console.WriteLine ("Exception: " + e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
653
1
Gpt3D_Clone653_1.cs 1 15
Gpt3D_Clone653_1.cs 16 27
----------------------------------------

public static void ProcessSQLScriptFile (string script) {
    try {
        SqlConnection con = new SqlConnection (Properties.Settings.Default.SQLConDefault);
        con.Open ();
        Server server = new Server (new ServerConnection (con));
        server.ConnectionContext.ExecuteNonQuery (script);
        con.Close ();
    }
    catch (SqlException e) {
        Console.WriteLine ("SQL Exception: " + e.Message);
    }
    catch (Exception e) {
        Console.WriteLine ("Exception: " + e.Message);
    }
}
----------------------------------------

public static void ProcessSQLScriptFile4 (string script) {
    using (var con = default(SqlConnection)) {
        con = new SqlConnection (Properties.Settings.Default.SQLConDefault);
        con.Open ();
        using (var server = new Server (new ServerConnection (con))) {
            server.ConnectionContext.ExecuteNonQuery (script);
            con.Close ();           
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
0
Gpt3D_Clone65_0.cs 1 14
Gpt3D_Clone65_0.cs 15 34
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StringBuilder bodyText = new StringBuilder();
    using (StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream))
    {
        string line;
        while ((line = reader.ReadLine()) != null)
            bodyText.Append(line);
    }
    if (bodyText.Length == 0) {
        return null;
    }
    return JsonValue.Parse (bodyText.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
0
Gpt3D_Clone662_0.cs 1 16
Gpt3D_Clone662_0.cs 17 32
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        return;
    }
    int listSize = items.Count();
    for (int i = startIndex; i < listSize; i ++) {
        var item = items.ElementAt (i);
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        var nextCombo = EnumerateCombos (items, currentCombo, i + 1, threshold);
        foreach (var combo in nextCombo) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
0
Gpt3D_Clone667_0.cs 1 20
Gpt3D_Clone667_0.cs 21 42
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    string logFilePath = "C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    
    CheckAndCreateDirectory(Path.GetDirectoryName(logFilePath));
    if (! File.Exists (logFilePath)) {
        fileStream = File.Create (logFilePath);
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    using (log = new StreamWriter (fileStream)) 
    {
        log.WriteLine (strLog);
        log.Close ();
    }
}
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
671
0
Gpt3D_Clone671_0.cs 1 8
Gpt3D_Clone671_0.cs 9 21
----------------------------------------

public void SelectFiles () {
    SelectedFileText.Text = "";
    List < string > files = GetFilenameList ();
    foreach (string filename in files) {
        SelectedFileText.Text += filename + "\n";
        uploadFileList.Add (filename);
    }
}
----------------------------------------

public void SelectFiles () {
    int i;
    SelectedFileText.Text = "";
    dlg = new Microsoft.Win32.OpenFileDialog ();
    dlg.Multiselect = true;
    Nullable < bool > result = dlg.ShowDialog ();
    foreach (String filename in dlg.FileNames) {
        SelectedFileText.Text += filename + "\n";
        uploadFileList.Add (filename);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
0
Gpt3D_Clone675_0.cs 1 18
Gpt3D_Clone675_0.cs 19 32
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    List < T > group = new List < T > ();
    foreach (T item in source) {
        group.Add (item);
        if (group.Count == size) {
            yield return group;
            group = new List < T > ();
        }
    }
    if (group.Count > 0) 
        yield return group;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
1
Gpt3D_Clone675_1.cs 1 12
Gpt3D_Clone675_1.cs 13 32
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    Queue < T > group = new Queue < T > (size);
    foreach (T item in source) {
        group.Enqueue (item);
        if (group.Count == size) {
            yield return group;
            group = new Queue < T > (size);
        }
    }
    if (group.Count > 0) 
        yield return group;
}
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
2
Gpt3D_Clone676_2.cs 1 12
Gpt3D_Clone676_2.cs 13 22
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        lock (this) {
            dr ["value"] = dr ["id"] + " new value";
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
0
Gpt3D_Clone682_0.cs 1 21
Gpt3D_Clone682_0.cs 22 46
----------------------------------------

public static void Main (string [] args) {
    Test.checkInt (100);
    Test.checkMax (100);
    Test.checkMin (100);
    Test.checkInt (-50);
    Test.checkMax (-50);
    Test.checkMin (-50);
    Test.checkInt (200);
    Test.checkMax (200);
    Test.checkMin (200);
    Test.checkInt (2000);
    Test.checkMax (2000);
    Test.checkMin (2000);
    Test.checkInt (-1000);
    Test.checkMax (-1000);
    Test.checkMin (-1000);
    Test.checkInt (-2000);
    Test.checkMax (-2000);
    Test.checkMin (-2000);
}
----------------------------------------

public static void Main (string [] args) {
    Test.checkInt (1);
    Test.checkMax (1);
    Test.checkMin (1);
    Test.checkInt (10);
    Test.checkMax (10);
    Test.checkMin (10);
    Test.checkInt (20);
    Test.checkMax (20);
    Test.checkMin (20);
    Test.checkInt (30);
    Test.checkMax (30);
    Test.checkMin (30);
    Test.checkInt (254);
    Test.checkMax (254);
    Test.checkMin (254);
    Test.checkInt (255);
    Test.checkMax (255);
    Test.checkMin (255);
    Test.checkInt (256);
    Test.checkMax (256);
    Test.checkMin (256);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
1
Gpt3D_Clone682_1.cs 1 7
Gpt3D_Clone682_1.cs 8 32
----------------------------------------

public static void Main (string [] args) {
    foreach (var num in new int [] {1, 10, 20, 30, 254, 255, 256}) {
        Test.checkInt (num);
        Test.checkMax (num);
        Test.checkMin (num);
    }
}
----------------------------------------

public static void Main (string [] args) {
    Test.checkInt (1);
    Test.checkMax (1);
    Test.checkMin (1);
    Test.checkInt (10);
    Test.checkMax (10);
    Test.checkMin (10);
    Test.checkInt (20);
    Test.checkMax (20);
    Test.checkMin (20);
    Test.checkInt (30);
    Test.checkMax (30);
    Test.checkMin (30);
    Test.checkInt (254);
    Test.checkMax (254);
    Test.checkMin (254);
    Test.checkInt (255);
    Test.checkMax (255);
    Test.checkMin (255);
    Test.checkInt (256);
    Test.checkMax (256);
    Test.checkMin (256);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
2
Gpt3D_Clone682_2.cs 1 5
Gpt3D_Clone682_2.cs 6 30
----------------------------------------

public static void Main (string [] args) {
    Test.checkNumbers (1, 10, 20, 30, 254, 255, 256);
    Test.checkMax (1, 10, 20, 30, 254, 255, 256);
    Test.checkMin (1, 10, 20, 30, 254, 255, 256);
}
----------------------------------------

public static void Main (string [] args) {
    Test.checkInt (1);
    Test.checkMax (1);
    Test.checkMin (1);
    Test.checkInt (10);
    Test.checkMax (10);
    Test.checkMin (10);
    Test.checkInt (20);
    Test.checkMax (20);
    Test.checkMin (20);
    Test.checkInt (30);
    Test.checkMax (30);
    Test.checkMin (30);
    Test.checkInt (254);
    Test.checkMax (254);
    Test.checkMin (254);
    Test.checkInt (255);
    Test.checkMax (255);
    Test.checkMin (255);
    Test.checkInt (256);
    Test.checkMax (256);
    Test.checkMin (256);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
686
0
Gpt3D_Clone686_0.cs 1 19
Gpt3D_Clone686_0.cs 20 32
----------------------------------------

// De-tangling the loop-statements and moving the local variable declarations out of the method body
static Type CreateEmailType ()
{
    AssemblyName assemblyName;
    AssemblyBuilder assemblyBuilder;
    ModuleBuilder moduleBuilder;
    TypeBuilder typeBuilder;
    Type createdType;
    assemblyName = new AssemblyName("DynamicAssembly");
    assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);
    
    moduleBuilder = assemblyBuilder.DefineDynamicModule(assemblyName.Name);
    typeBuilder = moduleBuilder.DefineType("Email", (TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.SequentialLayout | TypeAttributes.Serializable), typeof(ValueType));
    CreateEmailTypeFields(typeBuilder);
    createdType = typeBuilder.CreateType();
    return createdType;
}
----------------------------------------

static Type CreateEmailType () {
    var assemblyName = new AssemblyName ("DynamicAssembly");
    var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly (assemblyName, AssemblyBuilderAccess.Run);
    var moduleBuilder = assemblyBuilder.DefineDynamicModule (assemblyName.Name);
    var typeBuilder = moduleBuilder.DefineType ("Email", (TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.SequentialLayout | TypeAttributes.Serializable), typeof (ValueType));
    typeBuilder.DefineField ("From", typeof (string), FieldAttributes.Public);
    typeBuilder.DefineField ("To", typeof (string), FieldAttributes.Public);
    typeBuilder.DefineField ("Subject", typeof (string), FieldAttributes.Public);
    typeBuilder.DefineField ("Body", typeof (string), FieldAttributes.Public);
    return typeBuilder.CreateType ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
1
Gpt3D_Clone689_1.cs 1 24
Gpt3D_Clone689_1.cs 25 51
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    bool result = true;
    foreach (var rule in rules) {
        IComparable value;
        object limit;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int comparisonResult = value.CompareTo (limit);
        switch (rule.ComparisonOperator) {
            case "equal":   result = (result && comparisonResult == 0);  break;
            case "greater_than": result = (result && comparisonResult > 0);  break;
            default: throw new InvalidOperationException ("invalid operator");
       }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
3
Gpt3D_Clone689_3.cs 1 10
Gpt3D_Clone689_3.cs 11 36
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        int comparisonResult = GetComparisonResult (rule, user);
        bool operationResult = CalculateOperationResult (rule, comparisonResult);
        
        if (! operationResult)
            return false;
    }
    return true;
}
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
1
Gpt3D_Clone690_1.cs 1 15
Gpt3D_Clone690_1.cs 16 28
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    int temp = year;
    for (int digit = 4; digit > 0; -- digit) {
        int nibble = temp % 10;
        bcd |= nibble << ((digit - 1) * 4);
        temp /= 10;
    }
    byte [] result = new byte[2];
    result[0] = (byte) ((bcd >> 8) & 0xff);
    result[1] = (byte) (bcd & 0xff);
    return result;
}
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    for (int digit = 0; digit < 4; ++ digit) {
        int nibble = year % 10;
        bcd |= nibble << (digit * 4);
        year /= 10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
699
1
Gpt3D_Clone699_1.cs 1 15
Gpt3D_Clone699_1.cs 16 32
----------------------------------------

public static void DisplayIPAddresses () {
    StringBuilder sb = new StringBuilder ();
    NetworkInterface [] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces ();
    for (int i = 0; i < networkInterfaces.Length; i++) {
        IPInterfaceProperties properties = networkInterfaces[i].GetIPProperties ();
        for (int j = 0; j < properties.UnicastAddresses.Count; j++) {
            if (properties.UnicastAddresses[j].Address.AddressFamily != AddressFamily.InterNetwork)
                continue;
            if (IPAddress.IsLoopback (properties.UnicastAddresses[j].Address))
                continue;
            sb.AppendLine (properties.UnicastAddresses[j].Address.ToString () + " (" + networkInterfaces[i].Name + ")");
        }
    }
    MessageBox.Show (sb.ToString ());
}
----------------------------------------

public static void DisplayIPAddresses () {
    StringBuilder sb = new StringBuilder ();
    NetworkInterface [] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces ();
    foreach (NetworkInterface network in networkInterfaces) {
        IPInterfaceProperties properties = network.GetIPProperties ();
        foreach (IPAddressInformation address in properties.UnicastAddresses) {
            if (address.Address.AddressFamily != AddressFamily.InterNetwork)
                continue;
            if (IPAddress.IsLoopback (address.Address))
                continue;
            sb.AppendLine (address.Address.ToString () + " (" + network.Name + ")");
        }
    }
    MessageBox.Show (sb.ToString ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
6
0
Gpt3D_Clone6_0.cs 1 15
Gpt3D_Clone6_0.cs 16 50
----------------------------------------

public override object ProvideValue (IServiceProvider serviceProvider) {
	var provideValueTargetService = (IProvideValueTarget) serviceProvider.GetService (typeof (IProvideValueTarget));
	if (provideValueTargetService == null)
		return null;
	if (provideValueTargetService.TargetObject != null && provideValueTargetService.TargetObject.GetType ().FullName == "System.Windows.SharedDp")
		return this;
	var targetObject = provideValueTargetService.TargetObject as FrameworkElement;
	var targetProperty = provideValueTargetService.TargetProperty as DependencyProperty;
	if (targetObject == null || targetProperty == null)
		return null;
	
	targetProperty.SetValue(targetObject, Path);
	return null;
}
----------------------------------------

public override object ProvideValue (IServiceProvider serviceProvider) {
    var provideValueTargetService = (IProvideValueTarget) serviceProvider.GetService (typeof (IProvideValueTarget));
    if (provideValueTargetService == null)
        return null;
    if (provideValueTargetService.TargetObject != null && provideValueTargetService.TargetObject.GetType ().FullName == "System.Windows.SharedDp")
        return this;
    var targetObject = provideValueTargetService.TargetObject as FrameworkElement;
    var targetProperty = provideValueTargetService.TargetProperty as DependencyProperty;
    if (targetObject == null || targetProperty == null)
        return null;
    var binding = new Binding ();
    binding.Path = this.Path;
    binding.XPath = this.XPath;
    binding.Mode = this.Mode;
    binding.UpdateSourceTrigger = this.UpdateSourceTrigger;
    binding.Converter = this.Converter;
    binding.ConverterParameter = this.ConverterParameter;
    binding.ConverterCulture = this.ConverterCulture;
    if (this.RelativeSource != null)
        binding.RelativeSource = this.RelativeSource;
    if (this.ElementName != null)
        binding.ElementName = this.ElementName;
    if (this.Source != null)
        binding.Source = this.Source;
    binding.FallbackValue = this.FallbackValue;
    var multiBinding = new MultiBinding ();
    multiBinding.Converter = HelperConverter.Current;
    multiBinding.ConverterParameter = targetProperty;
    multiBinding.Bindings.Add (binding);
    multiBinding.NotifyOnSourceUpdated = true;
    targetObject.SetBinding (ResourceBindingKeyHelperProperty, multiBinding);
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
0
Gpt3D_Clone704_0.cs 1 32
Gpt3D_Clone704_0.cs 33 48
----------------------------------------

private void ReDimSeatStates () { 
    int count = _SeatStates.Count;
    int firstCount = _SeatStates.First().Count;
    while (count < Rows) { 
        _SeatStates.Add (new List < SeatState > ()); 
        ++count; 
    } 
    if (firstCount < Columns) { 
        foreach (var columnList in _SeatStates) {
            int columnListCount = columnList.Count;
            while (columnListCount < Columns) {
                columnList.Add (SeatState.Empty);
                ++columnListCount; 
            }
        } 
    }
    count = _SeatStates.Count;
    while (count > Rows) {
        _SeatStates.RemoveAt (count-1); 
        --count; 
    } 
    firstCount = _SeatStates.First().Count;
    if (firstCount > Columns) {
        foreach (var columnList in _SeatStates) {
            int columnListCount = columnList.Count;
            while (columnListCount > Columns) { 
                columnList.RemoveAt (--columnListCount);
            }
        }
    }
}
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > ());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Add (SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (_SeatStates.Count - 1);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (columnList.Count - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
1
Gpt3D_Clone704_1.cs 1 21
Gpt3D_Clone704_1.cs 22 37
----------------------------------------

private void ReDimSeatStates () { 
    while (_SeatStates.Count < Rows) { 
        _SeatStates.Add (new List < SeatState > ());
    } 
    
    foreach (var columnList in _SeatStates) {
        while (columnList.Count < Columns) { 
            columnList.Add (SeatState.Empty);
        }
    }
    while (_SeatStates.Count > Rows) { 
        _SeatStates.RemoveAt (_SeatStates.Count - 1);
    } 
    foreach (var columnList in _SeatStates) {
        while (columnList.Count > Columns) {
            columnList.RemoveAt (columnList.Count - 1);
        }
    }
}
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > ());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Add (SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (_SeatStates.Count - 1);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (columnList.Count - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
2
Gpt3D_Clone704_2.cs 1 14
Gpt3D_Clone704_2.cs 15 26
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > ());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Add (SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (_SeatStates.Count - 1);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (columnList.Count - 1);
}
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > (Columns, SeatState.Empty));
    for (int i = 0; i < _SeatStates.Count; i++)
        if (_SeatStates[i].Count > Columns)
            _SeatStates[i].RemoveRange (Columns, _SeatStates[i].Count - Columns);
    if (_SeatStates.Count > Rows)
        _SeatStates.RemoveRange (Rows, _SeatStates.Count - Rows);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
3
Gpt3D_Clone704_3.cs 1 10
Gpt3D_Clone704_3.cs 11 26
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > (Columns, SeatState.Empty));
    _SeatStates.RemoveRange (Rows, _SeatStates.Count - Rows);
    foreach (var columnList in _SeatStates)
        if (columnList.Count > Columns)
            columnList.RemoveRange (Columns, columnList.Count - Columns);
}
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > ());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Add (SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (_SeatStates.Count - 1);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (columnList.Count - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
0
Gpt3D_Clone707_0.cs 1 17
Gpt3D_Clone707_0.cs 18 45
----------------------------------------

private static void AddToBackingStore (Dictionary < string, object > backingStore, string prefix, object value) {
    IDictionary < string, object > d = value as IDictionary < string, object >;
    if (d != null) {
        foreach (KeyValuePair < string, object > entry in d) {
            AddToBackingStore (backingStore, MakePropertyKey (prefix, entry.Key), entry.Value);
        }
        return;
    }
    IList l = value as IList;
    if (l != null) {
        for (int i = 0; i < l.Count; i ++) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, i), l [i]);
        }
        return;
    }
    backingStore [prefix] = value;
}
----------------------------------------

private static void AddToBackingStore (Dictionary < string, object > backingStore, string prefix, object value) {
    IDictionary genDict = value as IDictionary; // Type 3 code clone variant
    if (genDict != null) {
        foreach (DictionaryEntry entry in genDict) {
            AddToBackingStore (backingStore, MakePropertyKey (prefix, (string) entry.Key), entry.Value);
        }
        return;
    }
    IList l = value as IList;
    if (l != null) {
        for (int i = 0; i < l.Count; i ++) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, i), l [i]);
        }
        return;
    }
    ICollection genColl = value as ICollection; // Type 4 code clone variant
    if (genColl != null) {
        int count = 0;
        foreach (object valueObj in genColl) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, count), valueObj);
            count ++;
        }
        return;
    }
    backingStore [prefix] = value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
1
Gpt3D_Clone707_1.cs 1 26
Gpt3D_Clone707_1.cs 27 45
----------------------------------------

private static void AddToBackingStore (Dictionary < string, object > backingStore, string prefix, object value) {
    IDictionary genDict = value as IDictionary; // Type 3 code clone variant
    if (genDict != null) {
        foreach (DictionaryEntry entry in genDict) {
            AddToBackingStore (backingStore, MakePropertyKey (prefix, (string) entry.Key), entry.Value);
        }
        return;
    }
    IList l = value as IList;
    if (l != null) {
        for (int i = 0; i < l.Count; i ++) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, i), l [i]);
        }
        return;
    }
    ICollection genColl = value as ICollection; // Type 4 code clone variant
    if (genColl != null) {
        int count = 0;
        foreach (object valueObj in genColl) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, count), valueObj);
            count ++;
        }
        return;
    }
    backingStore [prefix] = value;
}
----------------------------------------

private static void AddToBackingStore (Dictionary < string, object > backingStore, string prefix, object value) {
    IDictionary < string, object > d = value as IDictionary < string, object >;
    if (d != null) {
        foreach (KeyValuePair < string, object > entry in d) {
            AddToBackingStore (backingStore, MakePropertyKey (prefix, entry.Key), entry.Value);
        }
        return;
    }
    IList l = value as IList;
    if (l != null) {
        for (int i = 0; i < l.Count; i ++) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, i), l [i]);
        }
        return;
    }
    backingStore [prefix] = value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
2
Gpt3D_Clone707_2.cs 1 15
Gpt3D_Clone707_2.cs 16 34
----------------------------------------

private static void AddToBackingStore (Dictionary < string, object > backingStore, string prefix, object value) {
    if (value is IDictionary < string, object >) {
        foreach (KeyValuePair < string, object > entry in (IDictionary < string, object >) value) {
            AddToBackingStore (backingStore, MakePropertyKey (prefix, entry.Key), entry.Value);
        }
        return;
    }
    if (value is IList) {
        for (int i = 0; i < ((IList) value).Count; i ++) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, i), ((IList) value) [i]);
        }
        return;
    }
    backingStore [prefix] = value;
}
----------------------------------------

private static void AddToBackingStore (Dictionary < string, object > backingStore, string prefix, object value) {
    IDictionary < string, object > d = value as IDictionary < string, object >;
    if (d != null) {
        foreach (KeyValuePair < string, object > entry in d) {
            AddToBackingStore (backingStore, MakePropertyKey (prefix, entry.Key), entry.Value);
        }
        return;
    }
    IList l = value as IList;
    if (l != null) {
        for (int i = 0; i < l.Count; i ++) {
            AddToBackingStore (backingStore, MakeArrayKey (prefix, i), l [i]);
        }
        return;
    }
    backingStore [prefix] = value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
0
Gpt3D_Clone721_0.cs 1 18
Gpt3D_Clone721_0.cs 19 32
----------------------------------------

private static int ParseNybble (char c) {
    int val;
    if (c >= '0' && c <= '9') {
        val = c - '0';
    }
    else if (c >= 'A' && c <= 'F') {
        val = c - 'A' + 10;
    }
    else if (c >= 'a' && c <= 'f') {
        val = c - 'a' + 10;
    }
    else
    {
        throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
    }
    return val;
}
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
1
Gpt3D_Clone721_1.cs 1 12
Gpt3D_Clone721_1.cs 13 33
----------------------------------------

 private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'a' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

private static int ParseNybble (char c) 
{
    int val;
    if (c >= '0' && c <= '9') {
        val = c - '0';
    }
    else if (c >= 'A' && c <= 'F') {
        val = c - 'A' + 10;
    }
    else if (c >= 'a' && c <= 'f') {
        val = c - 'a' + 10;
    }
    else
    {
        throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
    }
    return val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
2
Gpt3D_Clone721_2.cs 1 12
Gpt3D_Clone721_2.cs 13 26
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= 0x30 && c <= 0x39) {
        return c - 0x30;
    }
    if (c >= 0x41 && c <= 0x46) {
        return c - 0x41 + 10;
    }
    if (c >= 0x61 && c <= 0x66) {
        return c - 0x61 + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
3
Gpt3D_Clone721_3.cs 1 12
Gpt3D_Clone721_3.cs 13 26
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= 48 && c <= 57) {
        return c - 48;
    }
    if (c >= 65 && c <= 70) {
        return c - 65 + 10;
    }
    if (c >= 97 && c <= 102) {
        return c - 97 + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
725
1
Gpt3D_Clone725_1.cs 1 16
Gpt3D_Clone725_1.cs 17 38
----------------------------------------

[PermissionSetAttribute (SecurityAction.Demand, Name = "FullTrust")] public static WindowsImpersonationContext doImpersonation (string svcUserName, string domainName, string password) {
     dupeTokenHandle = IntPtr.Zero;
    int returnValue = LogonUser (svcUserName, domainName, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_WINNT50, ref tokenHandle);
    if (returnValue != NO_ERROR) {
        throw new Exception ("LogonUser failed with error code : " + GetError (returnValue));
    }
    bool retVal = DuplicateTokenEx (tokenHandle, SecurityImpersonation, out dupeTokenHandle);
    if (!retVal) {
        CloseHandle (tokenHandle);
        throw new Exception ("Exception thrown in trying to duplicate token.");
    } else {
        WindowsIdentity newId = WindowsIdentity.Impersonate (dupeTokenHandle);
        WindowsImpersonationContext impersonatedUser = newId.Impersonate ();
        return impersonatedUser;
    }
}
----------------------------------------

[PermissionSetAttribute (SecurityAction.Demand, Name = "FullTrust")] public static WindowsImpersonationContext doImpersonation (string svcUserName, string domainName, string password) {
    tokenHandle = IntPtr.Zero;
    dupeTokenHandle = IntPtr.Zero;
    bool returnValue = LogonUser (svcUserName, domainName, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_WINNT50, ref tokenHandle);
    if (returnValue == false) {
        int ret = Marshal.GetLastWin32Error ();
        if (ret != NO_ERROR)
            throw new Exception ("LogonUser failed with error code : " + GetError (ret));
    }
    bool retVal = DuplicateToken (tokenHandle, SecurityImpersonation, ref dupeTokenHandle);
    if (retVal == false) {
        CloseHandle (tokenHandle);
        throw new Exception ("Exception thrown in trying to duplicate token.");
    } else {
        bool bRetVal = DuplicateToken (tokenHandle, (int) SecurityImpersonation, ref dupeTokenHandle);
        newId = new WindowsIdentity (dupeTokenHandle);
        WindowsImpersonationContext impersonatedUser = newId.Impersonate ();
        return impersonatedUser;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
731
1
Gpt3D_Clone731_1.cs 1 12
Gpt3D_Clone731_1.cs 13 29
----------------------------------------

private void txt_miktar_TextChanged (object sender, TextChangedEventArgs e) {
    if ((sender as TextBox).Text.Length == 0) {
        return;
    }
    try {
        int adet = Convert.ToInt32 ((sender as TextBox).Text);
    }
    catch {
        (sender as TextBox).Text = (sender as TextBox).Text.Substring (0, (sender as TextBox).Text.Length - 1);
        (sender as TextBox).Select ((sender as TextBox).Text.Length, (sender as TextBox).Text.Length);
    }
}
----------------------------------------

private void txt_miktar_TextChanged (object sender, TextChangedEventArgs e) {
    if ((sender as TextBox).Text.Length < 1) {
        return;
    }
    try {
        int adet = Convert.ToInt32 ((sender as TextBox).Text);
    }
    catch {
        string s = "";
        s = (sender as TextBox).Text;
        s = s.Substring (0, s.Length - 1);
        (sender as TextBox).Text = s;
        (sender as TextBox).Select (s.Length, s.Length);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
0
Gpt3D_Clone735_0.cs 1 17
Gpt3D_Clone735_0.cs 18 28
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var components = propertyName.Split('.');
    if(components.Length <= 1)
    {
        accessor[propertyName] = value;
    }
    else
    {
        var currentProperty = components[0];
        for(int i = 1; i < components.Length; i++)
        {
            accessor = ObjectAccessor.Create(accessor[currentProperty]);
            currentProperty = components[i];
        }
        accessor[currentProperty] = value;
    }
}
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
2
Gpt3D_Clone735_2.cs 1 9
Gpt3D_Clone735_2.cs 10 20
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    string[] propertyNameParts = propertyName.Split('.').ToArray();
    int count = propertyNameParts.Length; 
    for(int i=0; i< count; i++)
    {
        accessor = ObjectAccessor.Create(accessor[propertyNameParts[i]]);
    }
    accessor[propertyNameParts.Last()] = value;      
}
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
3
Gpt3D_Clone735_3.cs 1 9
Gpt3D_Clone735_3.cs 10 19
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    string[] propertyNameParts = propertyName.Split('.');
    foreach (var pnPart in propertyNameParts)
    {
        accessor = ObjectAccessor.Create(accessor[pnPart]);
    }
    accessor[propertyNameParts.Last()] = value;      
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
0
Gpt3D_Clone738_0.cs 1 20
Gpt3D_Clone738_0.cs 21 38
----------------------------------------

public void Run () {
    System.Diagnostics.ProcessStartInfo ps = new System.Diagnostics.ProcessStartInfo ();
    ps.FileName = "netstat";
    ps.ErrorDialog = false;
    ps.Arguments = "-e 5";
    ps.CreateNoWindow = true;
    ps.UseShellExecute = false;
    ps.RedirectStandardOutput = true;
    ps.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
    using (System.Diagnostics.Process proc = new System.Diagnostics.Process ())
    {
        proc.StartInfo = ps;
        proc.EnableRaisingEvents = true;
        proc.Exited += new EventHandler (proc_Exited);
        proc.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler (proc_OutputDataReceived);
        proc.Start ();
        proc.BeginOutputReadLine ();
        proc.WaitForExit ();
    }
}
----------------------------------------

public void Run () {
    System.Diagnostics.Process p = new System.Diagnostics.Process ();
    p.StartInfo.FileName = "netstat";
    p.StartInfo.ErrorDialog = false;
    p.StartInfo.Arguments = "-e 5";
    p.StartInfo.CreateNoWindow = true;
    p.StartInfo.UseShellExecute = false;
    p.StartInfo.RedirectStandardOutput = true;
    p.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
    p.EnableRaisingEvents = true;
    p.Exited += new EventHandler (proc_Exited);
    p.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler (proc_OutputDataReceived);
    p.Start ();
    p.BeginOutputReadLine ();
    p.WaitForExit ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
1
Gpt3D_Clone738_1.cs 1 15
Gpt3D_Clone738_1.cs 16 37
----------------------------------------

public void Run () {
    System.Diagnostics.Process myProcess = new System.Diagnostics.Process();
    myProcess.StartInfo.FileName = "netstat";
    myProcess.StartInfo.Arguments = "-e 5";
    myProcess.StartInfo.UseShellExecute = false;
    myProcess.StartInfo.RedirectStandardOutput = true;
    myProcess.StartInfo.CreateNoWindow = true;
    myProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
    myProcess.EnableRaisingEvents = true;
    myProcess.Exited += new EventHandler(proc_Exited);
    myProcess.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(proc_OutputDataReceived);
    myProcess.Start();
    myProcess.BeginOutputReadLine();
    myProcess.WaitForExit();
}
----------------------------------------

public void Run () {
    System.Diagnostics.ProcessStartInfo ps = new System.Diagnostics.ProcessStartInfo ();
    ps.FileName = "netstat";
    ps.ErrorDialog = false;
    ps.Arguments = "-e 5";
    ps.CreateNoWindow = true;
    ps.UseShellExecute = false;
    ps.RedirectStandardOutput = true;
    ps.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
    using (System.Diagnostics.Process proc = new System.Diagnostics.Process ())
    {
        proc.StartInfo = ps;
        proc.EnableRaisingEvents = true;
        proc.Exited += new EventHandler (proc_Exited);
        proc.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler (proc_OutputDataReceived);
        proc.Start ();
        proc.BeginOutputReadLine ();
        proc.WaitForExit ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
741
0
Gpt3D_Clone741_0.cs 1 19
Gpt3D_Clone741_0.cs 20 37
----------------------------------------

private IEnumerable < object [] > GetAllParameterObjects (MethodInfo methodUnderTest) {
    var type = PropertyHost ?? methodUnderTest.DeclaringType;
    var property = type.GetProperty (_propertyName, BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy);
    if (property == null)
#====================
#gpt output=============
        yield break;
    // Eliminate duplicate parameters
    var uniqueParameters = property.GetIndexParameters ().Select (p => new { p.ParameterType, p.Name }).Distinct ();
    // Generate parameter objects
    foreach (var param in uniqueParameters) 
    {
        var value = Activator.CreateInstance (param.ParameterType);
        yield return new [] { param.Name, value };
    }
}
----------------------------------------

private IEnumerable < object [] > GetAllParameterObjects (MethodInfo methodUnderTest) {
    Type type; 
    if(PropertyHost == null)
    {
        type = methodUnderTest.DeclaringType;
    }
    else
    {
        type = PropertyHost;
    }
    var property = type.GetProperty (_propertyName, BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy);
    if (property == null)
        ThrowPropertyNotFound ();
    return property.GetValue(null, null) as IEnumerable<object[]>;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
741
1
Gpt3D_Clone741_1.cs 1 8
Gpt3D_Clone741_1.cs 9 29
----------------------------------------

private IEnumerable < object [] > GetAllParameterObjects (MethodInfo methodUnderTest) {
    var type = PropertyHost ?? methodUnderTest?.DeclaringType;
    var property = type?.GetProperty (_propertyName, BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy);
    if (property == null)
        ThrowPropertyNotFound ();
    return property?.GetValue(null, null) as IEnumerable<object[]>;
}
----------------------------------------

private IEnumerable < object [] > GetAllParameterObjects (MethodInfo methodUnderTest) {
    var type = PropertyHost ?? methodUnderTest.DeclaringType;
    var property = type.GetProperty (_propertyName, BindingFlags.Static | BindingFlags.Public | BindingFlags.FlattenHierarchy);
    if (property == null)
#====================
#gpt output=============
        yield break;
    // Eliminate duplicate parameters
    var uniqueParameters = property.GetIndexParameters ().Select (p => new { p.ParameterType, p.Name }).Distinct ();
    // Generate parameter objects
    foreach (var param in uniqueParameters) 
    {
        var value = Activator.CreateInstance (param.ParameterType);
        yield return new [] { param.Name, value };
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
2
Gpt3D_Clone742_2.cs 1 22
Gpt3D_Clone742_2.cs 23 64
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            return computer == Input.Paper ? Result.Draw
                : computer == Input.Rock ? Result.Win
                : computer == Input.Scissors ? Result.Lose
                : throw new Exception ("Logic fail.");
        case Input.Rock :
            return computer == Input.Paper ? Result.Lose
                : computer == Input.Rock ? Result.Draw
                : computer == Input.Scissors ? Result.Win
                : throw new Exception ("Logic fail.");
        case Input.Scissors :
            return computer == Input.Paper ? Result.Win
                : computer == Input.Rock ? Result.Lose
                : computer == Input.Scissors ? Result.Draw
                : throw new Exception ("Logic fail.");
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
3
Gpt3D_Clone742_3.cs 1 26
Gpt3D_Clone742_3.cs 27 68
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    bool paper = (userInput == Input.Paper),
        rock = (userInput == Input.Rock),
        scissors = (userInput == Input.Scissors),
        drawP = (paper && (computer == Input.Paper)),
        drawR = (rock && (computer == Input.Rock)),
        drawS = (scissors && (computer == Input.Scissors)),
        winP = (paper && (computer == Input.Rock)),
        winR = (rock && (computer == Input.Scissors)),
        winS = (scissors && (computer == Input.Paper)),
        loseP = (paper && (computer == Input.Scissors)),
        loseR = (rock && (computer == Input.Paper)),
        loseS = (scissors && (computer == Input.Rock));
    if (drawP || drawR || drawS) {
        return Result.Draw;
    } else if (winP || winR || winS) {
        return Result.Win;
    } else if (loseP || loseR || loseS) {
        return Result.Lose;
    } else {
        throw new Exception ("Logic fail.");
    }
}
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
0
Gpt3D_Clone753_0.cs 1 21
Gpt3D_Clone753_0.cs 22 42
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        bool keepAliveOption = (time != 0 || interval != 0) ? true : false;
        byte [] input = new byte [3 * BytesPerLong];
        input [3] = (byte) (time > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
        input [2] = (byte) (time > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
        input [1] = (byte) (time > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
        input [0] = (byte) (time > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        input [7] = (byte) (interval > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
        input [6] = (byte) (interval > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
        input [5] = (byte) (interval > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
        input [4] = (byte) (interval > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, keepAliveOption);
        socket.IOControl (IOControlCode.KeepAliveValues, input, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
1
Gpt3D_Clone762_1.cs 1 13
Gpt3D_Clone762_1.cs 14 27
----------------------------------------

static IOperations < T > Create () 
{
    var type = typeof (T);
    if (type == typeof (byte))
        return new ByteOperations ();
    else if (type == typeof (float))
        return new SingleOperations ();
    else
    {
        var message = string.Format ("Operations for type {0} is not supported.", type.Name);
        throw new NotSupportedException (message);
    }
}
----------------------------------------

static IOperations < T > Create () {
    var type = typeof (T);
    switch (Type.GetTypeCode (type)) {
        case TypeCode.Byte :
            return (IOperations < T >) new ByteOperations ();
        case TypeCode.Single :
            return (IOperations < T >) new SingleOperations ();
        default :
            var message = String.Format ("Operations for type {0} is not supported.", type.Name);
            throw new NotSupportedException (message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
1
Gpt3D_Clone766_1.cs 1 6
Gpt3D_Clone766_1.cs 7 24
----------------------------------------

static void Main (string [] args) {
    Unpack ();
    StartProcess ("exe1.exe");
    StartProcess ("exe2.exe");
    StartProcess(@"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe", "ps1.ps1");
}
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
0
Gpt3D_Clone770_0.cs 1 15
Gpt3D_Clone770_0.cs 16 38
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
List < T > valuesList = values.ToList();
if (valuesList.Count == 0) return ""; 
if (valuesList.Count == 1) return valuesList.First();
string result = valuesList.First();
for (int i = 1; i < valuesList.Count - 1; i++)
    result += separator + valuesList[i];
if (valuesList.Count > 1) 
    result += sepLast + valuesList.Last();
return result;
}
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
1
Gpt3D_Clone770_1.cs 1 16
Gpt3D_Clone770_1.cs 17 39
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder();
    var valueList = values.ToList();
    var enumerator = valueList.GetEnumerator();
    if (valueList.Any()) 
        sb.Append(valueList.First());
    
    if (valueList.Count() > 1) 
        sb.Append(valueList.GetRange(1, valueList.Count() - 1).Aggregate((a, b) => a + separator + b));
        
    if (valueList.Any())
        sb.Append(sepLast + valueList.Last());
    
    return sb.ToString();
}
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
2
Gpt3D_Clone770_2.cs 1 21
Gpt3D_Clone770_2.cs 22 33
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values)
{
    var enumerator = values.GetEnumerator();
    var sb = GetStringBuilder(enumerator);
    if(enumerator.MoveNext())
    {        
        AppendToStringBuilder(separator, sepLast, enumerator, sb);                    
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
2
Gpt3D_Clone789_2.cs 1 16
Gpt3D_Clone789_2.cs 17 30
----------------------------------------

void OnShapeBrushChanged() 
{
    Brush rtn = default(Brush);
    for (int i = 0; i < ShapeChildren.Count-1; i++) 
    {
        Shape shape = ShapeChildren[i+1];
        if (rtn != shape.Fill) 
        {
            SetValue(FillDifferentProperty, default(Brush));
        }
        else 
        {
            SetValue(FillDifferentProperty, rtn);
        }
    }
}
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
0
Gpt3D_Clone797_0.cs 1 9
Gpt3D_Clone797_0.cs 10 25
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    Attribute [] attrs = (Attribute [])fi.GetCustomAttributes (typeof (StringValue), false);
    
    foreach (Attribute attr in attrs){
        StringValue valueAttributes = attr as StringValue;
        if(valueAttributes != null)
            output = valueAttributes.Value;
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
0
Gpt3D_Clone809_0.cs 1 12
Gpt3D_Clone809_0.cs 13 24
----------------------------------------

public static Dictionary < string, object > DictionaryFromType (object atype) {
    if (atype == null)
        return new Dictionary < string, object > ();
    Type t = atype.GetType ();
    PropertyInfo [] props = t.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (PropertyInfo prp in props) {
        object value = prp.GetValue (atype, new object [] {});
        dict.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

public static Dictionary<string, object> DictionaryFromType (object atype) {
    Type t = atype?.GetType ();
    PropertyInfo [] props = t?.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (var prp in props) {
        var value = prp?.GetValue (atype, new object [] {});
        dict?.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
1
Gpt3D_Clone809_1.cs 1 10
Gpt3D_Clone809_1.cs 11 24
----------------------------------------

public static Dictionary<string, object> DictionaryFromType (object atype) {
    Type t = atype?.GetType () ?? typeof(object);
    PropertyInfo [] props = t.GetProperties () ?? new PropertyInfo[0];
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (var prp in props) {
        var value = prp?.GetValue (atype, new object [] {});
        dict?.Add (prp?.Name ?? "", value);
    }
    return dict;
}
----------------------------------------

public static Dictionary < string, object > DictionaryFromType (object atype) {
    if (atype == null)
        return new Dictionary < string, object > ();
    Type t = atype.GetType ();
    PropertyInfo [] props = t.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (PropertyInfo prp in props) {
        object value = prp.GetValue (atype, new object [] {});
        dict.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
810
1
Gpt3D_Clone810_1.cs 1 20
Gpt3D_Clone810_1.cs 21 42
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < string, string > list = new TupleList < string, string > ();
    list.Add ("cat", "fish");
    list.Add ("car", "sheep");
    list.Add ("dog", "horse");
    list.Add ("door", "goat");
    list.Add ("elephant", "cow");
    list.Add ("coconut", "mule");
    list.Add ("cab", "donkey");
    list.Sort ();
    foreach (Tuple < string, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    string expected_first = "fish";
    string expected_last = "cow";
    string first = list.First ().Item2;
    string last = list.Last ().Item2;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < int, string > list = new TupleList < int, string > ();
    list.Add (1, "cat");
    list.Add (1, "car");
    list.Add (2, "dog");
    list.Add (2, "door");
    list.Add (3, "elephant");
    list.Add (1, "coconut");
    list.Add (1, "cab");
    list.Sort ();
    foreach (Tuple < int, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item1;
    int last = list.Last ().Item1;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
810
3
Gpt3D_Clone810_3.cs 1 20
Gpt3D_Clone810_3.cs 21 42
----------------------------------------

[TestMethod ()] public void SortTest_4 () {
    TupleList < float, double > list = new TupleList < float, double > ();
    list.Add (1.0f, 0.4);
    list.Add (1.0f, 0.5);
    list.Add (2.0f, 0.6);
    list.Add (2.0f, 0.7);
    list.Add (3.0f, 0.8);
    list.Add (1.0f, 0.9);
    list.Add (1.0f, 0.1);
    list.Sort ();
    foreach (Tuple < float, double > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    double expected_first = 0.4;
    double expected_last = 0.8;
    double first = list.First ().Item2;
    double last = list.Last ().Item2;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < int, string > list = new TupleList < int, string > ();
    list.Add (1, "cat");
    list.Add (1, "car");
    list.Add (2, "dog");
    list.Add (2, "door");
    list.Add (3, "elephant");
    list.Add (1, "coconut");
    list.Add (1, "cab");
    list.Sort ();
    foreach (Tuple < int, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item1;
    int last = list.Last ().Item1;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
811
1
Gpt3D_Clone811_1.cs 1 14
Gpt3D_Clone811_1.cs 15 44
----------------------------------------

public static int [] FindMaxArrayEx (int [] srcArray) 
{
    int [] maxArray = new int [1]; 
    int maxTotal = int.MinValue;
    if (srcArray.Length != 1) {
        maxTotal = FindMaxTotal (srcArray);
        maxArray = GetMaxArray (srcArray, maxTotal);
    } else {
        maxTotal = srcArray [0];
        maxArray = srcArray;
    }
    Console.WriteLine ("FindMaxArrayEx: {0}", maxTotal);
    return maxArray;
}
----------------------------------------

public static int [] FindMaxArrayEx (int [] srcArray) {
    int [] maxArray = new int [1];
    int maxTotal = int.MinValue;
    int curIndex = 0;
    int tmpTotal = 0;
    List < int > tmpArray = new List < int > ();
    if (srcArray.Length != 1) {
        for (int i = 0; i < srcArray.Length; i ++) {
            tmpTotal = 0;
            curIndex = i;
            tmpArray.Clear ();
            while (curIndex < srcArray.Length) {
                tmpTotal += srcArray [curIndex];
                tmpArray.Add (srcArray [curIndex]);
                if (tmpTotal > maxTotal) {
                    maxTotal = tmpTotal;
                    maxArray = tmpArray.ToArray ();
                }
                curIndex ++;
            }
        }
    } else {
        maxTotal = srcArray [0];
        maxArray = srcArray;
    }
    Console.WriteLine ("FindMaxArrayEx: {0}", maxTotal);
    return maxArray;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
1
Gpt3D_Clone818_1.cs 1 5
Gpt3D_Clone818_1.cs 6 15
----------------------------------------

private static IEnumerable < Type > GetTypeArguments (Type t, IEnumerable < Type > values) { 
    if (t.IsGenericType) 
        return GetTypeArgumentsHelper (t, values);
    return UnionTypes (new[] { t }, values);
}
----------------------------------------

private static IEnumerable < Type > GetTypeArguments (Type t, IEnumerable < Type > values) {
    if (t.IsGenericType)
        foreach (var arg in t.GetGenericArguments ())
            values = values.Union (GetTypeArguments (arg, values));
    else
        values = values.Union (new [] {t});
    return values;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
0
Gpt3D_Clone826_0.cs 1 9
Gpt3D_Clone826_0.cs 10 24
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {         
    string chunk = chunkSize.ToString (); 
    string [] chunks = null; 
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text)) {
        string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}"; 
        MatchCollection matches = Regex.Matches (text, pattern); 
        List<string> list = new List<string> (); 
        for (int i = 0; i < matches.Count; i++) 
            list.Add (matches[i].Value); 
        chunks = list.ToArray (); 
    }
    return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
1
Gpt3D_Clone826_1.cs 1 21
Gpt3D_Clone826_1.cs 22 32
----------------------------------------

private static string[] SplitIntoChunks(string text, int chunkSize, bool truncateRemaining)
{
    string chunk = chunkSize.ToString();
    
    // Initialize an empty list
    List<string> chunks = new List<string>();
    
    if (chunkSize > 0 && !String.IsNullOrEmpty(text))
    {
        // Initialize regex pattern
        string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    
        // Add all matches to the list
        MatchCollection matches = Regex.Matches(text, pattern);
        foreach (Match match in matches)
            chunks.Add(match.Value);
    }
    
    // Return an array of matches
    return chunks.ToArray();
}
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
0
Gpt3D_Clone82_0.cs 1 71
Gpt3D_Clone82_0.cs 72 141
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    switch (cl) {
        case 'a':
            return 0;
        case 'b':
            return 1;
        case 'c':
            return 2;
        case 'd':
            return 3;
        case 'e':
            return 4;
        case 'f':
            return 5;
        case 'g':
            return 6;
        case 'h':
            return 7;
        case 'i':
            return 8;
        case 'j':
            return 9;
        case 'k':
            return 10;
        case 'l':
            return 11;
        case 'm':
            return 12;
        case 'n':
            return 13;
        case 'o':
            return 14;
        case 'p':
            return 15;
        case 'q':
            return 16;
        case 'r':
            return 17;
        case 's':
            return 18;
        case 't':
            return 19;
        case 'u':
            return 20;
        case 'v':
            return 21;
        case 'w':
            return 22;
        case 'x':
            return 23;
        case 'y':
            return 24;
        case 'z':
            return 25;
        case '2':
            return 26;
        case '3':
            return 27;
        case '4':
            return 28;
        case '5':
            return 29;
        case '6':
            return 30;
        case '7':
            return 31;
        default:
            throw new Exception ("Not a base32 string");
    }
}
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
1
Gpt3D_Clone82_1.cs 1 68
Gpt3D_Clone82_1.cs 69 109
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    switch (cl)
    {
        case 'a': return 0;
        case 'b': return 1;
        case 'c': return 2;
        case 'd': return 3;
        case 'e': return 4;
        case 'f': return 5;
        case 'g': return 6;
        case 'h': return 7;
        case 'i': return 8;
        case 'j': return 9;
        case 'k': return 10;
        case 'l': return 11;
        case 'm': return 12;
        case 'n': return 13;
        case 'o': return 14;
        case 'p': return 15;
        case 'q': return 16;
        case 'r': return 17;
        case 's': return 18;
        case 't': return 19;
        case 'u': return 20;
        case 'v': return 21;
        case 'w': return 22;
        case 'x': return 23;
        case 'y': return 24;
        case 'z': return 25;
        case '2': return 26;
        case '3': return 27;
        case '4': return 28;
        case '5': return 29;
        case '6': return 30;
        case '7': return 31;
        default: throw new Exception ("Not a base32 string");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
2
Gpt3D_Clone82_2.cs 1 12
Gpt3D_Clone82_2.cs 13 82
----------------------------------------

static int CharToValue (char c) {
    Dictionary<char, int> charVals = new Dictionary<char, int> {
        { 'a', 0 }, {'b', 1}, {'c', 2}, {'d', 3}, {'e', 4}, {'f', 5},
        {'g', 6}, {'h', 7}, {'i', 8}, {'j', 9}, {'k', 10}, {'l', 11},
        {'m', 12}, {'n', 13}, {'o', 14}, {'p', 15}, {'q', 16}, {'r', 17},
        {'s', 18}, {'t', 19}, {'u', 20}, {'v', 21}, {'w', 22}, {'x', 23},
        {'y', 24}, {'z', 25}, {'2', 26}, {'3', 27}, {'4', 28}, {'5', 29},
        {'6', 30}, {'7', 31}
    };
    char cl = char.ToLower (c);
    return charVals.ContainsKey(cl) ? charVals[cl] : throw new Exception ("Not a base32 string");
}
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
1
Gpt3D_Clone836_1.cs 1 16
Gpt3D_Clone836_1.cs 17 37
----------------------------------------

public static DataTable GetWorksheetAsDataTable (ExcelWorksheet worksheet) {
    var dt = new DataTable (worksheet.Name);
    dt.Columns.AddRange (GetDataColumns (worksheet).ToArray ());
    var headerOffset = 1;
    var width = dt.Columns.Count;
    var depth = GetTableDepth (worksheet, headerOffset);
    for (var i = 1; i <= depth; i ++) {
        var row = dt.NewRow ();
        for (var j = 1; j <= width; j ++) {
            var currentValue = worksheet.Cells [i + headerOffset, j].Value;
            row [j - 1] = currentValue == null ? null : currentValue.ToString ();
        }
        dt.Rows.Add (row);
    }
    return dt;
}
----------------------------------------

public static DataTable GetWorksheetAsDataTable(ExcelWorksheet worksheet) {
    DataTable dt = new DataTable(worksheet.Name);
    List<DataColumn> dataColumns = GetDataColumns(worksheet).ToList();
    dt.Columns.AddRange(dataColumns.ToArray());
         
    int headerOffset = 1;
    int width = dt.Columns.Count;
    int depth = GetTableDepth(worksheet, headerOffset);
    for (int r = 1; r <= depth; r++) { 
        DataRow row = dt.NewRow();
        for (int c = 1; c <= width; c++) {
            object currentValue = worksheet.Cells[r + headerOffset, c].Value;
            row[c - 1] = currentValue == null ? null : currentValue.ToString();
        }
        dt.Rows.Add(row);
    } 
    return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
2
Gpt3D_Clone836_2.cs 1 20
Gpt3D_Clone836_2.cs 21 38
----------------------------------------

public static DataTable GetWorksheetAsDataTable(ExcelWorksheet worksheet) {
    DataTable dt = new DataTable(worksheet.Name);
    List<DataColumn> dataColumns = GetDataColumns(worksheet).ToList();
    dt.Columns.AddRange(dataColumns.ToArray());
 
    int headerOffset = 1;
    int width = dt.Columns.Count;
    int depth = GetTableDepth(worksheet, headerOffset);
    
    for (int rowNum = 1; rowNum <= depth; rowNum++) { 
        DataRow row = dt.NewRow();
        for (int colNum = 1; colNum <= width; colNum++) {
            object val = worksheet.Cells[rowNum + headerOffset, colNum].Value;
            row[colNum - 1] = val == null ? null : val.ToString();
        }
        dt.Rows.Add(row);
    } 
    return dt;
}
----------------------------------------

public static DataTable GetWorksheetAsDataTable (ExcelWorksheet worksheet) {
    var dt = new DataTable (worksheet.Name);
    dt.Columns.AddRange (GetDataColumns (worksheet).ToArray ());
    var headerOffset = 1;
    var width = dt.Columns.Count;
    var depth = GetTableDepth (worksheet, headerOffset);
    for (var i = 1; i <= depth; i ++) {
        var row = dt.NewRow ();
        for (var j = 1; j <= width; j ++) {
            var currentValue = worksheet.Cells [i + headerOffset, j].Value;
            row [j - 1] = currentValue == null ? null : currentValue.ToString ();
        }
        dt.Rows.Add (row);
    }
    return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
83
0
Gpt3D_Clone83_0.cs 1 75
Gpt3D_Clone83_0.cs 76 97
----------------------------------------

private void OnSizeChanged (object sender, EventArgs e) {
    int _offsetX = 0;
    int _offsetY = 0;
    while (true)
    {
        int hitTestX = Width / 2;
        int hitTestY = _offsetY;
        int hitArea = HitTest(hitTestX, hitTestY).HitArea;
        
        if (hitArea == HitArea.PrevMonthDate || hitArea == HitArea.Date)
        {
            break;
        }
        else
        {
            _offsetY++;
        }
    }
    while (true)
    {
        int hitTestX = _offsetX;
        int hitTestY = Height / 2;
        int hitArea = HitTest(hitTestX, hitTestY).HitArea;
        
        if (hitArea == HitArea.Date)
        {
            break;
        }
        else
        {
            _offsetX++;
        }
    }
    int _dayBoxWidth = 0;
    int _dayBoxHeight = 0;
    DateTime dt1 = HitTest(Width / 2, _offsetY).Time;
    while (true)
    {
        int hitTestX = Width / 2;
        int hitTestY = _offsetY + _dayBoxHeight;
        int compareDT = HitTest(hitTestX, hitTestY).Time;
        if (compareDT == dt1)
        {
            _dayBoxHeight++;
        }
        else
        {
            break;
        }
    }
    DateTime dt2 = HitTest(_offsetX, Height / 2).Time;
    while (true)
    {
        int hitTestX = _offsetX + _dayBoxWidth;
        int hitTestY = Height / 2;
        int compareDT = HitTest(hitTestX, hitTestY).Time;
        if (compareDT == dt2)
        {
            _dayBoxWidth++;
        }
        else
        {
            break;
        }
    }
}
----------------------------------------

private void OnSizeChanged (object sender, EventArgs e) {
    _offsetX = 0;
    _offsetY = 0;
    while (HitTest (Width / 2, _offsetY).HitArea != HitArea.PrevMonthDate && HitTest (Width / 2, _offsetY).HitArea != HitArea.Date) {
        _offsetY ++;
    }
    while (HitTest (_offsetX, Height / 2).HitArea != HitArea.Date) {
        _offsetX ++;
    }
    _dayBoxWidth = 0;
    DateTime dt1 = HitTest (Width / 2, _offsetY).Time;
    while (HitTest (Width / 2, _offsetY + _dayBoxHeight).Time == dt1) {
        _dayBoxHeight ++;
    }
    _dayBoxWidth = 0;
    DateTime dt2 = HitTest (_offsetX, Height / 2).Time;
    while (HitTest (_offsetX + _dayBoxWidth, Height / 2).Time == dt2) {
        _dayBoxWidth ++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
2
Gpt3D_Clone842_2.cs 1 16
Gpt3D_Clone842_2.cs 17 41
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null && prefSpecifierArray.Length > 0) {
            foreach (var prefItem in NSArray.FromArray<NSDictionary>(prefSpecifierArray))
            {
                if (prefItem.TryGetValue((NSString)"Key", out NSString key) && key.ToString() == API_PATH_KEY &&
                    prefItem.TryGetValue((NSString)"DefaultValue", out NSObject value))
                {
                    ApiPath = value.ToString();
                }
            }
        }
    }
}
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
0
Gpt3D_Clone844_0.cs 1 19
Gpt3D_Clone844_0.cs 20 35
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    DateTime beginTime = new DateTime (2007, 10, 1);
    DateTime endTime = new DateTime (2012, 2, 25);
    TimeRange timeRange = new TimeRange (beginTime, endTime);
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.Write ("Start Quarter: ");
    console.WriteLine (new Quarter (beginTime, fiscalYearCalendar));
    Console.Write ("End Quarter: ");
    Console.WriteLine (new Quarter (endTime, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (beginTime, fiscalYearCalendar);
    while (year.Start < endTime) {
        Console.WriteLine ("Fiscal Year: ");
        console.WriteLine (year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
0
Gpt3D_Clone847_0.cs 1 22
Gpt3D_Clone847_0.cs 23 37
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    foreach (var item in values) {
        sum += item;
        if (sum > target) {
            yield return sum - item;
            sum = item;
        }
    }
    if (sum != 0) {
        yield return sum;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
0
Gpt3D_Clone861_0.cs 1 16
Gpt3D_Clone861_0.cs 17 29
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    int rowCount = GridView1.Rows.Count;
    int index = 0;
    while (index < rowCount) {
        if (GridView1.Rows[index].RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) GridView1.Rows[index].FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [index].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
        index++;
    }
}
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
3
Gpt3D_Clone861_3.cs 1 11
Gpt3D_Clone861_3.cs 12 24
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    for (int index = 0; index < GridView1.Rows.Count; index++) {
        if (GridView1.Rows[index].RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) GridView1.Rows[index].FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [index].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
0
Gpt3D_Clone862_0.cs 1 17
Gpt3D_Clone862_0.cs 18 29
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    TEntity type;
    switch (typeof(TEntity)) {
        case typeof (Bike):
            type = Bikes;
            break; 
        case typeof (Car):
            type = Cars;
            break;
        case typeof (Truck):
            type = Trucks;
            break;
        default: 
            throw new InvalidOperationException ();  
    }
    return (HashSet < TEntity >) (object) type;
}
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
1
Gpt3D_Clone862_1.cs 1 12
Gpt3D_Clone862_1.cs 13 24
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    TEntity type; 
    if (typeof(TEntity) == typeof (Bike))
        type = Bikes;
    else if (typeof(TEntity) == typeof (Car))
        type = Cars;
    else if (typeof(TEntity) == typeof (Truck))
        type = Trucks;
    else 
        throw new InvalidOperationException ();    
    return (HashSet < TEntity >) (object) type;
}
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
1
Gpt3D_Clone863_1.cs 1 15
Gpt3D_Clone863_1.cs 16 29
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = null;
    if (listView1.SelectedItems.Count > 0) {
        select = listView1.SelectedItems[0].Text;
    }
    if (string.IsNullOrEmpty (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = string.Join ("; ", pths.ToArray ());
        string r = string.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
2
Gpt3D_Clone863_2.cs 1 12
Gpt3D_Clone863_2.cs 13 26
----------------------------------------

private void button6_Click (object sender, EventArgs e) { 
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null; 
    if (!checkStringIsEmpty(select)) { 
        listView1.BeginUpdate (); 
        bool isPresentInPaths = deleteElementInPaths(select); 
        bool isPresentInRec = deleteElementInRec(select); 
        listView1.EndUpdate (); 
        string s = listingElementInPaths(); 
        string r = listingElementInRec();
    } 
    Disp (); 
}
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
0
Gpt3D_Clone864_0.cs 1 17
Gpt3D_Clone864_0.cs 18 29
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, params object [] values) {
    StringBuilder output = new StringBuilder ();
    output.Append(method.Name + " invoked: ");
    ParameterInfo [] parameters = method.GetParameters ();
    for (int i = 0;i < parameters.Length;i ++) {
        if (i < values.Length) {
            output.AppendFormat("{0} = {1}", parameters[i].Name, values[i]);
        }
        else {
            output.AppendFormat("{0} = <empty>", parameters[i].Name);
        }
        if (i < parameters.Length - 1) {
            output.Append(", ");
        }
    }
    return output.ToString();
}
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, params object [] values) {
    var output = new StringBuilder (method.Name + " invoked: ");
    ParameterInfo [] parameters = method.GetParameters ();
    for (int i = 0; i < parameters.Length; i ++) {
        output.AppendFormat ("{0} = {1}", parameters [i].Name, i >= values.Length ? "<empty>" : values [i]);
        if (i < parameters.Length - 1)
            output.Append (", ");
    }
    return output.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
1
Gpt3D_Clone864_1.cs 1 17
Gpt3D_Clone864_1.cs 18 29
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, params object [] values) {
    StringBuilder output = new StringBuilder (); 
    output.Append(method.Name + " invoked: ");
    ParameterInfo [] parameters = method.GetParameters ();
    for (int i = 0;i < parameters.Length;i ++) {
        if (i < values.Length) {
            output.Append(parameters[i].Name + " = " + values[i]);
        }
        else {
            output.Append(parameters[i].Name + " = <empty>");
        }
        if (i < parameters.Length - 1) {
            output.Append(", ");
        }
    }
    return output.ToString();
}
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, params object [] values) {
    var output = new StringBuilder (method.Name + " invoked: ");
    ParameterInfo [] parameters = method.GetParameters ();
    for (int i = 0; i < parameters.Length; i ++) {
        output.AppendFormat ("{0} = {1}", parameters [i].Name, i >= values.Length ? "<empty>" : values [i]);
        if (i < parameters.Length - 1)
            output.Append (", ");
    }
    return output.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
872
1
Gpt3D_Clone872_1.cs 1 15
Gpt3D_Clone872_1.cs 16 40
----------------------------------------

static IEnumerable<double> TopNSorted(this IEnumerable<double> source, int n) 
{
    List<double> top = new List<double>(n + 1);
    using (var e = source.OrderByDescending(x => x).GetEnumerator())
    {
        for (int i = 0; i < n; i++)
        {
            if (e.MoveNext())
                top.Add(e.Current);
            else
                throw new InvalidOperationException("Not enough elements");
        }
        return top;
    }
}
----------------------------------------

static IEnumerable < double > TopNSorted (this IEnumerable < double > source, int n) {
    List < double > top = new List < double > (n + 1);
    using (var e = source.GetEnumerator ())
    {
        for (int i = 0; i < n; i ++) {
            if (e.MoveNext ())
                top.Add (e.Current);
            else
                throw new InvalidOperationException ("Not enough elements");
        }
        top.Sort ();
        while (e.MoveNext ()) {
            double c = e.Current;
            int index = top.BinarySearch (c);
            if (index < 0)
                index = ~ index;
            if (index < n) {
                top.Insert (index, c);
                top.RemoveAt (n);
            }
        }
    } return top;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
0
Gpt3D_Clone880_0.cs 1 9
Gpt3D_Clone880_0.cs 10 22
----------------------------------------

protected override void WndProc (ref Message m) {
    int code = m.Msg;
    switch (code) {
        case 0x46: 
            HandleWindowPosChanging(ref m);
            break;
    }
    base.WndProc(ref m);
}
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
3
Gpt3D_Clone880_3.cs 1 5
Gpt3D_Clone880_3.cs 6 18
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x46)
        HandleWindowPosChanging (ref m);    
    base.WndProc (ref m);
}
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
0
Gpt3D_Clone888_0.cs 1 16
Gpt3D_Clone888_0.cs 17 40
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (t => Console.WriteLine(t));
    alpha.ForEach (v => {
        if (alpha.FindAll (t => t == v).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (t => Console.WriteLine (t));
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
892
0
Gpt3D_Clone892_0.cs 1 12
Gpt3D_Clone892_0.cs 13 26
----------------------------------------

protected void btnNext_Click3 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataRowCollection drc = new DataRowCollection ();
    if (txtNextStep.Tag == null)
        drc = eobj.GetTicketFirstUpdate (txtSupportRef.Text).Rows;
    else
        drc = eobj.GetNextTicketUpdate (txtSupportRef.Text, (string) txtNextStep.Tag).Rows;
    if (drc.Count != 0) {
        txtNextStep.Text = drc [0] ["NextStep"].ToString ();
        txtNextStep.Tag = drc [0] ["Id"].ToString ();
    }
}
----------------------------------------

protected void btnNext_Click1 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataTable dt = new DataTable ();
    if (txtNextStep.Tag == null)
        dt = eobj.GetTicketFirstUpdate (txtSupportRef.Text);
    else
        dt = eobj.GetNextTicketUpdate (txtSupportRef.Text, (string) txtNextStep.Tag);
    if (dt.Rows.Count != 0) {
        txtNextStep.Text = dt.Rows [0] ["NextStep"].ToString ();
        txtNextStep.Tag = dt.Rows [0] ["Id"].ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
3
Gpt3D_Clone896_3.cs 1 11
Gpt3D_Clone896_3.cs 12 34
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        sb.Append (CharPrint (whichType, r));
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
8
0
Gpt3D_Clone8_0.cs 1 15
Gpt3D_Clone8_0.cs 16 31
----------------------------------------

public Bitmap RotateImage(Dictionary<string, object> parameters){
     double angle = (double)parameters["angle"];
     SizeF size = CalculateSize(angle);
     Bitmap rotatedBmp = new Bitmap((int)size.Width, (int)size.Height);
     Graphics g = Graphics.FromImage(rotatedBmp);
     parameters.Add("InterpolationMode", System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic);
     parameters.Add("CompositingQuality", CompositingQuality.HighQuality);
     parameters.Add("SmoothingMode", SmoothingMode.HighQuality);
     parameters.Add("PixelOffsetMode", PixelOffsetMode.HighQuality);
     g.TranslateTransform((double)parameters["topPointX"], (double)parameters["topPointY"]);
     g.RotateTransform(GetDegree(angle));
     g.DrawImage(image, new RectangleF(0,0, size.Width, size.Height), parameters);
     g.Dispose();
     return rotatedBmp;
}
----------------------------------------

public Bitmap RotateImage (double angle) {
    SizeF size = CalculateSize (radAngle);
    Bitmap rotatedBmp = new Bitmap ((int) size.Width, (int) size.Height);
    Graphics g = Graphics.FromImage (rotatedBmp);
    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    g.CompositingQuality = CompositingQuality.HighQuality;
    g.SmoothingMode = SmoothingMode.HighQuality;
    g.PixelOffsetMode = PixelOffsetMode.HighQuality;
    g.TranslateTransform (topPoint.X, topPoint.Y);
    g.RotateTransform (GetDegree (radAngle));
    g.DrawImage (image, new RectangleF (0, 0, size.Width, size.Height));
    g.Dispose ();
    return rotatedBmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
8
1
Gpt3D_Clone8_1.cs 1 13
Gpt3D_Clone8_1.cs 14 29
----------------------------------------

public Bitmap RotateImage((double angle, double topPointX, double topPointY) parameters)
{
    SizeF size = CalculateSize(parameters.angle);
    Bitmap rotatedBmp = new Bitmap((int)size.Width, (int)size.Height);
    Graphics g = Graphics.FromImage(rotatedBmp);
    (InterpolationMode, CompositingQuality, SmoothingMode, PixelOffsetMode) gParams = (System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic,
    CompositingQuality.HighQuality, SmoothingMode.HighQuality, PixelOffsetMode.HighQuality);
    g.TranslateTransform(parameters.topPointX, parameters.topPointY);
    g.RotateTransform(GetDegree(parameters.angle));
    g.DrawImage(image, new RectangleF(0,0, size.Width, size.Height), gParams);
    g.Dispose();
    return rotatedBmp;
}
----------------------------------------

public Bitmap RotateImage (double angle) {
    SizeF size = CalculateSize (radAngle);
    Bitmap rotatedBmp = new Bitmap ((int) size.Width, (int) size.Height);
    Graphics g = Graphics.FromImage (rotatedBmp);
    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    g.CompositingQuality = CompositingQuality.HighQuality;
    g.SmoothingMode = SmoothingMode.HighQuality;
    g.PixelOffsetMode = PixelOffsetMode.HighQuality;
    g.TranslateTransform (topPoint.X, topPoint.Y);
    g.RotateTransform (GetDegree (radAngle));
    g.DrawImage (image, new RectangleF (0, 0, size.Width, size.Height));
    g.Dispose ();
    return rotatedBmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
0
Gpt3D_Clone902_0.cs 1 18
Gpt3D_Clone902_0.cs 19 40
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    int left = 0; 
    int rRange = endColor.R - startColor.R;
    int gRange = endColor.G - startColor.G;
    int bRange = endColor.B - startColor.B;
    for (int i = 0; i < numBars; i ++) {
        float percent = i / numBars;
        int rAvg = startColor.R + (int) (percent * rRange); 
        int gAvg = startColor.G + (int) (percent * gRange); 
        int bAvg = startColor.B + (int) (percent * bRange);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        int width = (r.Width - left) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (left, 0, width, r.Height));
        } left += width;
    }
}
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    int rMin = startColor.R;
    int gMin = startColor.G;
    int bMin = startColor.B;
    int rMax = endColor.R;
    int gMax = endColor.G;
    int bMax = endColor.B;
    int left = 0;
    for (int i = 0; i < numBars; i ++) {
        int rAvg = rMin + (int) ((rMax - rMin) * i / numBars);
        int gAvg = gMin + (int) ((gMax - gMin) * i / numBars);
        int bAvg = bMin + (int) ((bMax - bMin) * i / numBars);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        int width = (r.Width - left) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (left, 0, width, r.Height));
        } left += width;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
1
Gpt3D_Clone902_1.cs 1 17
Gpt3D_Clone902_1.cs 18 39
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    int left = 0; 
    float rStep = (endColor.R - startColor.R) / (float) numBars;
    float gStep = (endColor.G - startColor.G) / (float) numBars;
    float bStep = (endColor.B - startColor.B) / (float) numBars;
    for (int i = 0; i < numBars; i ++) {
        int rAvg = startColor.R + (int) (rStep * i); 
        int gAvg = startColor.G + (int) (gStep * i); 
        int bAvg = startColor.B + (int) (bStep * i);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        int width = (r.Width - left) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (left, 0, width, r.Height));
        } left += width;
    }
}
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    int rMin = startColor.R;
    int gMin = startColor.G;
    int bMin = startColor.B;
    int rMax = endColor.R;
    int gMax = endColor.G;
    int bMax = endColor.B;
    int left = 0;
    for (int i = 0; i < numBars; i ++) {
        int rAvg = rMin + (int) ((rMax - rMin) * i / numBars);
        int gAvg = gMin + (int) ((gMax - gMin) * i / numBars);
        int bAvg = bMin + (int) ((bMax - bMin) * i / numBars);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        int width = (r.Width - left) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (left, 0, width, r.Height));
        } left += width;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
2
Gpt3D_Clone902_2.cs 1 20
Gpt3D_Clone902_2.cs 21 38
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    int rMin = startColor.R;
    int gMin = startColor.G;
    int bMin = startColor.B;
    int rMax = endColor.R;
    int gMax = endColor.G;
    int bMax = endColor.B;
    int left = 0;
    for (int i = 0; i < numBars; i ++) {
        int rAvg = rMin + (int) ((rMax - rMin) * i / numBars);
        int gAvg = gMin + (int) ((gMax - gMin) * i / numBars);
        int bAvg = bMin + (int) ((bMax - bMin) * i / numBars);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        int width = (r.Width - left) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (left, 0, width, r.Height));
        } left += width;
    }
}
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    float rStep = (float)(endColor.R - startColor.R) / numBars; 
    float gStep = (float)(endColor.G - startColor.G) / numBars;
    float bStep = (float)(endColor.B - startColor.B) / numBars; 
    float width = (float)r.Width /numBars; 
    for (int i = 0; i < numBars; i ++) {
        int rAvg = (int)(startColor.R + rStep * i);
        int gAvg = (int)(startColor.G + gStep * i);
        int bAvg = (int)(startColor.B + bStep * i);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle ((int)(i * width), 0, (int)width, r.Height));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
1
Gpt3D_Clone905_1.cs 1 21
Gpt3D_Clone905_1.cs 22 50
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool IsWindowOnScreen = false;
    if (Window.Left >= Screen.WorkingArea.Left && Window.Top >= Screen.WorkingArea.Top && 
        (Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom &&
        (Window.Left + WindowSizeX) <= Screen.WorkingArea.Right) {
            IsWindowOnScreen = true;
    } else {
        if (AutoAdjustWindow) {
            if (Window.Left < Screen.WorkingArea.Left)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (Window.Top < Screen.WorkingArea.Top)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if ((Window.Top + WindowSizeY) > Screen.WorkingArea.Bottom)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if ((Window.Left + WindowSizeX) > Screen.WorkingArea.Right)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return IsWindowOnScreen;
}
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
2
Gpt3D_Clone905_2.cs 1 20
Gpt3D_Clone905_2.cs 21 49
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool IsWindowOnScreen = true;
    if (Window.Left < Screen.WorkingArea.Left || Window.Top < Screen.WorkingArea.Top || 
        (Window.Top + WindowSizeY) > Screen.WorkingArea.Bottom ||
        (Window.Left + WindowSizeX) > Screen.WorkingArea.Right) {
            IsWindowOnScreen = false;
            if (AutoAdjustWindow) {
                if (Window.Left < Screen.WorkingArea.Left)
                    Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
                if (Window.Top < Screen.WorkingArea.Top)
                    Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
                if ((Window.Top + WindowSizeY) > Screen.WorkingArea.Bottom)
                    Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
                if ((Window.Left + WindowSizeX) > Screen.WorkingArea.Right)
                    Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
            }
    }
    return IsWindowOnScreen;
}
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
0
Gpt3D_Clone911_0.cs 1 15
Gpt3D_Clone911_0.cs 16 29
----------------------------------------

static int Main(string[] args) {
    int result;
    int testcase;
    try {
        testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
        result = 0;
    } catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        result = 1;
    }
   
    Console.WriteLine("test passed.");
    return result;
}
----------------------------------------

static int Main (string [] args) {
    try {
        int testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
    }
    catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        return 1;
    }
    Console.WriteLine ("test passed.");
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
0
Gpt3D_Clone921_0.cs 1 11
Gpt3D_Clone921_0.cs 12 24
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

public static IEnumerable < T >  EnumToList < T >() where T: struct {
	Type enumType = typeof (T);
	if (!enumType.BaseType.Equals(typeof (Enum)))
		throw new ArgumentException("T must be of type System.Enum"); 
	T[] enumValArray = (T[])Enum.GetValues(enumType);
	List < T > enumValList = new List < T > (enumValArray.Length);
	for(int i = 0; i < enumValArray.Length; i++) {
		enumValList.Add (enumValArray[i].ToString()); 
	}
	return enumValList; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
924
1
Gpt3D_Clone924_1.cs 1 13
Gpt3D_Clone924_1.cs 14 21
----------------------------------------

public static IEnumerable < IList < T > > ChunkOn < T > (this IEnumerable < T > source, Func < T, bool > startChunk) {
    List < T > list = new List < T > ();
    foreach (var item in source) {
        if (startChunk (item) && list.Count > 0) {
            yield return list;
            list = new List < T > ();
        }
        list.Add (item);
    }
    if (list.Count > 0) {
        yield return list;
    }
}
----------------------------------------

public static IEnumerable < IList < T > > ExtractChunks < T > (this IEnumerable < T > source, Func < T, bool > startChunk) {
    List < T > tmpList = ChunkSegmentStart < T > (source, startChunk);
    if (tmpList.Count > 0) {
        yield return tmpList;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
0
Gpt3D_Clone926_0.cs 1 3
Gpt3D_Clone926_0.cs 4 20
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    ExpandItemInternal(propertyGrid, gridItem);
}
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
1
Gpt3D_Clone926_1.cs 1 3
Gpt3D_Clone926_1.cs 4 20
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    AppendItemInternal(propertyGrid, gridItem);
}
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
0
Gpt3D_Clone931_0.cs 1 18
Gpt3D_Clone931_0.cs 19 44
----------------------------------------

void DrawBorder (Graphics g, Rectangle r) {
    var d = 4;
    r.Inflate (d, d);
    ControlPaint.DrawBorder (g, r, Color.Black, ButtonBorderStyle.Dotted);
    var rectangles = new List < Rectangle > ();
    var pX = r.Left - d;
    var pY = r.Top - d;
    var X = (r.Width + (2 * d)) / 4;
    var Y = (r.Height + (2 * d)) / 4;
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            var r1 = new Rectangle (pX + (X * col), pY + (Y * row), X , Y);
            rectangles.Add (r1);
        }
    }
    g.FillRectangles (Brushes.White, rectangles.ToArray ());
    g.DrawRectangles (Pens.Black, rectangles.ToArray ());
}
----------------------------------------

void DrawBorder (Graphics g, Rectangle r) {
    var d = 4;
    r.Inflate (d, d);
    ControlPaint.DrawBorder (g, r, Color.Black, ButtonBorderStyle.Dotted);
    var rectangles = new List < Rectangle > ();
    var r1 = new Rectangle (r.Left - d, r.Top - d, 2 * d, 2 * d);
    rectangles.Add (r1);
    r1.Offset (r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (0, r.Height / 2);
    rectangles.Add (r1);
    r1.Offset (0, r.Height / 2);
    rectangles.Add (r1);
    r1.Offset (- r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (- r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (0, - r.Height / 2);
    rectangles.Add (r1);
    g.FillRectangles (Brushes.White, rectangles.ToArray ());
    g.DrawRectangles (Pens.Black, rectangles.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
1
Gpt3D_Clone931_1.cs 1 14
Gpt3D_Clone931_1.cs 15 40
----------------------------------------

void DrawBorder (Graphics g, Rectangle r) {
    var d = 4;
    r.Inflate (d, d);
    ControlPaint.DrawBorder (g, r, Color.Black, ButtonBorderStyle.Dotted);
    var rectangles = new List < Rectangle > ();
    var x = r.Left - d;
    var y = r.Top - d;
    for (var i = 0; i <= 7; i++) {
        var r1 = new Rectangle (x + (i % 2) * (r.Width / 2), y + (i / 2) * (r.Height / 2), 2 * d, 2 * d);
        rectangles.Add (r1);
    }
    g.FillRectangles (Brushes.White, rectangles.ToArray ());
    g.DrawRectangles (Pens.Black, rectangles.ToArray ());
}
----------------------------------------

void DrawBorder (Graphics g, Rectangle r) {
    var d = 4;
    r.Inflate (d, d);
    ControlPaint.DrawBorder (g, r, Color.Black, ButtonBorderStyle.Dotted);
    var rectangles = new List < Rectangle > ();
    var r1 = new Rectangle (r.Left - d, r.Top - d, 2 * d, 2 * d);
    rectangles.Add (r1);
    r1.Offset (r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (0, r.Height / 2);
    rectangles.Add (r1);
    r1.Offset (0, r.Height / 2);
    rectangles.Add (r1);
    r1.Offset (- r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (- r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (0, - r.Height / 2);
    rectangles.Add (r1);
    g.FillRectangles (Brushes.White, rectangles.ToArray ());
    g.DrawRectangles (Pens.Black, rectangles.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
2
Gpt3D_Clone931_2.cs 1 18
Gpt3D_Clone931_2.cs 19 44
----------------------------------------

void DrawBorder (Graphics g, Rectangle r) {
    var d = 4;
    r.Inflate (d, d);
    ControlPaint.DrawBorder (g, r, Color.Black, ButtonBorderStyle.Dotted);
    var rectangles = new List < Rectangle > ();
    var sqrt = (int) Math.Sqrt (4);
    for (int row = 0; row < sqrt; row++) {
        for (int col = 0; col < sqrt; col++) {
            var r1 = new Rectangle (r.Left - d + ((r.Width + 2 * d) * col / sqrt) , 
                                    r.Top - d + ((r.Height + 2 * d ) * row / sqrt),
                                    (r.Width + 2 * d) / sqrt,
                                    (r.Height + 2 * d )/ sqrt);
            rectangles.Add (r1);
        }
    }
    g.FillRectangles (Brushes.White, rectangles.ToArray ());
    g.DrawRectangles (Pens.Black, rectangles.ToArray ());
}
----------------------------------------

void DrawBorder (Graphics g, Rectangle r) {
    var d = 4;
    r.Inflate (d, d);
    ControlPaint.DrawBorder (g, r, Color.Black, ButtonBorderStyle.Dotted);
    var rectangles = new List < Rectangle > ();
    var r1 = new Rectangle (r.Left - d, r.Top - d, 2 * d, 2 * d);
    rectangles.Add (r1);
    r1.Offset (r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (0, r.Height / 2);
    rectangles.Add (r1);
    r1.Offset (0, r.Height / 2);
    rectangles.Add (r1);
    r1.Offset (- r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (- r.Width / 2, 0);
    rectangles.Add (r1);
    r1.Offset (0, - r.Height / 2);
    rectangles.Add (r1);
    g.FillRectangles (Brushes.White, rectangles.ToArray ());
    g.DrawRectangles (Pens.Black, rectangles.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
2
Gpt3D_Clone933_2.cs 1 7
Gpt3D_Clone933_2.cs 8 19
----------------------------------------

[Test]
public void test_v3 () {
    var test = Enumerable.Range (0, 10).Select (i => MyMath.Random (100)).ToList ();
    Console.WriteLine ("result:");
    test.ForEach (i => Console.WriteLine (i));
}
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
0
Gpt3D_Clone936_0.cs 1 11
Gpt3D_Clone936_0.cs 12 25
----------------------------------------

public static int GetSeed () {
    byte[] raw = Guid.NewGuid().ToByteArray();
    long val = 0;
    for(int i = 0; i < 12; i+=4){
        val += BitConverter.ToInt32(raw, i);
    }   
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
1
Gpt3D_Clone938_1.cs 1 14
Gpt3D_Clone938_1.cs 15 31
----------------------------------------

public int Compare (string s1, string s2) 
{
    int result;
    if (IsNumeric(s1) && IsNumeric(s2))
    {
        result = CompareNumericString(s1, s2);
    }
    else
    {
        result = CompareString(s1, s2);
    }
    return result;
}
----------------------------------------

public int Compare (string s1, string s2) {
    if (IsNumeric (s1) && IsNumeric (s2)) {
        if (Convert.ToInt32 (s1) > Convert.ToInt32 (s2))
            return 1;
        if (Convert.ToInt32 (s1) < Convert.ToInt32 (s2))
            return - 1;
        if (Convert.ToInt32 (s1) == Convert.ToInt32 (s2))
            return 0;
    }
    if (IsNumeric (s1) && ! IsNumeric (s2))
        return 1;
    if (! IsNumeric (s1) && IsNumeric (s2))
        return - 1;
    return string.Compare (s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
0
Gpt3D_Clone93_0.cs 1 17
Gpt3D_Clone93_0.cs 18 31
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) 
{
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string URI = "https://www.google.com/recaptcha/api/siteverify?";
    var web = new WebClient();
    var pars = new NameValueCollection();
    pars.Add("secret", SecretKey);
    pars.Add("response", recaptchaResponse);
    pars.Add("remoteip", GetClientIp());
    byte[] responsebytes = web.UploadValues(URI, "POST", pars);
    string responsebody = Encoding.UTF8.GetString(responsebytes);
    JavaScriptSerializer js = new JavaScriptSerializer ();
    result = js.Deserialize<RecaptchaValidationResult>(responsebody.Replace ("error-codes","ErrorMessages").Replace ("success","Succeeded"));
    return result;
}
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
0
Gpt3D_Clone941_0.cs 1 23
Gpt3D_Clone941_0.cs 24 46
----------------------------------------

private static IEnumerable < int > Merge (IEnumerable < int > enum1, IEnumerable < int > enum2) {
    IEnumerator < int > e1 = enum1.GetEnumerator ();
    IEnumerator < int > e2 = enum2.GetEnumerator ();
    bool remaining1 = e1.MoveNext ();
    bool remaining2 = e2.MoveNext ();
    while (remaining1 || remaining2) {
        if (remaining1 && remaining2) {
            if (e1.Current > e2.Current) {
                yield return e2.Current;
                remaining2 = e2.MoveNext ();
            } else {
                yield return e1.Current;
                remaining1 = e1.MoveNext ();
            }
        } else if (remaining2) {
            yield return e2.Current;
            remaining2 = e2.MoveNext ();
        } else {
            yield return e1.Current;
            remaining1 = e1.MoveNext ();
        }
    }
}
----------------------------------------

private static IEnumerable < int > Merge (IEnumerable < int > enums1, IEnumerable < int > enums2) {
    using (IEnumerator < int > enumerator1 = enums1.GetEnumerator ()) {
        using (IEnumerator < int > enumerator2 = enums2.GetEnumerator ()) {
            while (enumerator1.MoveNext () && enumerator2.MoveNext ()) {
                if (enumerator1.Current > enumerator2.Current) {
                    yield return enumerator2.Current;
                } else {
                    yield return enumerator1.Current;
                }
            }
            while (enumerator2.MoveNext ()) {
                yield return enumerator2.Current;
            }
            while (enumerator1.MoveNext ()) {
                yield return enumerator1.Current;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
0
Gpt3D_Clone944_0.cs 1 11
Gpt3D_Clone944_0.cs 12 29
----------------------------------------

private void RunTest()
{
    MyImageHandler imageHandler = new MyImageHandler();
    imageHandler.ReadImage("D:\\Images\\Image01.jpg");
    imageHandler.DeserializeAndSaveImage("D:\\Images\\Image01_Copy.jpg");
    imageHandler.ReadImage("D:\\Images\\Image02.png");
    imageHandler.DeserializeAndSaveImage("D:\\Images\\Image02_Copy.png");
    imageHandler.ReadImage("D:\\Images\\Image03.gif");
    imageHandler.DeserializeAndSaveImage("D:\\Images\\Image03_Copy.gif");
    MessageBox.Show("Test Complete");
}
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
0
Gpt3D_Clone945_0.cs 1 25
Gpt3D_Clone945_0.cs 26 52
----------------------------------------

public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) {
        if (ctrl is TextBox)
            ctrl.Enabled = false;
        else if (ctrl is Button)
            ctrl.Enabled = false;
        else if (ctrl is DropDownList)
            ctrl.Enabled = false;
        else if (ctrl is CheckBox)
            ctrl.Enabled = false;
        else if (ctrl is RadioButton)
            ctrl.Enabled = false;
        else if (ctrl is HtmlInputButton)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputText)
            ctrl.Disabled = true;
        else if (ctrl is HtmlSelect)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputCheckBox)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputRadioButton)
            ctrl.Disabled = true;
    }
    DisableForm (ctrls);
}
----------------------------------------

public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) {
        if (ctrl is TextBox)
            ((TextBox) ctrl).Enabled = false;
        if (ctrl is Button)
            ((Button) ctrl).Enabled = false;
        else if (ctrl is DropDownList)
            ((DropDownList) ctrl).Enabled = false;
        else if (ctrl is CheckBox)
            ((CheckBox) ctrl).Enabled = false;
        else if (ctrl is RadioButton)
            ((RadioButton) ctrl).Enabled = false;
        else if (ctrl is HtmlInputButton)
            ((HtmlInputButton) ctrl).Disabled = true;
        else if (ctrl is HtmlInputText)
            ((HtmlInputText) ctrl).Disabled = true;
        else if (ctrl is HtmlSelect)
            ((HtmlSelect) ctrl).Disabled = true;
        else if (ctrl is HtmlInputCheckBox)
            ((HtmlInputCheckBox) ctrl).Disabled = true;
        else if (ctrl is HtmlInputRadioButton)
            ((HtmlInputRadioButton) ctrl).Disabled = true;
        DisableForm (ctrl.Controls);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
0
Gpt3D_Clone946_0.cs 1 10
Gpt3D_Clone946_0.cs 11 21
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        String [] keys = Data_Array.Keys.ToArray ();
        for (int i = 0; i < keys.Length; i++) {
            if (Data_Array [keys [i]].Equals (value))
                return keys [i];
        }
    }
    return null;
}
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
1
Gpt3D_Clone946_1.cs 1 10
Gpt3D_Clone946_1.cs 11 21
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        IEnumerator keys = Data_Array.Keys.GetEnumerator ();
        while (keys.MoveNext ()) {
            if (Data_Array [keys.Current as string].Equals (value))
                return keys.Current as string;
        }
    }
    return null;
}
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
2
Gpt3D_Clone946_2.cs 1 9
Gpt3D_Clone946_2.cs 10 20
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

static int findFirstKeyByValue (Dictionary < int, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (int key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
0
Gpt3D_Clone950_0.cs 1 10
Gpt3D_Clone950_0.cs 11 22
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (int i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey (TextBoxes [i])) {
            TextBox txtBox = this.Controls [TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Clear ();
            }
        }
    }
}
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
1
Gpt3D_Clone950_1.cs 1 10
Gpt3D_Clone950_1.cs 11 22
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (int i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.Contains (TextBoxes [i])) {
            TextBox txtBox = this.Controls [TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = string.Empty;
            }
        }
    }
}
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
2
Gpt3D_Clone950_2.cs 1 10
Gpt3D_Clone950_2.cs 11 22
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.HasControl ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.GetControl ("txt" + TextBoxes [i]) as TextBox;
            if (txtBox != null) {
                txtBox.Clear ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
976
0
Gpt3D_Clone976_0.cs 1 16
Gpt3D_Clone976_0.cs 17 27
----------------------------------------

private static BitmapImage LoadImage (byte [] imageData) {
    if (imageData == null || imageData.Length == 0)
        return null;
    var image = new BitmapImage ();
    using (var mem = new MemoryStream (imageData))
    {
        mem.Position = 0;
        image.BeginInit ();
        image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;
        image.CacheOption = BitmapCacheOption.OnLoad;
        image.UriSource = null;
        image.StreamSource = mem;
        image.EndInit ();
    } image.Freeze ();
    return image;
}
----------------------------------------

private static BitmapImage LoadImage (byte [] imageData) {
    if (imageData == null || imageData.Length == 0)
        return null;
    var image = new BitmapImage ();
    ReadImageData(image, imageData);
    image.Freeze ();
    return image;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
976
1
Gpt3D_Clone976_1.cs 1 7
Gpt3D_Clone976_1.cs 8 25
----------------------------------------

private static BitmapImage LoadImage (byte [] imageData) {
    if (imageData == null || imageData.Length == 0)
        return null;
    BitmapImage image = CreateImageFromStream(imageData);
    image.Freeze ();
    return image;
}
----------------------------------------

private static BitmapImage LoadImage (byte [] imageData) {
    if (imageData == null || imageData.Length == 0)
        return null;
    var image = new BitmapImage ();
    using (var mem = new MemoryStream (imageData))
    {
        mem.Position = 0;
        image.BeginInit ();
        image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;
        image.CacheOption = BitmapCacheOption.OnLoad;
        image.UriSource = null;
        image.StreamSource = mem;
        image.EndInit ();
    } image.Freeze ();
    return image;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
977
0
Gpt3D_Clone977_0.cs 1 19
Gpt3D_Clone977_0.cs 20 31
----------------------------------------

public bool Equals (T left, T right) {
    var leftProp1 = expr1.Invoke (left);
    var leftProp2 = expr2.Invoke (left);
    var leftProp3 = expr3.Invoke (left);
    var rightProp1 = expr1.Invoke (right);
    var rightProp2 = expr2.Invoke (right);
    var rightProp3 = expr3.Invoke (right);
    if (leftProp1 == null && rightProp1 == null && leftProp2 == null
        && rightProp2 == null && leftProp3 == null && rightProp3 == null)
        return true;
    else if (leftProp1 == null ^ rightProp1 == null 
        || leftProp2 == null ^ rightProp2 == null 
        || leftProp3 == null ^ rightProp3 == null)
        return false;
    else
        return leftProp1.Equals (rightProp1) 
        && leftProp2.Equals (rightProp2) 
        && leftProp3.Equals (rightProp3);
}
----------------------------------------

public bool Equals (T left, T right) {
    var leftProp = expr.Invoke (left);
    var rightProp = expr.Invoke (right);
    if (leftProp == null && rightProp == null)
        return true;
    else if (leftProp == null ^ rightProp == null)
        return false;
    else
        return leftProp.Equals (rightProp);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
0
Gpt3D_Clone97_0.cs 1 9
Gpt3D_Clone97_0.cs 10 25
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
    var one = from int i in first
        select i;
    var two = from int i in second
        select i;
    same.AddRange (one.Intersect (two).ToArray < int > ());
    return same;
}
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
    for (int i = 0; i < first.Count; i++) 
    {
        for (int j = 0; j < second.Count; j++)
        {
            if (first[i] == second[j])
            { 
                same.Add(first[i]); 
            }
        }
    }
    return same;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
1
Gpt3D_Clone97_1.cs 1 14
Gpt3D_Clone97_1.cs 15 25
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
	for (int i = 0; i < first.Count; i++) 
    {
        for (int j = 0; j < second.Count; j++)
        {
            if (first[i] == second[j])
            { 
                same.Add(second[j]); 
            }
        }
    }
    return same;
}
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
    var one = from int i in first
        select i;
    var two = from int i in second
        select i;
    same.AddRange (one.Intersect (two).ToArray < int > ());
    return same;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
2
Gpt3D_Clone97_2.cs 1 7
Gpt3D_Clone97_2.cs 8 18
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
    var one = first.Distinct().ToArray();
    var two = second.Distinct().ToArray();
    same.AddRange (one.Intersect (two).ToArray < int > ());
    return same;
}
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
    var one = from int i in first
        select i;
    var two = from int i in second
        select i;
    same.AddRange (one.Intersect (two).ToArray < int > ());
    return same;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
3
Gpt3D_Clone97_3.cs 1 7
Gpt3D_Clone97_3.cs 8 18
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
    var one = first.Where(i => i%2 == 0).ToArray();
    var two = second.Where(i => i%2 == 0).ToArray();
    same.AddRange (one.Intersect (two).ToArray < int > ());
    return same;
}
----------------------------------------

private ArrayList GetSameOf2AL (ArrayList first, ArrayList second) {
    ArrayList same = new ArrayList ();
    var one = from int i in first
        select i;
    var two = from int i in second
        select i;
    same.AddRange (one.Intersect (two).ToArray < int > ());
    return same;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
0
Gpt3D_Clone981_0.cs 1 5
Gpt3D_Clone981_0.cs 6 18
----------------------------------------

public bool Equals (Shape s) {
    List<int> temp1 = new List<int> (this.coordinate);
    List<int> temp2 = new List<int> (s.coordinate);
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
1
Gpt3D_Clone981_1.cs 1 11
Gpt3D_Clone981_1.cs 12 18
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

public bool Equals (Shape s) {
    var temp1 = this.coordinate.Select (t => t);
    var temp2 = s.coordinate.Select (t => t);
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
0
Gpt3D_Clone982_0.cs 1 42
Gpt3D_Clone982_0.cs 43 63
----------------------------------------

public static string GetWord(string input, int position) {
    char s = input[position];
    int sp1 = 0; 
    int sp2 = input.Length;
    bool foundSpace = false;
    bool foundNewline = false;
    //Backwards look
    for (int i = position; i > 0; i--) {
        char ch = input[i];
        if (ch == ' ') {
            sp1 = i;
            foundSpace = true;
        }
        if(ch == '\n') {
            sp1 = i;
            foundNewline = true;
        }
        if (foundSpace || foundNewline) {
            break;
        } 
    }
    //Forward look
    for (int i = position; i < input.Length; i++) {
        char ch = input[i];
        if (ch == ' ') { 
            sp2 = i;
            foundSpace = true;
        }
        if (ch == '\n') {
            sp2 = i;
            foundNewline = true;
        }
        if (foundSpace || foundNewline) {
            break;
        }
    }
    return input.Substring(sp1, sp2 - sp1).Replace("\n", "");
}
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
3
Gpt3D_Clone982_3.cs 1 23
Gpt3D_Clone982_3.cs 24 44
----------------------------------------

public static string GetWord (string input, int position)
{
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; --i)
    {
        if (input[i] == ' ' || input[i] == '\n')
        {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; ++i)
    {
        if (input[i] == ' ' || input[i] == '\n')
        {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1,sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
990
0
Gpt3D_Clone990_0.cs 1 19
Gpt3D_Clone990_0.cs 20 33
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    if (settings is System.Dynamic.ExpandoObject)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    if (settings is System.Web.Helpers.DynamicJsonObject)
        try {
            object test = settings[name];
            return test != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    Type typeOfSettings = settings.GetType();
    PropertyInfo[] properties = typeOfSettings.GetProperties();
    foreach(PropertyInfo property in properties)
    {
        if(property.Name == name) return true;
    }
    return false;
}
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    if (settings is System.Dynamic.ExpandoObject)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    if (settings is System.Web.Helpers.DynamicJsonObject)
        try {
            return settings [name] != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
995
0
Gpt3D_Clone995_0.cs 1 16
Gpt3D_Clone995_0.cs 17 39
----------------------------------------

void Main () {
    string P = "00F35DBCD6D4C296D2FE9118B659D02608B76FAC94BB58B10283F20390E2B259BAC602466162E9EF3E6A1590702CAE49B681A75A878E266F1AFAE0FA89DA5CA44A1551B517A3F80A9D6C630F9E7D239B437F7402DF8055069735894CD9D4708F8777B5E4F3E6A8B2D4EEE50DB2C96BA16D3C81FEB923697D649A8B7771B10E5B3F";
    string Q = "00B5AF039839043410E04C35BDDB30679969EBAC8B";
    string G = "00F300A68E54DE33A09001E28EC09F2ABF5DAF208774F2514D878D5587D870C91C6DE42B4705078C6F4438765050039C2950B6DE85AFC0D12A7A5C521782CB760918DF68F385A7F177DF50AA6BA0284090454106E422FCAE5390ADC00B859A433430019E970BFA614374DE1FB40C600345EF19DC01A122E4676C614DC29D3DC2FE";
    string Y = "00A5317849AF22BA6498F1EF973158C8BDA848BEB074CB141E629C927B18F29C8CE99815001BAAB2931F339B5C52A79BC3DCB0C5962C302707BA6FF1807EEB91D751BA723BB7512C20689AC5E67A1B656CDFD1BA2D4F6A44308509486AA8754B47784FC4C03E546897200388656BA5834A2CC0E18E58454FF60C1BA5411D6F50FD";
    string X = "3A940E1805D839DAB67ADE7B24082A477BCBE25A";
    string CT = "";
    string CT1 = GenerateSignature (P, Q, G, Y, X);
    string CT2 = GenerateSignature (P, Q, G, Y, X);
    if (CT1 == CT2) 
    {
        CT = CT1;
    }
    Console.WriteLine ("CT: " + CT);
}
----------------------------------------

void Main () {
    string P = "00F35DBCD6D4C296D2FE9118B659D02608B76FAC94BB58B10283F20390E2B259BAC602466162E9EF3E6A1590702CAE49B681A75A878E266F1AFAE0FA89DA5CA44A1551B517A3F80A9D6C630F9E7D239B437F7402DF8055069735894CD9D4708F8777B5E4F3E6A8B2D4EEE50DB2C96BA16D3C81FEB923697D649A8B7771B10E5B3F";
    string Q = "00B5AF039839043410E04C35BDDB30679969EBAC8B";
    string G = "00F300A68E54DE33A09001E28EC09F2ABF5DAF208774F2514D878D5587D870C91C6DE42B4705078C6F4438765050039C2950B6DE85AFC0D12A7A5C521782CB760918DF68F385A7F177DF50AA6BA0284090454106E422FCAE5390ADC00B859A433430019E970BFA614374DE1FB40C600345EF19DC01A122E4676C614DC29D3DC2FE";
    string Y = "00A5317849AF22BA6498F1EF973158C8BDA848BEB074CB141E629C927B18F29C8CE99815001BAAB2931F339B5C52A79BC3DCB0C5962C302707BA6FF1807EEB91D751BA723BB7512C20689AC5E67A1B656CDFD1BA2D4F6A44308509486AA8754B47784FC4C03E546897200388656BA5834A2CC0E18E58454FF60C1BA5411D6F50FD";
    int a = 6;
    BigInteger p = BigInteger.Parse( P );
    BigInteger q = BigInteger.Parse( Q );
    BigInteger g = BigInteger.Parse( G );
    BigInteger y = BigInteger.Parse( Y );
    BigInteger current = 1;
    BigInteger two = 2;
    for (int i = 0; i < a ; i++)
    {
        current = BigInteger.Multiply( current , two );
    }
    BigInteger k = BigInteger.ModPow( y , current , p );
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
995
2
Gpt3D_Clone995_2.cs 1 24
Gpt3D_Clone995_2.cs 25 42
----------------------------------------

void Main () {
    string P = "00F35DBCD6D4C296D2FE9118B659D02608B76FAC94BB58B10283F20390E2B259BAC602466162E9EF3E6A1590702CAE49B681A75A878E266F1AFAE0FA89DA5CA44A1551B517A3F80A9D6C630F9E7D239B437F7402DF8055069735894CD9D4708F8777B5E4F3E6A8B2D4EEE50DB2C96BA16D3C81FEB923697D649A8B7771B10E5B3F";
    string Q = "00B5AF039839043410E04C35BDDB30679969EBAC8B";
    string G = "00F300A68E54DE33A09001E28EC09F2ABF5DAF208774F2514D878D5587D870C91C6DE42B4705078C6F4438765050039C2950B6DE85AFC0D12A7A5C521782CB760918DF68F385A7F177DF50AA6BA0284090454106E422FCAE5390ADC00B859A433430019E970BFA614374DE1FB40C600345EF19DC01A122E4676C614DC29D3DC2FE";
    string Y = "00A5317849AF22BA6498F1EF973158C8BDA848BEB074CB141E629C927B18F29C8CE99815001BAAB2931F339B5C52A79BC3DCB0C5962C302707BA6FF1807EEB91D751BA723BB7512C20689AC5E67A1B656CDFD1BA2D4F6A44308509486AA8754B47784FC4C03E546897200388656BA5834A2CC0E18E58454FF60C1BA5411D6F50FD";
#====================
#gpt output=============
    int a = 6;
    BigInteger p = BigInteger.Parse( P );
    BigInteger q = BigInteger.Parse( Q );
    BigInteger g = BigInteger.Parse( G );
    BigInteger y = BigInteger.Parse( Y );
    BigInteger current = 1;
    BigInteger two = 2;
    for (int i = 0; i < a ; i++)
    {
        current = BigInteger.Multiply( current , two );
    }
    BigInteger k = BigInteger.ModPow( y , current , p );
}
----------------------------------------

void Main () {
    string P = "00F35DBCD6D4C296D2FE9118B659D02608B76FAC94BB58B10283F20390E2B259BAC602466162E9EF3E6A1590702CAE49B681A75A878E266F1AFAE0FA89DA5CA44A1551B517A3F80A9D6C630F9E7D239B437F7402DF8055069735894CD9D4708F8777B5E4F3E6A8B2D4EEE50DB2C96BA16D3C81FEB923697D649A8B7771B10E5B3F";
    string Q = "00B5AF039839043410E04C35BDDB30679969EBAC8B";
    string G = "00F300A68E54DE33A09001E28EC09F2ABF5DAF208774F2514D878D5587D870C91C6DE42B4705078C6F4438765050039C2950B6DE85AFC0D12A7A5C521782CB760918DF68F385A7F177DF50AA6BA0284090454106E422FCAE5390ADC00B859A433430019E970BFA614374DE1FB40C600345EF19DC01A122E4676C614DC29D3DC2FE";
    string Y = "00A5317849AF22BA6498F1EF973158C8BDA848BEB074CB141E629C927B18F29C8CE99815001BAAB2931F339B5C52A79BC3DCB0C5962C302707BA6FF1807EEB91D751BA723BB7512C20689AC5E67A1B656CDFD1BA2D4F6A44308509486AA8754B47784FC4C03E546897200388656BA5834A2CC0E18E58454FF60C1BA5411D6F50FD";
    string X = "3A940E1805D839DAB67ADE7B24082A477BCBE25A";
    
    // Calculate result in two different variables
    string CT1 = GenerateSignature (P, Q, G, Y, X);
    string CT2 = GenerateSignature (P, Q, G, Y, X);
    if (CT1 == CT2) 
    {
        Console.WriteLine ("CT: " + CT1);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
0
Gpt3D_Clone999_0.cs 1 24
Gpt3D_Clone999_0.cs 25 42
----------------------------------------

public static void Move<T> (List<T> list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
      return;
    T tmp = list[oldIndex];
    int i = 0;
    if (oldIndex < newIndex) {
      while (i < oldIndex - newIndex) 
      {
          list[oldIndex - i] = list[oldIndex - (i + 1)];
          i++;
      }
    } 
    else 
    {
      int x = 0;
      while (x < newIndex - oldIndex) 
      {
        list[oldIndex + x] = list[oldIndex + (x + 1)];
        x++;
      }
    }
    list[newIndex] = tmp;
}
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
1
Gpt3D_Clone999_1.cs 1 16
Gpt3D_Clone999_1.cs 17 34
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

public static void Move<T> (List<T> list, int oldIndex, int newIndex) {
    if ((oldIndex != newIndex) && (0 <= oldIndex) && (oldIndex < list.Count) && (0 <= newIndex) && (newIndex < list.Count)) {
        T tmp = list[oldIndex];
        int i = 0;
        if (oldIndex < newIndex) {
            for (i = oldIndex; i < newIndex; i++) {
                list[i] = list[i + 1];
            }
        } else {
            for (i = oldIndex - 1; i >= newIndex; i--) {
                list[i + 1] = list[i];
            }
        }
        list[newIndex] = tmp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
2
Gpt3D_Clone99_2.cs 1 10
Gpt3D_Clone99_2.cs 11 21
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Tom", "David", "Kelly", "Nolan", "Adam", "Carl", "John", "Sam", "Tim", "Bob"};
    int count = names.Count;
    for (int i = 0; i < count; i ++) {
        if ((i % 4 == 0) && (i != 0))
            System.Console.WriteLine ();
        System.Console.Write (names [i] + "\t");
    }
    System.Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
3
Gpt3D_Clone99_3.cs 1 9
Gpt3D_Clone99_3.cs 10 21
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int count = names.Count;
    for (int i = 0; i < count; i ++) {
        if (i % 4 == 0 && i > 0)
            System.Console.WriteLine ();
        System.Console.Write (names [i] + "\t");
    }
    System.Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
0
Gpt3D_Clone102_0.cs 1 16
Gpt3D_Clone102_0.cs 17 32
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site = null;
	try {
        site = new SPSite (path);
		bool result = true;
    }
    catch (FileNotFoundException e) {
        bool result = false;
    }
    finally {
        if (site != null)
            site.Dispose ();
		
        return result;
    }
}
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
0
Gpt3D_Clone107_0.cs 1 11
Gpt3D_Clone107_0.cs 12 23
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index) {
        dataGridView1.EndEdit ();
        var value = (bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value;
        if (value == true) {
            int colIndex = e.ColumnIndex;
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index) {
        dataGridView1.EndEdit ();
        if ((bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value) {
            int colIndex = e.ColumnIndex;
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
1
Gpt3D_Clone107_1.cs 1 10
Gpt3D_Clone107_1.cs 11 22
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    var colIndex = dataGridView1.Columns ["Your Column Name"].Index;
    if (e.ColumnIndex == colIndex) {
        dataGridView1.EndEdit ();
        if (dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value == true) {
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index) {
        dataGridView1.EndEdit ();
        if ((bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value) {
            int colIndex = e.ColumnIndex;
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
110
0
Gpt3D_Clone110_0.cs 1 11
Gpt3D_Clone110_0.cs 12 23
----------------------------------------

public static string GetMimeType (string sFilePath) {
    string sMimeType = String.Empty;
    sMimeType = GetMimeTypeFromList(sFilePath);
    if (String.IsNullOrEmpty(sMimeType)) {
        sMimeType = GetMimeTypeFromFile(sFilePath);
    }
    if (String.IsNullOrEmpty(sMimeType)) {
        sMimeType = GetMimeTypeFromRegistry(sFilePath);
    }
    return sMimeType;
}
----------------------------------------

public static string GetMimeType (string sFilePath) {
    string sMimeType = GetMimeTypeFromList (sFilePath);
    if (String.IsNullOrEmpty (sMimeType)) {
        sMimeType = GetMimeTypeFromFile (sFilePath);
        if (String.IsNullOrEmpty (sMimeType)) {
            sMimeType = GetMimeTypeFromRegistry (sFilePath);
        }
    }
    return sMimeType;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
111
0
Gpt3D_Clone111_0.cs 1 11
Gpt3D_Clone111_0.cs 12 25
----------------------------------------

public MyType doSomething (bool a, bool b) {
    if (a) {
        if (b)
            return doAB ();
        return doA ();
    } else {
        if (b)
            return doB ();
        return doNotANotB ();
    }
}
----------------------------------------

public MyType doSomething (bool a, bool b) {
    switch (a) {
        case true :
            if (b)
                return doAB ();
            return doA ();
        default :
            if (b)
                return doB ();
            return doNotANotB ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
0
Gpt3D_Clone113_0.cs 1 12
Gpt3D_Clone113_0.cs 13 22
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    try {
        if (disposing) {
        }
    }
    finally {
        Close ();
        m_disposed = true;
     }
}
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
1
Gpt3D_Clone113_1.cs 1 10
Gpt3D_Clone113_1.cs 11 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    using (m_resource) {
        if (disposing) {
        }
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
116
0
Gpt3D_Clone116_0.cs 1 21
Gpt3D_Clone116_0.cs 22 48
----------------------------------------

static void Main (string [] args) {
    List < Discount > list = new List < Discount > ();
    list.Add (new Discount {Id = 1, Title = "Adam"});
    list.Add (new Discount {Id = 2, Title = "Ben"});
    list.Add (new Discount {Id = 3, Title = "Alex"});
    list.Add (new Discount {Id = 4, Title = "Daniel"});
    list.Add (new Discount {Id = 5, Title = "Ethan"});
    list.Add (new Discount {Id = 6, Title = "Howard"});
    list.Add (new Discount {Id = 7, Title = "Peter"});
    list.Add (new Discount {Id = 8, Title = "Tazz"});
    list.Add (new Discount {Id = 9, Title = "Steve"});
    list.Add (new Discount {Id = 10, Title = "Lyle"});
    Dictionary < string, List < Discount > > dic = new Dictionary < string, List < Discount > > ();
    foreach (Discount d in list) {
        string range = GetRange (d.Title);
        if (dic.ContainsKey (range))
            dic [range].Add (d);
        else
            dic.Add (range, new List < Discount > {d});
    }
}
----------------------------------------

static void Main (string [] args) {
    List < Discount > list = new List < Discount > ();
    list.Add (new Discount {Id = 1, Title = "Adam"});
    list.Add (new Discount {Id = 2, Title = "Ben"});
    list.Add (new Discount {Id = 3, Title = "Alex"});
    list.Add (new Discount {Id = 4, Title = "Daniel"});
    list.Add (new Discount {Id = 5, Title = "Ethan"});
    list.Add (new Discount {Id = 6, Title = "Howard"});
    list.Add (new Discount {Id = 7, Title = "Peter"});
    list.Add (new Discount {Id = 8, Title = "Tazz"});
    list.Add (new Discount {Id = 9, Title = "Steve"});
    list.Add (new Discount {Id = 10, Title = "Lyle"});
    Dictionary < string, List < Discount > > dic = new Dictionary < string, List < Discount > > ();
    List < Discount > temp = new List < Discount > ();
    foreach (Discount d in list) {
        string range = GetRange (d.Title);
        if (dic.ContainsKey (range)) {
            temp = dic [range];
            temp.Add (d);
            dic [range] = temp;
        } else
            dic.Add (range, new List < Discount > {d});
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
0
Gpt3D_Clone119_0.cs 1 12
Gpt3D_Clone119_0.cs 13 26
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    WebRequest request = WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Method = "GET";
    WebResponse webresponse = request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    Stream loResponseStream = webresponse.GetResponseStream ();
    using (StreamReader reader = new StreamReader (loResponseStream, enc)) {
        string Response = reader.ReadToEnd ();
        context.Response.Write (Response);
    }
}
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
120
0
Gpt3D_Clone120_0.cs 1 12
Gpt3D_Clone120_0.cs 13 25
----------------------------------------

public static string GetFullPath (string fileName) {
    var fullPath = Path.GetFullPath (fileName);
    if (File.Exists (fullPath))
        return fullPath;
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
120
1
Gpt3D_Clone120_1.cs 1 12
Gpt3D_Clone120_1.cs 13 25
----------------------------------------

public static string GetFullPath (string fileName) {
    var values = Environment.GetEnvironmentVariable ("PATH");
    var fullPath = Path.GetFullPath (fileName);
    if (File.Exists (fullPath))
        return fullPath;    
    foreach (var path in values.Split (';')) {
        fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    };
    return null;
}
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
123
0
Gpt3D_Clone123_0.cs 1 15
Gpt3D_Clone123_0.cs 16 30
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, out string fileName, int wait) {
    using (FileNameFromHandleState f = new FileNameFromHandleState (handle))
    {
        BackgroundWorker worker = new BackgroundWorker ();
        worker.DoWork += () => GetFileNameFromHandle (f);
        worker.RunWorkerAsync();
        if (f.WaitOne (wait)) {
            fileName = f.FileName;
            return f.RetValue;
        } else {
            fileName = string.Empty;
            return false;
        }
    }
}
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, out string fileName, int wait) {
    using (FileNameFromHandleState f = new FileNameFromHandleState (handle))
    {
        ThreadPool.QueueUserWorkItem (new WaitCallback (GetFileNameFromHandle), f);
        if (f.WaitOne (wait)) {
            fileName = f.FileName;
            return f.RetValue;
        } else {
            fileName = string.Empty;
            return false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
0
Gpt3D_Clone125_0.cs 1 22
Gpt3D_Clone125_0.cs 23 51
----------------------------------------

static void Main()
{
    int i, n;
    Console.WriteLine("Enter the number of highest elements you want to extract from the array:");
    while (!int.TryParse(Console.ReadLine(), out n))
    {
        Console.WriteLine("Enter the number of highest elements you want to extract from the array:");
    }
    double[] arr = { 12.1, 5.9, 2.9, 6.8, 20.5 };
    if (n > arr.Length)
        n = arr.Length;
    double[] result = new double[n];
    for (int j = 0; j < n; j++)
    {
        double max = arr.Max();
        int k = Array.IndexOf(arr, max);
        result[j] = max;
        arr[k] = Double.MinValue;
        Console.WriteLine("Highest numbers: {0}", result[j]);
    }
    Console.ReadKey();
}
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
0
Gpt3D_Clone126_0.cs 1 14
Gpt3D_Clone126_0.cs 15 29
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue; 
    if (!Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    int modifiedValue = p.AddTen (safelyConvertedValue);
    textBox1.Text = modifiedValue.ToString ();
}
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
1
Gpt3D_Clone126_1.cs 1 13
Gpt3D_Clone126_1.cs 14 28
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

protected void  button1_Click (object sender, EventArgs e) {
    try {
        int safelyConvertedValue = Convert.ToInt32 (textBox1.Text);
        if (safelyConvertedValue < 0 || safelyConvertedValue > 9) { 
            MessageBox.Show ("You need to enter a number between 1 an 9");
            return;
        }
        MyProcessor p = new MyProcessor ();
        textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
    } catch {
        MessageBox.Show ("You need to enter a number between 1 an 9");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
0
Gpt3D_Clone129_0.cs 1 31
Gpt3D_Clone129_0.cs 32 64
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    int minx = int.MaxValue, maxx = int.MinValue, miny = int.MaxValue, maxy = int.MinValue;
    using (Bitmap bmp = new Bitmap (2, 3))
    {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.TranslateTransform ((float) img.Width / 2, (float) img.Height / 2);
            g.RotateTransform (rotationAngle+3);
            g.TranslateTransform (- (float) img.Width / 2, - (float) img.Height / 2);
            Point [] pts = new Point [4];
            pts [0] = new Point (0, 0);
            pts [1] = new Point (img.Width+2, 0);
            pts [2] = new Point (img.Width+3, img.Height+2);
            pts [3] = new Point (0, img.Height+3);
            g.TransformPoints (CoordinateSpace.Device, CoordinateSpace.World, pts);
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }} Bitmap bmp2 = new Bitmap (maxx - minx+3, maxy - miny+3);
    using (Graphics g = Graphics.FromImage (bmp2))
    {
        g.TranslateTransform ((float) bmp2.Width / 2, (float) bmp2.Height / 2);
        g.RotateTransform (rotationAngle+7);
        g.TranslateTransform (- (float) bmp2.Width / 2, - (float) bmp2.Height / 2);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.DrawImage (img, bmp2.Width / 2 - img.Width / 2+4, bmp2.Height / 2 - img.Height / 2+4);
    } return bmp2;
}
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    int minx = int.MaxValue, maxx = int.MinValue, miny = int.MaxValue, maxy = int.MinValue;
    using (Bitmap bmp = new Bitmap (1, 1))
    {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.TranslateTransform ((float) img.Width / 2, (float) img.Height / 2);
            g.RotateTransform (rotationAngle);
            g.TranslateTransform (- (float) img.Width / 2, - (float) img.Height / 2);
            Point [] pts = new Point [4];
            pts [0] = new Point (0, 0);
            pts [1] = new Point (img.Width, 0);
            pts [2] = new Point (img.Width, img.Height);
            pts [3] = new Point (0, img.Height);
            g.TransformPoints (CoordinateSpace.Device, CoordinateSpace.World, pts);
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }} Bitmap bmp2 = new Bitmap (maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage (bmp2))
    {
        g.TranslateTransform ((float) bmp2.Width / 2, (float) bmp2.Height / 2);
        g.RotateTransform (rotationAngle);
        g.TranslateTransform (- (float) bmp2.Width / 2, - (float) bmp2.Height / 2);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.DrawImage (img, bmp2.Width / 2 - img.Width / 2, bmp2.Height / 2 - img.Height / 2);
    } return bmp2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
12
0
Gpt3D_Clone12_0.cs 1 17
Gpt3D_Clone12_0.cs 18 30
----------------------------------------

public string ReadCookie (string name) {
    //check in response
    for (int i = 0; i < HttpContext.Current.Response.Cookies.AllKeys.Length; i++) {
        if (HttpContext.Current.Response.Cookies.AllKeys [i] == name) {
            var cookie = HttpContext.Current.Response.Cookies [name];
            return cookie.Value;
        }
    }
    //check in request
    for (int i = 0; i < HttpContext.Current.Request.Cookies.AllKeys.Length; i++) {
        if (HttpContext.Current.Request.Cookies.AllKeys [i] == name) {
            var cookie = HttpContext.Current.Request.Cookies [name];
            return cookie.Value;
        }
    }
    return null;
}
----------------------------------------

public string ReadCookie (string name) {
    if (HttpContext.Current.Response.Cookies.AllKeys.Contains (name)) {
        var cookie = HttpContext.Current.Response.Cookies [name];
        return cookie.Value;
    }
    if (HttpContext.Current.Request.Cookies.AllKeys.Contains (name)) {
        var cookie = HttpContext.Current.Request.Cookies [name];
        return cookie.Value;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
12
1
Gpt3D_Clone12_1.cs 1 17
Gpt3D_Clone12_1.cs 18 30
----------------------------------------

public string ReadCookie (string name) {
    //check in response
    foreach (string key in HttpContext.Current.Response.Cookies.AllKeys){
        if (key == name){
            var cookie = HttpContext.Current.Response.Cookies [name];
            return cookie.Value;
        }
    }
    //check in request
    foreach (string key in HttpContext.Current.Request.Cookies.AllKeys){
        if (key == name){
            var cookie = HttpContext.Current.Request.Cookies [name];
            return cookie.Value;
        }
    }
    return null;
}
----------------------------------------

public string ReadCookie (string name) {
    if (HttpContext.Current.Response.Cookies.AllKeys.Contains (name)) {
        var cookie = HttpContext.Current.Response.Cookies [name];
        return cookie.Value;
    }
    if (HttpContext.Current.Request.Cookies.AllKeys.Contains (name)) {
        var cookie = HttpContext.Current.Request.Cookies [name];
        return cookie.Value;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
0
Gpt3D_Clone131_0.cs 1 14
Gpt3D_Clone131_0.cs 15 29
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        string [] parts = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, parts [0]), parts [1]);
    } else {
        Type type = src.GetType ();
        PropertyInfo property = type.GetProperty (propName);
        return property != null ? property.GetValue (src, null) : null;
    }
}
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
2
Gpt3D_Clone139_2.cs 1 15
Gpt3D_Clone139_2.cs 16 34
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    if (Directory.Exists(Path)) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if(File.Exists(filePath)) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey();
}
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    bool isDirExists = Directory.Exists (Path);
    bool isFileExists = File.Exists (filePath);
    if (isDirExists) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if (isFileExists) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
3
Gpt3D_Clone139_3.cs 1 15
Gpt3D_Clone139_3.cs 16 34
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    if (Directory.Exists(Path)) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    string filePath = @"C:\Abhishek\Documents.txt";
    if(File.Exists(filePath)) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey();
}
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    bool isDirExists = Directory.Exists (Path);
    bool isFileExists = File.Exists (filePath);
    if (isDirExists) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if (isFileExists) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
140
1
Gpt3D_Clone140_1.cs 1 14
Gpt3D_Clone140_1.cs 15 26
----------------------------------------

public string GetAccessToken()
{
    var facebookCookie = HttpContext.Current.Request.Cookies["fbsr_" + _appId];
    if (facebookCookie == null || facebookCookie.Value == null)
    {
        return null;
    }
    
    var decodedCookieString = FromBase64ForUrlString(facebookCookie.Value.Split(new char[] { '.' })[1]);
    var jsoncode =  System.Text.Encoding.ASCII.GetString(decodedCookieString);
    var tokenParams = HttpUtility.ParseQueryString(GetAccessToken((string)JObject.Parse(jsoncode)["code"]));
    _accessToken = tokenParams["access_token"];
    return _accessToken;
}
----------------------------------------

public string GetAccessToken () {
    var facebookCookie = HttpContext.Current.Request.Cookies ["fbsr_" + _appId];
    if (facebookCookie != null && facebookCookie.Value != null) {
        string jsoncode = System.Text.ASCIIEncoding.ASCII.GetString (FromBase64ForUrlString (facebookCookie.Value.Split (new char [] {'.'}) [1]));
        var tokenParams = HttpUtility.ParseQueryString (GetAccessToken ((string) JObject.Parse (jsoncode) ["code"]));
        _accessToken = tokenParams ["access_token"];
        return _accessToken;
    } else
        return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
1
Gpt3D_Clone141_1.cs 1 9
Gpt3D_Clone141_1.cs 10 23
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        outString += counter % 4 == 0 ? string.Format ("{0}-{1}", outString, inText.Substring (counter, 1)) : inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
2
Gpt3D_Clone141_2.cs 1 9
Gpt3D_Clone141_2.cs 10 23
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        outString += (counter % 4 == 0) ? string.Format ("{0}-{1}", outString, inText.Substring (counter, 1)) : inText.Substring (counter, 1);
        counter++;
    }
    return outString;
}
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
2
Gpt3D_Clone142_2.cs 1 18
Gpt3D_Clone142_2.cs 19 50
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

public int Compare(string x, string y) 
{ 
    string[] xs = x.Split('.'); 
    string[] ys = y.Split('.'); 
    if(xs.Length >ys.Length) 
    { 
        return 1; 
    } 
    else if(xs.Length <ys.Length) 
    { 
        return -1; 
    } 
    else 
    { 
        int minlen = Math.Min(ys.Length, xs.Length); 
        for(int i = 0; i < minlen; i++) 
        { 
            if (int.Parse(xs[i]) > int.Parse(ys[i])) 
            { 
                return 1; 
            } 
            else if (int.Parse(xs[i]) < int.Parse(ys[i])) 
            { 
                return -1; 
            } 
        } 
        return 0; 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
3
Gpt3D_Clone142_3.cs 1 18
Gpt3D_Clone142_3.cs 19 38
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int minLoop = Math.Max (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) < int. Parse (ys [i])) {
            return - 1;
        } else if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        }
    }
    if (xs.Length < ys.Length) {
        return - 1;
    } else if (xs.Length > ys.Length) {
        return 1;
    }
    return 0;
}
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
0
Gpt3D_Clone143_0.cs 1 26
Gpt3D_Clone143_0.cs 27 46
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        int xCurrent;
        int yCurrent;
        try {
            xCurrent = int.Parse(xs [i]);
            yCurrent = int.Parse(ys [i]);
            if (xCurrent > yCurrent) {
                return 1;
            } else if (xCurrent < yCurrent) {
                return -1;
            }
        } catch (FormatException) {
            return -1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return -1;
    }
    return 0;
}
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
1
Gpt3D_Clone143_1.cs 1 18
Gpt3D_Clone143_1.cs 19 40
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        int xCurrent = int.Parse (xs [i]);
        int yCurrent = int.Parse (ys [i]);
        if (xCurrent > yCurrent) {
            return 1;
        } else if (xCurrent < yCurrent) {
            return -1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return -1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
2
Gpt3D_Clone143_2.cs 1 13
Gpt3D_Clone143_2.cs 14 33
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = xs.Length < ys.Length ? xs.Length : ys.Length;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    return xs.Length > ys.Length ? 1 : (xs.Length < ys.Length ? -1 : 0);
}
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
0
Gpt3D_Clone144_0.cs 1 10
Gpt3D_Clone144_0.cs 11 22
----------------------------------------

private int Compare (string [] x, string [] y) {
    if (x.Length < y.Length)
        return - Compare (y, x);
    for (int i = 0; i != x.Length; ++ i) {
        int cmp = int.Parse (x [i]).CompareTo (int.Parse (y [i]));
        if (cmp != 0)
            return cmp;
    }
    return x.Length == y.Length ? 0 : 1;
}
----------------------------------------

private int Compare (string [] x, string [] y) {
    if (x.Length > y.Length)
        return - Compare (y, x);
    for (int i = 0; i != x.Length; ++ i) {
        int cmp = int.Parse (x [i]).CompareTo (int.Parse (y [i]));
        if (cmp != 0)
            return cmp;
    }
    return x.Length == y.Length ? 0 : - 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
1
Gpt3D_Clone144_1.cs 1 10
Gpt3D_Clone144_1.cs 11 22
----------------------------------------

private int Compare(string[] x, string[] y) {
    if (x.Length > y.Length)
        return -Compare(y, x);
    for (int i = 0; i != x.Length; ++i) {
        long cmp = long.Parse(x[i]).CompareTo(long.Parse(y[i]));
        if (cmp != 0)
            return (int)cmp;
    }
    return (x.Length == y.Length) ? 0 : -1;
}
----------------------------------------

private int Compare (string [] x, string [] y) {
    if (x.Length > y.Length)
        return - Compare (y, x);
    for (int i = 0; i != x.Length; ++ i) {
        int cmp = int.Parse (x [i]).CompareTo (int.Parse (y [i]));
        if (cmp != 0)
            return cmp;
    }
    return x.Length == y.Length ? 0 : - 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
146
0
Gpt3D_Clone146_0.cs 1 15
Gpt3D_Clone146_0.cs 16 33
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

int IndexOfLongestRun (string input) {
    int longestRunStart = - 1;
    int longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        int runValue = (int)input [i];
        int runStart = i;
        while (++ i < input.Length && (int)input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    } 
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
146
1
Gpt3D_Clone146_1.cs 1 16
Gpt3D_Clone146_1.cs 17 33
----------------------------------------

int GetIndexOfLongestRun (string input) {
    int longestRunStart = - 1;
    int longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        char runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart; 
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
0
Gpt3D_Clone147_0.cs 1 20
Gpt3D_Clone147_0.cs 21 37
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart=-1;
    int longestRunLength=0;
    int i=0;
    while (i<input.Length)
    {
        char runValue=input[i];
        int runStart=i;
        while (++i<input.Length && input[i]==runValue)
        {
        }
        int runLength=i-runStart;
        if (longestRunLength<runLength)
        {
            longestRunStart=runStart;
            longestRunLength=runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
1
Gpt3D_Clone147_1.cs 1 17
Gpt3D_Clone147_1.cs 18 34
----------------------------------------

static int IndexOfLongestRun (string input) {
    int highestIndex = -1;
    int longestRunLength = 0;
    int i = 0;
    while (i < input.Length) {
        char runSymbol = input[i];
        int index = i;
        while (++i < input.Length && input[i] == runSymbol) {
        }
        int length = i - index;
        if (longestRunLength < length) {
            highestIndex = index;
            longestRunLength = length;
        } 
    }
    return highestIndex;
}
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
2
Gpt3D_Clone147_2.cs 1 16
Gpt3D_Clone147_2.cs 17 33
----------------------------------------

static int IndexOfLongestRun (string input) {
    int runStart, runLength;
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
3
Gpt3D_Clone147_3.cs 1 15
Gpt3D_Clone147_3.cs 16 32
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0, runStart, runLength;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
149
0
Gpt3D_Clone149_0.cs 1 19
Gpt3D_Clone149_0.cs 20 45
----------------------------------------

private static int IndexOfLongestRun (string str) {
    char [] array1 = str.ToCharArray ();
    Comparer comparer = new Comparer ();
    int counter = 0;
    int maxCount = 0;
    int idenxOf = 0;
    for (int i = 0; i < array1.Length; i ++) {
        counter = 0;
        while (i < array1.Length - 1 && comparer.Compare (array1 [i], array1 [i + 1]) == 0) {
            counter ++;
            i ++;
        }
        if (maxCount < counter) {
            maxCount = counter;
            idenxOf = i - counter + 1;
        }
    }
    return idenxOf;
}
----------------------------------------

private static int IndexOfLongestRun (string str) {
    char [] array1 = str.ToCharArray ();
    Comparer comparer = new Comparer ();
    int counter = 1;
    int maxCount = 0;
    int idenxOf = 0;
    int i;
    for (i = 0; i < array1.Length - 1; i ++) {
        if (comparer.Compare (array1 [i], array1 [i + 1]) == 0) {
            counter ++;
        } else {
            if (maxCount < counter) {
                maxCount = counter;
                idenxOf = i - counter + 1;
            }
            counter = 1;
        }
    }
    if (maxCount < counter) {
        maxCount = counter;
        idenxOf = i - counter + 1;
    }
    return idenxOf;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
149
1
Gpt3D_Clone149_1.cs 1 19
Gpt3D_Clone149_1.cs 20 45
----------------------------------------

private static int IndexOfLongestRun (string str) {
    char [] array1 = str.ToCharArray ();
    Comparer comparer = new Comparer ();
    int counter = 0;
    int maxCount = 0;
    int idenxOf = 0;
    for (int i = 0; i < array1.Length; i ++) {
        counter = 0;
        while (i < array1.Length - 1 && array1 [i] == array1 [i + 1]) {
            counter ++;
            i ++;
        }
        if (maxCount < counter) {
            maxCount = counter;
            idenxOf = i - counter + 1;
        }
    }
    return idenxOf;
}
----------------------------------------

private static int IndexOfLongestRun (string str) {
    char [] array1 = str.ToCharArray ();
    Comparer comparer = new Comparer ();
    int counter = 1;
    int maxCount = 0;
    int idenxOf = 0;
    int i;
    for (i = 0; i < array1.Length - 1; i ++) {
        if (comparer.Compare (array1 [i], array1 [i + 1]) == 0) {
            counter ++;
        } else {
            if (maxCount < counter) {
                maxCount = counter;
                idenxOf = i - counter + 1;
            }
            counter = 1;
        }
    }
    if (maxCount < counter) {
        maxCount = counter;
        idenxOf = i - counter + 1;
    }
    return idenxOf;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
1
Gpt3D_Clone155_1.cs 1 10
Gpt3D_Clone155_1.cs 11 23
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int bytesRead = 0;
    if (streams.Count > 0) {
        bytesRead = streams.Peek ().Read (buffer, offset, count);
        if (bytesRead == 0) {
            streams.Dequeue ().Dispose ();
            bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
0
Gpt3D_Clone158_0.cs 1 13
Gpt3D_Clone158_0.cs 14 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            TextBox txt = (TextBox) control;
            txt.Text = string.Empty;
        } else if (control is NumericUpDown) {
            NumericUpDown numericUpDown = (NumericUpDown) control;
            numericUpDown.Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
1
Gpt3D_Clone158_1.cs 1 11
Gpt3D_Clone158_1.cs 12 24
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            ((TextBox)control).Text = string.Empty;
        } else if (control is MaskedTextBox) {
            ((MaskedTextBox)control).Clear();
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
0
Gpt3D_Clone15_0.cs 1 13
Gpt3D_Clone15_0.cs 14 33
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0) {
        try {
            msg = ByteArrayToString (ReadBuffer, bytesRead);
            Debug.Log ("RAW RECEIVE: " + msg);
        }
        catch (Exception e) {
            Debug.LogError (e);
        }
        MessageBuffer += msg;
    }
    else {
        Debug.LogError ("No bytes read from socket.");
    }
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
1
Gpt3D_Clone15_1.cs 1 13
Gpt3D_Clone15_1.cs 14 28
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0) {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
        Debug.Log ("RAW RECEIVE: " + msg);
        MessageBuffer += msg;
    }
    else {
        Debug.LogError ("No bytes read from socket.");
    }
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
161
0
Gpt3D_Clone161_0.cs 1 17
Gpt3D_Clone161_0.cs 18 34
----------------------------------------

protected void TextBox1_TextChanged1 (object sender, EventArgs e) {
    DataTable dt = g1.return_dt ("select name from tbl_data_show");
    if (dt.Rows.Count > 0) {
        String name = dt.Rows [0] ["name"];
        if (TextBox1.Text == name) {
            Label1.Text = "4";
            Label1.Visible = true;
        } else if (TextBox1.Text != name) {
            Label2.Text = "5";
            Label2.Visible = true;
        } else {
            Label1.Visible = false;
            Label2.Visible = false;
        }
    }
}
----------------------------------------

protected void TextBox1_TextChanged1 (object sender, EventArgs e) {
    dt = g1.return_dt ("select name from tbl_data_show");
    if (dt.Rows.Count > 0) {
        if (TextBox1.Text == dt.Rows [0] ["name"]) {
            Label1.Text = "4";
            Label1.Visible = true;
        } else if (TextBox1.Text != dt.Rows [0] ["name"]) {
            Label2.Text = "5";
            Label2.Visible = true;
        } else {
            Label1.Visible = false;
            Label2.Visible = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
161
1
Gpt3D_Clone161_1.cs 1 15
Gpt3D_Clone161_1.cs 16 33
----------------------------------------

protected void TextBox1_TextChanged1 (object sender, EventArgs e) {
    dt = g1.return_dt ("select name from tbl_data_show");
    if (dt.Rows.Count > 0) {
        if (TextBox1.Text == dt.Rows [0] ["name"]) {
            Label1.Text = "4";
            Label1.Visible = true;
        } else if (TextBox1.Text != dt.Rows [0] ["name"]) {
            Label2.Text = "5";
            Label2.Visible = true;
        } else {
            Label1.Visible = false;
            Label2.Visible = false;
        }
    }
}
----------------------------------------

protected void TextBox1_TextChanged1 (object sender, EventArgs e) {
    DataTable dt = g1.return_dt ("select name from tbl_data_show");
    if (dt.Rows.Count > 0) {
        if (TextBox1.Text.Equals(dt.Rows [0] ["name"])) {
            Label1.Text = "4";
            Label1.Visible = true;
        } else if (!TextBox1.Text.Equals(dt.Rows [0] ["name"])) {
            Label2.Text = "5";
            Label2.Visible = true;
        } else {
            Label1.Visible = false;
            Label2.Visible = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
0
Gpt3D_Clone163_0.cs 1 10
Gpt3D_Clone163_0.cs 11 21
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (@username)";
    c.Open ();
    using (SqlCommand cmd = new SqlCommand (w, c))
    {
        cmd.Parameters.Add ("@username", SqlDbType.VarChar);
        cmd.Parameters ["@username"].Value = textBox1.Text;
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (?)";
    c.Open ();
    using (SqlCommand cmd = new SqlCommand (w, c))
    {
        cmd.Parameters.Add (textBox1.Text);
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
1
Gpt3D_Clone163_1.cs 1 9
Gpt3D_Clone163_1.cs 10 21
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (?)";
    c.Open ();
    using (MySqlCommand cmd = new MySqlCommand (w, c))
    {
        cmd.Parameters.Add (textBox1.Text);
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (@username)";
    c.Open ();
    using (SqlCommand cmd = new SqlCommand (w, c))
    {
        cmd.Parameters.Add ("@username", SqlDbType.VarChar);
        cmd.Parameters ["@username"].Value = textBox1.Text;
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
165
0
Gpt3D_Clone165_0.cs 1 11
Gpt3D_Clone165_0.cs 12 40
----------------------------------------

static void Main (string [] args) {
    try {
        using (TestClass t = new TestClass ())
        {
            Thread ts = new Thread (new ThreadStart (t.GetTest));
            ts.Start ();
        }}
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

static void Main (string[] args) {
    try 
    {
        TestClass t = new TestClass ();
        Thread ts = new Thread (new ThreadStart (t.GetTest));
        ts.Start ();
    }
    catch (Exception ex) 
    {
        Console.WriteLine ("Error: " + ex.Message);
    }
 }
// Type 4 code clone variant
static void Main (string[] args) {
    try {
        TestClass t;
        using (t = new TestClass ())
        {
            Thread ts = new Thread (new ThreadStart (t.GetTest));
            ts.Start ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
165
1
Gpt3D_Clone165_1.cs 1 10
Gpt3D_Clone165_1.cs 11 23
----------------------------------------

static void Main (string [] args) {
    try {
        TestClass t = new TestClass ();
        Thread ts = new Thread (() => t.GetTest());
        ts.Start ();
    }
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

static void Main (string [] args) {
    try {
        using (TestClass t = new TestClass ())
        {
            Thread ts = new Thread (new ThreadStart (t.GetTest));
            ts.Start ();
        }}
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
1
Gpt3D_Clone166_1.cs 1 15
Gpt3D_Clone166_1.cs 16 28
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    HttpWebResponse response2 = new HttpWebResponse ();
    try {
        response.GetResponse ();
        response2.GetResponse();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
        response2.Dispose ();
    }
}
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
2
Gpt3D_Clone166_2.cs 1 11
Gpt3D_Clone166_2.cs 12 28
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    Boolean catchFlag = false;
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
        catchFlag = true;
    }
    finally {
        if (catchFlag) {
            response.Dispose ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
3
Gpt3D_Clone166_3.cs 1 15
Gpt3D_Clone166_3.cs 16 28
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    HttpWebRequest request = new HttpWebRequest();
    try {
        response = (HttpWebResponse)request.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
        request.Dispose ();
    }
}
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
0
Gpt3D_Clone167_0.cs 1 8
Gpt3D_Clone167_0.cs 9 17
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    if (item != null)
        return (HasMyCategory (item));
    else
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
1
Gpt3D_Clone167_1.cs 1 7
Gpt3D_Clone167_1.cs 8 17
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    if (item != null && HasMyCategory (item))
        return true;
    else
        return false;
}
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
1
Gpt3D_Clone169_1.cs 1 13
Gpt3D_Clone169_1.cs 14 26
----------------------------------------

static void Main () {
    MemoryStream ms = new MemoryStream ();
    try {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    } finally {
        ms.Close();
    }
}
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
16
0
Gpt3D_Clone16_0.cs 1 14
Gpt3D_Clone16_0.cs 15 28
----------------------------------------

void comboboxrefresh () {
    comboBox1.DisplayMember = "empName";
    comboBox1.ValueMember = "empID";
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        while (dr.Read ()) {
            EmpItem ei = new EmpItem () {empID = dr.GetInt32 (0), empName = dr.GetString (1) + dr.GetString (2)};
            comboBox1.Items.Add (ei);
        }
    }
    cnn.Close ();
}
----------------------------------------

void comboboxrefresh_type3 () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        while (dr.Read ()) {
            string EmployeeName = dr.GetString (1) + dr.GetString (2);
            comboBox1.Items.Add (EmployeeName);
        }
    }
    cnn.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
0
Gpt3D_Clone170_0.cs 1 10
Gpt3D_Clone170_0.cs 11 21
----------------------------------------

public bool MoveNext () {
    int initVal = 1;
    if (idx == - 1) {
        idx = 0;
        current = initVal;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
1
Gpt3D_Clone170_1.cs 1 9
Gpt3D_Clone170_1.cs 10 20
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

public bool MoveNext () {
    if (idx != -1) { 
        current = current * 2;
    } else {
        idx = 0;
        current = 1;
    } 
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
0
Gpt3D_Clone171_0.cs 1 13
Gpt3D_Clone171_0.cs 14 26
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    if (customer != null && piece != null && material != null) {
        int quantity;
        float weight;
        if (int.TryParse(txtQuantity.Text, out quantity) && float.TryParse(txtWeight.Text, out weight)) {
            var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
            AllItems.Add (item);
        }
    }
}
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
1
Gpt3D_Clone171_1.cs 1 13
Gpt3D_Clone171_1.cs 14 26
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity;
    float weight;
    if (int.TryParse(txtQuantity.Text, out quantity) && float.TryParse(txtWeight.Text, out weight)) {
        if (customer != null && piece != null && material != null && quantity > 0 && weight >= 0.0f) {
            var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
            AllItems.Add (item);
        }
    }
}
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
172
0
Gpt3D_Clone172_0.cs 1 27
Gpt3D_Clone172_0.cs 28 54
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('[');
                if (left == 0) {
                    int right = ip.IndexOf (']');
                    ip = ip.Substring (1, right - 1);
                } else {
                    int colon = ip.IndexOf (':');
                    if (colon != - 1) {
                        ip = ip.Substring (0, colon);
                    }
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('['), right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
                int colon = ip.IndexOf (':');
                if (colon != - 1) {
                    return ip.Substring (0, colon);
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
172
1
Gpt3D_Clone172_1.cs 1 21
Gpt3D_Clone172_1.cs 22 48
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('[');
                int right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('['), right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
                int colon = ip.IndexOf (':');
                if (colon != - 1) {
                    return ip.Substring (0, colon);
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
173
0
Gpt3D_Clone173_0.cs 1 27
Gpt3D_Clone173_0.cs 28 54
----------------------------------------

internal static string GetIPAddress(HttpRequestBase request) {
    string forwarded = request.Headers["Forwarded"];
    if (!String.IsNullOrEmpty(forwarded)) {
        string[] segments = forwarded.Split(',');
        foreach (string segment in segments[0].Split(';')) {
            string[] pair = segment.Trim().Split('=');
            if (pair.Length == 2 && pair[0].Equals("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair[1].Trim('"');
                int left = ip.IndexOf('['), right = ip.IndexOf(']');
                if (left == 0 && right > 0) {
                    ip = ip.Substring(1, right - 1);
                } else {
                    int colon = ip.IndexOf(':');
                    if (colon != -1) {
                        ip = ip.Substring(0, colon);
                    }
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers["X-Forwarded-For"];
    if (!String.IsNullOrEmpty(xForwardedFor)) {
        return xForwardedFor.Split(',')[0];
    }
    return request.UserHostAddress;
}
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('['), right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
                int colon = ip.IndexOf (':');
                if (colon != - 1) {
                    return ip.Substring (0, colon);
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
173
1
Gpt3D_Clone173_1.cs 1 25
Gpt3D_Clone173_1.cs 26 47
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('['), right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
                int colon = ip.IndexOf (':');
                if (colon != - 1) {
                    return ip.Substring (0, colon);
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('['), right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
175
0
Gpt3D_Clone175_0.cs 1 23
Gpt3D_Clone175_0.cs 24 45
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result = false;
    try {
        RegistryKey key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
                result = true;
            } else {
                key.DeleteValue (programName, false);
            }
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
0
Gpt3D_Clone177_0.cs 1 11
Gpt3D_Clone177_0.cs 12 24
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Stream i = File.OpenRead (Path.GetFullPath (filePath));
        Set (Image.FromStream (i), style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
0
Gpt3D_Clone178_0.cs 1 11
Gpt3D_Clone178_0.cs 12 24
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool success = false;
    try {
        System.Drawing.Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        success = true;
    }
    catch (IOException e) {
    }
    return success;
}
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
1
Gpt3D_Clone178_1.cs 1 11
Gpt3D_Clone178_1.cs 12 24
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool success = false;
    try {
        System.Drawing.Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        SetImageStyle (i, style);
        success = true;
    }
    catch (IOException e) {
    }
    return success;
}
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
179
0
Gpt3D_Clone179_0.cs 1 27
Gpt3D_Clone179_0.cs 28 56
----------------------------------------

public static bool Set (Image image, Style style) {
    bool Success = false;
    try {
        string TempPath = Path.Combine (Path.GetTempPath (), "wallpaper.bmp");
        image.Save (TempPath, ImageFormat.Bmp);
        RegistryKey key = Registry.CurrentUser.OpenSubKey (@"Control Panel\Desktop", true);
        switch (style) {
            case Style.Stretched :
                key.SetValue (@"WallpaperStyle", "2");
                key.SetValue (@"TileWallpaper", "0");
                break;
            case Style.Centered :
                key.SetValue (@"WallpaperStyle", "1");
                key.SetValue (@"TileWallpaper", "0");
                break;
            default : case Style.Tiled :
                key.SetValue (@"WallpaperStyle", "1");
                key.SetValue (@"TileWallpaper", "1");
                break;
        }
        SystemParametersInfo (SPI_SETDESKWALLPAPER, 0, TempPath, SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

public static bool Set (Image image, Style style) {
    bool Success = false;
    try {
        string TempPath = Path.Combine (Path.GetTempPath (), "wallpaper.bmp");
        image.Save (TempPath, ImageFormat.Bmp);
        RegistryKey key = Registry.CurrentUser.OpenSubKey (@"Control Panel\Desktop", true);
        switch (style) {
            case Style.Stretched :
                key.SetValue (@"WallpaperStyle", 2.ToString ());
                key.SetValue (@"TileWallpaper", 0.ToString ());
                break;
            case Style.Centered :
                key.SetValue (@"WallpaperStyle", 1.ToString ());
                key.SetValue (@"TileWallpaper", 0.ToString ());
                break;
            default : case Style.Tiled :
                key.SetValue (@"WallpaperStyle", 1.ToString ());
                key.SetValue (@"TileWallpaper", 1.ToString ());
                break;
        }
        SystemParametersInfo (SPI_SETDESKWALLPAPER, 0, TempPath, SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
0
Gpt3D_Clone17_0.cs 1 15
Gpt3D_Clone17_0.cs 16 30
----------------------------------------

void Comboboxrefresh3 () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        List<object> list = new List<object>();
        while (dr.Read ()) {
            list.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
        combobox1.DataSource = list;
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
    }
    cnn.Close ();
}
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
2
Gpt3D_Clone17_2.cs 1 13
Gpt3D_Clone17_2.cs 14 32
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

void comboboxrefresh() {
    using (SqlConnection cnn = new SqlConnection())
	{
        cnn.Open();
        SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
        SqlDataReader dr = cmd.ExecuteReader();
        if (dr.HasRows)
		{
            combobox1.ValueMember = "Id";
            combobox1.DisplayMember = "FullName";
            while (dr.Read()) 
			{
                comboBox1.Items.Add(new {FullName = dr["EmployeeFirstName"] + " " + dr["EmployeeLastName"], Id = dr["EmployeeID"]});
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
0
Gpt3D_Clone181_0.cs 1 15
Gpt3D_Clone181_0.cs 16 32
----------------------------------------

static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    FiniteStateMachine.Events.PlugIn.ProcessEvent(fsm);
    Console.WriteLine (fsm.State);
    FiniteStateMachine.Events.TurnOn.ProcessEvent(fsm);
    Console.WriteLine (fsm.State);
    FiniteStateMachine.Events.TurnOff.ProcessEvent(fsm);
    Console.WriteLine (fsm.State);
    FiniteStateMachine.Events.TurnOn.ProcessEvent(fsm);
    Console.WriteLine (fsm.State);
    FiniteStateMachine.Events.RemovePower.ProcessEvent(fsm);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
0
Gpt3D_Clone183_0.cs 1 14
Gpt3D_Clone183_0.cs 15 29
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T {serializer.Deserialize < T > (reader)};
    } else {
        T[] result = serializer.Deserialize<T[]>(reader);
        return result.Length == 0 ? null : result;
    }
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
185
0
Gpt3D_Clone185_0.cs 1 11
Gpt3D_Clone185_0.cs 12 24
----------------------------------------

static void Main (string [] args) {
    var ns = new List < double > ();
    for (int i = 0; i < 1000; i ++)
        ns.Add (1.0);
    var s1 = Stopwatch.StartNew ();
    bool result = SubsetSum (ns, 1000.0);
    s1.Stop ();
    Console.WriteLine (result);
    Console.WriteLine (s1.Elapsed);
    Console.Read ();
}
----------------------------------------

static void Main (string [] args) {
    var ns = new List < int > ();
    for (int i = 0; i < 1000; i ++)
        ns.Add (1);
    var s1 = Stopwatch.StartNew ();
    bool result = SubsetSum (ns, 1000);
    s1.Stop ();
    Console.WriteLine (result);
    Console.WriteLine (s1.Elapsed);
    Console.Read ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
0
Gpt3D_Clone186_0.cs 1 18
Gpt3D_Clone186_0.cs 19 40
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        if (!int.TryParse (rawInput, out int integerInput)) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count == 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
1
Gpt3D_Clone186_1.cs 1 20
Gpt3D_Clone186_1.cs 21 37
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    for (int count = 0; count < 5; count++) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
2
Gpt3D_Clone186_2.cs 1 15
Gpt3D_Clone186_2.cs 16 37
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (count < 5) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        if (!int.TryParse (rawInput, out int integerInput)) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
187
0
Gpt3D_Clone187_0.cs 1 11
Gpt3D_Clone187_0.cs 12 23
----------------------------------------

public override void OnException (ExceptionContext filterContext) {
    filterContext.HttpContext.Response.TrySkipIisCustomErrors = true;
    filterContext.ExceptionHandled = true;
    filterContext.HttpContext.Response.ClearContent ();
    RouteValueDictionary routeValues = filterContext.Controller.ControllerContext.RouteData.Values;
    string controllerName = (routeValues["controller"] as string) ?? string.Empty;
    string actionName = (routeValues["action"] as string) ?? string.Empty;
    var model = new HandleErrorInfo (filterContext.Exception, controllerName, actionName);
    filterContext.Result = new ViewResult {ViewName = View, MasterName = Master, ViewData = new ViewDataDictionary < HandleErrorInfo > (model), TempData = filterContext.Controller.TempData};
    filterContext.Exception = null;
}
----------------------------------------

public override void OnException (ExceptionContext filterContext) {
    filterContext.HttpContext.Response.TrySkipIisCustomErrors = true;
    filterContext.ExceptionHandled = true;
    filterContext.HttpContext.Response.ClearContent ();
    var controllerName = (string) filterContext.RouteData.Values ["controller"];
    var actionName = (string) filterContext.RouteData.Values ["action"];
    var model = new HandleErrorInfo (filterContext.Exception, controllerName, actionName);
    filterContext.Result = new ViewResult {ViewName = View, MasterName = Master, ViewData = new ViewDataDictionary < HandleErrorInfo > (model), TempData = filterContext.Controller.TempData};
    filterContext.Exception = null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
187
1
Gpt3D_Clone187_1.cs 1 10
Gpt3D_Clone187_1.cs 11 22
----------------------------------------

public override void OnException (ExceptionContext filterContext) {
    filterContext.HttpContext.Response.TrySkipIisCustomErrors = true;
    filterContext.ExceptionHandled = true;
    filterContext.HttpContext.Response.ClearContent ();
    var controllerName = (string) filterContext.RouteData.Values ["controller"];
    var actionName = (string) filterContext.RouteData.Values ["action"];
    var model = new HandleErrorInfo (filterContext.Exception, controllerName, actionName);
    filterContext.Result = new ViewResult {ViewName = View, MasterName = Master, ViewData = new ViewDataDictionary < HandleErrorInfo > (model), TempData = filterContext.Controller.TempData};
    filterContext.Exception = null;
}
----------------------------------------

public override void OnException (ExceptionContext filterContext) {
    filterContext.HttpContext.Response.TrySkipIisCustomErrors = true;
    filterContext.ExceptionHandled = true;
    filterContext.HttpContext.Response.ClearContent ();
    var controllerName = filterContext.Controller.ControllerContext.RouteData.Values ["controller"] as string;
    var actionName = filterContext.Controller.ControllerContext.RouteData.Values ["action"] as string;
    var model = new HandleErrorInfo (filterContext.Exception, controllerName, actionName);
    filterContext.Result = new ViewResult {ViewName = View, MasterName = Master, ViewData = new ViewDataDictionary (model), TempData = filterContext.Controller.TempData};
    filterContext.Exception = null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
0
Gpt3D_Clone188_0.cs 1 15
Gpt3D_Clone188_0.cs 16 27
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size;
    if (src.CanSeek) {
        size = Math.Min ((int) (src.Length - src.Position), 0x2000);
    }
    else{
        size = 0x2000;
    }
    byte [] buffer = new byte [size];
    int n;
    do{
        n = src.Read (buffer, 0, buffer.Length);
        dest.Write (buffer, 0, n);
    } while (n != 0);
}
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
18
0
Gpt3D_Clone18_0.cs 1 20
Gpt3D_Clone18_0.cs 21 41
----------------------------------------

public override string ToString()
{
    builder.Clear();
    if (!string.IsNullOrEmpty(Hyperlink))
    {
        builder.Append("<a href=\"");
        builder.Append(Hyperlink);
        builder.Append("\"><![CDATA[");
    }
    if (!string.IsNullOrEmpty(HexColor))
    {
        builder.Append("<span style='color:");
        builder.Append(HexColor);
        builder.Append("'>");
    }
    builder.AppendLine(Data);
    if (!string.IsNullOrEmpty(Hyperlink))
        builder.Append("</a>");
    return builder.ToString();
}
----------------------------------------

public override string ToString () {
    builder.Clear ();
    bool hasHyperlink = ! string.IsNullOrEmpty (Hyperlink);
    bool hasColor = ! string.IsNullOrEmpty (HexColor);
    if (hasHyperlink) {
        builder.Append ("<a href=\"");
        builder.Append (Hyperlink);
        builder.Append ("\"><![CDATA[");
    }
    if (hasColor) {
        builder.Append ("<span style='color:");
        builder.Append (HexColor);
        builder.Append ("'>");
    }
    builder.AppendLine (Data);
    if (hasHyperlink)
        builder.Append ("</a>");
    return builder.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
0
Gpt3D_Clone190_0.cs 1 10
Gpt3D_Clone190_0.cs 11 22
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = null;
            name = null;
            pass = null;
        }
        _disposed = true;
    }
}
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
1
Gpt3D_Clone190_1.cs 1 10
Gpt3D_Clone190_1.cs 11 22
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            price = 0;
            quality = 0;
        }
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
2
Gpt3D_Clone190_2.cs 1 10
Gpt3D_Clone190_2.cs 11 22
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = -1;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = false;
    }
}
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
0
Gpt3D_Clone191_0.cs 1 13
Gpt3D_Clone191_0.cs 14 25
----------------------------------------

static void Main(string[] args)
{
    if (!Environment.UserInteractive)
    {
        ServiceBase[] ServicesToRun;
        ServicesToRun = new ServiceBase[] { new Service() };
        ServiceBase.Run(ServicesToRun);
        return;
    }
    RunMainLib();
}
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
0
Gpt3D_Clone193_0.cs 1 13
Gpt3D_Clone193_0.cs 14 27
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update();
    System.Collections.Generic.List<InputProperty> ip = new System.Collections.Generic.List<InputProperty>();
    foreach (MetaData nvPair in nvPairs) {
        if (nvPair != null) {
            InputProperty inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
            ip.Add(inputProp);
        }
        else break;
    }
    update.Items = ip.ToArray();
    return update;
}
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
194
0
Gpt3D_Clone194_0.cs 1 16
Gpt3D_Clone194_0.cs 17 31
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    List < InputProperty > ip = new List < InputProperty > ();
    for (int i = 0; i < nvPairs.Length; i ++) {
        if (nvPairs [i] != null) {
        	InputProperty newIP = new InputProperty();
            newIP.Name = "udf:" + nvPairs [i].Name;
            newIP.Val = nvPairs [i].Value;
            ip.Add(newIP);
        } else {
            break;
        }
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    List < InputProperty > ip = new List < InputProperty > ();
    for (int i = 0; i < nvPairs.Length; i ++) {
        if (nvPairs [i] == null)
            break;
        ip [i] = new InputProperty ();
        ip [i].Name = "udf:" + nvPairs [i].Name;
        ip [i].Val = nvPairs [i].Value;
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
194
1
Gpt3D_Clone194_1.cs 1 14
Gpt3D_Clone194_1.cs 15 29
----------------------------------------

private Update BuildMetaData(MetaData[] nvPairs) {
    Update update = new Update();
    List<InputProperty> ip = new List<InputProperty>();
    for (int i = 0; i < nvPairs.Length; i++) {
        if (nvPairs[i] == null) {
            break;
        }
        string name = "udf:" + nvPairs[i].Name;
        string value = nvPairs[i].Value;
        ip.Add(new InputProperty(name, value));
    }
    update.Items = ip.ToArray();
    return update;
}
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    List < InputProperty > ip = new List < InputProperty > ();
    for (int i = 0; i < nvPairs.Length; i ++) {
        if (nvPairs [i] == null)
            break;
        ip [i] = new InputProperty ();
        ip [i].Name = "udf:" + nvPairs [i].Name;
        ip [i].Val = nvPairs [i].Value;
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
194
2
Gpt3D_Clone194_2.cs 1 13
Gpt3D_Clone194_2.cs 14 29
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    List < InputProperty > ip = new List < InputProperty > ();
    for (int i = 0; i < nvPairs.Length; i ++) {
        if (nvPairs [i] == null)
            break;
        ip [i] = new InputProperty ();
        ip [i].Name = "udf:" + nvPairs [i].Name;
        ip [i].Val = nvPairs [i].Value;
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update();
    List<InputProperty> ip = new List<InputProperty>();
    for (int i = 0; i < nvPairs.Length; i++) {
        if (nvPairs[i] == null) {
            continue;
        }
        ip.Add(new InputProperty());
        ip[i].Name = "udf:" + nvPairs[i].Name;
        ip[i].Val = nvPairs[i].Value;
    }
    update.Items = ip.ToArray();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
194
3
Gpt3D_Clone194_3.cs 1 11
Gpt3D_Clone194_3.cs 12 26
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    List < InputProperty > ip = new List < InputProperty > ();
    foreach (MetaData metadata in nvPairs) {
        if (metadata == null)
            break;
        ip.Add(new InputProperty("udf:" + metadata.Name, metadata.Value));
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    List < InputProperty > ip = new List < InputProperty > ();
    for (int i = 0; i < nvPairs.Length; i ++) {
        if (nvPairs [i] == null)
            break;
        ip [i] = new InputProperty ();
        ip [i].Name = "udf:" + nvPairs [i].Name;
        ip [i].Val = nvPairs [i].Value;
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
0
Gpt3D_Clone196_0.cs 1 9
Gpt3D_Clone196_0.cs 10 22
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        }
    }
}
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
1
Gpt3D_Clone196_1.cs 1 9
Gpt3D_Clone196_1.cs 10 22
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref Message m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
198
0
Gpt3D_Clone198_0.cs 1 18
Gpt3D_Clone198_0.cs 19 30
----------------------------------------

static void Main(string [] args) {
    BackgroundWorker bg1 = new BackgroundWorker();
    bg1.DoWork += new DoWorkEventHandler(bg_DoWork);
    bg1.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bg_RunWorkerCompleted);
    bg1.RunWorkerAsync();
    
	BackgroundWorker bg2 = new BackgroundWorker();
    bg2.DoWork += new DoWorkEventHandler(bg_DoWork);
    bg2.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bg_RunWorkerCompleted);
    bg2.RunWorkerAsync();
    
    while(!done)
    {
		Console.WriteLine("Waiting in Main, Tid" + Thread.CurrentThread.ManagedThreadId);
        Thread.Sleep(100);
    }
    
}
----------------------------------------

static void Main (string [] args) {
    BackgroundWorker bg = new BackgroundWorker ();
    bg.DoWork += new DoWorkEventHandler (bg_DoWork);
    bg.RunWorkerCompleted += new RunWorkerCompletedEventHandler (bg_RunWorkerCompleted);
    bg.RunWorkerAsync ();
    while (! done) {
        Console.WriteLine ("Waiting in Main, tid " + Thread.CurrentThread.ManagedThreadId);
        Thread.Sleep (100);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
1
Gpt3D_Clone199_1.cs 1 9
Gpt3D_Clone199_1.cs 10 25
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

public void Enqueue (T item) {
    // Check if queue already contains item
    int index = queue.IndexOf (item);
    if (index > -1) {
        // Remove item if already included
        queue.RemoveAt (index);
    }
    // Add item to queue
    queue.Add (item);
    // Truncate the queue to maximumSize if needed
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
200
0
Gpt3D_Clone200_0.cs 1 14
Gpt3D_Clone200_0.cs 15 29
----------------------------------------

public bool Equality (byte [] a1, byte [] b1) {
    if (a1 == null || b1 == null)
        return false;
    int length = a1.Length;
    if (b1.Length != length)
        return false;
    int counter = 0;
    while (counter < length) {
        if (a1 [counter] != b1 [counter]) 
            return false;
        counter++;
    }
    return true;
}
----------------------------------------

public bool Equality (byte [] a1, byte [] b1) {
    if (a1 == null || b1 == null)
        return false;
    int length = a1.Length;
    if (b1.Length != length)
        return false;
    while (length > 0) {
        length --;
        if (a1 [length] != b1 [length])
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
201
0
Gpt3D_Clone201_0.cs 1 13
Gpt3D_Clone201_0.cs 14 29
----------------------------------------

public bool Equality (byte [] a1, byte [] b1) {
    if (a1.Length != b1.Length) {
        return false;
    }
    if (object.ReferenceEquals (a1, b1)) {
        return true;
    }
    int index = 0;
    while (index < a1.Length && a1[index] == b1[index]) {
        index++;
    }
    return index == a1.Length;
}
----------------------------------------

public bool Equality (byte [] a1, byte [] b1) {
    if (a1.Length != b1.Length) {
        return false;
    }
    if (object.ReferenceEquals (a1, b1)) {
        return true;
    }
    for (int i = 0; i < a1.Length; i ++) {
        if (a1 [i] != b1 [i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
201
1
Gpt3D_Clone201_1.cs 1 14
Gpt3D_Clone201_1.cs 15 30
----------------------------------------

public bool Equality (byte [] a1, byte [] b1) {
    if (a1.Length == b1.Length) {
        //Avoid unnecessary checks if the lengths are not equal
        if (!object.ReferenceEquals (a1, b1)) {
            for (int i = 0; i < a1.Length; i ++) {
                if (a1 [i] != b1 [i]) {
                    return false;
                }
            }
        }
        return true;
    }
    return false;
}
----------------------------------------

public bool Equality (byte [] a1, byte [] b1) {
    if (a1.Length != b1.Length) {
        return false;
    }
    if (object.ReferenceEquals (a1, b1)) {
        return true;
    }
    for (int i = 0; i < a1.Length; i ++) {
        if (a1 [i] != b1 [i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
0
Gpt3D_Clone203_0.cs 1 20
Gpt3D_Clone203_0.cs 21 41
----------------------------------------

public bool removeStock(string user_name, string stock_symbol)
{
    user_name = user_name.Trim();
    stock_symbol = stock_symbol.Trim();
    SqlCommand cmdnon = new SqlCommand();
    cmdnon.Connection = connection;
    cmdnon.CommandText = "DELETE FROM users_stocks "+ "WHERE user_name = @name AND stock_symbol = @stock";
    cmdnon.Parameters.AddWithValue("@name", user_name);
    cmdnon.Parameters.AddWithValue("@stock", stock_symbol);
    try
    {
        connection.Open();
        int num = cmdnon.ExecuteNonQuery();
        return true;
    }
    finally
    {
        connection.Close();
    }
}
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks " + "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
1
Gpt3D_Clone203_1.cs 1 19
Gpt3D_Clone203_1.cs 20 40
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks " + "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

public bool removeStock(string user_name, string stock_symbol)
{
    user_name = user_name.Trim();
    stock_symbol = stock_symbol.Trim();
    string statement = "DELETE FROM users_stocks "+ "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand(statement, connection);
    try
    {
        cmdnon.Parameters.AddWithValue("@name", user_name);
        cmdnon.Parameters.AddWithValue("@stock", stock_symbol);
        connection.Open();
        int num = cmdnon.ExecuteNonQuery();
        return true;
    }
    finally
    {
        connection.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
209
0
Gpt3D_Clone209_0.cs 1 9
Gpt3D_Clone209_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = System.Math.Tan (System.Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
209
1
Gpt3D_Clone209_1.cs 1 9
Gpt3D_Clone209_1.cs 10 20
----------------------------------------

protected override void CalculateBandpassCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0 * A0;
    A2 = -A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
209
2
Gpt3D_Clone209_2.cs 1 10
Gpt3D_Clone209_2.cs 11 21
----------------------------------------

protected override void CalculateBiQuadCoefficients()
{
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    double normalizationFactor = 1 / (1 + (k / Q) + (k * k));
    A0 = k * k * normalizationFactor;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * normalizationFactor;
    B2 = (1 - (k / Q) + (k * k)) * normalizationFactor;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
0
Gpt3D_Clone20_0.cs 1 9
Gpt3D_Clone20_0.cs 10 21
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    double [] values = new double [3];
    for (int i = 0; i < values.Length; i ++) {
        values [i] = Convert.ToDouble (Console.ReadLine ());
    }
    average (values);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    double [] values = new double [3];
    for (int i = 0; i < values.Length; i ++) {
        string input = Console.ReadLine ();
        values [i] = double.Parse(input);
    }
    average (values);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
0
Gpt3D_Clone210_0.cs 1 9
Gpt3D_Clone210_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = (2 * (k * k - 1)) * norm;
    B2 = (1 - (k / Q) + (k * k)) * norm; 
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
0
Gpt3D_Clone211_0.cs 1 9
Gpt3D_Clone211_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    double norm = 1.0 / (1.0 + k / Q + k * k); 
    A0 = k * k * norm; 
    A1 = 2 * A0; 
    A2 = A0;
    B1 = 2 * (k * k - 1.0) * norm; 
    B2 = (1.0 - k / Q + k * k) * norm; 
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
0
Gpt3D_Clone212_0.cs 1 9
Gpt3D_Clone212_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = System.Math.Tan (System.Math.PI * Frequency / SampleRate);
    double normalizationFactor = 1 / (1 + k / Q + k * k);
    A0 = 1 * normalizationFactor;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * normalizationFactor;
    B2 = (1 - k / Q + k * k) * normalizationFactor;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
1
Gpt3D_Clone212_1.cs 1 9
Gpt3D_Clone212_1.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double factor = System.Math.Tan (System.Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + factor / Q + factor * factor);
    A0 = 1 * norm;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (factor * factor - 1) * norm;
    B2 = (1 - factor / Q + factor * factor) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
3
Gpt3D_Clone215_3.cs 1 9
Gpt3D_Clone215_3.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + (k / Q) + (k * k));
    A0 = k / Q * norm;
    A1 = 0;
    A2 = -A0;
    B1 = 2 * ((k * k) - 1) * norm;
    B2 = ((1 - (k / Q)) + (k * k)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
218
1
Gpt3D_Clone218_1.cs 1 10
Gpt3D_Clone218_1.cs 11 21
----------------------------------------

protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + k * k); 
    A0 = (1 + k * k) * norm; 
    A1 = (2 * (k * k - 1)) * norm; 
    A2 = A0; 
    B1 = A1; 
    B2 = (1 - (k / Q) + (k * k)) * norm; 
} 
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
219
0
Gpt3D_Clone219_0.cs 1 9
Gpt3D_Clone219_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = norm * (1 + k * k);
    A1 = norm * (2 * (k * k - 1));
    A2 = A0;
    B1 = A1;
    B2 = norm * (1 - k / Q + k * k);
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
219
2
Gpt3D_Clone219_2.cs 1 9
Gpt3D_Clone219_2.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients() {
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = norm * (1 + k * k);
    A1 = -norm * 2 * (k * k - 1);
    A2 = A0;
    B1 = A1;
    B2 = norm * (1 - k / Q + k * k);
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
21
1
Gpt3D_Clone21_1.cs 1 14
Gpt3D_Clone21_1.cs 15 25
----------------------------------------

 static void Main (string [] args) {
  Console.WriteLine ("Enter number(s): ");
  double [] values = new double [3];
  for (int i = 0; i < values.Length; i ++) {
    try {
      values [i] = Double.Parse (Console.ReadLine ());
    } catch (FormatException) {
        i--;
        Console.WriteLine ("Error Input! Retry again");
    }
  }
  average (values);
  Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    double [] values = new double [3];
    for (int i = 0; i < values.Length; i ++) {
        values [i] = Convert.ToDouble (Console.ReadLine ());
    }
    average (values);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
0
Gpt3D_Clone220_0.cs 1 10
Gpt3D_Clone220_0.cs 11 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + (k * k * k) / (Q * Q * Q) + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - (k * k * k) / (Q * Q * Q) + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
1
Gpt3D_Clone220_1.cs 1 9
Gpt3D_Clone220_1.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + (k * k) / (Q * Q) + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - (k * k) / (Q * Q) + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
0
Gpt3D_Clone223_0.cs 1 20
Gpt3D_Clone223_0.cs 21 43
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    break;
                } else {
                    stakeholderId = 0;
                }
            }
            break;
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
1
Gpt3D_Clone223_1.cs 1 19
Gpt3D_Clone223_1.cs 20 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    break;
                }
            }
            break;
        }
    }
    return stakeholderId;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
2
Gpt3D_Clone223_2.cs 1 18
Gpt3D_Clone223_2.cs 19 40
----------------------------------------

private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            for (int i = 0; i < stakeholders.Length; i++) {
                if (stakeholders[i].IdentityId == idForStakeholder) {
                    stakeholderId = stakeholders[i].StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
3
Gpt3D_Clone223_3.cs 1 16
Gpt3D_Clone223_3.cs 17 38
----------------------------------------

private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var stakeholders = _context.Stakeholders;
    foreach (var stakeholder in stakeholders) {
        string idForStakeholder = stakeholder.IdentityId;
        var users = _userManager.Users;
        foreach (var user in users) {
            if (user.Email == currentUserId && stakeholder.IdentityId == idForStakeholder) {
                stakeholderId = stakeholder.StakeholderId;
                return stakeholderId;
            }
        }   
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
1
Gpt3D_Clone224_1.cs 1 20
Gpt3D_Clone224_1.cs 21 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    break;
                }
            }
        }
    }
    
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
2
Gpt3D_Clone224_2.cs 1 18
Gpt3D_Clone224_2.cs 19 40
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            for (int i = 0; i < stakeholders.Count; i++) {
                if (stakeholders[i].IdentityId == idForStakeholder) {
                    stakeholderId = stakeholders[i].StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
0
Gpt3D_Clone225_0.cs 1 18
Gpt3D_Clone225_0.cs 19 36
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var stakeholders = _context.Stakeholders;
    foreach (var stakeholder in stakeholders)
    {
        var users = _userManager.Users.Where(x=>x.IdentityId == stakeholder.IdentityId && x.Email == currentUserId);
        if (users.Count() > 0)
        {
            stakeholderId = stakeholder.StakeholderId;
            return stakeholderId;
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
1
Gpt3D_Clone225_1.cs 1 16
Gpt3D_Clone225_1.cs 17 36
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users)
    {
        if (user.Email == currentUserId)
        {
            var idForStakeholder = user.Id;
            stakeholderId=_context.Stakeholders.Where(x=>x.IdentityId == idForStakeholder).Select(x=>x.StakeholderId).FirstOrDefault();
            return stakeholderId;
        }
    }
    return stakeholderId;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
0
Gpt3D_Clone226_0.cs 1 26
Gpt3D_Clone226_0.cs 27 49
----------------------------------------

private long GetStakeholderId() 
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users)
    {
        if (user.Email == currentUserId)
        {
            var idForStakeholder = user.Id;
            var stakeholderQuery = from stakeholder in _context.Stakeholders
                                   where stakeholder.IdentityId == idForStakeholder
                                   select stakeholder;
            foreach (var stakeholder in stakeholderQuery)
            {
                stakeholderId = stakeholder.StakeholderId;
                return stakeholderId;
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
2
Gpt3D_Clone226_2.cs 1 22
Gpt3D_Clone226_2.cs 23 45
----------------------------------------

private long GetStakeholderId() 
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users)
    {
        if (user.Email == currentUserId)
        {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders.Where(stakeholder => stakeholder.IdentityId == idForStakeholder))
            {
                stakeholderId = stakeholder.StakeholderId;
                return stakeholderId;
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
3
Gpt3D_Clone226_3.cs 1 21
Gpt3D_Clone226_3.cs 22 40
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == user.Id) {
                    stakeholderId = stakeholder.StakeholderId;
                    break;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
0
Gpt3D_Clone227_0.cs 1 16
Gpt3D_Clone227_0.cs 17 37
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var stakeholders = _context.Stakeholders;
    foreach (var stakeholder in stakeholders)
    {
        var user = _userManager.Users.Where(u => u.Email == currentUserId && u.IdentityId == stakeholder.IdentityId).FirstOrDefault();
        if (user != null)
        {
            stakeholderId = stakeholder.StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
228
0
Gpt3D_Clone228_0.cs 1 12
Gpt3D_Clone228_0.cs 13 23
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    List < T > tempList;
    if (Session [groupName] != null) {
        tempList = (List < T >) Session [groupName];
    }
    for (int i = 0; i < tempList.Count; i++) {
        returnList.Add(tempList[i]);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    if (Session [groupName] != null) {
        List < T > tempList = (List < T >) Session [groupName];
        returnList.AddRange (tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
228
1
Gpt3D_Clone228_1.cs 1 9
Gpt3D_Clone228_1.cs 10 20
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = new VList < T > ();
    if (Session [groupName] != null) {
        returnList.AddRange ((List < T >) Session [groupName]);
    }
    returnList.AddRange (FetchInformation (group));
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    if (Session [groupName] != null) {
        List < T > tempList = (List < T >) Session [groupName];
        returnList.AddRange (tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
0
Gpt3D_Clone22_0.cs 1 14
Gpt3D_Clone22_0.cs 15 32
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double >();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        double num;
        if (CheckInput(out num)) {
            enteredNubers.Add (num);
        } else {
            break;
        }
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
233
0
Gpt3D_Clone233_0.cs 1 12
Gpt3D_Clone233_0.cs 13 24
----------------------------------------

public void MyMainMethod(string[] args) {
	 ServiceMonitor serviceRequest = new ServiceMonitor ();
       
	if (Environment.UserInteractive) {		
        serviceRequest.TestOnStartAndOnStop (args);
    } 
    else {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new ServiceMonitor ()};
        ServiceBase.Run (ServicesToRun);
    }
}
----------------------------------------

static void Main (string [] args) {
    if (Environment.UserInteractive) {
        ServiceMonitor serviceRequest = new ServiceMonitor ();
        serviceRequest.TestOnStartAndOnStop (args);
    } else {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new ServiceMonitor ()};
        ServiceBase.Run (ServicesToRun);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
233
1
Gpt3D_Clone233_1.cs 1 10
Gpt3D_Clone233_1.cs 11 22
----------------------------------------

static void Main (string [] args) {
    if (Environment.UserInteractive) {
        ServiceMonitor serviceRequest = new ServiceMonitor ();
        serviceRequest.TestOnStartAndOnStop (args);
    } else {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new ServiceMonitor ()};
        ServiceBase.Run (ServicesToRun);
    }
}
----------------------------------------

static void Main (string [] args) {
    if (Environment.UserInteractive) {
        ServiceMonitor serviceRequest = new ServiceMonitor ();
        serviceRequest.TestOnStartAndOnStop (args);
    } else {
        ServiceBase [] ServicesToRun = new ServiceBase [] {new ServiceMonitor ()};
        ServiceBase.Run (ServicesToRun);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
236
1
Gpt3D_Clone236_1.cs 1 11
Gpt3D_Clone236_1.cs 12 24
----------------------------------------

private bool CheckConnection () {
    WebRequest request = WebRequest.Create("http://www.google.com");
    try {
        using (WebResponse response = request.GetResponse())
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

private bool CheckConnection () {
    WebClient client = new WebClient ();
    try {
        using (client.OpenRead ("http://www.google.com"))
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
236
2
Gpt3D_Clone236_2.cs 1 11
Gpt3D_Clone236_2.cs 12 24
----------------------------------------

private bool CheckConnection () {
    WebClient client = new WebClient ();
    try {
        using (client.OpenRead ("http://www.google.com"))
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

private bool CheckConnection () {
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://www.google.com");
    try {
        using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
236
3
Gpt3D_Clone236_3.cs 1 10
Gpt3D_Clone236_3.cs 11 23
----------------------------------------

private bool CheckConnection() {
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create("http://www.google.com");
    try {
        HttpWebResponse response = (HttpWebResponse) request.GetResponse();
        return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

private bool CheckConnection () {
    WebClient client = new WebClient ();
    try {
        using (client.OpenRead ("http://www.google.com"))
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
0
Gpt3D_Clone240_0.cs 1 31
Gpt3D_Clone240_0.cs 32 54
----------------------------------------

public override int Read(byte[] buffer, int offset, int count)
{
    int result = 0;
    while (count > 0 && !bExit)
    {
        try
        {
            int len = stream.Read(buffer, offset, count);
            if (len == 0 || !client.Connected)
            {
                break;
            }
            result += len;
            count -= len;
            offset += len;
        }
        catch (Exception e)
        {
            if (e.HResult == -2146232800)
            {
                continue;
            }
            else
            {
                break;
            }
        }
    }
    return result;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
2
Gpt3D_Clone240_2.cs 1 21
Gpt3D_Clone240_2.cs 22 42
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            bool disconnected = e.HResult == -2146232800;
            if (disconnected || len == 0) {
                return 0;
            } else {
                break;
            }
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
241
0
Gpt3D_Clone241_0.cs 1 22
Gpt3D_Clone241_0.cs 23 35
----------------------------------------

public static IList ToAnonymousList(this IEnumerable enumerable)
{
    var enumerator = enumerable.GetEnumerator();
    if (!enumerator.MoveNext())
    {
        throw new Exception("?? No elements??");
    }
    var value = enumerator.Current;
    var returnListType = typeof(List<>).MakeGenericType(value.GetType());
    IList returnList = (IList)Activator.CreateInstance(returnListType);
    returnList.Add(value);
    while (enumerator.MoveNext())
    {
        returnList.Add(enumerator.Current);
    }
    return returnList;
}
----------------------------------------

public static IList ToAnonymousList (this IEnumerable enumerable) {
    var enumerator = enumerable.GetEnumerator ();
    if (! enumerator.MoveNext ())
        throw new Exception ("?? No elements??");
    var value = enumerator.Current;
    var returnList = (IList) typeof (List < >).MakeGenericType (value.GetType ()).GetConstructor (Type.EmptyTypes).Invoke (null);
    returnList.Add (value);
    while (enumerator.MoveNext ())
        returnList.Add (enumerator.Current);
    return returnList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
241
1
Gpt3D_Clone241_1.cs 1 22
Gpt3D_Clone241_1.cs 23 35
----------------------------------------

public static IList ToAnonymousList(this IEnumerable enumerable)
{
    var enumerator = enumerable.GetEnumerator();
    if (!enumerator.MoveNext())
    {
        throw new Exception("?? No elements??");
    }
    var value = enumerator.Current;
    Type genericListType = typeof(List<>).MakeGenericType(value.GetType());
    IList returnList = Activator.CreateInstance(genericListType) as IList;
    returnList.Add(value);
    while (enumerator.MoveNext())
    {
        returnList.Add(enumerator.Current);
    }
    return returnList;
}
----------------------------------------

public static IList ToAnonymousList (this IEnumerable enumerable) {
    var enumerator = enumerable.GetEnumerator ();
    if (! enumerator.MoveNext ())
        throw new Exception ("?? No elements??");
    var value = enumerator.Current;
    var returnList = (IList) typeof (List < >).MakeGenericType (value.GetType ()).GetConstructor (Type.EmptyTypes).Invoke (null);
    returnList.Add (value);
    while (enumerator.MoveNext ())
        returnList.Add (enumerator.Current);
    return returnList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
241
2
Gpt3D_Clone241_2.cs 1 16
Gpt3D_Clone241_2.cs 17 29
----------------------------------------

public static IList ToAnonymousListV4 (this IEnumerable enumerable) {
  var enumerator = (IEnumerator)enumerable.GetEnumerator();
  if (enumerator.MoveNext())
  {
      var value = enumerator.Current;
      var returnList = (IList) typeof (List < >).MakeGenericType (value.GetType ()).GetConstructor (Type.EmptyTypes).Invoke (null);
      returnList.Add (value);
      while (enumerator.MoveNext())
          returnList.Add(enumerator.Current);
      return returnList;
  }
  
  throw new Exception ("?? No elements??");
}
----------------------------------------

public static IList ToAnonymousList (this IEnumerable enumerable) {
    var enumerator = enumerable.GetEnumerator ();
    if (! enumerator.MoveNext ())
        throw new Exception ("?? No elements??");
    var value = enumerator.Current;
    var returnList = (IList) typeof (List < >).MakeGenericType (value.GetType ()).GetConstructor (Type.EmptyTypes).Invoke (null);
    returnList.Add (value);
    while (enumerator.MoveNext ())
        returnList.Add (enumerator.Current);
    return returnList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
0
Gpt3D_Clone242_0.cs 1 27
Gpt3D_Clone242_0.cs 28 52
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                Console.WriteLine (ex.Message);
                Console.WriteLine (ex.InnerException.Message);
                Console.WriteLine (ex.StackTrace);
                throw ex;
            }
        }
        catch (Exception ex) {
            Console.WriteLine (ex.Message);
            Console.WriteLine (ex.InnerException.Message);
            Console.WriteLine (ex.StackTrace);
            throw ex;
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
1
Gpt3D_Clone242_1.cs 1 27
Gpt3D_Clone242_1.cs 28 52
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                Console.WriteLine (ex.Message);
                Console.WriteLine (ex.InnerException.Message);
                Console.WriteLine (ex.StackTrace);
                throw;
            }
        }
        catch (Exception ex) {
            Console.WriteLine (ex.Message);
            Console.WriteLine (ex.InnerException.Message);
            Console.WriteLine (ex.StackTrace);
            throw;
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
2
Gpt3D_Clone242_2.cs 1 23
Gpt3D_Clone242_2.cs 24 47
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                DispatchExceptionToLog (dispatchException);
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            DispatchExceptionToLog (dispatchException);
        }
    }
    catch (Exception ex) {
        CatchValue (ex);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
3
Gpt3D_Clone242_3.cs 1 22
Gpt3D_Clone242_3.cs 23 47
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                DispatchExceptionToHandling (dispatchException);
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            DispatchExceptionToHandling (dispatchException);
        }
    }
    catch (Exception ex) {
        CatchValue (ex);
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
0
Gpt3D_Clone243_0.cs 1 11
Gpt3D_Clone243_0.cs 12 22
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
FixUpEndpoints(shot);
if(IsDuplicateShot(shot))
    return;
HitShots.AddLast (shot);
MissCount = 0;
if (sunk)
    NullOutTarget ();
}
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
244
0
Gpt3D_Clone244_0.cs 1 11
Gpt3D_Clone244_0.cs 12 22
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
	MissCount = 0;
	EndPoints[1] = shot;
	if (EndPoints[0] == null) {
		EndPoints[0] = shot;
	}	
	HitShots.AddLast(shot);
	if (sunk) {
		NullOutTarget();
	}
}
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
244
1
Gpt3D_Clone244_1.cs 1 9
Gpt3D_Clone244_1.cs 10 22
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
	HitShots.AddLast(shot);
	EndPoints[1] = shot;
	MissCount = 0;
	if (EndPoints[0] == null) {
	    EndPoints[0] = shot;
	}
	if (sunk) {
	    NullOutTarget();
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
0
Gpt3D_Clone245_0.cs 1 30
Gpt3D_Clone245_0.cs 31 55
----------------------------------------

public Point GetShot() {
    Point p = new Point();
    if (attackVector.Count() > 0) {
        p = ExtendShot();
        return p;
    }
    
    Board potential = new Board(size);
    for (p.Y = 0; p.Y < size.Height; ++p.Y) {
        for (p.X = 0; p.X < size.Width; ++p.X) {
            if (shotBoard.ShotAt(p)) {
                potential[p] = 0;
                continue;
            }
	    double totalWeight = 0;
            foreach (HunterBoard b in targetBoards) {
                totalWeight += b.GetWeightAt(p);
            }
            double randomWeight = rand.NextDouble();
            if (randomWeight <= totalWeight) {
		    potential[p] = totalWeight;
            }
        }
    }
    
    Point shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
246
0
Gpt3D_Clone246_0.cs 1 19
Gpt3D_Clone246_0.cs 20 36
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    shotBoard [shot] = Shot.Hit;
    if (!sunk) {
        Attack a;
        if (attackVector.Count == 0) {
            a = new Attack(this, shot);
        } 
        else {
            a = attackVector.Peek ();
            a.AddHit(shot);
        }
        attackVector.Push (a);
    } 
    else {
        if (attackVector.Count > 0) {
            attackVector.Pop ();
        }
    }
}
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    shotBoard [shot] = Shot.Hit;
    if (! sunk) {
        if (attackVector.Count == 0) {
            attackVector.Push (new Attack (this, shot));
        } else {
            attackVector.Peek ().AddHit (shot);
        }
    }
    if (sunk) {
        if (attackVector.Count > 0) {
            attackVector.Pop ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
246
2
Gpt3D_Clone246_2.cs 1 12
Gpt3D_Clone246_2.cs 13 29
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    shotBoard [shot] = Shot.Hit;
    if (!sunk) {
        if (attackVector.Count == 0)
            attackVector.Push (new Attack (this, shot));
        else 
            attackVector.Peek ().AddHit (shot);
    } else if (sunk) {
        if (attackVector.Count > 0) 
            attackVector.Pop ();
    }
}
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    shotBoard [shot] = Shot.Hit;
    if (! sunk) {
        if (attackVector.Count == 0) {
            attackVector.Push (new Attack (this, shot));
        } else {
            attackVector.Peek ().AddHit (shot);
        }
    }
    if (sunk) {
        if (attackVector.Count > 0) {
            attackVector.Pop ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
255
2
Gpt3D_Clone255_2.cs 1 14
Gpt3D_Clone255_2.cs 15 25
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    Exception exception = Server.GetLastError () as Exception;
    if (exception != null) {
        Context.ClearError ();
        Context.Response.TrySkipIisCustomErrors = true; 
        string path; 
        if (exception is HttpException && (exception as HttpException).GetHttpCode () == 404) {
            path = "~/Error/NotFound?errorMessage=" + exception.Message; 
        } else {
            path = "~/Error/Index?errorMessage=" + exception.Message;
        }
        Context.Server.TransferRequest (path, false);
    }
}
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    Exception exception = Server.GetLastError () as Exception;
    if (exception != null) {
        Context.ClearError ();
        Context.Response.TrySkipIisCustomErrors = true;
        string path = (exception is HttpException && (exception as HttpException).GetHttpCode () == 404) ? "~/Error/NotFound?errorMessage=" + exception.Message : "~/Error/Index?errorMessage=" + exception.Message;
        Context.Server.TransferRequest (path, false);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
255
3
Gpt3D_Clone255_3.cs 1 9
Gpt3D_Clone255_3.cs 10 20
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    Exception exception = Server.GetLastError () as Exception;
    if (exception != null) {
        Context.ClearError ();
        Context.Response.TrySkipIisCustomErrors = true;
        string path = (exception is HttpException && (exception as HttpException).GetHttpCode () == 404) ? "~/Error/NotFound?errorMessage=" + exception.Message : "~/Error/Index?errorMessage=" + exception.Message;
        Context.Server.TransferRequest (path, false);
    }
}
----------------------------------------

protected void Application_Error (object sender, EventArgs e) {
    var exception = Server.GetLastError () as Exception;
    if (exception == null) return;
    Context.ClearError ();
    Context.Response.TrySkipIisCustomErrors = true;
    var path = exception is HttpException && (exception as HttpException).GetHttpCode () == 404 ? "~/Error/NotFound?errorMessage=" + exception.Message : "~/Error/Index?errorMessage=" + exception.Message;
    Context.Server.TransferRequest (path, false);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
0
Gpt3D_Clone256_0.cs 1 20
Gpt3D_Clone256_0.cs 21 38
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
            prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            var source = new AutoCompleteStringCollection ();
            source.AddRange (Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
           return (String) row ["code"];
            }));
            prodCode.AutoCompleteCustomSource = source;
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
1
Gpt3D_Clone256_1.cs 1 21
Gpt3D_Clone256_1.cs 22 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (!(e.Control is TextBox prodCode))
    {
        return;
    }
    if (dataGridDetail.CurrentCell.ColumnIndex == 2)
    {
        AutoCompleteStringCollection source = new AutoCompleteStringCollection();
        String[] stringArray = Array.ConvertAll<DataRow, String>(
            products.Select(), 
            row => (String)row["code"]);
        source.AddRange(stringArray);
        prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        prodCode.AutoCompleteCustomSource = source;
        prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
    }
    else
    {
        prodCode.AutoCompleteCustomSource = null;
    }
}
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
2
Gpt3D_Clone258_2.cs 1 8
Gpt3D_Clone258_2.cs 9 18
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (MyEnum flag in Enum.GetValues(typeof(MyEnum))) {
        if ((modKey & flag) == flag)
            flags.Add(flag);
    }
    return flags.ToArray();
}
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
0
Gpt3D_Clone259_0.cs 1 23
Gpt3D_Clone259_0.cs 24 45
----------------------------------------

public string IntToString(int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var sb = new StringBuilder();
    bool isNegative = false;
    
    if (a < 0)
    {
        a = -a;
        isNegative = true;
    }
    while (a > 0)
    {
        int d = a % 10;
        sb.Append(d.ToString());
        a /= 10;
    }
    if (isNegative)
        sb.Append('-');
    return sb.ToString();
}
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
0
Gpt3D_Clone263_0.cs 1 11
Gpt3D_Clone263_0.cs 12 22
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var pointA  = line.Intersect (other.line);
    if (pointA == null)
        return null;
    
    var pointB = bindingRectangle.Contains(pointA.Value) && other.bindingRectangle.Contains (pointA.Value);
    if(!pointB)
        return null;
    return pointA;
}
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
1
Gpt3D_Clone263_1.cs 1 7
Gpt3D_Clone263_1.cs 8 18
----------------------------------------

public PointF? Intersect(LineSegment other){
    var p = line.Intersect(other.line);
    if (p != null && bindingRectangle.Contains(p.Value) && other.bindingRectangle.Contains(p.Value)){
        return p;
    }
    return null;
}
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
264
0
Gpt3D_Clone264_0.cs 1 9
Gpt3D_Clone264_0.cs 10 23
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

public PointF? Intersect (LineSegment other) {
    var point = line.Intersect(other.line);
    if (point == null) {
        return null;
    } 
    else {
        if (this.bindingRectangle.Contains(point.Value) && other.bindingRectangle.Contains(point.Value)) {
            return point;
        }     
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
264
1
Gpt3D_Clone264_1.cs 1 12
Gpt3D_Clone264_1.cs 13 23
----------------------------------------

public PointF? Intersect (LineSegment lineSegment) {
    var result = line.Intersect(lineSegment.line);
    if (result == null) {
        return null;
    }  
    else {
        if (this.bindingRectangle.Contains(result.Value) && lineSegment.bindingRectangle.Contains(result.Value)) {
            return result;
        }
    }
    return null;
}
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
264
2
Gpt3D_Clone264_2.cs 1 8
Gpt3D_Clone264_2.cs 9 19
----------------------------------------

public PointF? Intersect(LineSegment other) 
{
    var p = line.Intersect(other.line);  
    if (p != null && IsIntersectedWithinRectangles(p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
0
Gpt3D_Clone265_0.cs 1 16
Gpt3D_Clone265_0.cs 17 30
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    else if (a == other.a)
        return null;
    else {
        if (isVertical)
            return other.Intersect (xConstForVertical);
        else if (other.isVertical)
            return Intersect (other.xConstForVertical);
        else {
            var x = (b - other.b) / (other.a - a);
            return Intersect (x);
        }
    }
}
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
1
Gpt3D_Clone265_1.cs 1 13
Gpt3D_Clone265_1.cs 14 27
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (!isVertical || !other.isVertical)
        if (a != other.a)
            if (isVertical)
                return other.Intersect (xConstForVertical);
            else if (other.isVertical)
                return Intersect (other.xConstForVertical);
            else {
                var x = (b - other.b) / (other.a - a);
                return Intersect (x);
            }
    return null;
}
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
0
Gpt3D_Clone267_0.cs 1 13
Gpt3D_Clone267_0.cs 14 28
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    string res = "";
    switch (proto) {
        case ProtocolType.Tcp :
            res = ((TcpServices) port).ToString();
            break;
        case ProtocolType.Udp :
            res = ((UdpServices) port).ToString();
            break;
    }
    res += "(" + port + ")";
    return res;
}
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
1
Gpt3D_Clone267_1.cs 1 13
Gpt3D_Clone267_1.cs 14 28
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    string ans = "";
    switch (proto) {
        case ProtocolType.Tcp :
            ans += ((TcpServices) port).ToString ();
            break;
        case ProtocolType.Udp :
            ans += ((UdpServices) port).ToString ();
            break;
    }
    ans += "(" + port + ")";
    return ans.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
2
Gpt3D_Clone267_2.cs 1 12
Gpt3D_Clone267_2.cs 13 27
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    string ans = "";
    switch (proto) {
        case ProtocolType.Tcp :
            ans = ((TcpServices)port).ToString() + "(" + port + ")";
            break;
        case ProtocolType.Udp :
            ans = ((UdpServices)port).ToString() + "(" + port + ")";
            break;
    }
    return ans;
}
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
0
Gpt3D_Clone268_0.cs 1 15
Gpt3D_Clone268_0.cs 16 29
----------------------------------------

static Boolean Main ()
{
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    int incrementValue;
    for (int count = 0; count < 10000; count ++) {
        incrementValue = count + 1;
        incrementValue--;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
    return true;
}
----------------------------------------

static void Main () {
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    for (int count = 0; count < 10000; count ++) {
        count ++;
        count --;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
26
2
Gpt3D_Clone26_2.cs 1 29
Gpt3D_Clone26_2.cs 30 56
----------------------------------------

static void Main(string [] args)
{
    Console.Write("Enter a number: ");
    int num = int.Parse(Console.ReadLine());
    
    if(num < 3)
    { 
        Console.WriteLine("{0} is not a prime", num);
    }
    else if(num % 2 == 0)
    {
        Console.WriteLine("{0} is not a prime", num);
    }  
    else
    {
        int i;
        for(i = 3; num %i !=0; i += 2) 
            ;
        if (i == num)
        {
            Console.WriteLine("{0} is a prime!", num);
        }         
        else 
        {
            Console.WriteLine("{0} is not a prime", num);
        }
    }
    Console.ReadLine();
} 
----------------------------------------

static void Main (string [] args) {
    Console.Write ("Enter a number: ");
    int theNum = int.Parse (Console.ReadLine ());
    if (theNum < 3) {
        if (theNum == 2) {
            Console.WriteLine ("{0} is a prime!", theNum);
        } else {
            Console.WriteLine ("{0} is not a prime", theNum);
        }
    } else {
        if (theNum % 2 == 0) {
            Console.WriteLine ("{0} is not a prime", theNum);
        } else {
            int div;
            for (div = 3; theNum % div != 0; div += 2)
                ;
            if (div == theNum) {
                Console.WriteLine ("{0} is a prime!", theNum);
            } else {
                Console.WriteLine ("{0} is not a prime", theNum);
            }
        }
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
0
Gpt3D_Clone271_0.cs 1 18
Gpt3D_Clone271_0.cs 19 38
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    for (int i = 0; i < deserealizedArray.Length; i++) {
        Console.WriteLine (deserealizedArray[i]);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    for (int i = 0; i < siteList.Count; i++) {
        Console.WriteLine (siteList[i]);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
272
0
Gpt3D_Clone272_0.cs 1 22
Gpt3D_Clone272_0.cs 23 39
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    try {
        var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
        string uniqueFileName = Guid.NewGuid () + "_" + fileName;
        if (! Directory.Exists (path)) {
            Directory.CreateDirectory (path);
        }
        byte [] bytes = Convert.FromBase64String (base64);
        Stream fs = File.Open (path + "/" + uniqueFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
        BinaryWriter binaryWriter = new BinaryWriter (fs);
        binaryWriter.Write (bytes);
        binaryWriter.Flush ();
        binaryWriter.Close ();
        binaryWriter.Dispose ();
        fs.Close ();
        fs.Dispose ();
    } catch (Exception e) {
        return Json (new {status = false, failedReason = e.Message}, JsonRequestBehavior.AllowGet);
    }
    return Json (new {status = true}, JsonRequestBehavior.AllowGet);
} 
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
    string uniqueFileName = Guid.NewGuid () + "_" + fileName;
    if (! Directory.Exists (path)) {
        Directory.CreateDirectory (path);
    }
    byte [] bytes = Convert.FromBase64String (base64);
    var fs = new FileStream (path + "/" + uniqueFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
    fs.Write (bytes, 0, bytes.Length);
    fs.Flush ();
    fs.Close ();
    fs.Dispose ();
    return Json (new {status = true}, JsonRequestBehavior.DenyGet);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
272
1
Gpt3D_Clone272_1.cs 1 28
Gpt3D_Clone272_1.cs 29 45
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
    string uniqueFileName = Guid.NewGuid () + "_" + fileName;
    if (!Directory.Exists(path))
    {
        Directory.CreateDirectory(path);
    }
    //Convert base64 string to bytes
    byte[] fileData = Convert.FromBase64String(base64);
    try
    {
        //Create FileStream
        using (FileStream fs = new FileStream(path + "/" + uniqueFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite))
        {
            fs.Write(fileData, 0, fileData.Length);
        }
    }
    catch(IOException e)
    {
        //Exception code goes here
    }
    return Json(new { status = true }, JsonRequestBehavior.DenyGet);
}
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
    string uniqueFileName = Guid.NewGuid () + "_" + fileName;
    if (! Directory.Exists (path)) {
        Directory.CreateDirectory (path);
    }
    byte [] bytes = Convert.FromBase64String (base64);
    var fs = new FileStream (path + "/" + uniqueFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
    fs.Write (bytes, 0, bytes.Length);
    fs.Flush ();
    fs.Close ();
    fs.Dispose ();
    return Json (new {status = true}, JsonRequestBehavior.DenyGet);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
272
2
Gpt3D_Clone272_2.cs 1 15
Gpt3D_Clone272_2.cs 16 33
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
    string uniqueFileName = Guid.NewGuid () + "_" + fileName;
    if (! Directory.Exists (path)) {
        Directory.CreateDirectory (path);
    }
    byte [] bytes = Convert.FromBase64String (base64);
    var fs = new FileStream (path + "/" + uniqueFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
    fs.Write (bytes, 0, bytes.Length);
    fs.Flush ();
    fs.Close ();
    fs.Dispose ();
    return Json (new {status = true}, JsonRequestBehavior.DenyGet);
}
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
    string uniqueFileName = Guid.NewGuid () + "_" + fileName;
    if (!Directory.Exists(path))
    {
        Directory.CreateDirectory(path);
    }
    byte[] fileData = Convert.FromBase64String(base64);
    using (FileStream fs = new FileStream(path + "/" + uniqueFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite))
    {
        fs.Write(fileData, 0, fileData.Length);
    }
    return Json(new { status = true }, JsonRequestBehavior.DenyGet);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
272
3
Gpt3D_Clone272_3.cs 1 14
Gpt3D_Clone272_3.cs 15 31
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
    string uniqueFileName = Guid.NewGuid () + "_" + fileName;
    if (! Directory.Exists (path)) {
        Directory.CreateDirectory (path);
    }
    Image image = Base64ToImage (base64);
    if (image != null) {
        image.Save (path + "/" + uniqueFileName); 
        image.Dispose ();
    }
    return Json (new {status = true}, JsonRequestBehavior.DenyGet);
}
----------------------------------------

[HttpPost] public JsonResult SavePhoto (string base64) {
    string fileName = "test.jpg";
    var path = HttpContext.Current.Server.MapPath ("~/Uploads/Employee/");
    string uniqueFileName = Guid.NewGuid () + "_" + fileName;
    if (! Directory.Exists (path)) {
        Directory.CreateDirectory (path);
    }
    byte [] bytes = Convert.FromBase64String (base64);
    var fs = new FileStream (path + "/" + uniqueFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
    fs.Write (bytes, 0, bytes.Length);
    fs.Flush ();
    fs.Close ();
    fs.Dispose ();
    return Json (new {status = true}, JsonRequestBehavior.DenyGet);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
273
0
Gpt3D_Clone273_0.cs 1 15
Gpt3D_Clone273_0.cs 16 48
----------------------------------------

private static void GetUserData(string userName, UserSession user)
{
    using(Entities ctx = CommonSERT.GetContext())
    {
        var result = (from r in ctx.datUserRoles
            where r.AccountName.Equals(userName, StringComparison.CurrentCultureIgnoreCase)
            select new{Active = r.active, Role = r.Role, ID = r.ID}).FirstOrDefault();
        if(result != null)
        {
            user.UserActive = result.Active;
            user.UserRole = result.Role;
            user.UserID = result.ID;
        }
    }
}
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }}
#====================
#gpt output=============
//Type 3
private static void GetUserData(string userName, UserSession user)
{
    using(Entities ctx = CommonSERT.GetContext())
    {
        var result = (from r in ctx.datUserRoles
            where r.AccountName.Equals(userName, StringComparison.CurrentCultureIgnoreCase)
            select new{Active = r.active, Role = r.Role, ID = r.ID}).FirstOrDefault();
        if(result != null)
        {
            user.UserActive = result.Active;
            user.UserRole = result.Role;
            user.UserID = result.ID;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
273
1
Gpt3D_Clone273_1.cs 1 31
Gpt3D_Clone273_1.cs 32 48
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }}
#====================
#gpt output=============
//Type 3
private static void GetUserData(string userName, UserSession user)
{
    using(Entities ctx = CommonSERT.GetContext())
    {
        var result = (from r in ctx.datUserRoles
            where r.AccountName.Equals(userName, StringComparison.CurrentCultureIgnoreCase)
            select new{Active = r.active, Role = r.Role, ID = r.ID}).FirstOrDefault();
        if(result != null)
        {
            user.UserActive = result.Active;
            user.UserRole = result.Role;
            user.UserID = result.ID;
        }
    }
}
----------------------------------------

private static void GetUserData(string userName, UserSession user)
{
    using(Entities ctx = CommonSERT.GetContext())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals(userName, StringComparison.CurrentCultureIgnoreCase)
            select new{Active = ur.active, Role = ur.Role, ID = ur.ID}).FirstOrDefault();
        if(result != null)
        {
            user.UserActive = result.Active;
            user.UserRole = result.Role;
            user.UserID = result.ID;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
273
2
Gpt3D_Clone273_2.cs 1 31
Gpt3D_Clone273_2.cs 32 64
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }}
#====================
#gpt output=============
//Type 3
private static void GetUserData(string userName, UserSession user)
{
    using(Entities ctx = CommonSERT.GetContext())
    {
        var result = (from r in ctx.datUserRoles
            where r.AccountName.Equals(userName, StringComparison.CurrentCultureIgnoreCase)
            select new{Active = r.active, Role = r.Role, ID = r.ID}).FirstOrDefault();
        if(result != null)
        {
            user.UserActive = result.Active;
            user.UserRole = result.Role;
            user.UserID = result.ID;
        }
    }
}
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }}
#====================
#gpt output=============
//Type 3
private static void GetUserData(string userName, UserSession user)
{
    using(Entities ctx = CommonSERT.GetContext())
    {
        var result = (from r in ctx.datUserRoles
            where r.AccountName.Equals(userName, StringComparison.CurrentCultureIgnoreCase)
            select new{Active = r.active, Role = r.Role, ID = r.ID}).FirstOrDefault();
        if(result != null)
        {
            user.UserActive = result.Active;
            user.UserRole = result.Role;
            user.UserID = result.ID;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
0
Gpt3D_Clone278_0.cs 1 13
Gpt3D_Clone278_0.cs 14 28
----------------------------------------

[Test] public static void Main (string [] args) {
  var method = typeof (Program).GetMethod ("Main");
  var type = typeof (Program);
  SomeValue = 1;
  Console.WriteLine (GetTestAttributeValue(method));
  SomeValue = 2;
  Console.WriteLine (GetTestAttributeValue(method));
  SomeValue = 3;
  Console.WriteLine (GetTestAttributeValue(type));
  SomeValue = 4;
  Console.WriteLine (GetTestAttributeValue(type));
  Console.ReadLine ();
}
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
1
Gpt3D_Clone278_1.cs 1 11
Gpt3D_Clone278_1.cs 12 26
----------------------------------------

[Test] public static void Main (string [] args) {
  SomeValue = 1;
  Console.WriteLine (GetTestAttributeValue(typeof (Program).GetMethod("Main")));
  SomeValue = 2;
  Console.WriteLine (GetTestAttributeValue(typeof (Program).GetMethod("Main")));
  SomeValue = 3;
  Console.WriteLine (GetTestAttributeValue(typeof (Program)));
  SomeValue = 4;
  Console.WriteLine (GetTestAttributeValue(typeof (Program)));
  Console.ReadLine ();
}
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
2
Gpt3D_Clone278_2.cs 1 13
Gpt3D_Clone278_2.cs 14 25
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

[Test] public static void Main(string[] args) 
{
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
3
Gpt3D_Clone278_3.cs 1 10
Gpt3D_Clone278_3.cs 11 25
----------------------------------------

[Test] public static void Main(string[] args) 
{
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 3;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
0
Gpt3D_Clone281_0.cs 1 11
Gpt3D_Clone281_0.cs 12 22
----------------------------------------

public override int Read (byte [] myBuffer, int myOffset, int myCount) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    int copyLength = (myCount < m_count) ? myCount : m_count;
    Array.Copy (m_buffer, m_offset, myBuffer, myOffset, copyLength);
    m_buffer = null;
    return copyLength;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
1
Gpt3D_Clone281_1.cs 1 9
Gpt3D_Clone281_1.cs 10 22
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    int copyLength = (count < m_count) ? count : m_count;
    Array.Copy (m_buffer, m_offset, buffer, offset, copyLength);
    m_buffer = null;
    return copyLength;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
0
Gpt3D_Clone285_0.cs 1 11
Gpt3D_Clone285_0.cs 12 24
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    vf = new VideoFile (inputPath);
    try {
        GetVideoInfo (vf);
    }
    catch (Exception ex) {
        throw ex;
    }
    return vf;
}
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
289
0
Gpt3D_Clone289_0.cs 1 16
Gpt3D_Clone289_0.cs 17 28
----------------------------------------

[STAThread] static void Main () {
    bool result;
    var mutex1 = new System.Threading.Mutex (true, "UniqueAppId", out result);
    var mutex2 = new System.Threading.Mutex (true, "UniqueAppId2", out result);
    if (! result) {
        MessageBox.Show ("Another instance is already running.");
        return;
    }
    Thread[] threads = new Thread[2];
    threads[0] = new Thread(() => Application.Run (new Form1 ()));
    threads[1] = new Thread(() => Application.Run (new Form2 ()));
    threads[0].Start();
    threads[1].Start();
    GC.KeepAlive (mutex1);
    GC.KeepAlive (mutex2);
}
----------------------------------------

[STAThread] static void Main () {
    bool result;
    var mutex = new System.Threading.Mutex (true, "UniqueAppId", out result);
    if (! result) {
        MessageBox.Show ("Another instance is already running.");
        return;
    }
    Application.Run (new Form1 ());
    GC.KeepAlive (mutex);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
289
1
Gpt3D_Clone289_1.cs 1 11
Gpt3D_Clone289_1.cs 12 23
----------------------------------------

[STAThread] static void Main () {
    bool result;
    var mutex = new System.Threading.Mutex (true, "UniqueAppId", out result);
    if (result) {
        Application.Run (new Form1 ());
        GC.KeepAlive (mutex);
    } else {
        System.Windows.Forms.MessageBox.Show ("Another instance is already running.");
        return;
    }
}
----------------------------------------

[STAThread] static void Main () {
    bool result;
    var mutex = new System.Threading.Mutex (true, "UniqueAppId", out result);
    if (! result) {
        MessageBox.Show ("Another instance is already running.");
        return;
    }
    Application.Run (new Form1 ());
    GC.KeepAlive (mutex);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
289
2
Gpt3D_Clone289_2.cs 1 10
Gpt3D_Clone289_2.cs 11 22
----------------------------------------

[STAThread] static void Main () {
    bool result;
    var mutex = new System.Threading.Mutex (true, "UniqueAppId", out result);
    if (result) {
        Application.Run (new Form1 ());
        GC.KeepAlive (mutex);
    } else {
        MessageBox.Show ("Another instance is already running.");
    }
}
----------------------------------------

[STAThread] static void Main () {
    bool result;
    var mutex = new System.Threading.Mutex (true, "UniqueAppId", out result);
    if (! result) {
        MessageBox.Show ("Another instance is already running.");
        return;
    }
    Application.Run (new Form1 ());
    GC.KeepAlive (mutex);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
28
1
Gpt3D_Clone28_1.cs 1 10
Gpt3D_Clone28_1.cs 11 23
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    LinearGradientBrush brush = null;
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
    brush = new LinearGradientBrush (rec, this.ForeColor, this.BackColor, LinearGradientMode.ForwardDiagonal);
    rec.Width = (int) ((rec.Width * scaleFactor) - 4);
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalLine (e.Graphics, rec);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    LinearGradientBrush brush = null;
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) ((rec.Width * scaleFactor) - 4);
    rec.Height -= 4;
    brush = new LinearGradientBrush (rec, this.ForeColor, this.BackColor, LinearGradientMode.Vertical);
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
290
0
Gpt3D_Clone290_0.cs 1 9
Gpt3D_Clone290_0.cs 10 19
----------------------------------------

public static String Combine (String path1, String path2) {
    if (path1 == null || path2 == null)
        throw new ArgumentNullException ((path1 == null) ? "path1" : "path2");
    Contract.Ensures (Contract.Result<String> () != null);
    Contract.EnsuresOnThrow<ArgumentNullException> (true);
    CheckInvalidPathChars (path1);
    CheckInvalidPathChars (path2);
    return CombineNoChecks (path1, path2);
}
----------------------------------------

public static String Combine (String path1, String path2) {
    if (path1 == null || path2 == null)
        throw new ArgumentNullException ((path1 == null) ? "path1" : "path2");
    Contract.EndContractBlock ();
    CheckInvalidPathChars (path1);
    CheckInvalidPathChars (path2);
    return CombineNoChecks (path1, path2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
290
1
Gpt3D_Clone290_1.cs 1 7
Gpt3D_Clone290_1.cs 8 17
----------------------------------------

public static String Combine (String path1, String path2) {
    if (path1 == null || path2 == null)
        throw new ArgumentNullException ("path1" || "path2");
    CheckInvalidPathChars (path1);
    CheckInvalidPathChars (path2);
    return CombineNoChecks (path1, path2);
}
----------------------------------------

public static String Combine (String path1, String path2) {
    if (path1 == null || path2 == null)
        throw new ArgumentNullException ((path1 == null) ? "path1" : "path2");
    Contract.EndContractBlock ();
    CheckInvalidPathChars (path1);
    CheckInvalidPathChars (path2);
    return CombineNoChecks (path1, path2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
290
2
Gpt3D_Clone290_2.cs 1 5
Gpt3D_Clone290_2.cs 6 15
----------------------------------------

public static String Combine (String path1, String path2) {
    if (path1 == null || path2 == null)
        throw new ArgumentNullException ((path1 == null) ? "path1" : "path2");
    return CombineNoChecks (path1, path2);
}
----------------------------------------

public static String Combine (String path1, String path2) {
    if (path1 == null || path2 == null)
        throw new ArgumentNullException ((path1 == null) ? "path1" : "path2");
    Contract.EndContractBlock ();
    CheckInvalidPathChars (path1);
    CheckInvalidPathChars (path2);
    return CombineNoChecks (path1, path2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
0
Gpt3D_Clone293_0.cs 1 19
Gpt3D_Clone293_0.cs 20 38
----------------------------------------

public static void MoveRight (this TreeNode node) {
  TreeNode parent = node.Parent;
  TreeView view = node.TreeView;
  if (parent != null) {
      int index = parent.Nodes.IndexOf (node);
      if (index > 0) {
          TreeNode leftSibling = parent.Nodes[index - 1]; 
          parent.Nodes.RemoveAt (index);
          leftSibling.Nodes.Add(node);
      }
  } else if (node.TreeView.Nodes.Contains (node)) {
      int index = view.Nodes.IndexOf (node);
      if (index > 0) {
          TreeNode leftSibling = view.Nodes[index - 1]; 
          view.Nodes.RemoveAt (index);
          leftSibling.Nodes.Add(node);
      }
  }
}
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index - 1, node);
        }
    } else if (node.TreeView.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index - 1, node);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
1
Gpt3D_Clone293_1.cs 1 17
Gpt3D_Clone293_1.cs 18 36
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index - 1, node);
        }
    } else if (node.TreeView.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index - 1, node);
        }
    }
}
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index + 1 < parent.Nodes.Count) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index + 1, node);
        }
    } else if (node.TreeView.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index + 1 < view.Nodes.Count) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
0
Gpt3D_Clone294_0.cs 1 11
Gpt3D_Clone294_0.cs 12 30
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;     
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        parent.Nodes = SwapNodes (parent.Nodes, index, index + 1);
    } else if (view != null && view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        view.Nodes = SwapNodes (view.Nodes, index, index + 1);
    }
}
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index + 1, node);
        }
    } else if (view != null && view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index < view.Nodes.Count - 1) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
1
Gpt3D_Clone294_1.cs 1 17
Gpt3D_Clone294_1.cs 18 29
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index + 1, node);
        }
    } else if (view != null && view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index < view.Nodes.Count - 1) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
0
Gpt3D_Clone295_0.cs 1 11
Gpt3D_Clone295_0.cs 12 25
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
    }
    foreach(double value in xr_arr)
    {
        Console.WriteLine (value);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
0
Gpt3D_Clone298_0.cs 1 13
Gpt3D_Clone298_0.cs 14 27
----------------------------------------

public ActionResult Index (int ? page) {
    int pagenumber = (page ?? 1) - 1;
    OrderManagement orderMan = new OrderManagement (HttpContext.ApplicationInstance.Context);
    int totalCount = 0;     
    List < OrderViewModel > orderViews = new List < OrderViewModel > ();
    List < Order > orders = orderMan.GetOrderPage (pagenumber, 5, out totalCount);
    foreach (Order order in orders) {
        OrderViewModel viewModel = orderMan.GenerateOrderViewModel (order);
        orderViews.Add (viewModel);
    }
    IPagedList < OrderViewModel > pageOrders = new StaticPagedList < OrderViewModel > (orderViews, pagenumber + 1, 5, totalCount);
    return View (pageOrders);
}
----------------------------------------

public ActionResult Index (int ? page) {
    int pagenumber = (page ?? 1) - 1;
    OrderManagement orderMan = new OrderManagement (HttpContext.ApplicationInstance.Context);
    int totalCount = 0;
    List < Order > orders = orderMan.GetOrderPage (pagenumber, 5, out totalCount);
    List < OrderViewModel > orderViews = new List < OrderViewModel > ();
    foreach (Order order in orders) {
        orderViews.Add (orderMan.GenerateOrderViewModel (order));
    }
    IPagedList < OrderViewModel > pageOrders = new StaticPagedList < OrderViewModel > (orderViews, pagenumber + 1, 5, totalCount);
    return View (pageOrders);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
1
Gpt3D_Clone298_1.cs 1 13
Gpt3D_Clone298_1.cs 14 27
----------------------------------------

public ActionResult Index (int ? page) {
    int pagenumber = (page ?? 1) - 1;
    OrderManagement orderMan = new OrderManagement (HttpContext.ApplicationInstance.Context);
    int totalCount = 0;
    List < OrderViewModel > orderViews = new List < OrderViewModel > ();    
    IPagedList < Order > orders = orderMan.GetOrderPage (pagenumber, 5, out totalCount);
    foreach (Order order in orders) {
        OrderViewModel viewModel = orderMan.GenerateOrderViewModel (order);
        orderViews.Add (viewModel);
    }
    IPagedList < OrderViewModel > pageOrders = new StaticPagedList < OrderViewModel > (orderViews, pagenumber + 1, 5, totalCount);
    return View (pageOrders);
}
----------------------------------------

public ActionResult Index (int ? page) {
    int pagenumber = (page ?? 1) - 1;
    OrderManagement orderMan = new OrderManagement (HttpContext.ApplicationInstance.Context);
    int totalCount = 0;
    List < Order > orders = orderMan.GetOrderPage (pagenumber, 5, out totalCount);
    List < OrderViewModel > orderViews = new List < OrderViewModel > ();
    foreach (Order order in orders) {
        orderViews.Add (orderMan.GenerateOrderViewModel (order));
    }
    IPagedList < OrderViewModel > pageOrders = new StaticPagedList < OrderViewModel > (orderViews, pagenumber + 1, 5, totalCount);
    return View (pageOrders);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
0
Gpt3D_Clone299_0.cs 1 10
Gpt3D_Clone299_0.cs 11 22
----------------------------------------

public static string CombinePaths3 (params string [] paths) {
    if (paths == null) {
        return null;
    }
    StringBuilder currentPath = new StringBuilder(paths [0]);
    for (int i = 1; i < paths.Length; i ++) {
        currentPath.AppendFormat("{0}{1}", Path.DirectorySeparatorChar, paths[i]);
    }
    return currentPath.ToString();
}
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
1
Gpt3D_Clone299_1.cs 1 10
Gpt3D_Clone299_1.cs 11 22
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null || paths.Length == 0) {
        return string.Empty;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
2
Gpt3D_Clone299_2.cs 1 10
Gpt3D_Clone299_2.cs 11 22
----------------------------------------

public static string CombinePaths4 (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = "";
    for (int i = 0; i < paths.Length; i ++) {
        currentPath += (Path.Combine (currentPath, paths [i]));
    }
    return currentPath;
}
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
0
Gpt3D_Clone300_0.cs 1 18
Gpt3D_Clone300_0.cs 19 36
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    else if (typeCode == TypeCode.SByte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    else {
        throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
    }
}
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
301
0
Gpt3D_Clone301_0.cs 1 26
Gpt3D_Clone301_0.cs 27 47
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue("@username", username.Text);
            SelectCommand.Parameters.AddWithValue("@password", password.Text);
            cs.Open(); 
            int count = (int)SelectCommand.ExecuteScalar();
            if (count == 1) 
            { 
                ClientScript.RegisterStartupScript(this.GetType(), "alert", "alert('wow your in !!');", true);
            } 
            else if (count > 1) 
            { 
                ClientScript.RegisterStartupScript(this.GetType(), "alert", "alert('duplicate');", true);
            } 
            else 
            {
                ClientScript.RegisterStartupScript(this.GetType(), "alert", "alert('wrong password');", true); 
            }
        }}
    catch (Exception ex) 
    { 
        ClientScript.RegisterStartupScript(this.GetType(), "alert", "alert('"+ex.Message+"')", true);
    }
}
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Response.Write (@"<script language='javascript'>alert('wow your in !!');</script>");
            } else if (count > 1) {
                Response.Write (@"<script language='javascript'>alert('duplicate');</script>");
            } else
                Response.Write (@"<script language='javascript'>alert('wrong password');</script>");
        }}
    catch (Exception ex) {
        Response.Write (@"<script language='javascript'>alert(ex.message);</script>");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
302
0
Gpt3D_Clone302_0.cs 1 21
Gpt3D_Clone302_0.cs 22 34
----------------------------------------

[TestMethod] public void TestGetCurrentFloor () {
    var elevator1 = new Elevator (Elevator.Environment.Offline);
    elevator1.ElevatorArrivedOnFloor += TestElevatorArrived;
    lock (this)
    {
        elevator1.GoToFloor (5);
        if (! Monitor.Wait (this, TIMEOUT))
            Assert.Fail ("Event did not arrive in time.");
    } int floor1 = elevator1.GetCurrentFloor ();
    Assert.AreEqual (floor1, 5);	
 
    var elevator2 = new Elevator (Elevator.Environment.Offline); 
    elevator2.ElevatorArrivedOnFloor -= TestElevatorArrived;
    lock (this) 
    {
        elevator2.GoToFloor (6);
        if (! Monitor.Wait (this, TIMEOUT))
            Assert.Fail ("Event did not arrive in time.");
    } int floor2 = elevator2.GetCurrentFloor(); 
    Assert.AreEqual (floor2, 6);
}
----------------------------------------

[TestMethod] public void TestGetCurrentFloor () {
    var elevator = new Elevator (Elevator.Environment.Offline);
    elevator.ElevatorArrivedOnFloor += TestElevatorArrived;
    lock (this)
    {
        elevator.GoToFloor (5);
        if (! Monitor.Wait (this, TIMEOUT))
            Assert.Fail ("Event did not arrive in time.");
    } int floor = elevator.GetCurrentFloor ();
    Assert.AreEqual (floor, 5);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
1
Gpt3D_Clone303_1.cs 1 37
Gpt3D_Clone303_1.cs 38 61
----------------------------------------

public static bool AreSame(Type sourceType, Type destinationType) 
{ 
    if (sourceType == null || destinationType == null) 
    { 
        return false; 
    } 
  
    if (sourceType == destinationType) 
    { 
        return true; 
    } 
  
    // Check if the destination type is a sub type of object. 
    Type tempDestinationType = destinationType; 
    while (tempDestinationType.BaseType != typeof(object)) 
    { 
        tempDestinationType = tempDestinationType.BaseType; 
    } 
  
    // Check if sourceType can be assigned to destinationType 
    if (tempDestinationType.IsAssignableFrom(sourceType)) 
    { 
        return true; 
    } 
  
    // Check if any of the interfaces implemented by  
    // destinationType and sourceType are the same 
    foreach(Type dr in destinationType.GetInterfaces()) 
    { 
        foreach(Type sr in sourceType.GetInterfaces()) 
        { 
            if (dr.Name == sr.Name) 
                return true; 
        } 
    } 
    return false; 
} 
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
1
Gpt3D_Clone306_1.cs 1 9
Gpt3D_Clone306_1.cs 10 24
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else  {
        if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
            ilist2.SelectedIndex = 2;
        }
        else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
            ilist2.SelectedIndex = 1;
        }
    }
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
2
Gpt3D_Clone306_2.cs 1 9
Gpt3D_Clone306_2.cs 10 20
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
0
Gpt3D_Clone307_0.cs 1 9
Gpt3D_Clone307_0.cs 10 20
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

public static void Main () {
    int c = 1234;
    int d = 4321;
    Console.WriteLine ("Before: c {0} and d {1}", c, d);
    d -= c;
    c += d;
    d = c - d;
    Console.WriteLine ("After: c {0} and d {1}", c, d);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
0
Gpt3D_Clone308_0.cs 1 14
Gpt3D_Clone308_0.cs 15 27
----------------------------------------

public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) 
{ 
    var contextBase = value as ContextBase; 
    var valueToken = JToken.FromObject(value, new ForcedObjectSerializer()); 
    if (contextBase.Properties != null) 
    { 
        var propertiesList = contextBase.Properties.GetEnumerator(); 
        while (propertiesList.MoveNext()) 
        { 
            valueToken[((KeyValuePair<string, object>) propertiesList.Current).Key] = ((KeyValuePair<string, object>) propertiesList.Current).Value; 
        } 
    } 
    valueToken.WriteTo(writer); 
}
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
1
Gpt3D_Clone308_1.cs 1 13
Gpt3D_Clone308_1.cs 14 26
----------------------------------------

public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) 
{ 
    var contextBase = value as ContextBase; 
    var valueToken = JToken.FromObject(value, new ForcedObjectSerializer()); 
    if (contextBase.Properties != null) 
    { 
        foreach (var property in contextBase.Properties) 
        { 
            valueToken[property.Key] = property.Value; 
        } 
    } 
    valueToken.WriteTo(writer); 
}
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
1
Gpt3D_Clone309_1.cs 1 14
Gpt3D_Clone309_1.cs 15 27
----------------------------------------

public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
    var contextBase = value as ContextBase;
    if (contextBase == null)
        return;
    var valueToken = JToken.FromObject(value, new ForcedObjectSerializer());
    if (contextBase.Properties != null)
    {
        var propertiesToken = JToken.FromObject(contextBase.Properties);
        foreach (var property in propertiesToken.Children<JProperty>())
            valueToken[property.Name] = property.Value;
    }
    valueToken.WriteTo(writer);
}
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
312
0
Gpt3D_Clone312_0.cs 1 20
Gpt3D_Clone312_0.cs 21 41
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    string strReturnValue = null;
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    byte [] baPlainTextBuffer = new byte [baCipherTextBuffer.Length + 1];
    csDecrypt.Read (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    strReturnValue = enc.GetString (baPlainTextBuffer);
    if (! string.IsNullOrEmpty (strReturnValue))
        strReturnValue = strReturnValue.Trim ('\0');
    return strReturnValue;
}
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    System.Security.Cryptography.CryptoStreamReader csDecryptReader = new System.Security.Cryptography.CryptoStreamReader(csDecrypt, enc);
    string strReturnValue = csDecryptReader.ReadToEnd().Trim('\0');
    return strReturnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
312
1
Gpt3D_Clone312_1.cs 1 19
Gpt3D_Clone312_1.cs 20 41
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    System.Security.Cryptography.StreamReader srDecryptReader = new System.Security.Cryptography.StreamReader(csDecrypt, enc);
    string strReturnValue = srDecryptReader.ReadToEnd().Trim('\0');
    return strReturnValue;
}
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    string strReturnValue = null;
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    byte [] baPlainTextBuffer = new byte [baCipherTextBuffer.Length + 1];
    csDecrypt.Read (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    strReturnValue = enc.GetString (baPlainTextBuffer);
    if (! string.IsNullOrEmpty (strReturnValue))
        strReturnValue = strReturnValue.Trim ('\0');
    return strReturnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
1
Gpt3D_Clone313_1.cs 1 10
Gpt3D_Clone313_1.cs 11 21
----------------------------------------

public static double Pow (double baseValue, int exponentValue) {
    if (exponentValue == 0) {
        return 1;
    }
    double result = 1;
    for (int i = 0; i < exponentValue; i++) {
        result *= baseValue;
    }
    return result;
}
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
2
Gpt3D_Clone313_2.cs 1 10
Gpt3D_Clone313_2.cs 11 21
----------------------------------------

public static double Pow (double baseValue, int exponentValue) {
    if (exponentValue == 0) {
        return 1;
    }
    double result = baseValue;
    for (int i = 1; i < exponentValue; i++) {
        result *= baseValue;
    }
    return result;
}
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
0
Gpt3D_Clone317_0.cs 1 15
Gpt3D_Clone317_0.cs 16 29
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (_index == _code.Length - 1) {
        if (key == _code [_index]) {
            _index = 0;
            return true;
        }
        _index = 0;
    } else {
        if (key == _code [_index]) {
            ++_index;
            return false; 
        }
    }
    return false;
}
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
1
Gpt3D_Clone317_1.cs 1 12
Gpt3D_Clone317_1.cs 13 23
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index] && _index == _code.Length - 1) {
        _index = 0;
        return true;
    } else {
        _index = ++_index % _code.Length; 
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
0
Gpt3D_Clone319_0.cs 1 15
Gpt3D_Clone319_0.cs 16 33
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key && Position >= 0) {
        Position = 0;
    } else {
        Position = - 1;
    }
    bool result = false;
    if (Position == Keys.Count - 1) {
        Position = - 1;
        result = true;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
1
Gpt3D_Clone319_1.cs 1 16
Gpt3D_Clone319_1.cs 17 33
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key && Position >= 0) {
        Position = 0;
    } else {
        Position = - 1;
    }
    bool result = false;
    if (Position == Keys.Count - 1) {
        Position = 0;
        result = true;
    }
    return result;
}
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
31
0
Gpt3D_Clone31_0.cs 1 9
Gpt3D_Clone31_0.cs 10 21
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    if (brush == null || brush.Color != this.ForeColor)
        brush = new SolidBrush (this.ForeColor);
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    int valueAsPercentage = (int) (((double) Value / Maximum) * 100);
    e.Graphics.FillRectangle (brush, 0, 0, valueAsPercentage, this.Height);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    if (brush == null || brush.Color != this.ForeColor)
        brush = new SolidBrush (this.ForeColor);
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) (rec.Width * ((double) Value / Maximum)) - 4;
    rec.Height = rec.Height - 4;
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
0
Gpt3D_Clone320_0.cs 1 31
Gpt3D_Clone320_0.cs 32 61
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader1 = new PdfReader (sourceDocumentStream1);
                var pdfReader2 = new PdfReader (sourceDocumentStream2);
                var pages1 = new List < int > ();
                var pages2 = new List < int > ();
                int maxPages1 = pdfReader1.NumberOfPages;
                int maxPages2 = pdfReader2.NumberOfPages; 
                for (int i = 0; i < maxPages1; i ++) { 
                    pages1.Add (i);
                }
                for (int j = 0; j < maxPages2; j ++) { 
                    pages2.Add (j);
                }
                pdfReader1.SelectPages (pages1);
                pdfConcat.AddPages (pdfReader1);
                pdfReader2.SelectPages (pages2);
                pdfConcat.AddPages (pdfReader2);
                pdfReader1.Close ();
                pdfReader2.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
1
Gpt3D_Clone320_1.cs 1 29
Gpt3D_Clone320_1.cs 30 59
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfDoc1 = new PdfDocument (sourceDocumentStream1);
                var pdfDoc2 = new PdfDocument (sourceDocumentStream2);
                var pages1 = new List < int > ();
                var pages2 = new List < int > ();
                for (int i = 0; i < pdfDoc1.Pages.Count; i ++) {
                    pages1.Add (i);
                }
                pdfDoc1.Pages.SelectPages (pages1);
                pdfConcat.AddPages (pdfDoc1.Pages);
                for (int i = 0; i < pdfDoc2.Pages.Count; i ++) {
                    pages2.Add (i);
                }
                pdfDoc2.Pages.SelectPages (pages2);
                pdfConcat.AddPages (pdfDoc2.Pages);
                pdfDoc1.Close ();
                pdfDoc2.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
2
Gpt3D_Clone320_2.cs 1 26
Gpt3D_Clone320_2.cs 27 56
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                int numberOfPages = pdfReader.NumberOfPages;
                for (int i = 1; i <= numberOfPages; i++) {
                    pdfReader.SelectPages (i);
                    pdfConcat.AddPages (pdfReader);
                }
                pdfReader = new PdfReader (sourceDocumentStream2);
                numberOfPages = pdfReader.NumberOfPages;
                for (int i = 1; i <= numberOfPages; i++) {
                    pdfReader.SelectPages (i);
                    pdfConcat.AddPages (pdfReader);
                }
                pdfReader.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
3
Gpt3D_Clone320_3.cs 1 24
Gpt3D_Clone320_3.cs 25 54
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                for (int i = 1; i <= pdfReader.NumberOfPages; i++) {
                    pdfReader.SelectPages (i);
                    pdfConcat.AddPages (pdfReader);
                }
                pdfReader = new PdfReader (sourceDocumentStream2);
                for (int i = 1; i <= pdfReader.NumberOfPages; i++) {
                    pdfReader.SelectPages (i);
                    pdfConcat.AddPages (pdfReader);
                }
                pdfReader.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
0
Gpt3D_Clone322_0.cs 1 11
Gpt3D_Clone322_0.cs 12 28
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var bytes = Encoding.UTF8.GetBytes (source);
        var ms = new MemoryStream (bytes);
        var img = new BitmapImage ();
        img.SetSource (ms);
        return img;
    }
    return null;
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
1
Gpt3D_Clone322_1.cs 1 11
Gpt3D_Clone322_1.cs 12 28
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var bytes = Convert.FromBase64String (source);
        var ms = new MemoryStream (bytes);
        var img = new BitmapImage ();
        img.SetSource (ms);
        return img;
    }
    return null;
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
0
Gpt3D_Clone324_0.cs 1 10
Gpt3D_Clone324_0.cs 11 22
----------------------------------------

public static bool InheritsFrom (Type t, Type baseType) {
    Type cur = t;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
0
Gpt3D_Clone326_0.cs 1 10
Gpt3D_Clone326_0.cs 11 22
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join (", ", lhs));
    var n2 = BigInteger.Parse (string.Join (", ", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().Substring (0, result.Length);
    for (int i = 0; i < stResult.Length; i ++) {
        result [i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
1
Gpt3D_Clone326_1.cs 1 10
Gpt3D_Clone326_1.cs 11 22
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = new BigInteger(lhs);
    var n2 = new BigInteger(rhs);
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
2
Gpt3D_Clone326_2.cs 1 10
Gpt3D_Clone326_2.cs 11 22
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs.AsEnumerable ().Reverse ()));
    var n2 = BigInteger.Parse (string.Join ("", rhs.AsEnumerable ().Reverse ()));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
0
Gpt3D_Clone328_0.cs 1 7
Gpt3D_Clone328_0.cs 8 17
----------------------------------------

private static void getDiscount (int [] items, int [] discounts, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i]; i ++) {
        discountItem = discounts [i];
        if (i >= discounts.Length)
            break;
    }
}
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
0
Gpt3D_Clone333_0.cs 1 11
Gpt3D_Clone333_0.cs 12 22
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    Int32 i = lstAvailableColors.Items.Count;
    while (i != 0) {
        i--;
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
0
Gpt3D_Clone334_0.cs 1 12
Gpt3D_Clone334_0.cs 13 25
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        string[] lines = File.ReadAllLines(file_path);
        for(int i=0;i<lines.Length;i++) {
            counter++;
            Console.WriteLine(counter + " " + lines[i]);
        }
        return true;
    }
    return false;
}
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
1
Gpt3D_Clone334_1.cs 1 11
Gpt3D_Clone334_1.cs 12 24
----------------------------------------

public static bool init_access (string file_path) {
    if (!File.Exists (file_path)) {
        return false;
    }
    int counter = 0;
    foreach (string line in File.ReadAllLines (file_path)) {
        counter ++;
        Console.WriteLine (counter + " " + line);
    }
    return true;
}
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
0
Gpt3D_Clone336_0.cs 1 17
Gpt3D_Clone336_0.cs 18 32
----------------------------------------

protected void DiasShow()
{
    var getFiles = Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList(getFiles);
    StringBuilder txt = new StringBuilder();
    foreach (string randomFileName in random)
    {
        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper();
        if (fileType.Equals(".JPG") || fileType.Equals(".JPEG"))
        {
            string imageName = System.IO.Path.GetFileName(randomFileName);
            txt.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString();
}
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
1
Gpt3D_Clone336_1.cs 1 13
Gpt3D_Clone336_1.cs 14 32
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

protected void DiasShow()
{
    var getFiles = Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList(getFiles);
    StringBuilder txt = new StringBuilder();
    foreach (var randomFileName in random)
    {
        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper();
        if (fileType == ".JPG" || fileType == ".JPEG")
        {
            string imageName = System.IO.Path.GetFileName(randomFileName);
            txt.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
0
Gpt3D_Clone340_0.cs 1 19
Gpt3D_Clone340_0.cs 20 39
----------------------------------------

  
public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    for (int i=0; i<pp.Controls.Count; i++) {
        if (pp.GetCellPosition (pp.Controls[i]).Column == col) {
            if (pp.GetCellPosition (pp.Controls[i]).Row == row) {
                sendCC = pp.Controls[i];
                fnd = true;
                break;
            }
        }
    }
    if (fnd) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
0
Gpt3D_Clone342_0.cs 1 12
Gpt3D_Clone342_0.cs 13 23
----------------------------------------

private void listBox1_DrawItem (object sender, DrawItemEventArgs e) {
    if (e.Index < 0)
        return;
    Brush brush;
    if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
        brush = new SolidBrush(Color.Yellow);
    else
        brush = new SolidBrush(e.ForeColor);
    e.DrawBackground ();
    e.Graphics.DrawString (listBox1.Items [e.Index].ToString (), e.Font, brush, e.Bounds, StringFormat.GenericDefault);
    e.DrawFocusRectangle ();
}
----------------------------------------

private void listBox1_DrawItem (object sender, DrawItemEventArgs e) {
    if (e.Index < 0)
        return;
    if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
        e = new DrawItemEventArgs (e.Graphics, e.Font, e.Bounds, e.Index, e.State ^ DrawItemState.Selected, e.ForeColor, Color.Yellow);
    e.DrawBackground ();
    e.Graphics.DrawString (listBox1.Items [e.Index].ToString (), e.Font, Brushes.Black, e.Bounds, StringFormat.GenericDefault);
    e.DrawFocusRectangle ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
1
Gpt3D_Clone342_1.cs 1 9
Gpt3D_Clone342_1.cs 10 25
----------------------------------------

private void listBox1_DrawItem (object sender, DrawItemEventArgs e) {
    if (e.Index < 0)
        return;
    if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
        e = new DrawItemEventArgs (e.Graphics, e.Font, e.Bounds, e.Index, e.State ^ DrawItemState.Selected, e.ForeColor, Color.Yellow);
    e.DrawBackground ();
    e.Graphics.DrawString (listBox1.Items [e.Index].ToString (), e.Font, Brushes.Black, e.Bounds, StringFormat.GenericDefault);
    e.DrawFocusRectangle ();
}
----------------------------------------

private void listBox1_DrawItem (object sender, DrawItemEventArgs e) {
    if (e.Index < 0)
        return;
    Brush brush;
    
    if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
        brush = new SolidBrush(Color.Yellow);
    else
        brush = new SolidBrush(e.ForeColor);
    e.DrawBackground(brush);
    e.Graphics.DrawString(listBox1.Items[e.Index].ToString(), e.Font, Brushes.Black, e.Bounds, StringFormat.GenericDefault);
    e.DrawFocusRectangle();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
344
0
Gpt3D_Clone344_0.cs 1 12
Gpt3D_Clone344_0.cs 13 25
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, IModelBinder propertyBinder) {
    var propertyType = propertyDescriptor.PropertyType;
    if (propertyType.IsGenericType && propertyType.Name.Contains("Nullable")) {
        var provider = bindingContext.ValueProvider.GetValue (bindingContext.ModelName);
        if (provider != null && provider.RawValue != null && Type.GetTypeCode (provider.RawValue.GetType ()) == TypeCode.Int32) {
            var value = Activator.CreateInstance(typeof(System.Web.Script.Serialization.JavaScriptSerializer))
                .Deserialize(provider.AttemptedValue, bindingContext.ModelMetadata.ModelType);
            return value;
        }
    }
    return base.GetPropertyValue (controllerContext, bindingContext, propertyDescriptor, propertyBinder);
}
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, IModelBinder propertyBinder) {
    var propertyType = propertyDescriptor.PropertyType;
    if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition () == typeof (Nullable < >)) {
        var provider = bindingContext.ValueProvider.GetValue (bindingContext.ModelName);
        if (provider != null && provider.RawValue != null && Type.GetTypeCode (provider.RawValue.GetType ()) == TypeCode.Int32) {
            var value = new System.Web.Script.Serialization.JavaScriptSerializer ().Deserialize (provider.AttemptedValue, bindingContext.ModelMetadata.ModelType);
            return value;
        }
    }
    return base.GetPropertyValue (controllerContext, bindingContext, propertyDescriptor, propertyBinder);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
347
0
Gpt3D_Clone347_0.cs 1 23
Gpt3D_Clone347_0.cs 24 45
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    string question;
    int randomNumber;
    if (champion == "ahri") {
        randomNumber = rnd.Next (ahri.Length - 1);
        Console.Write ("Press the 'enter' key for a random champion..     ");
        question = Console.ReadLine ();
        Console.WriteLine (ahri [randomNumber]);
    } else {
        randomNumber = rnd.Next (leeSin.Length - 1);
        Console.Write ("Press the 'enter' key for a random champion..     ");
        question = Console.ReadLine ();
        Console.WriteLine (leeSin [randomNumber]);
    }
}
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    Console.Write ("Press the 'enter' key for a random champion..     ");
    string question = Console.ReadLine ();
    if (champion == "ahri") {
        int randomNumber = rnd.Next (ahri.Length - 1);
        Console.WriteLine (ahri [randomNumber]);
    } else {
        int randomNumber = rnd.Next (leeSin.Length - 1);
        Console.WriteLine (leeSin [randomNumber]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
347
1
Gpt3D_Clone347_1.cs 1 20
Gpt3D_Clone347_1.cs 21 46
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    Console.Write ("Press the 'enter' key for a random champion..     ");
    string question = Console.ReadLine ();
    if (champion == "ahri") {
        int randomNumber = rnd.Next (ahri.Length - 1);
        Console.WriteLine (ahri [randomNumber]);
    } else {
        int randomNumber = rnd.Next (leeSin.Length - 1);
        Console.WriteLine (leeSin [randomNumber]);
    }
}
----------------------------------------

static void Main (string [] args) {
    Random rnd = new Random ();
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    Console.Write ("Press the 'enter' key for a random champion..     ");
    string question = Console.ReadLine ();
    int randomNumber;
    if (champion == "ahri") {
        randomNumber = rnd.Next (ahri.Length - 1);
    } else {
        randomNumber = rnd.Next (leeSin.Length - 1);
    }
    if (champion == "ahri") {
        Console.WriteLine (ahri [randomNumber]);
    } else {
        Console.WriteLine (leeSin [randomNumber]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
347
2
Gpt3D_Clone347_2.cs 1 21
Gpt3D_Clone347_2.cs 22 43
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    Console.Write ("Press the 'enter' key for a random champion..     ");
    string question = Console.ReadLine ();
    Random rnd = new Random ();
    int idx = rnd.Next (0, (ahri.Length + leeSin.Length));
    string selectedSkin;
    if (champion == "ahri" && idx < ahri.Length) {
        selectedSkin = ahri [idx];
    } else {
        selectedSkin = leeSin [idx];
    }
    Console.WriteLine (selectedSkin);
}
----------------------------------------

static void Main (string [] args) {
    string [] ahri = {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"};
    string [] leeSin = {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"};
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1");
    Console.WriteLine (" ");
    Console.WriteLine (" ");
    Random rnd = new Random ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.WriteLine ("What champion would you like to select a skin for?..    ");
    string champion = Console.ReadLine ();
    Console.Write ("Press the 'enter' key for a random champion..     ");
    string question = Console.ReadLine ();
    if (champion == "ahri") {
        int randomNumber = rnd.Next (ahri.Length - 1);
        Console.WriteLine (ahri [randomNumber]);
    } else {
        int randomNumber = rnd.Next (leeSin.Length - 1);
        Console.WriteLine (leeSin [randomNumber]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
0
Gpt3D_Clone351_0.cs 1 13
Gpt3D_Clone351_0.cs 14 26
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        int vertexIndex = 0;
        while (vertexIndex < ring.Count) {
            ring[vertexIndex].WellKnownBinary (sout);
            vertexIndex = vertexIndex + 1;
        }
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
1
Gpt3D_Clone351_1.cs 1 11
Gpt3D_Clone351_1.cs 12 24
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        for (int vertexIndex = 0; vertexIndex < ring.Count; vertexIndex++) {
            ring[vertexIndex].WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
0
Gpt3D_Clone352_0.cs 1 11
Gpt3D_Clone352_0.cs 12 26
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    int numPoints = this.Points.Count;
    for (int i = 0; i < numPoints; i++) {
        var point = this.Points[i];
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
1
Gpt3D_Clone352_1.cs 1 9
Gpt3D_Clone352_1.cs 10 22
----------------------------------------

public override void Type4WellKnownBinary (Stream sout) {
    var order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
0
Gpt3D_Clone354_0.cs 1 14
Gpt3D_Clone354_0.cs 15 30
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiLineStringWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.LineStrings.Length), 0, 4);
    for (int i = 0; i < this.LineStrings.Length; i++) {
        sout.WriteByte (order);
        sout.Write (GeoBase.LineStringWkbs, 0, 4);
        sout.Write (BitConverter.GetBytes (this.LineStrings[i].Length), 0, 4);
        for (int j = 0; j < this.LineStrings[i].Length; j++) {
            this.LineStrings[i][j].WellKnownBinary (sout);
        }
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiLineStringWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.LineStrings.Count), 0, 4);
    foreach (var lineString in this.LineStrings) {
        sout.WriteByte (order);
        sout.Write (GeoBase.LineStringWkbs, 0, 4);
        sout.Write (BitConverter.GetBytes (lineString.Count), 0, 4);
        foreach (var position in lineString) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
1
Gpt3D_Clone354_1.cs 1 14
Gpt3D_Clone354_1.cs 15 30
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiLineStringWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.LineStrings.Count), 0, 4);
    foreach (var lineString in this.LineStrings) {
        sout.WriteByte (order);
        sout.Write (GeoBase.LineStringWkbs, 0, 4);
        sout.Write (BitConverter.GetBytes (lineString.Count), 0, 4);
        foreach (var position in lineString) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiLineStringWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.LineStrings.Count), 0, 4);
    for (int i = 0; i < this.LineStrings.Count; i++) {
        sout.WriteByte (order);
        sout.Write (GeoBase.LineStringWkbs, 0, 4);
        sout.Write (BitConverter.GetBytes (this.LineStrings[i].Count), 0, 4);
        for (int j = 0; j < this.LineStrings[i].Count; j++) {
            this.LineStrings[i][j].WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
2
Gpt3D_Clone354_2.cs 1 14
Gpt3D_Clone354_2.cs 15 30
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiLineStringWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.LineStrings.Count), 0, 4);
    for (int i = 0; i < this.LineStrings.Length; i++) {
        sout.WriteByte (order);
        sout.Write (GeoBase.LineStringWkbs, 0, 4);
        sout.Write (BitConverter.GetBytes (this.LineStrings[i].Size), 0, 4);
        for (int j = 0; j < this.LineStrings[i].Size; j++) {
            this.LineStrings[i][j].WellKnownBinary (sout);
        }
    }
}
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiLineStringWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.LineStrings.Count), 0, 4);
    foreach (var lineString in this.LineStrings) {
        sout.WriteByte (order);
        sout.Write (GeoBase.LineStringWkbs, 0, 4);
        sout.Write (BitConverter.GetBytes (lineString.Count), 0, 4);
        foreach (var position in lineString) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
359
0
Gpt3D_Clone359_0.cs 1 15
Gpt3D_Clone359_0.cs 16 33
----------------------------------------

private void FillBuffer( long position ) {
   long newStart = 0;
   if ( position>bufferStart )
      newStart = position;
   else
      newStart = Math.Max(position-buffer.Length+2, 0);
   int bytesRead;
   int index = 0;
   stream.Position = newStart;
   while ((bytesRead = stream.Read(buffer, index, buffer.Length-index)) > 0) {
       index += bytesRead;
   }
   bufferStart = newStart;
   bufferEnd = bufferStart + index;
}
----------------------------------------

private void FillBuffer (long position) {
    long newStart;
    if (position > bufferStart) {
        newStart = position;
    } else {
        newStart = Math.Max (0, position - buffer.Length + 2);
    }
    int bytesRead;
    int index = 0;
    stream.Position = newStart;
    while ((bytesRead = stream.Read (buffer, index, buffer.Length - index)) > 0) {
        index += bytesRead;
    }
    bufferStart = newStart;
    bufferEnd = bufferStart + index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
35
0
Gpt3D_Clone35_0.cs 1 12
Gpt3D_Clone35_0.cs 13 24
----------------------------------------

public void SelectFiles () 
{
    FileDialog openDialog = new FileDialog();
    openDialog.Multiselect = true;
    DialogResult dialogResult = openDialog.ShowDialog();
    if (dialogResult == DialogResult.OK)
    {
        uploadFileList.Clear();
        uploadFileList.AddRange(openDialog.FileNames);
        SelectedFileText.Text = String.Join(Environment.NewLine, uploadFileList);           
    }
}
----------------------------------------

public void SelectFiles () {
    dlg = new Microsoft.Win32.OpenFileDialog ();
    dlg.Multiselect = true;
    Nullable < bool > result = dlg.ShowDialog ();
    if (result == true) {
        uploadFileList.Clear ();
        uploadFileList.AddRange (dlg.FileNames);
        SelectedFileText.Text = String.Join (Environment.NewLine, uploadFileList);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
35
1
Gpt3D_Clone35_1.cs 1 10
Gpt3D_Clone35_1.cs 11 23
----------------------------------------

public void SelectFiles () {
    dlg = new Microsoft.Win32.OpenFileDialog ();
    dlg.Multiselect = true;
    Nullable < bool > result = dlg.ShowDialog ();
    if (result == true) {
        uploadFileList.Clear ();
        uploadFileList.AddRange (dlg.FileNames);
        SelectedFileText.Text = String.Join (Environment.NewLine, uploadFileList);
    }
}
----------------------------------------

public void SelectFiles ()
{
    OpenFileDialog dialog = new OpenFileDialog();
    dialog.Multiselect = true;
    if (dialog.ShowDialog() == DialogResult.OK)
    {
        uploadFileList.Clear();
        uploadFileList.AddRange(dialog.FileNames);
        SelectedFileText.Text = String.Join(Environment.NewLine, uploadFileList);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
0
Gpt3D_Clone365_0.cs 1 24
Gpt3D_Clone365_0.cs 25 47
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        if((int) m.WParam == HTCLOSE) {
            return;
        } else {
            base.WndProc (ref m);
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            if((int) m.WParam == HTCLOSE) {
                Trace.WriteLine ("Close Button clicked");
                Close ();
            } else {
                base.WndProc (ref m);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
367
0
Gpt3D_Clone367_0.cs 1 12
Gpt3D_Clone367_0.cs 13 26
----------------------------------------

static void Main (string [] args) {
    int value = 997;
    string [,] arrValues = new string [5, 5];
    for (int i = 0; i < arrValues.GetLength (0); i ++) {
        for (int j = 0; j < arrValues.GetLength (1); j ++) {
            value ++;
            arrValues [i, j] = value.ToString ();
        }
    }
    ArrayPrinter.PrintToConsole (arrValues);
    Console.ReadLine ();
}
----------------------------------------

public void RunTest () {
    int value = 997;
    int [,] arrValues = new int [5, 5];
    for (int i = 0; i < arrValues.GetLength (0); i ++) {
        for (int j = 0; j < arrValues.GetLength (1); j ++) {
            value ++;
            arrValues [i, j] = value;
        }
    }
    ArrayPrinter.PrintToConsole (arrValues);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
367
1
Gpt3D_Clone367_1.cs 1 14
Gpt3D_Clone367_1.cs 15 28
----------------------------------------

static void Main (string[] args) 
{
	int value = 997;
    string[,] arrValues = new string[5,5];
    for (int i = arrValues.GetLength(0) - 1; i >= 0; i--)
    {
        for (int j = arrValues.GetLength(1) - 1; j >= 0; j--)
        {
            arrValues[i, j] = (++value).ToString();
        }
    }
    ArrayPrinter.PrintToConsole(arrValues);
    Console.ReadLine();
}
----------------------------------------

static void Main (string [] args) {
    int value = 997;
    string [,] arrValues = new string [5, 5];
    for (int i = 0; i < arrValues.GetLength (0); i ++) {
        for (int j = 0; j < arrValues.GetLength (1); j ++) {
            value ++;
            arrValues [i, j] = value.ToString ();
        }
    }
    ArrayPrinter.PrintToConsole (arrValues);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
0
Gpt3D_Clone368_0.cs 1 22
Gpt3D_Clone368_0.cs 23 46
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = false;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = true;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == true) {
        buffer [index ++] = temp;
        leading = true;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == true) {
        buffer [index ++] = temp;
        leading = true;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
0
Gpt3D_Clone370_0.cs 1 11
Gpt3D_Clone370_0.cs 12 22
----------------------------------------

static void Main (string [] args) {
    Thread thread = new Thread (new ThreadStart (Zombie));
    thread.Start ();
    Thread.Sleep (500);
    thread.Abort ();
    lock (_lock)
    {
        Console.WriteLine ("Main entered");
        Console.ReadKey ();
    }
}
----------------------------------------

static void Main (string [] args) {
    Thread thread = new Thread (new ThreadStart (Zombie));
    thread.Start ();
    Thread.Sleep (500);
    thread.Abort ();
    Monitor.Enter (_lock);
    Console.WriteLine ("Main entered");
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
0
Gpt3D_Clone371_0.cs 1 11
Gpt3D_Clone371_0.cs 12 27
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = delegate (int param1) 
    {
        Console.WriteLine("Param value " + param1);
    };
    x.DoStuffWithReturnValue = () => MethodWithReturnValue();
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
1
Gpt3D_Clone371_1.cs 1 14
Gpt3D_Clone371_1.cs 15 27
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = (Action) MethodForDelecate;
    x.DoStuffWithParameter = (Action<int>) delegate (int param1) 
    {
        Console.WriteLine("Param value " + param1);
    };
    x.DoStuffWithReturnValue = (Func<int>) (() => MethodWithReturnValue());
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
0
Gpt3D_Clone372_0.cs 1 9
Gpt3D_Clone372_0.cs 10 20
----------------------------------------

public void doWork () {
    int h = 0;
    while (true) 
    {
        Thread.Sleep (3000);
        h.Dump ();
        h ++;
    }
}
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
1
Gpt3D_Clone372_1.cs 1 9
Gpt3D_Clone372_1.cs 10 21
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void doWork()
{
    int h = 0;
    while (true)
    {
        Thread.Sleep(3000);
        h.Dump();
        h++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
2
Gpt3D_Clone372_2.cs 1 9
Gpt3D_Clone372_2.cs 10 20
----------------------------------------

public void doWork () {
    int h = 0;
    while (h <= 0) 
    {
        Thread.Sleep (3000);
        h.Dump ();
        h ++;
    }
}
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
0
Gpt3D_Clone373_0.cs 1 14
Gpt3D_Clone373_0.cs 15 27
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        int lParam = m.LParam.ToInt32();
        int x = lParam & 0xffff;
        int y = lParam > > 16;
        Point pos = new Point (x, y);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
1
Gpt3D_Clone373_1.cs 1 14
Gpt3D_Clone373_1.cs 15 27
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        int lParam = m.LParam.ToInt32();
        int x = lParam & 0xffff;
        int y = lParam > > 16;
        Point pos = new Point (x, y);
        IntPtr handle = WindowFromPoint (pos);
        if (handle != IntPtr.Zero && handle != m.HWnd && Control.FromHandle (handle) != null) {
            SendMessage (handle, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
3
Gpt3D_Clone373_3.cs 1 11
Gpt3D_Clone373_3.cs 12 26
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        int posx = m.LParam.ToInt32() & 0xffff;
        int posy = m.LParam.ToInt32() >> 16;
        Point pos = new Point (posx, posy);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
0
Gpt3D_Clone374_0.cs 1 14
Gpt3D_Clone374_0.cs 15 27
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        int lParamValue = m.LParam.ToInt32();
        int posX = lParamValue & 0xffff;
        int posY = lParamValue >> 16;
        Point pos = new Point(posX, posY);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
1
Gpt3D_Clone374_1.cs 1 13
Gpt3D_Clone374_1.cs 14 26
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        int posX = m.LParam.ToInt32() & 0xffff;
        int posY = m.LParam.ToInt32() >> 16;
        Point pos = new Point(posX, posY);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
2
Gpt3D_Clone374_2.cs 1 13
Gpt3D_Clone374_2.cs 14 26
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        int number1 = m.LParam.ToInt32 () & 0xffff;
        int number2 = m.LParam.ToInt32 () >> 16;
        Point pos = new Point (number2, number1);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
3
Gpt3D_Clone374_3.cs 1 11
Gpt3D_Clone374_3.cs 12 26
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        int number1 = m.LParam.ToInt32 () & 0xffff;
        int number2 = m.LParam.ToInt32 () >> 16;
        Point pos = new Point (number1, number2);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
375
0
Gpt3D_Clone375_0.cs 1 15
Gpt3D_Clone375_0.cs 16 32
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg != 0x20a)
        return false;
    Point mouseAbsolutePosition = Point.FromLParam (m.LParam);
    Point mouseRelativePosition = mCtrl.PointToClient (mouseAbsolutePosition);
    IntPtr hControlUnderMouse = API.WindowFromPoint (mouseAbsolutePosition);
    Control controlUnderMouse = Control.FromHandle (hControlUnderMouse);
    if (!ReferenceEquals (controlUnderMouse, mCtrl))
        return false;
    MouseButtons buttons = API.GetMouseButtons (m.WParam);
    int delta = (int) (m.WParam > > 16);
    var e = new MouseEventArgs (buttons, 0, mouseRelativePosition.X, mouseRelativePosition.Y, delta);
    mOnMouseWheel (e);
    return true;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg != 0x20a)
        return false;
    Point mouseAbsolutePosition = new Point (m.LParam.ToInt32 ());
    Point mouseRelativePosition = mCtrl.PointToClient (mouseAbsolutePosition);
    IntPtr hControlUnderMouse = WindowFromPoint (mouseAbsolutePosition);
    Control controlUnderMouse = Control.FromHandle (hControlUnderMouse);
    if (controlUnderMouse != mCtrl)
        return false;
    MouseButtons buttons = GetMouseButtons (m.WParam.ToInt32 ());
    int delta = m.WParam.ToInt32 () > > 16;
    var e = new MouseEventArgs (buttons, 0, mouseRelativePosition.X, mouseRelativePosition.Y, delta);
    mOnMouseWheel (e);
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
375
1
Gpt3D_Clone375_1.cs 1 15
Gpt3D_Clone375_1.cs 16 32
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg != 0x20a)
        return false;
    Point mouseAbsolutePosition = new Point (m.LParam.ToInt32 ());
    Point mouseRelativePosition = mCtrl.PointToClient (mouseAbsolutePosition);
    IntPtr hControlUnderMouse = WindowFromPoint (mouseAbsolutePosition);
    Control controlUnderMouse = Control.FromHandle (hControlUnderMouse);
    if (controlUnderMouse != mCtrl)
        return false;
    MouseButtons buttons = GetMouseButtons (m.WParam.ToInt32 ());
    int delta = m.WParam.ToInt32 () > > 16;
    var e = new MouseEventArgs (buttons, 0, mouseRelativePosition.X, mouseRelativePosition.Y, delta);
    mOnMouseWheel (e);
    return true;
}
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg != 0x20a)
        return false;
    Point mouseAbsolutePosition = Point.FromLParam (m.LParam);
    Point mouseRelativePosition = mCtrl.PointToClient (mouseAbsolutePosition);
    IntPtr hControlUnderMouse = API.WindowFromPoint (mouseAbsolutePosition);
    Control controlUnderMouse = Control.FromHandle (hControlUnderMouse);
    if (controlUnderMouse != mCtrl)
        return false;
    MouseButtons buttons = API.GetMouseButtons (m.WParam);
    int delta = m.WParam > > 16;
    var e = new MouseEventArgs (buttons, 0, mouseRelativePosition.X, mouseRelativePosition.Y, delta);
    mOnMouseWheel (e);
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
0
Gpt3D_Clone377_0.cs 1 8
Gpt3D_Clone377_0.cs 9 29
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
{
    if (suppressNotification)
    {
        return;
    }
    base.OnCollectionChanged(e);
    if (CollectionChanged != null)
    {
        Delegate[] invocationList = CollectionChanged.GetInvocationList();
        foreach (Delegate d in invocationList)
        {
            d.DynamicInvoke(this, e);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
1
Gpt3D_Clone377_1.cs 1 16
Gpt3D_Clone377_1.cs 17 26
----------------------------------------

protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
{
    if (suppressNotification)
    {
        return;
    }
    base.OnCollectionChanged(e);
    if (CollectionChanged != null)
    {
        CollectionChanged(this, e);
    }
        
    CollectionChanged?.Invoke(this, e);
}
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
0
Gpt3D_Clone378_0.cs 1 10
Gpt3D_Clone378_0.cs 11 19
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    
    if (disposing) {
        if (this.stream != null)
            this.stream.Dispose ();
        this.disposed = true;
    }
}
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
1
Gpt3D_Clone378_1.cs 1 7
Gpt3D_Clone378_1.cs 8 16
----------------------------------------

private void Dispose (bool disposing) {
    if (!this.disposed) {
        if (disposing && this.stream != null)
            this.stream.Dispose ();
        this.disposed = true;
    }
}
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
1
Gpt3D_Clone37_1.cs 1 11
Gpt3D_Clone37_1.cs 12 24
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    int sign = Math.Sign (days); //Detecting the sign of the number 
    int absDays = Math.Abs (days); //Finding the absolute value of days 
    for (int i = 0; i < absDays; i ++) {
        do {
            current = current.AddDays (sign); 
        } while ((DateTime.DayOfWeek)current.DayOfWeek == DayOfWeek.Saturday 
            || (DateTime.DayOfWeek)current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
2
Gpt3D_Clone37_2.cs 1 11
Gpt3D_Clone37_2.cs 12 24
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var absValue = Math.Abs (days); 
    var sign = Math.Sign (days);
    for (var j = 0; j < absValue; j++) {
        while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday)
        {
            current = current.AddDays (sign);
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
3
Gpt3D_Clone37_3.cs 1 11
Gpt3D_Clone37_3.cs 12 24
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var absValue = Math.Abs (days); 
    var sign = Math.Sign (days);
    for (var k = 0; k < absValue; k++) {
        if (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday)
        {
            current = current.AddDays (sign);
        }
    }
    return current;
}
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
380
0
Gpt3D_Clone380_0.cs 1 13
Gpt3D_Clone380_0.cs 14 30
----------------------------------------

public override int Read () {
    int i = _source.Read ();
    if (i == - 1)
        return - 1;
    if (i == '\r') {
        if (_source.Peek () == '\n')
            _source.Read ();
        return i;
    }
    if (isNewLine (i))
        return '\n';
    return i;
}
----------------------------------------

public override int Read () {
    int i = _source.Read ();
    if (i == - 1)
        return -1;
    else if (i == '\r') {
        int x = _source.Peek ();
        if (x == '\n')
            _source.Read (); 
        return i;
    }
    else if (isNewLine (i))
        return '\n';
    else
        return i;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
380
1
Gpt3D_Clone380_1.cs 1 13
Gpt3D_Clone380_1.cs 14 28
----------------------------------------

public override int Read () {
    int i = _source.Read ();
    if (i == - 1)
        return - 1;
    if (i == '\n')
        return i;
    if (i == '\r')
        if (_source.Peek () == '\n')
            _source.Read ();
    if (isNewLine (i))
        return '\n';
    return i;
}
----------------------------------------

public override int Read () {
    int i = _source.Read ();
    if (i == - 1)
        return - 1;
    if (i == '\r') {
        if (_source.Peek () == '\n')
            _source.Read ();
        return i;
    }
    if (isNewLine (i))
        return '\n';
    return i;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
380
2
Gpt3D_Clone380_2.cs 1 10
Gpt3D_Clone380_2.cs 11 25
----------------------------------------

public override int Read () {
    int i = _source.Read ();
    if (i == - 1)
        return - 1;
    if (i == '\n')
        return i;
    if (isNewLine (i))
        return '\n';
    return i;
}
----------------------------------------

public override int Read () {
    int i = _source.Read ();
    if (i == - 1)
        return - 1;
    if (i == '\r') {
        if (_source.Peek () == '\n')
            _source.Read ();
        return i;
    }
    if (isNewLine (i))
        return '\n';
    return i;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
0
Gpt3D_Clone385_0.cs 1 9
Gpt3D_Clone385_0.cs 10 20
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    for (int i = 0; i < arr2D.length; i++) {
        sums [rowSums] = arraySum (arr2D[i]);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
0
Gpt3D_Clone388_0.cs 1 19
Gpt3D_Clone388_0.cs 20 40
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            if (! dr.IsNull ("DataDesc")) {
                String dataDesc = dr ["DataDesc"].ToString ().Trim ();
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "");
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Split ('(')[0];
                }
                dr ["DataDesc"] = dataDesc;
            }
        }
    }
}
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
1
Gpt3D_Clone388_1.cs 1 19
Gpt3D_Clone388_1.cs 20 35
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            if (! dr.IsNull ("DataDesc")) {
                String dataDesc = dr ["DataDesc"].ToString ();                 
                dataDesc = dataDesc.Replace ("STATE", "").Replace ("HELLO ALL", "").Trim ();
                if (dataDesc.Contains ("(")) {
                   dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
                dr ["DataDesc"] = dataDesc;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
0
Gpt3D_Clone393_0.cs 1 23
Gpt3D_Clone393_0.cs 24 52
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (this);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (!object.Equals(obj3, obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
394
1
Gpt3D_Clone394_1.cs 1 14
Gpt3D_Clone394_1.cs 15 35
----------------------------------------

public bool doFindSum (ref int [] nums, int index, int current, int target) {
    numberCalled ++;
    if (index + 1 == nums.Length) {
        if (current == target) {
            ++ answer;
            return true;
        } else {
            return false;
        }
    }
    bool add = doFindSum (ref nums, index + 1, current + nums [index + 1], target);
    bool minus = doFindSum (ref nums, index + 1, current - nums [index + 1], target);
    return add || minus;
}
----------------------------------------

public bool doFindSum (ref int [] nums, int index, int current, int target) {
    numberCalled ++;
    if (index + 1 == nums.Length) {
        if (current == target) {
            ++ answer;
            return true;
        } else {
            return false;
        }
    }
    bool add = true, minus = true;
    if(nums[index+1] > 0){
        add = doFindSum (ref nums, index + 1, current + nums [index + 1], target);
    }
    if(nums[index+1] < 0){
        minus = doFindSum (ref nums, index + 1, current - nums [index + 1], target);
    }
    return add || minus;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
394
2
Gpt3D_Clone394_2.cs 1 14
Gpt3D_Clone394_2.cs 15 30
----------------------------------------

public bool doFindSum (ref int [] nums, int index, int current, int target) {
    numberCalled ++;
    if (index == nums.Length) {
        if (current == target) {
            ++ answer;
            return true;
        } else {
            return false;
        }
    }
    bool add = doFindSum (ref nums, index + 1, current + nums [index], target);
    bool minus = doFindSum (ref nums, index + 1, current - nums [index], target);
    return add || minus;
}
----------------------------------------

public bool doFindSum (ref int [] nums, int index, int current, int target) {
    numberCalled ++;
    if (index + 1 == nums.Length) {
        if (current == target) {
            ++ answer;
            return true;
        } else {
            return false;
        }
    }
    bool add = doFindSum (ref nums, index + 1, current + nums [index + 1], target);
    bool minus = doFindSum (ref nums, index + 1, current - nums [index + 1], target);
    return add || minus;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
0
Gpt3D_Clone395_0.cs 1 21
Gpt3D_Clone395_0.cs 22 37
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) 
{
    if (String.IsNullOrEmpty (currentJob) == false) 
    {
        return false;
    }
    int i = 0;
    while (i < jobsICanDo.Length) 
    {
        if (jobsICanDo[i] == job)
        {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
        i++;
    }
    return false;
}
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
1
Gpt3D_Clone395_1.cs 1 19
Gpt3D_Clone395_1.cs 20 35
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) 
{ 
    if (String.IsNullOrEmpty (currentJob) == false) 
    {
        return false;
    }
    foreach(string jobToTry in jobsICanDo) 
    { 
        if (jobToTry == job) 
        { 
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        } 
    } 
    return false;
}
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
39
0
Gpt3D_Clone39_0.cs 1 15
Gpt3D_Clone39_0.cs 16 28
----------------------------------------

protected override void WndProc(ref Message m) 
{ 
    if (m.Msg == 0x1300 + 40) 
    { 
        RECT rc = (RECT)m.GetLParam(typeof(RECT)); 
        int w = rc.Right - rc.Left; 
        int h = rc.Bottom - rc.Top; 
        rc.Left -= 0; 
        rc.Right += 2*w/3; 
        rc.Top -= 0; 
        rc.Bottom += 2*h/3; 
        Marshal.StructureToPtr(rc, m.LParam, true); 
    } 
    base.WndProc(ref m); 
}
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x1300 + 40) {
        RECT rc = (RECT) m.GetLParam (typeof (RECT));
        rc.Left -= 0;
        rc.Right += 3;
        rc.Top -= 0;
        rc.Bottom += 3;
        Marshal.StructureToPtr (rc, m.LParam, true);
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
39
1
Gpt3D_Clone39_1.cs 1 15
Gpt3D_Clone39_1.cs 16 28
----------------------------------------

protected override void WndProc(ref Message m) 
{ 
    if (m.Msg == 0x1300 + 40) 
    { 
        RECT rc = (RECT)m.GetLParam(typeof(RECT)); 
        int w = rc.Right - rc.Left; 
        int h = rc.Bottom - rc.Top; 
        rc.Left -= 0; 
        rc.Right += w+3; 
        rc.Top -= 0; 
        rc.Bottom += h+3; 
        Marshal.StructureToPtr(rc, m.LParam, true); 
    } 
    base.WndProc(ref m); 
}
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x1300 + 40) {
        RECT rc = (RECT) m.GetLParam (typeof (RECT));
        rc.Left -= 0;
        rc.Right += 3;
        rc.Top -= 0;
        rc.Bottom += 3;
        Marshal.StructureToPtr (rc, m.LParam, true);
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
0
Gpt3D_Clone402_0.cs 1 13
Gpt3D_Clone402_0.cs 14 26
----------------------------------------

private static void DetectCollisions (List<string> files) {
    try {
        foreach (var file in files) {
            Assembly assembly = Assembly.LoadFrom (file);
            foreach (var method in FindExtensionMethods (assembly)) {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
1
Gpt3D_Clone402_1.cs 1 11
Gpt3D_Clone402_1.cs 12 23
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

private static void DetectCollisions (Assembly assembly) {
    try {
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
0
Gpt3D_Clone403_0.cs 1 16
Gpt3D_Clone403_0.cs 17 27
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        if ((value > 0 && adder > 0 && decimal.MaxValue - value < adder) 
            || (value < 0 && adder < 0 && decimal.MinValue - value > adder)) {
            Debug.Log ("greater then max value");
            return decimal.MaxValue;
        }
        else {
            return value + adder;
        }
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
404
0
Gpt3D_Clone404_0.cs 1 38
Gpt3D_Clone404_0.cs 39 107
----------------------------------------

static void Write (DataTable dt, string outputFilePath) {
    int [] maxLengths = new int [dt.Columns.Count];
    for (int i = 0; i < dt.Columns.Count; i ++) {
        maxLengths [i] = Math.Max(dt.Columns [i].ColumnName.Length, CalculateMaxLengthForRow(dt, i));
    }
    using (StreamWriter sw = new StreamWriter (outputFilePath, false))
    {
        for (int i = 0; i < dt.Columns.Count; i ++) {
            sw.Write (dt.Columns [i].ColumnName.PadRight (maxLengths [i] + 2));
        }
        sw.WriteLine ();
        foreach (DataRow row in dt.Rows) {
            for (int i = 0; i < dt.Columns.Count; i ++) {
                if (! row.IsNull (i)) {
                    sw.Write (row [i].ToString ().PadRight (maxLengths [i] + 2));
                } else {
                    sw.Write (new string (' ', maxLengths [i] + 2));
                }
            }
            sw.WriteLine ();
        }
        sw.Close ();
    }
    public int CalculateMaxLengthForRow(DataTable dt, int index)
    {
        int maxLength = 0;
        foreach (DataRow row in dt.Rows) {
            if (! row.IsNull (index)) {
                int length = row [index].ToString ().Length;
                if (length > maxLength) {
                    maxLength = length;
                }
            }
        }
        return maxLength;
    }
}
----------------------------------------

static void Write (DataTable dt, string outputFilePath) {
    int [] maxLengths = new int [dt.Columns.Count];
    for (int i = 0; i < dt.Columns.Count; i ++) {
        maxLengths [i] = dt.Columns [i].ColumnName.Length;
        foreach (DataRow row in dt.Rows) {
            if (! row.IsNull (i)) {
                int length = row [i].ToString ().Length;
                if (length > maxLengths [i]) {
                    maxLengths [i] = length;
                }
            }
        }
    }
    using (StreamWriter sw = new StreamWriter (outputFilePath, false))
    {
        for (int i = 0; i < dt.Columns.Count; i ++) {
            sw.Write (dt.Columns [i].ColumnName.PadRight (maxLengths [i] + 2));
        }
        sw.WriteLine ();
        foreach (DataRow row in dt.Rows) {
            for (int i = 0; i < dt.Columns.Count; i ++) {
                if (! row.IsNull (i)) {
                    sw.Write (row [i].ToString ().PadRight (maxLengths [i] + 2));
                } else {
                    sw.Write (new string (' ', maxLengths [i] + 2));
                }
            }
            sw.WriteLine ();
        }
        sw.Close ();
    }}
#====================
#gpt output=============
// Type 3 Code Clone Variants 
static void Write (DataTable dt, string outputFilePath) {
    int [] maxLengths = new int [dt.Columns.Count];
    for (int i = 0; i < dt.Columns.Count; i ++) {
        maxLengths [i] = dt.Columns [i].ColumnName.Length;
        foreach (DataRow row in dt.Rows) {
            if (! row.IsNull (i)) {
                int length = row [i].ToString ().Length;
                maxLengths [i] = Math.Max (length, maxLengths [i]);
            }
        }
    }
    using (StreamWriter sw = new StreamWriter (outputFilePath, false))
    {
        for (int i = 0; i < dt.Columns.Count; i ++) {
            sw.Write (dt.Columns [i].ColumnName.PadRight (maxLengths [i] + 2));
        }
        sw.WriteLine ();
        foreach (DataRow row in dt.Rows) {
            for (int i = 0; i < dt.Columns.Count; i ++) {
                if (! row.IsNull (i)) {
                    sw.Write (row [i].ToString ().PadRight (maxLengths [i] + 2));
                } else {
                    sw.Write (new string (' ', maxLengths [i] + 2));
                }
            }
            sw.WriteLine ();
        }
        sw.Close ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
404
1
Gpt3D_Clone404_1.cs 1 38
Gpt3D_Clone404_1.cs 39 107
----------------------------------------

static void Write (DataTable dt, string outputFilePath) {
    int [] maxLengths = new int [dt.Columns.Count];
    for (int i = 0; i < dt.Columns.Count; i ++) {
        maxLengths [i] = Math.Max(dt.Columns [i].ColumnName.Length, CalculateMaxLengthForRow(dt, i));
    }
    using (StreamWriter sw = new StreamWriter (outputFilePath, false))
    {
        for (int i = 0; i < dt.Columns.Count; i ++) {
            sw.Write (dt.Columns [i].ColumnName.PadRight (maxLengths [i] + 2));
        }
        sw.WriteLine ();
        foreach (DataRow row in dt.Rows) {
            for (int i = 0; i < dt.Columns.Count; i ++) {
                if (! row.IsNull (i)) {
                    sw.Write (row [i].ToString ().PadRight (maxLengths [i] + 2));
                } else {
                    sw.Write (new string (' ', maxLengths [i] + 2));
                }
            }
            sw.WriteLine ();
        }
        sw.Close ();
    }
    public int CalculateMaxLengthForRow(DataTable dt, int index)
    {
        int maxLength = 0;
        foreach (DataRow row in dt.Rows) {
            if (! row.IsNull (index)) {
                int length = row [index].ToString ().Length;
                if (length > maxLength) {
                    maxLength = length;
                }
            }
        }
        return maxLength;
    }
}
----------------------------------------

static void Write (DataTable dt, string outputFilePath) {
    int [] maxLengths = new int [dt.Columns.Count];
    for (int i = 0; i < dt.Columns.Count; i ++) {
        maxLengths [i] = dt.Columns [i].ColumnName.Length;
        foreach (DataRow row in dt.Rows) {
            if (! row.IsNull (i)) {
                int length = row [i].ToString ().Length;
                if (length > maxLengths [i]) {
                    maxLengths [i] = length;
                }
            }
        }
    }
    using (StreamWriter sw = new StreamWriter (outputFilePath, false))
    {
        for (int i = 0; i < dt.Columns.Count; i ++) {
            sw.Write (dt.Columns [i].ColumnName.PadRight (maxLengths [i] + 2));
        }
        sw.WriteLine ();
        foreach (DataRow row in dt.Rows) {
            for (int i = 0; i < dt.Columns.Count; i ++) {
                if (! row.IsNull (i)) {
                    sw.Write (row [i].ToString ().PadRight (maxLengths [i] + 2));
                } else {
                    sw.Write (new string (' ', maxLengths [i] + 2));
                }
            }
            sw.WriteLine ();
        }
        sw.Close ();
    }}
#====================
#gpt output=============
// Type 3 Code Clone Variants 
static void Write (DataTable dt, string outputFilePath) {
    int [] maxLengths = new int [dt.Columns.Count];
    for (int i = 0; i < dt.Columns.Count; i ++) {
        maxLengths [i] = dt.Columns [i].ColumnName.Length;
        foreach (DataRow row in dt.Rows) {
            if (! row.IsNull (i)) {
                int length = row [i].ToString ().Length;
                maxLengths [i] = Math.Max (length, maxLengths [i]);
            }
        }
    }
    using (StreamWriter sw = new StreamWriter (outputFilePath, false))
    {
        for (int i = 0; i < dt.Columns.Count; i ++) {
            sw.Write (dt.Columns [i].ColumnName.PadRight (maxLengths [i] + 2));
        }
        sw.WriteLine ();
        foreach (DataRow row in dt.Rows) {
            for (int i = 0; i < dt.Columns.Count; i ++) {
                if (! row.IsNull (i)) {
                    sw.Write (row [i].ToString ().PadRight (maxLengths [i] + 2));
                } else {
                    sw.Write (new string (' ', maxLengths [i] + 2));
                }
            }
            sw.WriteLine ();
        }
        sw.Close ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
405
0
Gpt3D_Clone405_0.cs 1 12
Gpt3D_Clone405_0.cs 13 24
----------------------------------------

static void Main (String [] args) {
    Console.WriteLine ("Start notepad and hit any key...");
    Console.ReadKey (true);
    Process [] processes = Process.GetProcessesByName ("notepad");
    foreach (Process p in processes) {
        IntPtr zero = IntPtr.Zero;
        var handle = p.MainWindowHandle;
        IntPtr hwnd_top = (IntPtr)SpecialWindowHandles.HWND_TOP;
        SetWindowPos (handle, hwnd_top, 10, 10, 450,450, SetWindowPosFlags.SWP_SHOWWINDOW);
        break;
    }   
}
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Start notepad and hit any key...");
    Console.ReadKey (true);
    Process [] processes = Process.GetProcessesByName ("notepad");
    foreach (Process p in processes) {
        var handle = p.MainWindowHandle;
        SetWindowPos (handle, new IntPtr (SpecialWindowHandles.HWND_TOP), 10, 10, 450, 450, SetWindowPosFlags.SWP_SHOWWINDOW);
        break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
405
1
Gpt3D_Clone405_1.cs 1 10
Gpt3D_Clone405_1.cs 11 23
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Start notepad and hit any key...");
    Console.ReadKey (true);
    Process [] processes = Process.GetProcessesByName ("notepad");
    foreach (Process p in processes) {
        var handle = p.MainWindowHandle;
        SetWindowPos (handle, new IntPtr (SpecialWindowHandles.HWND_TOP), 10, 10, 450, 450, SetWindowPosFlags.SWP_SHOWWINDOW);
        break;
    }
}
----------------------------------------

static void Main (String [] args) {
    Console.WriteLine ("Start notepad and hit any key...");
    Console.ReadKey (true);
    Process [] processes = Process.GetProcessesByName ("notepad");
    foreach (Process p in processes) {
        var handle = p.MainWindowHandle;
        IntPtr zero = IntPtr.Zero;
        SetWindowPos(handle, zero, 10, 10, 450,450, SetWindowPosFlags.SWP_SHOWWINDOW);
        break;
    }   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
407
0
Gpt3D_Clone407_0.cs 1 12
Gpt3D_Clone407_0.cs 13 26
----------------------------------------

private void DrawLines (Graphics g) {
    g.Clear (BackColor);
    int y = - editBox.ScrollPos.Y;
    for (var i = 1; i < _lines + 1; i++) {
        var size = g.MeasureString (i.ToString(), Font);
        g.DrawString (i.ToString(), Font, new SolidBrush(LineNumberColor), new PointF(3, (float)y));
        y += Font.Height + 2;
    }
    float max = (float)g.MeasureString((_lines + 1).ToString(), Font).Width + 6;
    editBox.Location = new PointF (max, 0);
    editBox.Size = new Size(ClientRectangle.Width - (int)max, ClientRectangle.Height);
}
----------------------------------------

private void DrawLines (Graphics g) {
    g.Clear (BackColor);
    int y = - editBox.ScrollPos.Y;
    for (var i = 1; i < _lines + 1; i ++) {
        var size = g.MeasureString (i.ToString (), Font);
        g.DrawString (i.ToString (), Font, new SolidBrush (LineNumberColor), new Point (3, y));
        y += Font.Height + 2;
    }
    var max = (int) g.MeasureString ((_lines + 1).ToString (), Font).Width + 6;
    editBox.Location = new Point (max, 0);
    editBox.Size = new Size (ClientRectangle.Width - max, ClientRectangle.Height);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
408
0
Gpt3D_Clone408_0.cs 1 18
Gpt3D_Clone408_0.cs 19 36
----------------------------------------

public static void Main (string [] args) {
    using (var db = new BloggingContext ())
    {
        for (int i = 0; i < 10; i ++)
        {
            var blog = new Blog {};
            db.Blogs.Add (blog);
        }
        db.SaveChanges ();
        for (int i = 0; i < 10; i ++)
        {
            var fkBlog = GetBlog (db);
            var post = new Post {};
            db.Posts.Add (post);
        }
        db.SaveChanges ();
    }
}
----------------------------------------

public static void Main (string [] args) {
    using (var db = new BloggingContext ())
    {
        for (int i = 0; i < 10; ++ i) {
            var blog = new Blog () {};
            db.Blogs.Add (blog);
            db.SaveChanges ();
        }
        for (int i = 0; i < 10; ++ i) {
            var fkBlog = GetBlog (db);
            var post = new Post () {};
            db.Posts.Add (post);
            db.SaveChanges ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
0
Gpt3D_Clone410_0.cs 1 14
Gpt3D_Clone410_0.cs 15 26
----------------------------------------

public override void ExecutePageHierarchy () {
    TextWriter outputStackTopOutput;
    try {
        StringWriter fakeOutput = new StringWriter ();
        outputStackTopOutput = OutputStack.Pop ();
        OutputStack.Push (fakeOutput);
        base.ExecutePageHierarchy ();
        string content = fakeOutput.ToString ();
        OutputStack.Pop ();
    } finally {
        OutputStack.Push (outputStackTopOutput);
        outputStackTopOutput.Write (content);
    }
}
----------------------------------------

public override void ExecutePageHierarchy () {
    StringWriter fakeOutput = new StringWriter ();
    TextWriter outputStackTopOutput = OutputStack.Pop ();
    OutputStack.Push (fakeOutput);
    base.ExecutePageHierarchy ();
    string content = fakeOutput.ToString ();
    OutputStack.Pop ();
    OutputStack.Push (outputStackTopOutput);
    outputStackTopOutput.Write (content);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
1
Gpt3D_Clone410_1.cs 1 10
Gpt3D_Clone410_1.cs 11 24
----------------------------------------

public override void ExecutePageHierarchy () {
    StringWriter fakeOutput = new StringWriter ();
    TextWriter outputStackTopOutput = OutputStack.Pop ();
    OutputStack.Push (fakeOutput);
    base.ExecutePageHierarchy ();
    string content = fakeOutput.ToString ();
    OutputStack.Pop ();
    OutputStack.Push (outputStackTopOutput);
    outputStackTopOutput.Write (content);
}
----------------------------------------

public override void ExecutePageHierarchy () {
    TextWriter outputStackTopOutput;
    using (StringWriter fakeOutput = new StringWriter ()) {
        outputStackTopOutput = OutputStack.Pop ();
        OutputStack.Push (fakeOutput);
        base.ExecutePageHierarchy ();
        string content = fakeOutput.ToString ();
        OutputStack.Pop ();
        OutputStack.Push (outputStackTopOutput);
        outputStackTopOutput.Write (content);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
411
0
Gpt3D_Clone411_0.cs 1 19
Gpt3D_Clone411_0.cs 20 40
----------------------------------------

private static bool IsAlphaBitmap (Bitmap bmp, out BitmapData bmpData) {
    Rectangle bmpBounds = new Rectangle (0, 0, bmp.Width, bmp.Height);
    bmpData = bmp.LockBits (bmpBounds, ImageLockMode.ReadOnly, bmp.PixelFormat);
    try {
        int rowDataLength = bmpData.Width * 4;
        byte[] buffer = new byte[rowDataLength];
        for (int y = 0; y < bmpData.Height; y++) {
            Marshal.Copy ((IntPtr) ((int) bmpData.Scan0 + bmpData.Stride * y), buffer, 0, rowDataLength);
            for (int p = 0; p < rowDataLength; p += 4) {
                if (buffer[p] > 0 && buffer[p] < 255) {
                    return true;
                }
            }
        }
    } finally {
        bmp.UnlockBits (bmpData);
    }
    return false;
}
----------------------------------------

private static bool IsAlphaBitmap (Bitmap bmp, out BitmapData bmpData) {
    var bmpBounds = new Rectangle (0, 0, bmp.Width, bmp.Height);
    bmpData = bmp.LockBits (bmpBounds, ImageLockMode.ReadOnly, bmp.PixelFormat);
    try {
        var rowDataLength = bmpData.Width * 4;
        var buffer = new byte [rowDataLength];
        for (var y = 0; y < bmpData.Height; y ++) {
            Marshal.Copy ((IntPtr) ((int) bmpData.Scan0 + bmpData.Stride * y), buffer, 0, rowDataLength);
            for (int p = 0; p < rowDataLength; p += 4) {
                if (buffer [p] > 0 && buffer [p] < 255)
                    return true;
            }
        }
    }
    finally {
        bmp.UnlockBits (bmpData);
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
0
Gpt3D_Clone418_0.cs 1 16
Gpt3D_Clone418_0.cs 17 35
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool successChild = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    bool successParent = GetWindowRect (_owner.Handle, ref recParent);
    int centerX = recParent.X + ((recParent.Width - recParent.X) / 2);
    int centerY = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (centerX - (width / 2));
    ptStart.Y = (centerY - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
1
Gpt3D_Clone418_1.cs 1 15
Gpt3D_Clone418_1.cs 16 34
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    GetWindowRect (hChildWnd, ref recChild);
    int width =  recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0,0);
    GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = Math.Max(ptCenter.X - (width / 2), 0);
    ptStart.Y = Math.Max(ptCenter.Y - (height / 2), 0);
    SetWindowPos(hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
2
Gpt3D_Clone418_2.cs 1 17
Gpt3D_Clone418_2.cs 18 34
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0,0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = Math.Max(ptCenter.X - (width / 2), 0);
    ptStart.Y = Math.Max(ptCenter.Y - (height / 2), 0);
    MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
3
Gpt3D_Clone418_3.cs 1 14
Gpt3D_Clone418_3.cs 15 33
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptStart = new Point (0, 0);
    ptStart.X = (recParent.X + ((recParent.Width - recParent.X) / 2) - (width / 2));
    ptStart.Y = (recParent.Y + ((recParent.Height - recParent.Y) / 2) - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
0
Gpt3D_Clone41_0.cs 1 12
Gpt3D_Clone41_0.cs 13 28
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    uint i = 0;
    while (i < 1000000000) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
        i++;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
1
Gpt3D_Clone41_1.cs 1 15
Gpt3D_Clone41_1.cs 16 29
----------------------------------------

static void Main (string [] args)
{
    Stopwatch sw = new Stopwatch();
    sw.Start();
    ulong count = 0;
    for(ulong i = 0; i < 1000000000; i+=16)
    {
        if(i % 16 == 0)
            count++;
    }
    sw.Stop();
    Console.WriteLine(string.Format("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey();
}
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
2
Gpt3D_Clone41_2.cs 1 11
Gpt3D_Clone41_2.cs 12 25
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; i+= 16) {
        count++;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
3
Gpt3D_Clone41_3.cs 1 12
Gpt3D_Clone41_3.cs 13 26
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; i += 16) {
        count += 1;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
0
Gpt3D_Clone420_0.cs 1 16
Gpt3D_Clone420_0.cs 17 30
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        StringBuilder sb = new StringBuilder ();
        sb.Append (number.Substring (0, locationE - 1));
        sb.Append ("E");
        sb.Append (exponent);
        temp = sb.ToString ();
    }
    return Double.Parse (temp);
}
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
1
Gpt3D_Clone420_1.cs 1 16
Gpt3D_Clone420_1.cs 17 30
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        StringBuilder sb = new StringBuilder (number.Substring (0, locationE - 1).ToString ());
        sb.Append ("E");
        sb.Append (exponent);
        sb.ToString ();
        temp = sb.ToString ();
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
2
Gpt3D_Clone420_2.cs 1 11
Gpt3D_Clone420_2.cs 12 25
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    int locationE = number.IndexOf ("x");
    if (locationE != -1) {
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        number = number.Substring (0, locationE - 1) + "^" + exponent;
    }
    return Math.Pow (Convert.ToDouble (number), 1);
}
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
426
0
Gpt3D_Clone426_0.cs 1 15
Gpt3D_Clone426_0.cs 16 29
----------------------------------------

public override void Write(string value) {
    string temp;
    if(_bufferState > 0) {
        if(value == AmpToken) {
            _bufferState++;
            return;
        } 
        else {
            temp = "&";
            Write(temp);
            _bufferState = 0;
        }
    }
    base.Write(value);
}
----------------------------------------

public override void Write (string value) {
    if (_bufferState > 0) {
        if (value == AmpToken) {
            _bufferState ++;
            return;
        } else {
            Write ('&');
            _bufferState = 0;
        }
    }
    base.Write (value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
426
1
Gpt3D_Clone426_1.cs 1 15
Gpt3D_Clone426_1.cs 16 29
----------------------------------------

public override void Write(string value) {
    string temp;
    if(_bufferState > 0) {
        if(value == AmpToken) {
            _bufferState++;
            return;
        } 
        else {
            temp = "&";
            _bufferState = 0;
            base.Write(temp);
        }
    }
    base.Write(value);
}
----------------------------------------

public override void Write (string value) {
    if (_bufferState > 0) {
        if (value == AmpToken) {
            _bufferState ++;
            return;
        } else {
            Write ('&');
            _bufferState = 0;
        }
    }
    base.Write (value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
0
Gpt3D_Clone430_0.cs 1 30
Gpt3D_Clone430_0.cs 31 59
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            int tempIndex = 0;
            var duplicateIndex = pwdBuffer.ToString ().IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = pwdBuffer.ToString ().IndexOf (nextCharacter, tempIndex);
                tempIndex++;
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                int tempIndex = 0;
                nextCharacter = GetRandomCharacter ();
                tempIndex++;
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
1
Gpt3D_Clone430_1.cs 1 27
Gpt3D_Clone430_1.cs 28 48
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        if (false == RepeatCharacters) {
            while (pwdBuffer.ToString().Contains(nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
2
Gpt3D_Clone430_2.cs 1 19
Gpt3D_Clone430_2.cs 20 48
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        if (false == RepeatCharacters) {
            if (pwdBuffer.ToString().Contains(nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
3
Gpt3D_Clone434_3.cs 1 9
Gpt3D_Clone434_3.cs 10 20
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left && MouseDownLocation != null) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right && MouseDownLocation != null) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
0
Gpt3D_Clone436_0.cs 1 10
Gpt3D_Clone436_0.cs 11 21
----------------------------------------

private static void Test (Action toTest) {
    Stopwatch sw = new Stopwatch();
    for (int i = 0; i < 100; i++) {
        sw.Start();
        toTest();
        sw.Stop();
        Console.WriteLine("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset();
    }
}
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
1
Gpt3D_Clone436_1.cs 1 10
Gpt3D_Clone436_1.cs 11 21
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        Stopwatch sw = new Stopwatch();
        sw.Start();
        toTest();
        sw.Stop();
        Console.WriteLine("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset();
    }
}
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
2
Gpt3D_Clone436_2.cs 1 10
Gpt3D_Clone436_2.cs 11 21
----------------------------------------

public static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = new System.Diagnostics.Stopwatch();
        sw.Start();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0} ms", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
3
Gpt3D_Clone436_3.cs 1 9
Gpt3D_Clone436_3.cs 10 21
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

public static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = new Stopwatch();
        sw.Start();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
0
Gpt3D_Clone441_0.cs 1 11
Gpt3D_Clone441_0.cs 12 24
----------------------------------------

public static string dt2JSON (DataTable dt) {
    List < object > rows = new List < object > ();
    foreach (DataRow row in dt.Rows) {
        Dictionary < string, object > rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    JavaScriptSerializer js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
1
Gpt3D_Clone441_1.cs 1 11
Gpt3D_Clone441_1.cs 12 24
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

public static string dt2JSON (DataTable dt) {
    var rows = new List < object > ();
    foreach (DataRow row in dt.Rows) {
        IDictionary < string, object > rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    JavaScriptSerializer js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
1
Gpt3D_Clone444_1.cs 1 15
Gpt3D_Clone444_1.cs 16 28
----------------------------------------

static void Main ()
{
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test3.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++) {
            var currentMaskValue = mask.GetPixel(x, y).R; 
            if (currentMaskValue < 250) {
                bmp.SetPixel(x, y, mask.GetPixel(x, y));
            } 
        }
    bmp.Save (@"test5.jpg");
}
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
445
0
Gpt3D_Clone445_0.cs 1 15
Gpt3D_Clone445_0.cs 16 31
----------------------------------------

private void Dispose (bool disposing) {
    if (disposedValue)
        return;
    if (disposing) {
    }
    if (m_freeStack != null) {
        SharpDX.Direct3D11.Texture2D texture;
        while (m_freeStack.TryDequeue (out texture)) {
            texture?.Dispose ();
        }
        m_freeStack = null;
    }
    disposedValue = true;
}
----------------------------------------

private void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
0
Gpt3D_Clone446_0.cs 1 14
Gpt3D_Clone446_0.cs 15 28
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (minYear <= fromYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
            else
                return false;
        }
    }
    return false;
}
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
1
Gpt3D_Clone446_1.cs 1 12
Gpt3D_Clone446_1.cs 13 26
----------------------------------------

public static bool IsSchoolYearFormat(string format, int minYear, int maxYear)
{
    string[] parts = format.Split(new[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2)
    {
        int fromYear = int.Parse(parts[0].Trim());  //Using the Parse and Trim
        int toYear = int.Parse(parts[1].Trim());
        if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
            return true;
    }
    return false;
}
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
448
0
Gpt3D_Clone448_0.cs 1 17
Gpt3D_Clone448_0.cs 18 35
----------------------------------------

static void Main (string [] args) {
    byte [] NumberToEncode = new byte [8]; 
    for (int i = 0; i < 8; i++) NumberToEncode [i] = (byte)(new Random ()).Next (); 
    Console.WriteLine ("Number to encode = {0}.", ToHex (NumberToEncode));
    byte [] Key = new byte [24];
    (new RNGCryptoServiceProvider ()).GetBytes (Key);
    Console.WriteLine ("Key to encode with is {0}.", ToHex (Key));
    string EncodedValue = Encode (NumberToEncode, Key);
    Console.WriteLine ("The encoded value is {0}.", EncodedValue);
    byte [] DecodedValue;
    bool Success = TryDecode (EncodedValue, Key, out DecodedValue);
    if (Success) {
        Console.WriteLine ("Successfully decoded the encoded value.");
        Console.WriteLine ("The decoded result is {0}.", ToHex (DecodedValue));
    } else
        Console.WriteLine ("Failed to decode encoded value. Invalid result.");
}
----------------------------------------

static void Main (string [] args) {
    long NumberToEncode = (new Random ()).Next ();
    Console.WriteLine ("Number to encode = {0}.", NumberToEncode);
    byte [] Key = new byte [24];
    (new RNGCryptoServiceProvider ()).GetBytes (Key);
    Console.WriteLine ("Key to encode with is {0}.", ToHex (Key));
    string EncodedValue = Encode (NumberToEncode, Key);
    Console.WriteLine ("The encoded value is {0}.", EncodedValue);
    long DecodedValue;
    bool Success = TryDecode (EncodedValue, Key, out DecodedValue);
    if (Success) {
        Console.WriteLine ("Successfully decoded the encoded value.");
        Console.WriteLine ("The decoded result is {0}.", DecodedValue);
    } else
        Console.WriteLine ("Failed to decode encoded value. Invalid result.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
450
0
Gpt3D_Clone450_0.cs 1 27
Gpt3D_Clone450_0.cs 28 49
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    if (value == null) {
        writer.WriteNull ();
        return;
    }
    var model = value as MyModel;
    if (model == null)
        throw new JsonSerializationException ();
    writer.WriteStartObject ();
    writer.WritePropertyName ("name");
    writer.WriteValue (model.Name);
    writer.WritePropertyName ("details");
    writer.WriteStartObject ();
    writer.WritePropertyName ("size");
    serializer.Serialize (writer, model.Size);
    writer.WritePropertyName ("weight");
    writer.WriteValue (model.Weight);
    writer.WriteEndObject ();
    writer.WritePropertyName ("dimensions");
    writer.WriteStartObject ();
    writer.WritePropertyName ("width");
    serializer.Serialize (writer, model.Width);
    writer.WritePropertyName ("height");
    writer.WriteValue (model.Height);
    writer.WriteEndObject ();
    writer.WriteEndObject ();
}
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    if (value == null) {
        writer.WriteNull ();
        return;
    }
    var model = value as MyModel;
    if (model == null)
        throw new JsonSerializationException ();
    writer.WriteStartObject ();
    writer.WritePropertyName ("name");
    writer.WriteValue (model.Name);
    writer.WritePropertyName ("details");
    writer.WriteStartObject ();
    writer.WritePropertyName ("size");
    serializer.Serialize (writer, model.Size);
    writer.WritePropertyName ("weight");
    writer.WriteValue (model.Weight);
    writer.WriteEndObject ();
    writer.WriteEndObject ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
450
1
Gpt3D_Clone450_1.cs 1 27
Gpt3D_Clone450_1.cs 28 49
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    if (value == null) {
        writer.WriteNull ();
        return;
    }
    var model = value as MyModel;
    if (model == null)
        throw new JsonSerializationException ();
    writer.WriteStartObject ();
    writer.WritePropertyName ("name");
    writer.WriteValue (model.Name);
    writer.WritePropertyName ("details");
    writer.WriteStartObject ();
    writer.WritePropertyName ("size");
    serializer.Serialize (writer, model.Size);
    writer.WritePropertyName ("weight");
    writer.WriteValue (model.Weight);
    writer.WriteEndObject ();
    writer.WritePropertyName ("location");
    writer.WriteStartObject ();
    writer.WritePropertyName ("coordinates");
    serializer.Serialize (writer, model.Coordinates);
    writer.WritePropertyName ("country");
    writer.WriteValue (model.Country);
    writer.WriteEndObject ();
    writer.WriteEndObject ();
}
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    if (value == null) {
        writer.WriteNull ();
        return;
    }
    var model = value as MyModel;
    if (model == null)
        throw new JsonSerializationException ();
    writer.WriteStartObject ();
    writer.WritePropertyName ("name");
    writer.WriteValue (model.Name);
    writer.WritePropertyName ("details");
    writer.WriteStartObject ();
    writer.WritePropertyName ("size");
    serializer.Serialize (writer, model.Size);
    writer.WritePropertyName ("weight");
    writer.WriteValue (model.Weight);
    writer.WriteEndObject ();
    writer.WriteEndObject ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
0
Gpt3D_Clone451_0.cs 1 18
Gpt3D_Clone451_0.cs 19 36
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

  public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        for (int i = a; i < b; i ++) {
            delta ++;
        }
        return delta;
    } else {
        for (int i = b; i < a; i ++) {
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
2
Gpt3D_Clone452_2.cs 1 13
Gpt3D_Clone452_2.cs 14 24
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName;
    if (KP.KeyChar != '\0')
    	UserName = KP.KeyChar + Console.ReadLine ();
    else
    	UserName = Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
3
Gpt3D_Clone452_3.cs 1 11
Gpt3D_Clone452_3.cs 12 22
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    if (KP.KeyChar != '\0')
        Console.Write(KP.KeyChar);
    string UserName = Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
457
2
Gpt3D_Clone457_2.cs 1 11
Gpt3D_Clone457_2.cs 12 26
----------------------------------------

private static string ExtractCN (string dn) {
    string [] parts = dn.Split (new char [] {','});
    for (int i = 0; i < parts.Length; i ++) {
        var p = parts [i];
        var elems = p.Split (new char [] {'='});
        if (elems [0].Trim ().ToUpper () == "CN") {
            return elems [1].Trim ();
        }
    }
    return null;
}
----------------------------------------

private static string ExtractCN (string dn) {
    string [] parts = dn.Split (new char [] {','});
    for (int i = 0; i < parts.Length; i ++) {
        var p = parts [i];
        var elems = p.Split (new char [] {'='});
        var t = elems [0].Trim ().ToUpper ();
        var v = elems [1].Trim ();
        if (t == "CN") {
            return v;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
0
Gpt3D_Clone463_0.cs 1 14
Gpt3D_Clone463_0.cs 15 42
----------------------------------------

private void CheckLog () {
    bool found = false;
    while (! found) {
        while ((s = sr.ReadLine ()) != null) {
            if (s.Contains ("test")) {
                _found = true;
                break;
            }
        }
        if (found) {
        } else {
        }
    }
}
----------------------------------------

private void CheckLog() 
{ 
    bool found = false; 
    do 
    { 
        string s; 
        while ((s = sr.ReadLine()) != null) 
        { 
            if (s.Contains("test")) 
            { 
                found = true; 
                break; 
            } 
        } 
        if (found) 
        { 
        } 
        else 
        { 
        } 
  
    } while (!found); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
1
Gpt3D_Clone463_1.cs 1 25
Gpt3D_Clone463_1.cs 26 41
----------------------------------------

private void CheckLog()
{
    bool found = false;
    for(;;)
    {
        for(s = sr.ReadLine(); s != null; s++)
        {
            if (s.Contains("test"))
            {
                found = true;
                break;
            }
        }
        if (found)
        {
        }
        else
        {
        }
        if (found)
        {
            break;
        }
    }
}
----------------------------------------

private void CheckLog () {
    bool found = false;
    while (! found) {
        while ((s = sr.ReadLine ()) != null) {
            if (s.Contains ("test")) {
                _found = true;
                break;
            }
        }
        if (found) {
        } else {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
465
0
Gpt3D_Clone465_0.cs 1 18
Gpt3D_Clone465_0.cs 19 37
----------------------------------------

static void Main (string [] args) {
    int requiredMonths = 6;
    int weekDays = 7;
    DateTime date = new DateTime (2018, 2, 5);
    DateTime [] result = new DateTime [requiredMonths];
    for (int i = 0; i < requiredMonths; i ++) {
        DateTime firstDayOfNextMonth = date.AddMonths (i).AddDays (1 - date.Day); // changed - date.Day + 1 to 1 - date.Day
        for (int j = 0; j < weekDays; j ++) {
            if (firstDayOfNextMonth.AddDays (j).DayOfWeek.Equals (DayOfWeek.Monday)) {
                result [i] = firstDayOfNextMonth.AddDays (j);
            }
        }
    }
    for (int k = 0; k < requiredMonths; k ++) { // added for loop to loop through the desired element in result
        Console.WriteLine (result[k]); // changed from foreach loop to just print out each element in result
    }
    
}
----------------------------------------

static void Main (string [] args) {
    int requiredMonths = 6;
    int weekDays = 7;
    DateTime date = new DateTime (2018, 2, 5);
    DateTime [] result = new DateTime [requiredMonths];
    for (int i = 0; i < requiredMonths; i ++) {
        DateTime firstDayOfNextMonth = date.AddMonths (i).AddDays (- date.Day + 1);
        for (int j = 0; j < weekDays; j ++) {
            if (firstDayOfNextMonth.AddDays (j).DayOfWeek.Equals (DayOfWeek.Monday)) {
                result [i] = firstDayOfNextMonth.AddDays (j);
            }
        }
    }
    foreach (var item in result) {
        Console.WriteLine (item);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
0
Gpt3D_Clone469_0.cs 1 14
Gpt3D_Clone469_0.cs 15 28
----------------------------------------

public static byte[] ConvertBitmapSourceToByteArray(BitmapEncoder encoder, ImageSource imageSource) {
  byte[] bytes = null;
  var bitmapSource = imageSource as BitmapSource;
  if (bitmapSource != null) {
    encoder.Frames.Add(BitmapFrame.Create(bitmapSource));
    using (Stream stream = new MemoryStream()) {
      encoder.Save(stream);
      bytes = new byte[stream.Length];
      stream.Read(bytes, 0, (int)stream.Length);
    }
  }
  return bytes;
}
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
0
Gpt3D_Clone470_0.cs 1 12
Gpt3D_Clone470_0.cs 13 26
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte [] bytes = null;
    if (imageSource is BitmapSource bitmapSource) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        MemoryStream stream = new MemoryStream();
        encoder.Save(stream);
        bytes = stream.ToArray();
        stream.Close();
    }
    return bytes;
}
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
0
Gpt3D_Clone471_0.cs 1 11
Gpt3D_Clone471_0.cs 12 25
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
  byte [] bytes = null;
  if (imageSource is BitmapSource bitmapSource) {
    encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
    using (MemoryStream stream = new MemoryStream ()) {
      encoder.Save (stream);
      bytes = stream.ToArray ();
    }}
    
  return bytes;
}
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
0
Gpt3D_Clone472_0.cs 1 17
Gpt3D_Clone472_0.cs 18 29
----------------------------------------

private static void updateBandwidthInterval (double[] xval, int i, int[] bandwidthInterval) {
    int left = bandwidthInterval[0];
    int right = bandwidthInterval[1];
    int nextRight = nextNonzero(weights, right);
    if (nextRight < xval.Length && xval[nextRight] - xval[i] > xval[i] - xval[left])
    {
        bandwidthInterval[0] = left;
        bandwidthInterval[1] = right;
    }
    else
    {
        int nextLeft = nextNonzero(weights, bandwidthInterval[0]);
        bandwidthInterval[0] = nextLeft;
        bandwidthInterval[1] = nextRight;
    }
}
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
1
Gpt3D_Clone472_1.cs 1 10
Gpt3D_Clone472_1.cs 11 29
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

private static void updateBandwidthInterval (double[] xval, int i, int[] bandwidthInterval) {
    int left = bandwidthInterval[0];
    int right = bandwidthInterval[1];
    int nextRight = nextNonzero(weights, right);
    if (nextRight < xval.Length && xval[nextRight] - xval[i] < xval[i] - xval[left])
    {
        int nextLeft = nextNonzero(weights, bandwidthInterval[0]);
        bandwidthInterval[0] = nextLeft;
        bandwidthInterval[1] = nextRight;
    }
    else
    {
        bandwidthInterval[0] = left;
        bandwidthInterval[1] = right;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
2
Gpt3D_Clone472_2.cs 1 13
Gpt3D_Clone472_2.cs 14 25
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = left - 1;
        while(nextLeft >=0 && weights[nextLeft] == 0) {
            nextLeft--;
        } 
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
0
Gpt3D_Clone475_0.cs 1 8
Gpt3D_Clone475_0.cs 9 19
----------------------------------------

public void Add (Type type) {
    if (type.IsVisible) {
        var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
        foreach (var member in members) {
            Add (type, member);
        }
    }
}
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
479
1
Gpt3D_Clone479_1.cs 1 26
Gpt3D_Clone479_1.cs 27 46
----------------------------------------

public static void ExportToCSV (DataTable contentToexport) {
    StringBuilder csvData = new StringBuilder ();
    StringBuilder headers = new StringBuilder ();
    foreach (DataRow row in contentToexport.Rows) {
        headers = string.Empty;
        foreach (DataColumn column in contentToexport.Columns) {
            csvData.Append (row [column].ToString () + ",");
            headers.Append (column.ColumnName + ",");
        }
        csvData.Append ("\r\n");
        headers.Append ("\r\n");
    }
    string contentToExport = headers.Append (csvData.ToString ()).ToString ();
    string attachment = "attachment; filename=export.csv";
    HttpContext.Current.Response.Clear ();
    HttpContext.Current.Response.ClearHeaders ();
    HttpContext.Current.Response.ClearContent ();
    HttpContext.Current.Response.AddHeader ("content-disposition", attachment);
    HttpContext.Current.Response.ContentType = "application/csv";
#====================
#gpt output=============
    HttpContext.Current.Response.AddHeader ("Pragma", "public");
    HttpContext.Current.Response.Write (contentToExport);
    HttpContext.Current.Response.End ();
}
----------------------------------------

public static void ExportToCSV (DataTable contentToexport) {
    StringBuilder csvData = new StringBuilder ();
    foreach (DataRow row in contentToexport.Rows) {
        foreach (DataColumn column in contentToexport.Columns) {
            csvData.Append (row [column].ToString () + ",");
        }
        csvData.Append ("\r\n");
    }
    string attachment = "attachment; filename=export.csv";
    HttpContext.Current.Response.Clear ();
    HttpContext.Current.Response.ClearHeaders ();
    HttpContext.Current.Response.ClearContent ();
    HttpContext.Current.Response.AddHeader ("content-disposition", attachment);
    HttpContext.Current.Response.ContentType = "application/csv";
    HttpContext.Current.Response.Write (csvData.ToString ());
    HttpContext.Current.Response.Flush ();
    HttpContext.Current.Response.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
0
Gpt3D_Clone481_0.cs 1 37
Gpt3D_Clone481_0.cs 38 68
----------------------------------------

private static void note () {
    int [] i = new int [1];
    Dictionary<int, string> noteDict= new Dictionary<int, string>();
    noteDict[90] = "A";
    noteDict[80] = "B";
    noteDict[70] = "C";
    noteDict[60] = "D";
    string result = "";
    do
        {
            Console.WriteLine ("Please enter test result");
            bool hasResult = int.TryParse (Console.ReadLine (), out i [0]);
            if (! hasResult) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                result = "Note is A";
            } else {
                foreach (var item in noteDict) {
                    if (item.Key <= i[0]){
                        result = "Note is " + item.Value;
                        break;
                    }
                }
            }
            if (String.IsNullOrEmpty(result))
                result = "Failure";
            Console.WriteLine (result);
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
1
Gpt3D_Clone481_1.cs 1 24
Gpt3D_Clone481_1.cs 25 55
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] == 0 || i [0] < 60) {
                Console.WriteLine ("Failure");
            } else if (i [0] < 90) {
                int grade = (i [0]/10);
                Console.WriteLine("note is "+ (char)(grade+55));
            } else {
                Console.WriteLine("Note is A");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
0
Gpt3D_Clone482_0.cs 1 15
Gpt3D_Clone482_0.cs 16 27
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException("Min value is greater or equal to Max value.");
    }
    byte[] intBytes = new byte[4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider()) {
        rng.GetBytes(intBytes);
    }
    int randomNumber = min + Math.Abs(BitConverter.ToInt32(intBytes, 0)) % (max - min + 1);
    if (randomNumber == 0) 
    {
        randomNumber = min + 1;
    }
    return randomNumber;
}
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
1
Gpt3D_Clone482_1.cs 1 15
Gpt3D_Clone482_1.cs 16 27
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException("Min value is greater or equal to Max value.");
    }
    byte[] intBytes = new byte[4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider()) {
        int randomNumber = 0;
        while (randomNumber == 0)
        {
            rng.GetBytes(intBytes);
            randomNumber = min + Math.Abs(BitConverter.ToInt32(intBytes, 0)) % (max - min + 1);
        } 
        return randomNumber;
    }
}
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
2
Gpt3D_Clone482_2.cs 1 13
Gpt3D_Clone482_2.cs 14 25
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    int randomNumber = 0;
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ()) {
        byte [] intBytes = new byte [4];
        rng.GetNonZeroBytes (intBytes);
        randomNumber = Math.Abs (BitConverter.ToInt32 (intBytes, 0));
    } 
    int x = randomNumber % (max - min + 1);
    return min + x;
}
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
3
Gpt3D_Clone482_3.cs 1 10
Gpt3D_Clone482_3.cs 11 25
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } 
    int randomNumber = Math.Abs (BitConverter.ToInt32 (intBytes, 0));
    int x = randomNumber % (max - min + 1);
    return min + x;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
483
0
Gpt3D_Clone483_0.cs 1 11
Gpt3D_Clone483_0.cs 12 24
----------------------------------------

private int CompareNumbers (string x, string y) {
    for (int i = Math.Max (x.Length, y.Length); i >= 0; i --) {
        char xc = GetDigit (x, i);
        char yc = GetDigit (y, i);
        int comparison = String.Compare (xc, yc);
        if (comparison != 0) {
            return comparison;
        }
    }
    return 0;
}
----------------------------------------

private int CompareNumbers (string x, string y) {
    for (int i = int.Max (x.Length, y.Length); i >= 0; i --) {
        char xc = GetEffectiveDigit (x, i);
        char yc = GetEffectiveDigit (y, i);
        int comparison = xc.CompareTo (yc);
        if (comparison != 0) {
            return comparison;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
483
1
Gpt3D_Clone483_1.cs 1 11
Gpt3D_Clone483_1.cs 12 24
----------------------------------------

private int CompareNumbers (string x, string y) {
    for (int i = Math.Max (x.Length, y.Length); i >= 0; i --) {
        char xc = GetEffectiveChar (x, i);
        char yc = GetEffectiveChar (y, i);
        int comparison = Comparer<char>.Default.Compare (xc, yc);
        if (comparison != 0) {
            return comparison;
        }
    }
    return 0;
}
----------------------------------------

private int CompareNumbers (string x, string y) {
    for (int i = int.Max (x.Length, y.Length); i >= 0; i --) {
        char xc = GetEffectiveDigit (x, i);
        char yc = GetEffectiveDigit (y, i);
        int comparison = xc.CompareTo (yc);
        if (comparison != 0) {
            return comparison;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
487
0
Gpt3D_Clone487_0.cs 1 14
Gpt3D_Clone487_0.cs 15 28
----------------------------------------

[HttpPost] [Route("api/{Controller}/{id}/publish")] public IHttpActionResult PublishEntity (int id) {
    try {
        var entity = db.Set<TEntity>().Find(id);
        if (entity == null) {
            return NotFound();
        }
        entity.Published = true;
        db.SaveChanges();
        return Ok();
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

[HttpGet] [Route ("api/{Controller}/{id}")] public IHttpActionResult Get (int id) {
    try {
        var entity = db.Set < TEntity > ().Find (id);
        if (entity == null) {
            return NotFound ();
        }
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
489
0
Gpt3D_Clone489_0.cs 1 17
Gpt3D_Clone489_0.cs 18 38
----------------------------------------

[HttpGet] [Route ("api/{Controller}")] public IHttpActionResult Post (TEntity entity) {
    if (! ModelState.IsValid) {
        return BadRequest (ModelState);
    }
    try {
        var primaryKeyValue = GetPrimaryKeyValue (entity);
        var primaryKeyName = GetPrimaryKeyName (entity);
        var existing = db.Set < TEntity > ().Find (primaryKeyValue);
        ReflectionHelper.Copy (entity, existing, primaryKeyName);
        db.Entry < TEntity > (existing).State = EntityState.Modified;
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

[HttpGet] [Route ("api/{Controller}")] public IHttpActionResult Post (TEntity entity) {
    if (!ModelState.IsValid) {
        return BadRequest(ModelState);
    }
    try {
        var existing = db.Set < TEntity > ().Find (entity.Id);
        foreach (PropertyInfo p in entity.GetType().GetProperties()) {
            if (p.Name != "Id") {
                p.SetValue(existing, p.GetValue(entity));
            }
        }
        db.Entry < TEntity > (existing).State = EntityState.Modified;
        db.SaveChanges();
        return Ok(entity);
    }
    catch (Exception ex) {
        return InternalServerError(ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
489
1
Gpt3D_Clone489_1.cs 1 15
Gpt3D_Clone489_1.cs 16 34
----------------------------------------

[HttpGet] [Route ("api/{Controller}")] public IHttpActionResult Post (TEntity entity) {
    if (!ModelState.IsValid) {
        return BadRequest(ModelState);
    }
    try
    {
        var primaryKeyValue = GetPrimaryKeyValue(entity);
        string sqlQuery = "UPDATE TEntity SET elements from the entity where id = primaryKeyValue";
        db.Sql.ExecuteScalar(sqlQuery);
        return Ok(entity);
    }
    catch (Exception ex) {
 	    return InternalServerError(ex);
	}
}
----------------------------------------

[HttpGet] [Route ("api/{Controller}")] public IHttpActionResult Post (TEntity entity) {
    if (! ModelState.IsValid) {
        return BadRequest (ModelState);
    }
    try {
        var primaryKeyValue = GetPrimaryKeyValue (entity);
        var primaryKeyName = GetPrimaryKeyName (entity);
        var existing = db.Set < TEntity > ().Find (primaryKeyValue);
        ReflectionHelper.Copy (entity, existing, primaryKeyName);
        db.Entry < TEntity > (existing).State = EntityState.Modified;
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
491
0
Gpt3D_Clone491_0.cs 1 12
Gpt3D_Clone491_0.cs 13 26
----------------------------------------

public int Compare(Object stringA, object stringB) {
    string[] valueA = stringA.ToString().Split('-');
    string[] valueB = stringB.ToString().Split('-');
    if (valueA.Length != 2 || valueB.Length != 2) {
        stringA.ToString().CompareTo(stringB.ToString());
    }
    if (valueA[0] == valueB[0]) {
        return float.Parse(valueA[1]).CompareTo(float.Parse(valueB[1]));
    } else {
        return valueA[0].CompareTo(valueB[0]);
    }
}
----------------------------------------

public int Compare (Object stringA, Object stringB) {
    string [] valueA = stringA.ToString ().Split ('/');
    string [] valueB = stringB.ToString ().Split ('/');
    if (valueA.Length != 2 || valueB.Length != 2) {
        stringA.ToString ().CompareTo (stringB.ToString ());
    }
    if (valueA [0] == valueB [0]) {
        return int.Parse (valueA [1]).CompareTo (int.Parse (valueB [1]));
    } else {
        return int.Parse (valueA [0]).CompareTo (int.Parse (valueB [0]));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
0
Gpt3D_Clone492_0.cs 1 9
Gpt3D_Clone492_0.cs 10 19
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Visible = false;
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Visible = false;
    }
}
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
1
Gpt3D_Clone493_1.cs 1 12
Gpt3D_Clone493_1.cs 13 27
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine;
    using (FileStream f = new FileStream(filePath, FileMode.Open,FileAccess.Read)){
        using (StreamReader sr = new StreamReader(f)) {
            while ((currentLine = sr.ReadLine ()) != null) {
                char separatorChar = ',';
                results.AddRange(currentLine.Split(separatorChar));
            }
        }
    }
    lstbx.DataSource = results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
496
0
Gpt3D_Clone496_0.cs 1 12
Gpt3D_Clone496_0.cs 13 27
----------------------------------------

private BitmapSource BitmaptoBitmapsource (System.Drawing.Bitmap bitmap, Int32Rect rect, BitmapSizeOptions sizeOptions) {
    BitmapSource bms;
    IntPtr hBitmap = bitmap.GetHbitmap ();
    try {
        bms = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (hBitmap, IntPtr.Zero, rect, sizeOptions);
        bms.Freeze ();
    }
    finally {
        DeleteObject (hBitmap);
    }
    return bms;
}
----------------------------------------

private BitmapSource BitmaptoBitmapsource (System.Drawing.Bitmap bitmap) {
    BitmapSource bms;
    IntPtr hBitmap = bitmap.GetHbitmap ();
    BitmapSizeOptions sizeOptions = BitmapSizeOptions.FromEmptyOptions ();
    try {
        bms = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (hBitmap, IntPtr.Zero, Int32Rect.Empty, sizeOptions);
        bms.Freeze ();
    }
    finally {
        DeleteObject (hBitmap);
    }
    return bms;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
497
0
Gpt3D_Clone497_0.cs 1 10
Gpt3D_Clone497_0.cs 11 24
----------------------------------------

private string GetControlValue (string controlId) {
    var control = FindControl (controlId);
    if (control is ITextControl) {
        return ((ITextControl) control).Text;
    } else if (control is ICheckBoxControl) {
        return ((ICheckBoxControl) control).Checked.ToString ();
    } else {
        return null;
    }
}
----------------------------------------

private string GetControlValue (string controlId) {
    var control = FindControl (controlId);
    if (control is ITextControl) {
        var textControl = (ITextControl) control;
        return textControl.Text;
    } else if (control is ICheckBoxControl) {
        var checkControl = (ICheckBoxControl) control;
        return checkControl.Checked.ToString ();
    } else {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
2
Gpt3D_Clone4_2.cs 1 10
Gpt3D_Clone4_2.cs 11 21
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0) 
        return 0;
    else if (N == 1)
        return 1;
    else if (N <= 4)
        return N - 1;
    else 
        return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
3
Gpt3D_Clone4_3.cs 1 14
Gpt3D_Clone4_3.cs 15 25
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)  
        return 0;
    else if (N == 1) {
        return 1;
    }
    else if (N <= 4) {
        return N - 1;
    }
    else {
        return fibo_n (N - 1) + fibo_n (N - 2);
    }
}
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
0
Gpt3D_Clone505_0.cs 1 12
Gpt3D_Clone505_0.cs 13 24
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId, DisplayPrice = DisplaySelectedPrice}};
        db.Orders.AddObject (newOrder);
        PrintInvoice(pdf);
        return RedirectToAction ("Index");
    }
    catch {
        return View ("ErrorPage");
    }
}
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
1
Gpt3D_Clone505_1.cs 1 10
Gpt3D_Clone505_1.cs 11 23
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId, DisplayPrice = CalculateCorrespondingPrice(SelectedProductId)}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return RedirectToAction("ErrorPage");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
0
Gpt3D_Clone508_0.cs 1 11
Gpt3D_Clone508_0.cs 12 23
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy != null) {
            loggerPolicy.Push (context.BuildKey.Type);
        } else {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);                
        }
    }
} 
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
0
Gpt3D_Clone509_0.cs 1 19
Gpt3D_Clone509_0.cs 20 37
----------------------------------------

public static bool QueueConnectionAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (ArgumentException exception) {
        return false;
    }
    catch (MessageQueueException exception) {
        MessageQueueErrorCode code = exception.MessageQueueErrorCode;
        if (code == MessageQueueErrorCode.IOTimeout) {
            return true;
        } else {
            return false;
        }
    }
}
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
1
Gpt3D_Clone509_1.cs 1 35
Gpt3D_Clone509_1.cs 36 53
----------------------------------------

public static bool QueueIsAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (ArgumentException exception) {
        return false;
    }
    catch (MessageQueueException exception) {
        return (exception.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
    }
 }
// Type 4 code clone variant:
public static bool QueueConnectionAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (ArgumentException exception) {
        return false;
    }
    catch (MessageQueueException exception) {
        MessageQueueErrorCode code = exception.MessageQueueErrorCode;
        if (code == MessageQueueErrorCode.IOTimeout) {
            return true;
        } else {
            return false;
        }
    }
}
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
2
Gpt3D_Clone509_2.cs 1 35
Gpt3D_Clone509_2.cs 36 53
----------------------------------------

public static bool QueueIsAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (ArgumentException exception) {
        return false;
    }
    catch (MessageQueueException exception) {
        return (exception.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
    }
 }
// Type 4 code clone variant:
public static bool QueueConnectionAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (ArgumentException exception) {
        return false;
    }
    catch (MessageQueueException exception) {
        MessageQueueErrorCode code = exception.MessageQueueErrorCode;
        if (code == MessageQueueErrorCode.IOTimeout) {
            return true;
        } else {
            return false;
        }
    }
}
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
0
Gpt3D_Clone510_0.cs 1 15
Gpt3D_Clone510_0.cs 16 36
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    dr ["Driver"] = AnotherMethod2 (Param) ? 1 : 0;
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
0
Gpt3D_Clone511_0.cs 1 9
Gpt3D_Clone511_0.cs 10 26
----------------------------------------

public override int Read (char [] buffer, int index, int count) {
    var ret = base.Read (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

public override int Read(char [] buffer, int index, int count) {
    var ret = base.Read(buffer, index, count);
    for (int i = 0; i < ret; i++) {
        int idx = index + i;
        char curChar = buffer[idx];
        if ((curChar >= 0x1 && curChar <= 0x8)
            || (curChar >= 0xB && curChar <= 0xC)
            || (curChar >= 0xE && curChar <= 0x1F)
            || (curChar >= 0x7F && curChar <= 0x84)
            || (curChar >= 0x86 && curChar <= 0x9F)) {
            buffer[idx] = ' ';
        }
    }    
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
1
Gpt3D_Clone511_1.cs 1 15
Gpt3D_Clone511_1.cs 16 26
----------------------------------------

public override int Read(char[] buffer, int index, int count) {
    var ret = base.Read(buffer, index, count);
    for (int i = 0; i < ret; i++) {
        int idx = index + i;
        char curChar = buffer[idx];
        if (!((curChar == 0x9)
            || (curChar == 0xA)
            || (curChar == 0xD)
            || ((curChar >= 0x20) && (curChar <= 0xD7FF)) 
            || ((curChar >= 0xE000) && (curChar <= 0xFFFD)))) {
            buffer[idx] = ' ';
        }
    }
    return ret;
}
----------------------------------------

public override int Read (char [] buffer, int index, int count) {
    var ret = base.Read (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
512
0
Gpt3D_Clone512_0.cs 1 9
Gpt3D_Clone512_0.cs 10 21
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (XmlConvert.IsXmlChar (buffer [idx]))
            continue;
        buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
513
0
Gpt3D_Clone513_0.cs 1 10
Gpt3D_Clone513_0.cs 11 22
----------------------------------------

public static Person CreatePerson (Type type) {
    if (type == typeof (Person))
        return new Person ();
    else if (type == typeof (Employee))
        return new Employee ();
    else if (type == typeof (Pilot))
        return new Pilot ();
    else
        throw new ArgumentOutOfRangeException (string.Format (CultureInfo.InvariantCulture, "Unrecognized type [{0}]", type.FullName), "type");
}
----------------------------------------

public static Person CreatePerson (Type type) {
    if (type == typeof (Person))
        return CreatePerson ();
    else if (type == typeof (Employee))
        return CreateEmployee ();
    else if (type == typeof (Pilot))
        return CreatePilot ();
    else
        throw new ArgumentOutOfRangeException (string.Format (CultureInfo.InvariantCulture, "Unrecognized type [{0}]", type.FullName), "type");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
0
Gpt3D_Clone514_0.cs 1 10
Gpt3D_Clone514_0.cs 11 22
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.RotateTransform (angle);
        g.DrawImage (bmp, new Point (- bmp.Width / 2, - bmp.Height / 2));
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
    } 
    return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
515
2
Gpt3D_Clone515_2.cs 1 18
Gpt3D_Clone515_2.cs 19 35
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (bindingContext.ModelType == typeof (Guid)) {
        if (bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName)) {
            string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
            if (! string.IsNullOrEmpty (input)) {
                Guid g;
                if (Guid.TryParse (input, out g))
                    return g;
            }
        }
    }
    string encodedStr = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (encodedStr))
        return null;
    var bytes = HttpServerUtility.UrlTokenDecode (encodedStr);
    var result = new Guid (bytes);
    return result;
}
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    if (Guid.TryParse (input, out g))
        return g;
    var bytes = HttpServerUtility.UrlTokenDecode (s);
    var result = new Guid (bytes);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
515
3
Gpt3D_Clone515_3.cs 1 15
Gpt3D_Clone515_3.cs 16 33
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    if (Guid.TryParse (input, out g))
        return g;
    var bytes = HttpServerUtility.UrlTokenDecode (s);
    var result = new Guid (bytes);
    return result;
}
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (bindingContext.ModelType == typeof (Guid)) {
        if (bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName)) {
            string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
            if (! string.IsNullOrEmpty (input)) {
                Guid g;
                if (Guid.TryParse (input, out g))
                    return g;
                var bytes = HttpServerUtility.UrlTokenDecode (s);
                var result = new Guid (bytes);
                return result;
            }
        }
    }
    return base.BindModel (controllerContext, bindingContext);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
516
0
Gpt3D_Clone516_0.cs 1 24
Gpt3D_Clone516_0.cs 25 58
----------------------------------------

static void Main (string [] args) {
    ConnectionStringSettings csv = ConfigurationManager.ConnectionStrings ["csv"];
    List stats = new List ();
    using (OleDbConnection cn = new OleDbConnection (csv.ConnectionString))
    {
        cn.Open ();
        using (OleDbCommand cmd = cn.CreateCommand ())
        {
            cmd.CommandText = "SELECT * FROM [Stats.csv]";
            cmd.CommandType = CommandType.Text;
            using (OleDbDataReader reader = cmd.ExecuteReader (CommandBehavior.CloseConnection))
            {
                int fieldSport = reader.GetOrdinal ("sport");
                int fieldDate = reader.GetOrdinal ("date");
                int fieldTeamOne = reader.GetOrdinal ("teamone");
                int fieldTeamTwo = reader.GetOrdinal ("teamtwo");
                int fieldScore = reader.GetOrdinal ("score");
                foreach (DbDataRecord record in reader) {
                    stats.Add (new Stat {Sport = record.GetString (fieldSport), Date = record.GetDateTime (fieldDate), TeamOne = record.GetString (fieldTeamOne), TeamTwo = record.GetString (fieldTeamTwo), Score = record.GetInt32 (fieldScore)});
                }
            }}} foreach (Stat stat in stats) {
        Console.WriteLine ("Sport: {0}", stat.Sport);
    }
}
----------------------------------------

static void Main(string[] args)
{
    ConnectionStringSettings csv = ConfigurationManager.ConnectionStrings["csv"];
    List<Stat> stats = new List<Stat>();
    using (OleDbConnection cn = new OleDbConnection(csv.ConnectionString))
    {
        cn.Open();
        using (OleDbCommand cmd = cn.CreateCommand())
        {
            cmd.CommandText = "SELECT sport, date, teamone, teamtwo, score FROM [Stats.csv]";
            using (OleDbDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection))
            {
                while (reader.Read())
                {
                    stats.Add(new Stat
                    {
                        Sport = reader.GetString(reader.GetOrdinal("sport")),
                        Date = reader.GetDateTime(reader.GetOrdinal("date")),
                        TeamOne = reader.GetString(reader.GetOrdinal("teamone")),
                        TeamTwo = reader.GetString(reader.GetOrdinal("teamtwo")),
                        Score = reader.GetInt32(reader.GetOrdinal("score"))
                    });
                }
            }
        }
    }
    foreach (Stat stat in stats)
    {
        Console.WriteLine("Sport: {0}", stat.Sport);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
518
0
Gpt3D_Clone518_0.cs 1 20
Gpt3D_Clone518_0.cs 21 40
----------------------------------------

private Coordinate CalculateClone3 (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random (DateTime.Now.Millisecond);
    double randomLatitude = random.Next ((int) Math.Floor (location4.Latitude), (int) Math.Floor (location2.Latitude));
    Coordinate randomCoordinate = new Coordinate ();
    if (randomLatitude > location1.Latitude) {
        double m1 = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double m2 = (location2.Longitude - location3.Longitude) / (location2.Latitude - location3.Latitude);
        double maxLongitude = (randomLatitude - location2.Latitude) * m1;
        double minLongitude = (randomLatitude - location2.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    } else {
        double m1 = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double m2 = (location4.Longitude - location3.Longitude) / (location4.Latitude - location3.Latitude);
        double maxLongitude = (randomLatitude - location4.Latitude) * m1;
        double minLongitude = (randomLatitude - location4.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    }
    randomCoordinate.Latitude = randomLatitude;
    return randomCoordinate;
}
----------------------------------------

private Coordinate Calculate (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random (DateTime.Now.Millisecond);
    Coordinate randomCoordinate = new Coordinate () {Latitude = random.Next ((int) Math.Floor (location4.Latitude), (int) Math.Floor (location2.Latitude))};
    if (randomCoordinate.Latitude > location1.Latitude) {
        double m1 = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double m2 = (location2.Longitude - location3.Longitude) / (location2.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location2.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location2.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    } else {
        double m1 = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double m2 = (location4.Longitude - location3.Longitude) / (location4.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location4.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location4.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    }
    return randomCoordinate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
518
1
Gpt3D_Clone518_1.cs 1 18
Gpt3D_Clone518_1.cs 19 38
----------------------------------------

private Coordinate Calculate (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random ();
    Coordinate randomCoordinate = new Coordinate () {Latitude = random.Next (Convert.ToInt32(Math.Floor (location4.Latitude)), Convert.ToInt32(Math.Floor (location2.Latitude)))};
    if (randomCoordinate.Latitude > location1.Latitude) {
        double m1 = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double m2 = (location2.Longitude - location3.Longitude) / (location2.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location2.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location2.Latitude) * m2;
        randomCoordinate.Longitude = random.Next (Convert.ToInt32(Math.Ceiling (minLongitude)), Convert.ToInt32(Math.Floor (maxLongitude)));
    } else {
        double m1 = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double m2 = (location4.Longitude - location3.Longitude) / (location4.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location4.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location4.Latitude) * m2;
        randomCoordinate.Longitude = random.Next (Convert.ToInt32(Math.Ceiling (minLongitude)), Convert.ToInt32(Math.Floor (maxLongitude)));
    }
    return randomCoordinate;
}
----------------------------------------

private Coordinate Calculate (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random (DateTime.Now.Millisecond);
    Coordinate randomCoordinate = new Coordinate () {Latitude = random.Next ((int) Math.Floor (location4.Latitude), (int) Math.Floor (location2.Latitude))};
    if (randomCoordinate.Latitude > location1.Latitude) {
        double m1 = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double m2 = (location2.Longitude - location3.Longitude) / (location2.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location2.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location2.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    } else {
        double m1 = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double m2 = (location4.Longitude - location3.Longitude) / (location4.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location4.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location4.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    }
    return randomCoordinate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
518
2
Gpt3D_Clone518_2.cs 1 18
Gpt3D_Clone518_2.cs 19 38
----------------------------------------

private Coordinate Calculate (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random (DateTime.Now.Millisecond);
    Coordinate randomCoordinate = new Coordinate () {Latitude = random.Next ((int) Math.Floor (location4.Latitude), (int) Math.Floor (location2.Latitude))};
    if (randomCoordinate.Latitude > location1.Latitude) {
        double m1 = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double m2 = (location2.Longitude - location3.Longitude) / (location2.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location2.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location2.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    } else {
        double m1 = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double m2 = (location4.Longitude - location3.Longitude) / (location4.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location4.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location4.Latitude) * m2;
        randomCoordinate.Longitude = random.Next ((int) Math.Ceiling (minLongitude), (int) Math.Floor (maxLongitude));
    }
    return randomCoordinate;
}
----------------------------------------

private Coordinate Calculate (Coordinate location1, Coordinate location2, Coordinate location3, Coordinate location4) {
    Random random = new Random ();
    Coordinate randomCoordinate = new Coordinate () {Latitude = random.Next (Math.Floor (location4.Latitude), Math.Floor (location2.Latitude))};
    if (randomCoordinate.Latitude > location1.Latitude) {
        double m1 = (location2.Longitude - location1.Longitude) / (location2.Latitude - location1.Latitude);
        double m2 = (location2.Longitude - location3.Longitude) / (location2.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location2.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location2.Latitude) * m2;
        randomCoordinate.Longitude = random.Next (Math.Ceiling (minLongitude), Math.Floor (maxLongitude));
    } else {
        double m1 = (location4.Longitude - location1.Longitude) / (location4.Latitude - location1.Latitude);
        double m2 = (location4.Longitude - location3.Longitude) / (location4.Latitude - location3.Latitude);
        double maxLongitude = (randomCoordinate.Latitude - location4.Latitude) * m1;
        double minLongitude = (randomCoordinate.Latitude - location4.Latitude) * m2;
        randomCoordinate.Longitude = random.Next (Math.Ceiling (minLongitude), Math.Floor (maxLongitude));
    }
    return randomCoordinate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
0
Gpt3D_Clone519_0.cs 1 11
Gpt3D_Clone519_0.cs 12 26
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return Math.Abs(Math.Abs(a) - Math.Abs(b)) / (Math.Abs(a) + Math.Abs(b)) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
1
Gpt3D_Clone519_1.cs 1 11
Gpt3D_Clone519_1.cs 12 26
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return Math.Abs(a - b) / (Math.Abs(a) + Math.Abs(b)) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
2
Gpt3D_Clone519_2.cs 1 13
Gpt3D_Clone519_2.cs 14 26
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (Math.Abs (a) == 0 || Math.Abs (b) == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (Math.Abs (a) + Math.Abs (b)) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
0
Gpt3D_Clone521_0.cs 1 8
Gpt3D_Clone521_0.cs 9 18
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x.Equals (y);
    else
        return object.Equals (x, y);
}
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
1
Gpt3D_Clone521_1.cs 1 6
Gpt3D_Clone521_1.cs 7 16
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is Guid || x is string)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
522
0
Gpt3D_Clone522_0.cs 1 12
Gpt3D_Clone522_0.cs 13 24
----------------------------------------

public void EnableControls(ControlCollection ctrl, Boolean enable)
{
    foreach (Control control in ctrl)
    {
        if (control.HasControls())
            EnableControls(control.Controls, enable);
        else if (control is WebControl)
            ((WebControl)control).Enabled = enable;
        else if (control is HtmlControl)
            ((HtmlControl)control).Disabled = enable; ;
    }
}
----------------------------------------

public void EnableControls (ControlCollection ctrl, bool isEnable) {
    foreach (Control item in ctrl) {
        if (item.HasControls ())
            EnableControls (item.Controls, isEnable);
        else if (item is WebControl)
            ((WebControl) item).Enabled = isEnable;
        else if (item is HtmlControl)
            ((HtmlControl) item).Disabled = ! isEnable;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
523
0
Gpt3D_Clone523_0.cs 1 16
Gpt3D_Clone523_0.cs 17 36
----------------------------------------

public bool dcpl_radar () {
    if (radar != null) {
        if (radar.InvokeRequired)
            radar.BeginInvoke (new MethodInvoker (delegate () {
                radar.Visible = false;
            }));
        else {
            this.radar.Visible = false;
        }
        radar = null;
        return true;
    }
    else {
        return false;
    }
}
----------------------------------------

public bool dcpl_radar () {
    if (radar == null)
        return false;
    else {
        if (radar != null) {
            if (radar.InvokeRequired)
                radar.BeginInvoke (new MethodInvoker (delegate () {
                    radar.Visible = false;
                    radar = null;
                }));
            else {
                this.radar.Visible = false;
                radar = null;
            }
        }
        return true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
0
Gpt3D_Clone524_0.cs 1 15
Gpt3D_Clone524_0.cs 16 27
----------------------------------------

public object AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)
{
    try 
    {
        string headerName = "Token";
        string headerType = "System";
        Guid tokenId = request.Headers.GetHeader<Guid>(headerName, headerType);
        Console.WriteLine("Token: {0}", tokenId);
    }
    catch (Exception e) 
    {
        Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
    }
    return null;
}
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
1
Gpt3D_Clone524_1.cs 1 15
Gpt3D_Clone524_1.cs 16 27
----------------------------------------

public object AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)
{
    try 
    {
        string headerName = "Token";
        string headerType = "System";
        Object tokenId = request.Headers.GetHeader(headerName, headerType);
        Console.WriteLine("Token: {0}", tokenId);
    }
    catch (Exception e) 
    {
        Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
    }
    return null;
}
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
2
Gpt3D_Clone524_2.cs 1 10
Gpt3D_Clone524_2.cs 11 24
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

public async Task AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)
{
    try
    {
        Guid tokenId = request.Headers.GetHeader<Guid>("Token", "System");
        Console.WriteLine("Token: {0}", tokenId);
    }
    catch (Exception e)
    {
        Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
0
Gpt3D_Clone528_0.cs 1 9
Gpt3D_Clone528_0.cs 10 20
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path");
    int index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.String);
    }
}
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
1
Gpt3D_Clone528_1.cs 1 9
Gpt3D_Clone528_1.cs 10 20
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "");
    int index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
0
Gpt3D_Clone529_0.cs 1 20
Gpt3D_Clone529_0.cs 21 41
----------------------------------------

static void Main (string [] args) {
    const int o = 100_000;
    string stringtotal = "";
    char [] chartotal = new char[o];
    var swstringconcat = new Stopwatch();
    var swcharconcat = new Stopwatch();
    swstringconcat.Start();
    for (var i = 0; i < o; i++) {
        stringtotal += ".";
    }
    swstringconcat.Stop();
    swcharconcat.Start();
    for (var i = 0; i < o; i++) {
        chartotal[i] = '.';
    }
    swcharconcat.Stop();
    Console.WriteLine($"String: {swstringconcat.Elapsed}");
    Console.WriteLine($"Char  : {swcharconcat.Elapsed}");
    Console.ReadLine();
}
----------------------------------------

static void Main (string [] args) {
    string stringtotal = "";
    string chartotal = "";
    Stopwatch stringconcat = new Stopwatch ();
    Stopwatch charconcat = new Stopwatch ();
    stringconcat.Start ();
    for (int i = 0; i < 100000; i ++) {
        stringtotal += ".";
    }
    stringconcat.Stop ();
    charconcat.Start ();
    for (int i = 0; i < 100000; i ++) {
        chartotal += '.';
    }
    charconcat.Stop ();
    Console.WriteLine ("String: " + stringconcat.Elapsed.ToString ());
    Console.WriteLine ("Char  : " + charconcat.Elapsed.ToString ());
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
1
Gpt3D_Clone529_1.cs 1 19
Gpt3D_Clone529_1.cs 20 40
----------------------------------------

static void Main (string [] args) {
    string stringtotal = "";
    string chartotal = "";
    Stopwatch stringconcat = new Stopwatch ();
    Stopwatch charconcat = new Stopwatch ();
    stringconcat.Start ();
    for (int i = 0; i < 100000; i ++) {
        stringtotal += ".";
    }
    stringconcat.Stop ();
    charconcat.Start ();
    for (int i = 0; i < 100000; i ++) {
        chartotal += '.';
    }
    charconcat.Stop ();
    Console.WriteLine ("String: " + stringconcat.Elapsed.ToString ());
    Console.WriteLine ("Char  : " + charconcat.Elapsed.ToString ());
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    string stringtotal = "";
    string chartotal = "";
    var swstringconcat = new Stopwatch();
    var swcharconcat = new Stopwatch();
    swstringconcat.Start();
    for (var i = 0; i < 100000; i++) {
        stringtotal += ".";
    }
    swstringconcat.Stop();
    swcharconcat.Start();
    for (var i = 0; i < 100000; i++) {
        chartotal += '.';
    }
    swcharconcat.Stop();
    Console.WriteLine("String: " + swstringconcat.Elapsed);
    Console.WriteLine("Char  : " + swcharconcat.Elapsed);
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
0
Gpt3D_Clone530_0.cs 1 16
Gpt3D_Clone530_0.cs 17 30
----------------------------------------

private static void Main () {
    byte[] _serialPortBytes;
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    MemoryStream _streamOfBytesFromPort;
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    CancellationTokenSource _cancelTaskSignalSource;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    CancellationToken _cancelTaskSignal;
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
1
Gpt3D_Clone530_1.cs 1 12
Gpt3D_Clone530_1.cs 13 26
----------------------------------------

private static void Main () {
    byte[] _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    MemoryStream _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    CancellationTokenSource _cancelTaskSignalSource = new CancellationTokenSource ();
    CancellationToken _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
0
Gpt3D_Clone533_0.cs 1 13
Gpt3D_Clone533_0.cs 14 26
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string dataCheck = "Checking data ";
    string result = dataCheck;
    string fileName = args [0];
    do {
        if (! File.Exists (fileName)){
            ctr += 1;
            result = dataCheck + ctr.ToString () + "...";
        }
    } while (ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
1
Gpt3D_Clone533_1.cs 1 11
Gpt3D_Clone533_1.cs 12 23
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

public static void Main (string [] args) {
	int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    while (! File.Exists (fileName) && ctr <= 3){
        ctr += 1;
        result += ctr.ToString () + "...";
    } 
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
537
0
Gpt3D_Clone537_0.cs 1 24
Gpt3D_Clone537_0.cs 25 50
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    object tempIlGen = mbILGen.GetValue (mb);
    (tempIlGen as ILGenerator).Dispose ();
    object tempmbSigHelp = mbLocSigHelp.GetValue (mb);
    (tempmbSigHelp as SignatureHelper).Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb);
    (tempmbSigHelp as SignatureHelper).Dispose ();
    object tempMod = mbMod.GetValue (mb);
    (tempMod as ModuleBuilder).Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
0
Gpt3D_Clone538_0.cs 1 24
Gpt3D_Clone538_0.cs 25 54
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

public static void Dispose(this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbMod = mbType.GetField("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbILGen = mbType.GetField("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    
    ModuleBuilder tempMod = mbMod.GetValue(mb) as ModuleBuilder;
    tempMod.Dispose();
    mbMod.SetValue(mb, null);
    mbContType.SetValue(mb, null);
    SignatureHelper tempLocSigHelp = mbLocSigHelp.GetValue(mb) as SignatureHelper;
    tempLocSigHelp.Dispose();
    mbLocSigHelp.SetValue(mb, null);
    
    SignatureHelper tempSigHelp = mbSigHelp.GetValue(mb) as SignatureHelper;
    tempSigHelp.Dispose();
    mbSigHelp.SetValue(mb, null);
    
    ILGenerator tempIlGen = mbILGen.GetValue(mb) as ILGenerator;
    tempIlGen.Dispose();
    mbILGen.SetValue(mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
1
Gpt3D_Clone538_1.cs 1 28
Gpt3D_Clone538_1.cs 29 54
----------------------------------------

public static void Dispose(this MethodBuilder mb) {
    if (mb == null)
        return;
        
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    
    ModuleBuilder tempMod = (ModuleBuilder)mbMod.GetValue(mb);
    tempMod.Dispose();
    mbMod.SetValue(mb, null);
    mbContType.SetValue(mb, null);
    SignatureHelper tempLocSigHelp = (SignatureHelper)mbLocSigHelp.GetValue(mb);
    tempLocSigHelp.Dispose();
    mbLocSigHelp.SetValue(mb, null);
    
    SignatureHelper tempSigHelp = (SignatureHelper)mbSigHelp.GetValue(mb);
    tempSigHelp.Dispose();
    mbSigHelp.SetValue(mb, null);
    
    ILGenerator tempIlGen = (ILGenerator)mbILGen.GetValue(mb);
    tempIlGen.Dispose();
    mbILGen.SetValue(mb, null);
}
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
0
Gpt3D_Clone541_0.cs 1 17
Gpt3D_Clone541_0.cs 18 34
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt;
    if (string.IsNullOrEmpty((string) value)) {
        return new ValidationResult (true, null);
    }
    try {
        myInt = int.Parse((String) value);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20"); 
    } else {
        return new ValidationResult (true, null); 
    }
}
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0)
            myInt = int.Parse ((String) value);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
549
0
Gpt3D_Clone549_0.cs 1 15
Gpt3D_Clone549_0.cs 16 35
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    double tempPolicy = policy;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        tempPolicy += tempPolicy * Chauffeur;
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        tempPolicy -= tempPolicy * Accountant;
    }
    DateTime birthDate = Convert.ToDateTime (dpkDOB.SelectedDate);
    if (birthDate.Age().Years() > 21 && birthDate.Age().Years() < 26) {
        tempPolicy += tempPolicy * age2125;
    } else if (birthDate.Age().Years() > 26 && birthDate.Age().Years() < 76) {
        tempPolicy -= tempPolicy * age2675;
    }
    txtPolicy.Text = tempPolicy.ToString();
}
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    double tempPolicy = policy;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        tempPolicy = (tempPolicy + tempPolicy * Chauffeur);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        tempPolicy = (tempPolicy - tempPolicy * Accountant);
        txtPolicy.Text = tempPolicy.ToString ();
    }
    DateTime birthDate = Convert.ToDateTime (dpkDOB.SelectedDate);
    if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
        tempPolicy = (tempPolicy + tempPolicy * age2125);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
        tempPolicy = (tempPolicy - tempPolicy * age2675);
        txtPolicy.Text = tempPolicy.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
549
1
Gpt3D_Clone549_1.cs 1 18
Gpt3D_Clone549_1.cs 19 37
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    double tempPolicy = policy;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        tempPolicy = (tempPolicy + tempPolicy * Chauffeur);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        tempPolicy = (tempPolicy - tempPolicy * Accountant);
        txtPolicy.Text = tempPolicy.ToString ();
    }
    DateTime birthDate = Convert.ToDateTime (dpkDOB.SelectedDate);
    if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
        tempPolicy = (tempPolicy + tempPolicy * age2125);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
        tempPolicy = (tempPolicy - tempPolicy * age2675);
        txtPolicy.Text = tempPolicy.ToString ();
    }
}
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    double tempPolicy = policy;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        tempPolicy = (tempPolicy + tempPolicy * Chauffeur);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        tempPolicy = (tempPolicy - tempPolicy * Accountant);
        txtPolicy.Text = tempPolicy.ToString ();
    }
    DateTime birthDate = Convert.ToDateTime (dpkDOB.SelectedDate);
    if (birthDate.Age ().Years () > 76) 
    {
        tempPolicy = (tempPolicy + tempPolicy * ageUnion);
        txtPolicy.Text = tempPolicy.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
0
Gpt3D_Clone54_0.cs 1 31
Gpt3D_Clone54_0.cs 32 59
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    StringBuilder sbOutFile = new StringBuilder();
    Console.WriteLine("DisplayName;IdentifyingNumber");
    sbOutFile.AppendLine("Machine;DisplayName;Version");
    string[] lines = File.ReadAllLines(@"File_In/collectionMachines.txt");
    foreach (var machine in lines) {
        string registry_key = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
        using (RegistryKey key = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, machine).OpenSubKey(registry_key))
        {
            foreach (string subkey_name in key.GetSubKeyNames()) {
                using (RegistryKey subkey = key.OpenSubKey(subkey_name))
                {
                    if (subkey.GetValue("DisplayName") != null)
                    {
                        Console.WriteLine($"{machine};{subkey.GetValue("DisplayName")};{subkey.GetValue("Version")}");
                        sbOutFile.AppendLine($"{machine};{subkey.GetValue("DisplayName")};{subkey.GetValue("Version")}");
                    }
                }
            }
        }
    }
    DateTime currentTime = DateTime.Now;
    string fileOutName = string.Format(@"File_Out\{0}_{1}.csv", "Software_Inventory", currentTime.ToString("yyyy_MM_dd_HH_mmssfff"));
    using (StreamWriter file = new StreamWriter(fileOutName))
    {
        file.WriteLine(sbOutFile.ToString());
    }
    Console.WriteLine("Press enter to continue !");
    Console.ReadLine();
}
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    StringBuilder sbOutFile = new StringBuilder ();
    Console.WriteLine ("DisplayName;IdentifyingNumber");
    sbOutFile.AppendLine ("Machine;DisplayName;Version");
    string [] lines = File.ReadAllLines (@"File_In/collectionMachines.txt");
    foreach (var machine in lines) {
        var registry_key = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
        using (Microsoft.Win32.RegistryKey key = RegistryKey.OpenRemoteBaseKey (RegistryHive.LocalMachine, machine).OpenSubKey (registry_key))
        {
            foreach (string subkey_name in key.GetSubKeyNames ()) {
                using (RegistryKey subkey = key.OpenSubKey (subkey_name))
                {
                    if (subkey.GetValue ("DisplayName") != null) {
                        Console.WriteLine (string.Format ("{0};{1};{2}", machine, subkey.GetValue ("DisplayName"), subkey.GetValue ("Version")));
                        sbOutFile.AppendLine (string.Format ("{0};{1};{2}", machine, subkey.GetValue ("DisplayName"), subkey.GetValue ("Version")));
                    }
                }}
        }}
    var fileOutName = string.Format (@"File_Out\{0}_{1}.csv", "Software_Inventory", DateTime.Now.ToString ("yyyy_MM_dd_HH_mmssfff"));
    using (var file = new System.IO.StreamWriter (fileOutName))
    {
        file.WriteLine (sbOutFile.ToString ());
    } Console.WriteLine ("Press enter to continue !");
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
0
Gpt3D_Clone552_0.cs 1 31
Gpt3D_Clone552_0.cs 32 72
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"') {
            blockUntilEndQuote = !blockUntilEndQuote;
        }
        if (character == '\'') {
            blockUntilEndQuote2 = !blockUntilEndQuote2;
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (blockUntilEndQuote || blockUntilEndQuote2) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
1
Gpt3D_Clone552_1.cs 1 39
Gpt3D_Clone552_1.cs 40 71
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

private string [] splitString (string stringToSplit) {
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    int characterCount = 0;
    foreach (char character in stringToSplit.ToCharArray ()) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && blockUntilEndQuote == true) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == stringToSplit.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
0
Gpt3D_Clone557_0.cs 1 13
Gpt3D_Clone557_0.cs 14 27
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    int streamLength = (int)inputStream.Length;
    byte [] output = new byte [streamLength];
    int bytesRead = inputStream.Read (output, 0, streamLength);
    Debug.Assert (bytesRead == streamLength, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
1
Gpt3D_Clone557_1.cs 1 12
Gpt3D_Clone557_1.cs 13 24
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    inputStream.Seek (0, SeekOrigin.Begin);
    byte [] output = new byte [inputStream.Length];
    inputStream.Read (output, 0, output.Length);
    Debug.Assert (output.Length == inputStream.Length);
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
2
Gpt3D_Clone557_2.cs 1 9
Gpt3D_Clone557_2.cs 10 23
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length);
    return output;
}
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
558
0
Gpt3D_Clone558_0.cs 1 26
Gpt3D_Clone558_0.cs 27 48
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    
    TableAttribute tableAttr = tableType.GetCustomAttributes (typeof (TableAttribute), false).FirstOrDefault();
        if (tableAttr != null)
            tableName = tableAttr.Name;
    
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        DisplayAttribute attr = prop.GetCustomAttributes (typeof (DisplayAttribute), false).FirstOrDefault();
        if (attr != null)
            SetColumnDescription (tableName, prop.Name, attr.Name);
    }
}
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    var tableAttrs = tableType.GetCustomAttributes (typeof (TableAttribute), false);
    if (tableAttrs.Length > 0)
        tableName = ((TableAttribute) tableAttrs [0]).Name;
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        var attrs = prop.GetCustomAttributes (typeof (DisplayAttribute), false);
        if (attrs.Length > 0)
            SetColumnDescription (tableName, prop.Name, ((DisplayAttribute) attrs [0]).Name);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
559
0
Gpt3D_Clone559_0.cs 1 23
Gpt3D_Clone559_0.cs 24 48
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    TableAttribute tableAttr = tableType.GetCustomAttribute<TableAttribute>(false);
    if (tableAttr != null)
        tableName = tableAttr.Name;
    DescriptionAttribute tableAttrDesc = tableType.GetCustomAttribute<DescriptionAttribute>(false);
    if (tableAttrDesc != null)
        SetTableDescription (tableName, tableAttrDesc.Description);
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        DescriptionAttribute attrDesc = prop.GetCustomAttribute<DescriptionAttribute>(false);
        if (attrDesc != null)
            SetColumnDescription (tableName, prop.Name, attrDesc.Description);
    }
}
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    var tableAttrs = tableType.GetCustomAttributes (typeof (TableAttribute), false);
    if (tableAttrs.Length > 0)
        tableName = ((TableAttribute) tableAttrs [0]).Name;
    var table_attrs = tableType.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (table_attrs != null && table_attrs.Length > 0)
        SetTableDescription (tableName, ((DescriptionAttribute) table_attrs [0]).Description);
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        var attrs = prop.GetCustomAttributes (typeof (DescriptionAttribute), false);
        if (attrs != null && attrs.Length > 0)
            SetColumnDescription (tableName, prop.Name, ((DescriptionAttribute) attrs [0]).Description);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
559
1
Gpt3D_Clone559_1.cs 1 23
Gpt3D_Clone559_1.cs 24 48
----------------------------------------

public void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    TableAttribute tableAttr = tableType.GetCustomAttribute<TableAttribute>();
    if (tableAttr != null)
        tableName = tableAttr.Name;
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        DescriptionAttribute attrDesc = prop.GetCustomAttribute<DescriptionAttribute>();
        if (attrDesc != null) {
            if (tableAttr != null)
                SetTableDescription(tableName, tableAttr.Description);
            SetColumnDescription (tableName, prop.Name, attrDesc.Description);
        }
    }
}
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    var tableAttrs = tableType.GetCustomAttributes (typeof (TableAttribute), false);
    if (tableAttrs.Length > 0)
        tableName = ((TableAttribute) tableAttrs [0]).Name;
    var table_attrs = tableType.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (table_attrs != null && table_attrs.Length > 0)
        SetTableDescription (tableName, ((DescriptionAttribute) table_attrs [0]).Description);
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        var attrs = prop.GetCustomAttributes (typeof (DescriptionAttribute), false);
        if (attrs != null && attrs.Length > 0)
            SetColumnDescription (tableName, prop.Name, ((DescriptionAttribute) attrs [0]).Description);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
0
Gpt3D_Clone560_0.cs 1 14
Gpt3D_Clone560_0.cs 15 27
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) 
{   
    foreach (DirectoryInfo d in dir.GetDirectories())        
        DeleteEmptyDirs(d);
    if (dir.GetFiles().Length == 0) {
        try
        {    
            dir.Delete();  
        }
        catch (IOException) { }
        catch (UnauthorizedAccessException) { }
    }
}
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
1
Gpt3D_Clone560_1.cs 1 11
Gpt3D_Clone560_1.cs 12 26
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (System.IO.IOException) {
    }
    catch (System.UnauthorizedAccessException) {
    }
    catch (System.Security.SecurityException) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
3
Gpt3D_Clone560_3.cs 1 13
Gpt3D_Clone560_3.cs 14 26
----------------------------------------

public static void DeleteEmptyDirs(this DirectoryInfo dir) 
{
    foreach (DirectoryInfo d in dir.GetDirectories())
    {
        DeleteEmptyDirs(d);
    }
    try
    { 
        dir.Delete(true); 
    }
    catch (IOException) { }
    catch (UnauthorizedAccessException) { }
}
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
0
Gpt3D_Clone56_0.cs 1 9
Gpt3D_Clone56_0.cs 10 20
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    double result;
    if (double.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
1
Gpt3D_Clone56_1.cs 1 9
Gpt3D_Clone56_1.cs 10 20
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    decimal result;
    if (decimal.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
0
Gpt3D_Clone570_0.cs 1 12
Gpt3D_Clone570_0.cs 13 29
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

public string ExportTypeThree () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        for (int i = 0; i < fields.Length; ++i) {
            sb.Append (MakeValueCsvFriendly (row [fields[i]]));
            if (i < fields.Length - 1)
                sb.Append (delim);
        }
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
1
Gpt3D_Clone570_1.cs 1 9
Gpt3D_Clone570_1.cs 10 23
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (KeyValuePair < string , object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row.Value)).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
0
Gpt3D_Clone571_0.cs 1 22
Gpt3D_Clone571_0.cs 23 41
----------------------------------------

public string Export(bool useRowSeparator, bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder();
    IList<PropertyInfo> propertyInfos = typeof(T).GetProperties();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append(propertyInfo.Name).Append(",");
        }
        sb.Remove(sb.Length - 1, 1).AppendLine();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append(MakeValueCsvFriendly(propertyInfo.GetValue(obj, null)));
            if (useRowSeparator) {
                sb.Append(",");
            }
        }
        if (useRowSeparator) {
            sb.Remove(sb.Length - 1, 1).AppendLine();
        }
    }
    return sb.ToString();
}
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
1
Gpt3D_Clone571_1.cs 1 17
Gpt3D_Clone571_1.cs 18 36
----------------------------------------

public string Export(string separator, bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder();
    IList<PropertyInfo> propertyInfos = typeof(T).GetProperties();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append(propertyInfo.Name).Append(separator);
        }
        sb.Remove(sb.Length - 1, 1).AppendLine();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append(MakeValueCsvFriendly(propertyInfo.GetValue(obj, null))).Append(separator);
        }
        sb.Remove(sb.Length - 1, 1).AppendLine();
    }
    return sb.ToString();
} 
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
0
Gpt3D_Clone572_0.cs 1 14
Gpt3D_Clone572_0.cs 15 28
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (select != null) {
        if (!string.IsNullOrWhiteSpace(select)) {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            String s = String.Join("; ", pths.ToArray());
            String r = String.Join("; ", rec.ToArray());
        }
    }
    Disp();
}
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
1
Gpt3D_Clone572_1.cs 1 12
Gpt3D_Clone572_1.cs 13 26
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (select != null && !string.IsNullOrWhiteSpace(select)) {
        listView1.BeginUpdate();
        pths.Remove(select);
        rec.Remove(select);
        listView1.EndUpdate();
        String s = String.Join("; ", pths.ToArray());
        String r = String.Join("; ", rec.ToArray());
    }
    Disp();
}
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
0
Gpt3D_Clone576_0.cs 1 22
Gpt3D_Clone576_0.cs 23 54
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    Console.WriteLine ("Split Analyser starts");
    Console.ForegroundColor = ConsoleColor.Red;
    Console.WriteLine ("Press Esc to quit.....");
    Thread MainThread = new Thread (new ThreadStart (startProcess));
    Thread ConsoleKeyListener = new Thread (new ThreadStart (ListerKeyBoardEvent));
    MainThread.Name = "Processor";
    ConsoleKeyListener.Name = "KeyListener";
    MainThread.Start ();
    ConsoleKeyListener.Start ();
    do {
        if (Terminate || stopProcessor) {
            Console.WriteLine ("Terminating or Ending Process...");
            MainThread.Abort ();
            ConsoleKeyListener.Abort ();
            Thread.Sleep (2000);
            Thread.CurrentThread.Abort ();
            return;
        }
    } while (true);
}
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    Console.WriteLine ("Split Analyser starts");
    Console.ForegroundColor = ConsoleColor.Red;
    Console.WriteLine ("Press Esc to quit.....");
    Thread MainThread = new Thread (new ThreadStart (startProcess));
    Thread ConsoleKeyListener = new Thread (new ThreadStart (ListerKeyBoardEvent));
    MainThread.Name = "Processor";
    ConsoleKeyListener.Name = "KeyListener";
    MainThread.Start ();
    ConsoleKeyListener.Start ();
    while (true) {
        if (Terminate) {
            Console.WriteLine ("Terminating Process...");
            MainThread.Abort ();
            ConsoleKeyListener.Abort ();
            Thread.Sleep (2000);
            Thread.CurrentThread.Abort ();
            return;
        }
        if (stopProcessor) {
            Console.WriteLine ("Ending Process...");
            MainThread.Abort ();
            ConsoleKeyListener.Abort ();
            Thread.Sleep (2000);
            Thread.CurrentThread.Abort ();
            return;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
1
Gpt3D_Clone576_1.cs 1 30
Gpt3D_Clone576_1.cs 31 54
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    Console.WriteLine ("Split Analyser starts");
    Console.ForegroundColor = ConsoleColor.Red;
    Console.WriteLine ("Press Esc to quit.....");
    Thread MainThread = new Thread (new ThreadStart (startProcess));
    Thread ConsoleKeyListener = new Thread (new ThreadStart (ListerKeyBoardEvent));
    MainThread.Name = "Processor";
    ConsoleKeyListener.Name = "KeyListener";
    MainThread.Start ();
    ConsoleKeyListener.Start ();
    while (true) {
        if (Terminate) {
            Console.WriteLine ("Terminating Process...");
            MainThread.Abort ();
            ConsoleKeyListener.Abort ();
            Thread.Sleep (2000);
            Thread.CurrentThread.Abort ();
            return;
        }
        if (stopProcessor) {
            Console.WriteLine ("Ending Process...");
            MainThread.Abort ();
            ConsoleKeyListener.Abort ();
            Thread.Sleep (2000);
            Thread.CurrentThread.Abort ();
            return;
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    Console.ForegroundColor = ConsoleColor.Green;
    Console.WriteLine ("Split Analyser starts");
    Console.ForegroundColor = ConsoleColor.Red;
    Console.WriteLine ("Press Esc to quit.....");
    Thread MainThread = new Thread (new ThreadStart (startProcess));
    Thread ConsoleKeyListener = new Thread (new ThreadStart (ListerKeyBoardEvent));
    MainThread.Name = "Processor";
    ConsoleKeyListener.Name = "KeyListener";
    MainThread.Start ();
    ConsoleKeyListener.Start ();
    while (true) {
        if (Terminate || stopProcessor) {
            Console.WriteLine ("Terminating or Ending Process...");
            MainThread.Abort ();
            ConsoleKeyListener.Abort ();
            Thread.Sleep (2000);
            Thread.CurrentThread.Abort ();
            return;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
0
Gpt3D_Clone577_0.cs 1 10
Gpt3D_Clone577_0.cs 11 22
----------------------------------------

public static string GetMessage (Exception i_oException, int i_iCulture, string i_sCultureName) {
    CultureInfo oCultureInfo = null;
    try {
        oCultureInfo = new CultureInfo (i_iCulture, i_sCultureName);
    }
    catch {
        oCultureInfo = CultureInfo.InvariantCulture;
    }
    return GetMessage (i_oException, oCultureInfo);
}
----------------------------------------

public static string GetMessage (Exception i_oException, string i_sCulture) {
    CultureInfo oCultureInfo = null;
    try {
        oCultureInfo = new CultureInfo (i_sCulture);
    }
    catch {
        oCultureInfo = CultureInfo.InvariantCulture;
    }
    return GetMessage (i_oException, oCultureInfo);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
0
Gpt3D_Clone578_0.cs 1 9
Gpt3D_Clone578_0.cs 10 22
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day + 7) % 7;
    if (remainder >= sinceLastDay) count++;
    return count;
}
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
0
Gpt3D_Clone580_0.cs 1 13
Gpt3D_Clone580_0.cs 14 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    int i = 0;
    do {
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
        i++; 
    } while (i < it);
    Console.WriteLine (result);
}
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
1
Gpt3D_Clone580_1.cs 1 13
Gpt3D_Clone580_1.cs 14 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    int i = 0;
    while (i < it) {
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
        i++; 
    }
    Console.WriteLine (result);
}
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
2
Gpt3D_Clone580_2.cs 1 13
Gpt3D_Clone580_2.cs 14 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    int index = a.Length;
    for (int i = 0; i < it; i ++) {
        b.ToCharArray ().CopyTo (result, index);
        index += b.Length;
    }
    Console.WriteLine (result);
}
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
3
Gpt3D_Clone580_3.cs 1 10
Gpt3D_Clone580_3.cs 11 24
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] tempResult = new char [a.Length + b.Length];
    a.ToCharArray ().CopyTo (tempResult, 0);
    b.ToCharArray ().CopyTo (tempResult, a.Length);
    char [] result = new char [tempResult.Length * it];
    for (int i = 0; i < it; i ++)
        tempResult.CopyTo (result, i * tempResult.Length);
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
0
Gpt3D_Clone581_0.cs 1 13
Gpt3D_Clone581_0.cs 14 30
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max)
{
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++)
    {
        float noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs((float)Math.Pow(perlin, 2));
    max = Math.Max(perlin, max);
    min = Math.Min(perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
1
Gpt3D_Clone581_1.cs 1 15
Gpt3D_Clone581_1.cs 16 30
----------------------------------------

public static float Noise(float xCoordinate, float yCoordinate, float zCoordinate, int iterationCount, ref float minResult, ref float maxResult)
{
    float perlinNoiseResult = 0f;
    int octaveGenerator = 1;
    for (int i = 0; i < iterationCount; i++)
    {
        float noiseProduced = Noise(xCoordinate * octaveGenerator, yCoordinate * octaveGenerator, zCoordinate * octaveGenerator);
        perlinNoiseResult += noiseProduced / octaveGenerator;
        octaveGenerator *= 2;
    }
    perlinNoiseResult = Math.Abs((float)Math.Pow(perlinNoiseResult, 2));
    maxResult = Math.Max(perlinNoiseResult, maxResult);
    minResult = Math.Min(perlinNoiseResult, minResult);
    return perlinNoiseResult;
}
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
2
Gpt3D_Clone581_2.cs 1 12
Gpt3D_Clone581_2.cs 13 27
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / (octave * octave);
        octave *= 2;
    }
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return Math.Abs (perlin);
}
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
0
Gpt3D_Clone582_0.cs 1 11
Gpt3D_Clone582_0.cs 12 24
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return (string)value;
    } else if (value is IDictionary) {
        return GetString ((IDictionary)value);
    } else if (value is IEnumerable) {
        return GetString ((IEnumerable)value);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
1
Gpt3D_Clone583_1.cs 1 10
Gpt3D_Clone583_1.cs 11 23
----------------------------------------

public static String GetString (object value) {
    if (value is string)
        return value as string;
    else if (value is IDictionary)
        return GetString(value as IDictionary);
    else if (value is IEnumerable)
        return GetString(value as IEnumerable);
    else
        return value.ToString ();
}
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
2
Gpt3D_Clone583_2.cs 1 11
Gpt3D_Clone583_2.cs 12 24
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return (string) value;
    } else if (value is IDictionary) {
        return GetString((IDictionary) value);
    } else if (value is IEnumerable) {
        return GetString((IEnumerable) value);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
0
Gpt3D_Clone584_0.cs 1 12
Gpt3D_Clone584_0.cs 13 30
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        using (DataTable dt = SharedDataAccess.GetCities (state))
        {
            foreach (DataRow row in dt.Rows) {
                cities.Add (row [0].ToString ());
            }
            return cities;
        }
    }
    catch {
    }
    // added return statement
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
1
Gpt3D_Clone584_1.cs 1 15
Gpt3D_Clone584_1.cs 16 29
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    int rowCount = dt.Rows.Count;
    for (int i = 0; i < rowCount; i++)
    {
        DataRow row = dt.Rows[i];
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
2
Gpt3D_Clone584_2.cs 1 8
Gpt3D_Clone584_2.cs 9 22
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    DataTable dt = SharedDataAccess.GetCities (state);
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
0
Gpt3D_Clone585_0.cs 1 14
Gpt3D_Clone585_0.cs 15 29
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (x == y) 
        return true;
    if (x == null || y == null)
        return false;
    var xLength = x.Length;
    if (xLength != y.Length)
        return false;
    for (int i = 0; i < xLength; i++) {
        if (x[i] != y[i])
            return false;
    }
    return true;
}
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (Object.ReferenceEquals (x, y))
        return true;
    if (Object.ReferenceEquals (x, null) || Object.ReferenceEquals (y, null))
        return false;
    if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i ++) {
        if (x [i] != y [i])
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
1
Gpt3D_Clone585_1.cs 1 14
Gpt3D_Clone585_1.cs 15 29
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (Object.Equals (x, y))
        return true;
    if (Object.Equals (x, null) || Object.Equals (y, null))
        return false;
    var xLength = x.Length;
    if (xLength != y.Length)
        return false;
    for (int i = 0; i < xLength; i++) {
        if (x[i] != y[i])
            return false;
    }
    return true;
}
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (Object.ReferenceEquals (x, y))
        return true;
    if (Object.ReferenceEquals (x, null) || Object.ReferenceEquals (y, null))
        return false;
    if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i ++) {
        if (x [i] != y [i])
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
2
Gpt3D_Clone585_2.cs 1 13
Gpt3D_Clone585_2.cs 14 29
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (Object.ReferenceEquals (x, y))
        return true;
    if (Object.ReferenceEquals (x, null) || Object.ReferenceEquals (y, null))
        return false;
    if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i ++) {
        if (x [i] != y [i])
            return false;
    }
    return true;
}
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (x == null && y == null)
        return true;
    else if (x == null || y == null)
        return false;
    else if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i++)
        if (x[i] != y[i])
            return false;
        
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
0
Gpt3D_Clone586_0.cs 1 16
Gpt3D_Clone586_0.cs 17 45
----------------------------------------

[TestMethod] public void TestMethod3 () {
    int testVal = 2056;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2056);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
587
0
Gpt3D_Clone587_0.cs 1 18
Gpt3D_Clone587_0.cs 19 38
----------------------------------------

public IEnumerable < string > GetFilesInFtpDirectory (string url, string username, string password) {
    FtpWebRequest req = (FtpWebRequest) WebRequest.Create (url);
    req.Method = WebRequestMethods.Ftp.ListDirectoryDetails;
    req.Credentials = new NetworkCredential (username, password);
    using (FtpWebResponse resp = (FtpWebResponse) req.GetResponse ())
    {
        using (Stream respStream = resp.GetResponseStream ())
        {
            StreamReader rdr = new StreamReader (respStream);
            while (! rdr.EndOfStream) {
                string line = rdr.ReadLine ();
                if (string.IsNullOrWhiteSpace (line) == false) {
                    yield return line.Split (new [] {' ', '\t'}).Last ();
                }
            }
        }
    }
}
----------------------------------------

public static IEnumerable < string > GetFilesInFtpDirectory (string url, string username, string password) {
    var request = (FtpWebRequest) WebRequest.Create (url);
    request.Method = WebRequestMethods.Ftp.ListDirectoryDetails;
    request.Credentials = new NetworkCredential (username, password);
    using (var response = (FtpWebResponse) request.GetResponse ())
    {
        using (var responseStream = response.GetResponseStream ())
        {
            var reader = new StreamReader (responseStream);
            while (! reader.EndOfStream) {
                var line = reader.ReadLine ();
                if (string.IsNullOrWhiteSpace (line) == false) {
                    yield return line.Split (new [] {' ', '\t'}).Last ();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
588
0
Gpt3D_Clone588_0.cs 1 19
Gpt3D_Clone588_0.cs 20 39
----------------------------------------

public static IList < ReportFile > ReadFiles (int year, int month) {
    string [] fileNames = new string [] {"{0:YYYYMMDD}----1234D.dat", "{0:YYYYMMDD}----5678D.dat"};
    DateTime dateStart = new DateTime (year, month, 1);
    DateTime dateEnd = dateStart.AddMonths (1);
    List < ReportFile > reportList = new List < ReportFile > ();
    DateTime date = dateStart;
    while (date < dateEnd) {
        foreach (string fileTemplate in fileNames) {
            string file = string.Format (fileTemplate, date);
            if (File.Exists (file)) {
                ReportFile report = new ReportFile () {Date = date, Path = file, Lines = GetReportLines (file)};
                reportList.Add (report);
            }
        }
        date = date.AddDays (1);
    }
    IList < ReportFile > files = reportList;
    return files;
}
----------------------------------------

public static IList < ReportFile > ReadFiles (int year, int month) {
    string [] fileNames = new string [] {"{0:YYYYMMDD}----1234D.dat", "{0:YYYYMMDD}----5678D.dat"};
    DateTime dateStart = new DateTime (year, month, 1);
    DateTime dateEnd = dateStart.AddMonths (1);
    var reportList = new List < ReportFile > ();
    DateTime date = dateStart;
    while (date < dateEnd) {
        foreach (var fileTemplate in fileNames) {
            var file = string.Format (fileTemplate, date);
            if (File.Exists (file)) {
                var report = new ReportFile () {Date = date, Path = file, Lines = GetReportLines (file)};
                reportList.Add (report);
            }
        }
        date = date.AddDays (1);
    }
    return reportList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
0
Gpt3D_Clone58_0.cs 1 20
Gpt3D_Clone58_0.cs 21 44
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    int substringCount = 0;
    if (!string.IsNullOrEmpty (original) && !string.IsNullOrEmpty (substring)) {
        if (substring.Length == 1) {
            substringCount = CountOccurrences (original, substring [0]);
        } else if (substring.Length <= original.Length) {
            for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
                for (int subCharIndex = 0, secondaryCharIndex = charIndex;
                subCharIndex < substring.Length && secondaryCharIndex < original.Length;
                subCharIndex ++, secondaryCharIndex ++) {
                    if (substring [subCharIndex] != original [secondaryCharIndex])
                        goto continueOuter;
                }
                if (charIndex + substring.Length > original.Length)
                    break;
                charIndex += substring.Length - 1;
                substringCount ++;
                continueOuter :;}
        }
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
0
Gpt3D_Clone592_0.cs 1 30
Gpt3D_Clone592_0.cs 31 51
----------------------------------------

private void Download_Begin()
{
    web_client = new System.Net.WebClient();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler(Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler(Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch();
    stop_watch.Start();
    try
    {
        string downloadUri;
        string downloadPath;
        if (Program.Current_Download == "Install_Client.exe")
        {
            downloadUri = "http://www.website.com/Client/Install_Client.exe";
            downloadPath = @"C:\Downloads\Install_Client.exe";
        }
        else
        {
            downloadUri = string.Format("http://www.website.com/{0}", Program.Current_Download);
            downloadPath = string.Format(@"C:\Downloads\{0}", Program.Current_Download);
        }
        web_client.DownloadFileAsync(new Uri(downloadUri), downloadPath);
    }
    catch (Exception)
    {
        stop_watch.Stop();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
0
Gpt3D_Clone593_0.cs 1 13
Gpt3D_Clone593_0.cs 14 30
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    } 
    for (int i = 0; i < args.Length; i++) {
        if (args[i].Equals("SendMail")) {
            Sendmail ();
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
597
0
Gpt3D_Clone597_0.cs 1 8
Gpt3D_Clone597_0.cs 9 23
----------------------------------------

public object Get (string name) {
    object data = null;
    FieldInfo field = _type.GetField (name);
    if (field != null) {
        data = field.GetValue (this);
    } 
    return data;
}
----------------------------------------

public object Get (string name) {
    object data = null;
    var field = _type.GetField (name);
    if (field != null) {
        data = field.GetValue (this);
    } else {
        var member = _type.GetProperty (name);
        if (member != null) {
            data = member.GetValue (this);
        }
    }
    return data;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
597
1
Gpt3D_Clone597_1.cs 1 8
Gpt3D_Clone597_1.cs 9 23
----------------------------------------

public object Get (string name) {
    object data = null;
    PropertyInfo member = _type.GetProperty (name);
    if (member != null) {
        data = member.GetValue (this);
    }
    return data;
}
----------------------------------------

public object Get (string name) {
    object data = null;
    var field = _type.GetField (name);
    if (field != null) {
        data = field.GetValue (this);
    } else {
        var member = _type.GetProperty (name);
        if (member != null) {
            data = member.GetValue (this);
        }
    }
    return data;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
1
Gpt3D_Clone5_1.cs 1 12
Gpt3D_Clone5_1.cs 13 26
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >; 
    if (target == null || newVal == null) 
        return;
    if (newVal.Item1 == null) {
        target.SetValue (newVal.Item2, newVal.Item2.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (newVal.Item2, newVal.Item1);
}
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
2
Gpt3D_Clone602_2.cs 1 12
Gpt3D_Clone602_2.cs 13 23
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N == 2)
        return 1;
    if (N == 3)
        return 2;
    if (N >= 4)
        return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
0
Gpt3D_Clone603_0.cs 1 18
Gpt3D_Clone603_0.cs 19 36
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    int i = 0;
    do {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length--;
            i++;
        }
    } while (i <= length);
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
1
Gpt3D_Clone603_1.cs 1 20
Gpt3D_Clone603_1.cs 21 38
----------------------------------------

private void CheckIfPalindrome (string str) {
    char[] array = str.ToCharArray();
    Boolean palindrome = true;
    int left = 0;
    int right = array.Length -1;
    
    for (int i = 0; i < array.Length; i++) {
        if (array[left] != array[right]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            left = left + 1;
            right = right - 1;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
1
Gpt3D_Clone610_1.cs 1 13
Gpt3D_Clone610_1.cs 14 31
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    
    int firstListCount = list[0].Count;
    T[,] result = new T[list.Count, firstListCount];
    for (int i = 0; i < list.Count; i ++) {
        if (list[i].Count != firstListCount)
            throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
        
        for (int j = 0; j < firstListCount; j ++) {           
            result[i, j] = list[i][j];
        } 
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
0
Gpt3D_Clone611_0.cs 1 15
Gpt3D_Clone611_0.cs 16 31
----------------------------------------

public List<string> Keyword_Search (HtmlNode nSearch) {
    var wordFound = new List<string>();
    string innerHtml = nSearch.InnerHtml;
    string pattern = "(\\b" + string.Join("\\b)|(\\b", _keywordList) + "\\b)";
    Regex myRegex = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
    MatchCollection myMatches = myRegex.Matches(innerHtml);
    foreach (Match myMatch in myMatches) {
        for (int i = 0; i < myMatch.Groups.Count; i++)
        {
            if (!string.IsNullOrWhiteSpace(myMatch.Groups[i].Value))
                wordFound.Add(_keywordList[i]);
        }
    }
    return wordFound;
}
----------------------------------------

public List < string > Keyword_Search (HtmlNode nSearch) {
    var wordFound = new List < string > ();
    string innerHtml = nSearch.InnerHtml;
    string pattern = "(\\b" + string.Join ("\\b)|(\\b", _keywordList) + "\\b)";
    Regex myRegex = new Regex (pattern, RegexOptions.IgnoreCase);
    MatchCollection myMatches = myRegex.Matches (innerHtml);
    foreach (Match myMatch in myMatches) {
        for (int i = 1; i < myMatch.Groups.Count; i ++) {
            if (myMatch.Groups [i].Success)
                wordFound.Add (_keywordList [i - 1]);
        }
    }
    return wordFound;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
1
Gpt3D_Clone611_1.cs 1 12
Gpt3D_Clone611_1.cs 13 28
----------------------------------------

public List < string > Keyword_Search (HtmlNode nSearch) {
    var wordFound = new List < string > ();
    string innerHtml = nSearch.InnerHtml;
    string pattern = "(\\b" + string.Join ("\\b)|(\\b", _keywordList) + "\\b)";
    Regex myRegex = new Regex (pattern, RegexOptions.IgnoreCase);
    MatchCollection myMatches = myRegex.Matches (innerHtml);
    for (int i = 0; i < myMatches.Count; i ++) {
        if (myMatches[i].Success)
            wordFound.Add (_keywordList [i]);
    }
    return wordFound;
}
----------------------------------------

public List < string > Keyword_Search (HtmlNode nSearch) {
    var wordFound = new List < string > ();
    string innerHtml = nSearch.InnerHtml;
    string pattern = "(\\b" + string.Join ("\\b)|(\\b", _keywordList) + "\\b)";
    Regex myRegex = new Regex (pattern, RegexOptions.IgnoreCase);
    MatchCollection myMatches = myRegex.Matches (innerHtml);
    foreach (Match myMatch in myMatches) {
        for (int i = 1; i < myMatch.Groups.Count; i ++) {
            if (myMatch.Groups [i].Success)
                wordFound.Add (_keywordList [i - 1]);
        }
    }
    return wordFound;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
0
Gpt3D_Clone619_0.cs 1 22
Gpt3D_Clone619_0.cs 23 48
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"(\d+)([^\d]+)(\d+)$");
    var num2 = Regex.Match (s2, @"(\d+)([^\d]+)(\d+)$");
    if (num1.Groups[1].Value == num2.Groups[1].Value && num1.Groups[2].Value == num2.Groups[2].Value) {
        if (num1.Groups[3].Success && num2.Groups[3].Success)
            return Int32.Parse (num1.Groups[3].Value) - Int32.Parse (num2.Groups[3].Value);
        else if (num1.Groups[3].Success)
            return 1;
        else if (num2.Groups[3].Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
1
Gpt3D_Clone619_1.cs 1 24
Gpt3D_Clone619_1.cs 25 48
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"(\d+)([^\d]+)(\d+)$");
    var num2 = Regex.Match (s2, @"(\d+)([^\d]+)(\d+)$");
    if (num1.Groups[1].Value == num2.Groups[1].Value && num1.Groups[2].Value == num2.Groups[2].Value) {
        if (num1.Groups[3].Success && num2.Groups[3].Success)
            return Convert.ToInt32 (num1.Groups[3].Value) - Convert.ToInt32 (num2.Groups[3].Value);
        else if (num1.Groups[3].Success)
            return 1;
        else if (num2.Groups[3].Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
1
Gpt3D_Clone620_1.cs 1 9
Gpt3D_Clone620_1.cs 10 20
----------------------------------------

public static void Swap < T > (ref T obj, Func < T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = (T)Activator.CreateInstance (objBefore.GetType ());
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
2
Gpt3D_Clone620_2.cs 1 9
Gpt3D_Clone620_2.cs 10 20
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

public static void Swap < T > (ref T obj, Func < T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = (T)objBefore.Clone ();
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
0
Gpt3D_Clone623_0.cs 1 13
Gpt3D_Clone623_0.cs 14 28
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (String.Compare(strCookie, strCookieName, true) == 0) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (String.Compare(strCookie, strCookieName, true) == 0) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
2
Gpt3D_Clone623_2.cs 1 13
Gpt3D_Clone623_2.cs 14 28
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (string.Equals(strCookie, strCookieName, StringComparison.Ordinal)) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (string.Equals(strCookie, strCookieName, StringComparison.Ordinal)) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
3
Gpt3D_Clone623_3.cs 1 13
Gpt3D_Clone623_3.cs 14 28
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie.Equals(strCookieName, StringComparison.OrdinalIgnoreCase)) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie.Equals(strCookieName, StringComparison.OrdinalIgnoreCase)) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
0
Gpt3D_Clone626_0.cs 1 23
Gpt3D_Clone626_0.cs 24 46
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (String.IsNullOrEmpty (txtUserName.Text)) {
            txtUserName.Focus ();
        } else {
            Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
            for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                    txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                    txtPassword.Focus ();
                    return;
                }
            }
            if (!String.IsNullOrEmpty (txtPassword.Text)) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
1
Gpt3D_Clone626_1.cs 1 21
Gpt3D_Clone626_1.cs 22 46
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (String.IsNullOrEmpty (txtUserName.Text)) {
            txtUserName.Focus ();
        } else {
            Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
            for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                    txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                    txtPassword.Focus ();
                    return;
                }
            }
            if (String.IsNullOrEmpty (txtPassword.Text)) {
                txtPassword.Focus ();
            } else {
                btnLogin_Click (null, null);
            }
        }
    }
}
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
0
Gpt3D_Clone628_0.cs 1 10
Gpt3D_Clone628_0.cs 11 21
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    node oldTailNode = tailNode;
    if (oldTailNode != null)
        oldTailNode.next = newNode;
    tailNode = newNode;
    if (headNode == null)
        headNode = tailNode;
    ++ node_count;
}
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
0
Gpt3D_Clone633_0.cs 1 34
Gpt3D_Clone633_0.cs 35 66
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            while (pNombre > 0) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
                pNombre --;
            }
            break;
        case "addY" :
            while (pNombre > 0) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
                pNombre --;
            }
            break;
        case "remX" :
            while (pNombre > 0) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
                pNombre --;
            }
            break;
        case "remY" :
            while (pNombre > 0) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
                pNombre --;
            }
            break;
        default :
            break;
    }
}
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
1
Gpt3D_Clone633_1.cs 1 30
Gpt3D_Clone633_1.cs 31 60
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    int newx = 0;
    int newy = 0;
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++)
                newx ++;
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++)
                newy ++;
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++)
                newx --;
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++)
                newy --;
            break;
        default :
            break;
    }
    currentx += newx;
    currenty += newy;
    SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
0
Gpt3D_Clone636_0.cs 1 18
Gpt3D_Clone636_0.cs 19 33
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout > 0) {
            Thread.Sleep (SLEEPING_STEP);
            _timeout -= SLEEPING_STEP;
        }
        else {
            return;
        }
    }
    if (form.InvokeRequired) {
        form.Invoke (guiCommand);
    }
    else {
        guiCommand ();
    }
}
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
1
Gpt3D_Clone636_1.cs 1 13
Gpt3D_Clone636_1.cs 14 28
----------------------------------------

public void Execute (object form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (form is Form && !((Form)form).IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (((Form)form).InvokeRequired)
        ((Form)form).Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
2
Gpt3D_Clone636_2.cs 1 13
Gpt3D_Clone636_2.cs 14 31
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

public void Execute (Form form, Action guiCommand) {
     _timeout = _totalTimeout;
     while (form.IsHandleCreated == false) {
         if (_timeout <= 0) {
             return;
         }
         Thread.Sleep (SLEEPING_STEP);
         _timeout -= SLEEPING_STEP;
     }
     if (form.InvokeRequired) {
         form.Invoke (guiCommand);
     }
     else {
         guiCommand ();
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
0
Gpt3D_Clone637_0.cs 1 10
Gpt3D_Clone637_0.cs 11 25
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    if (number == 0)
        return false;
    if (number == 1)
        return true;
    do {
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    while (number != 0);
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
1
Gpt3D_Clone637_1.cs 1 11
Gpt3D_Clone637_1.cs 12 23
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (true) {
        if (number == 0)
            return false;
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
}
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
2
Gpt3D_Clone637_2.cs 1 10
Gpt3D_Clone637_2.cs 11 22
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number % 2) == 1)
            return false;
        number = number / 2;
    }
    return false;
}
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
0
Gpt3D_Clone638_0.cs 1 17
Gpt3D_Clone638_0.cs 18 42
----------------------------------------

public static void FindGoodFont (Graphics Graf, string sStringToFit, Size TextRoomAvail, ref Font FontToUse, GraphicsUnit FontUnit) {
    SizeF RealSize = Graf.MeasureString (sStringToFit, FontToUse);
    Debug.WriteLine ("big string is {0}, orig size = {1},{2}", sStringToFit, RealSize.Width, RealSize.Height);
    if ((RealSize.Width <= TextRoomAvail.Width) && (RealSize.Height <= TextRoomAvail.Height)) {
        Debug.WriteLine ("The space is big enough already");
        return;
    }
    float HeightScaleRatio = TextRoomAvail.Height / RealSize.Height;
    float WidthScaleRatio = TextRoomAvail.Width / RealSize.Width;
    float ScaleRatio = (HeightScaleRatio < WidthScaleRatio) ? ScaleRatio = HeightScaleRatio : ScaleRatio = WidthScaleRatio;
    float ScaleFontSize = FontToUse.Size * ScaleRatio;
    Debug.WriteLine ("Resizing with scales {0},{1} chose {2}", HeightScaleRatio, WidthScaleRatio, ScaleRatio);
    Debug.WriteLine ("Old font size was {0}, new={1} ", FontToUse.Size, ScaleFontSize);
    FontStyle OldFontStyle = FontToUse.Style;
    FontToUse.Dispose ();
    FontToUse = new Font (FontToUse.FontFamily, ScaleFontSize, OldFontStyle, FontUnit);
}
----------------------------------------

public static void FindGoodFont (Graphics Graf, string sStringToFit, Size TextRoomAvail, ref Font FontToUse, GraphicsUnit FontUnit) {
    SizeF RealSize = Graf.MeasureString (sStringToFit, FontToUse);
    Debug.WriteLine ("big string is {0}, orig size = {1},{2}", sStringToFit, RealSize.Width, RealSize.Height);
    if ((RealSize.Width <= TextRoomAvail.Width) && (RealSize.Height <= TextRoomAvail.Height)) {
        Debug.WriteLine ("The space is big enough already");
        return;
    }
    float HeightScaleRatio = TextRoomAvail.Height / RealSize.Height;
    float WidthScaleRatio = TextRoomAvail.Width / RealSize.Width;
    float ScaleRatio;
    if (HeightScaleRatio < WidthScaleRatio) {
        ScaleRatio = HeightScaleRatio;
    }
    else {
        ScaleRatio = WidthScaleRatio;
    }
    float ScaleFontSize = FontToUse.Size * ScaleRatio;
    Debug.WriteLine ("Resizing with scales {0},{1} chose {2}", HeightScaleRatio, WidthScaleRatio, ScaleRatio);
    Debug.WriteLine ("Old font size was {0}, new={1} ", FontToUse.Size, ScaleFontSize);
    FontStyle OldFontStyle = FontToUse.Style;
    FontToUse.Dispose ();
    FontToUse = new Font (FontToUse.FontFamily, ScaleFontSize, OldFontStyle, FontUnit);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
1
Gpt3D_Clone638_1.cs 1 21
Gpt3D_Clone638_1.cs 22 40
----------------------------------------

public static void FindGoodFont (Graphics Graf, string sStringToFit, Size TextRoomAvail, ref Font FontToUse, GraphicsUnit FontUnit) {
    SizeF RealSize = Graf.MeasureString (sStringToFit, FontToUse);
    Debug.WriteLine ("big string is {0}, orig size = {1},{2}", sStringToFit, RealSize.Width, RealSize.Height);
    if ((RealSize.Width <= TextRoomAvail.Width) && (RealSize.Height <= TextRoomAvail.Height)) {
        Debug.WriteLine ("The space is big enough already");
        return;
    }
    float HeightScaleRatio = TextRoomAvail.Height / RealSize.Height;
    float WidthScaleRatio = TextRoomAvail.Width / RealSize.Width;
    float ScaleRatio;
    if (HeightScaleRatio < WidthScaleRatio)
        ScaleRatio = HeightScaleRatio;
    else
        ScaleRatio = WidthScaleRatio;
    float ScaleFontSize = FontToUse.Size * ScaleRatio;
    Debug.WriteLine ("Resizing with scales {0},{1} chose {2}", HeightScaleRatio, WidthScaleRatio, ScaleRatio);
    Debug.WriteLine ("Old font size was {0}, new={1} ", FontToUse.Size, ScaleFontSize);
    FontStyle OldFontStyle = FontToUse.Style;
    FontToUse.Dispose ();
    FontToUse = new Font (FontToUse.FontFamily, ScaleFontSize, OldFontStyle, FontUnit);
}
----------------------------------------

public static void FindGoodFont (Graphics Graf, string sStringToFit, Size TextRoomAvail, ref Font FontToUse, GraphicsUnit FontUnit) {
    SizeF RealSize = Graf.MeasureString (sStringToFit, FontToUse);
    Debug.WriteLine ("big string is {0}, orig size = {1},{2}", sStringToFit, RealSize.Width, RealSize.Height);
    if ((RealSize.Width <= TextRoomAvail.Width) && (RealSize.Height <= TextRoomAvail.Height)) {
        Debug.WriteLine ("The space is big enough already");
        return;
    }
    float HeightScaleRatio = TextRoomAvail.Height / RealSize.Height;
    float WidthScaleRatio = TextRoomAvail.Width / RealSize.Width;
    float ScaleRatio = (HeightScaleRatio < WidthScaleRatio) ? ScaleRatio = HeightScaleRatio : ScaleRatio = WidthScaleRatio;
    float ScaleFontSize = FontToUse.Size * ScaleRatio;
    Debug.WriteLine ("Resizing with scales {0},{1} chose {2}", HeightScaleRatio, WidthScaleRatio, ScaleRatio);
    Debug.WriteLine ("Old font size was {0}, new={1} ", FontToUse.Size, ScaleFontSize);
    FontStyle OldFontStyle = FontToUse.Style;
    FontToUse.Dispose ();
    FontToUse = new Font (FontToUse.FontFamily, ScaleFontSize, OldFontStyle, FontUnit);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
0
Gpt3D_Clone639_0.cs 1 23
Gpt3D_Clone639_0.cs 24 45
----------------------------------------

private void CalculateGridColWidthsRaport(){
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWidth = 0;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWidth = this.dataGrid.Width - diffWidth;
    } else {
        totalResizableWidth = colWidthsSum - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        decimal multiplier = totalResizableWidth / col.Width;
        this.colWidthRaport.Add (multiplier);
    }
}
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
63
1
Gpt3D_Clone63_1.cs 1 10
Gpt3D_Clone63_1.cs 11 27
----------------------------------------

protected void InitializeList (string sql) {
    DataHandler dh = new DataHandler ();
    DataTable dt = dh.RetrieveData (sql);
    if (dt != null) {
        this.InitializeList (dt);
        dt.Dispose ();
    }
    dt = null;
    dh = null;
}
----------------------------------------

protected void InitializeList (string sql) {
    DataHandler dh = new DataHandler ();
    DataTable dt = dh.RetrieveData (sql);
    try {
        if (dt != null) {
            this.InitializeList (dt);
        }
    }
    finally { 
        if(dt != null)
            dt.Dispose ();
        dt = null;
        dh = null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
0
Gpt3D_Clone64_0.cs 1 10
Gpt3D_Clone64_0.cs 11 26
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    string bodyText = ReadBodyText (controllerContext.HttpContext.Request);
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
0
Gpt3D_Clone651_0.cs 1 18
Gpt3D_Clone651_0.cs 19 38
----------------------------------------

private static DateTime NthOf (DateTime CurDate, int Occurrence, DayOfWeek Day) {
    var fday = new DateTime (CurDate.Year, CurDate.Month, 1);
    if (Occurrence == 1) {
        for (int i = 0; i < 7; i ++) {
            if (fday.DayOfWeek == Day) {
                break;
            } else {
                fday.AddDays (1);
            }
        }
    } else {
        var fOc = fday.DayOfWeek == Day ? fday : fday.AddDays (Day - fday.DayOfWeek);
        if (fOc.Month < CurDate.Month)
            Occurrence += 1;
        fday = fOc.AddDays (7 * (Occurrence - 1));
    }
    return fday;
}
----------------------------------------

private static DateTime NthOf (DateTime CurDate, int Occurrence, DayOfWeek Day) {
    var fday = new DateTime (CurDate.Year, CurDate.Month, 1);
    if (Occurrence == 1) {
        for (int i = 0; i < 7; i ++) {
            if (fday.DayOfWeek == Day) {
                return fday;
            } else {
                fday = fday.AddDays (1);
            }
        }
        return fday;
    } else {
        var fOc = fday.DayOfWeek == Day ? fday : fday.AddDays (Day - fday.DayOfWeek);
        if (fOc.Month < CurDate.Month)
            Occurrence = Occurrence + 1;
        return fOc.AddDays (7 * (Occurrence - 1));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
0
Gpt3D_Clone655_0.cs 1 39
Gpt3D_Clone655_0.cs 40 76
----------------------------------------

public static object GetPropertyValue (object srcobj, string propertyName) {
    if (srcobj == null)
        return null;
    object obj = srcobj;
    string [] propertyNameParts = propertyName.Split ('.');
    foreach (string propertyNamePart in propertyNameParts) {
        if (obj == null)
            return null;
        if (! propertyNamePart.Contains ("[")) {
            PropertyInfo pi = obj.GetType ().GetProperty (propertyNamePart);
            if (pi == null)
                return null;
            obj = pi.GetValue (obj, null);
        } else {
            int indexStart = propertyNamePart.IndexOf ("[") + 1;
            string collectionPropertyName = propertyNamePart.Substring (0, indexStart - 1);
            int collectionElementIndex = Int32.Parse (propertyNamePart.Substring (indexStart, propertyNamePart.Length - indexStart - 1));
            PropertyInfo pi = obj.GetType ().GetProperty (collectionPropertyName);
            if (pi == null)
                return null;
            IEnumerable unknownCollection = pi.GetValue (obj, null) as IEnumerable;
            if (unknownCollection != null) { 
                IEnumerator collectionEnumerator = unknownCollection.GetEnumerator (); 
                collectionEnumerator.Reset ();
                int index = 0;
                while (collectionEnumerator.MoveNext ()) { 
                    if (index == collectionElementIndex) { 
                        obj = collectionEnumerator.Current; 
                        break; 
                    }
                    index++;
                }
            } else { 
            }
        }
    }
    return obj;
}
----------------------------------------

public static object GetPropertyValue (object srcobj, string propertyName) {
    if (srcobj == null)
        return null;
    object obj = srcobj;
    string [] propertyNameParts = propertyName.Split ('.');
    foreach (string propertyNamePart in propertyNameParts) {
        if (obj == null)
            return null;
        if (! propertyNamePart.Contains ("[")) {
            PropertyInfo pi = obj.GetType ().GetProperty (propertyNamePart);
            if (pi == null)
                return null;
            obj = pi.GetValue (obj, null);
        } else {
            int indexStart = propertyNamePart.IndexOf ("[") + 1;
            string collectionPropertyName = propertyNamePart.Substring (0, indexStart - 1);
            int collectionElementIndex = Int32.Parse (propertyNamePart.Substring (indexStart, propertyNamePart.Length - indexStart - 1));
            PropertyInfo pi = obj.GetType ().GetProperty (collectionPropertyName);
            if (pi == null)
                return null;
            object unknownCollection = pi.GetValue (obj, null);
            if (unknownCollection.GetType ().IsArray) {
                object [] collectionAsArray = unknownCollection as Array [];
                obj = collectionAsArray [collectionElementIndex];
            } else {
                System.Collections.IList collectionAsList = unknownCollection as System.Collections.IList;
                if (collectionAsList != null) {
                    obj = collectionAsList [collectionElementIndex];
                } else {
                }
            }
        }
    }
    return obj;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
0
Gpt3D_Clone656_0.cs 1 10
Gpt3D_Clone656_0.cs 11 22
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = false;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (done == false)
        Thread.Sleep (200);
}
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
0
Gpt3D_Clone657_0.cs 1 20
Gpt3D_Clone657_0.cs 21 38
----------------------------------------

private static void Main (string [] args) { 
    const int maxPassword = 100000000; 
    Console.WriteLine ("Enter number of threads: "); 
    var threadsCountString = Console.ReadLine (); 
    var threadsCount = int.Parse (threadsCountString); 
    var threads = new Thread[threadsCount]; 
    var time = new Stopwatch (); 
    for (int i = 0; i < threadsCount; i ++) { 
        var thread = new Thread (Bruteforce); 
        threads [i] = thread; 
    } 
    time.Start (); 
    for (int i = 0; i < threadsCount; i ++) { 
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, MiddleNumber = ((i + 1) * maxPassword + (i+2)*maxPassword) / threadsCount/2, EndNumber = (i + 2) * maxPassword / threadsCount}); 
    } 
    while (time.IsRunning) { 
        Console.WriteLine ("Time elapsed: {0} second(s)", time.Elapsed.TotalSeconds); 
    } 
    Console.ReadKey (); 
}
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
0
Gpt3D_Clone658_0.cs 1 22
Gpt3D_Clone658_0.cs 23 44
----------------------------------------

private void LoadNewCheckboxes () {
    dynamic listGroupCount = 10;
    List < System.Windows.Forms.CheckBox > CheckBoxes = new List < System.Windows.Forms.CheckBox > ();
    int i;
    for (i = 0; i < listGroupCount; i ++) {
        System.Windows.Forms.CheckBox chkbox = new System.Windows.Forms.CheckBox ();
        chkbox.Text = i.ToString ();
        chkbox.Name = "txt" + i.ToString ();
        chkbox.CheckedChanged += new EventHandler (chkbox_CheckedChanged);
        chkbox.CheckStateChanged += new EventHandler (chkbox_CheckStateChanged);
        chkbox.Width = 200;
        chkbox.AutoSize = true;
        this.Controls.Add (chkbox);
        CheckBoxes.Add (chkbox);
        int j = i - 1;
        if (j >= 0) {
            chkbox.Location = new System.Drawing.Point (5, (CheckBoxes [j].Top + CheckBoxes [j].Height + 10));
        } else {
            chkbox.Location = new System.Drawing.Point (5, 10);
        }
    }
}
----------------------------------------

private void LoadNewCheckboxes () {
    dynamic listGroupCount = 10;
    List < System.Windows.Forms.CheckBox > CheckBoxes = new List < System.Windows.Forms.CheckBox > ();
    for (int i = 0; i <= listGroupCount - 1; i ++) {
        System.Windows.Forms.CheckBox chkbox = new System.Windows.Forms.CheckBox ();
        chkbox.Text = i.ToString ();
        chkbox.Name = "txt" + i.ToString ();
        chkbox.CheckedChanged += new EventHandler (chkbox_CheckedChanged);
        chkbox.CheckStateChanged += new EventHandler (chkbox_CheckStateChanged);
        chkbox.Width = 200;
        chkbox.AutoSize = true;
        this.Controls.Add (chkbox);
        CheckBoxes.Add (chkbox);
        if (i == 0) {
            chkbox.Location = new System.Drawing.Point (5, 10);
        } else {
            chkbox.Location = new System.Drawing.Point (5, (CheckBoxes [i - 1].Top + CheckBoxes [i - 1].Height + 10));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
1
Gpt3D_Clone658_1.cs 1 20
Gpt3D_Clone658_1.cs 21 42
----------------------------------------

private void LoadNewCheckboxes () {
    dynamic listGroupCount = 10;
    List < System.Windows.Forms.CheckBox > CheckBoxes = new List < System.Windows.Forms.CheckBox > ();
    for (int i = 0; i < listGroupCount; i ++) {
        CheckBox chkbox = new CheckBox ();
        chkbox.Text = i.ToString ();
        chkbox.Name = "txt" + i.ToString ();
        chkbox.CheckedChanged += new EventHandler (chkbox_CheckedChanged);
        chkbox.CheckStateChanged += new EventHandler (chkbox_CheckStateChanged);
        chkbox.Width = 200;
        chkbox.AutoSize = true;
        this.Controls.Add (chkbox);
        CheckBoxes.Add (chkbox);
        if (i > 0) {
            chkbox.Location = new System.Drawing.Point (5, (CheckBoxes [i - 1].Top + CheckBoxes [i - 1].Height + 10));
        } else {
            chkbox.Location = new System.Drawing.Point (5, 10);
        }
    }
}
----------------------------------------

private void LoadNewCheckboxes () {
    dynamic listGroupCount = 10;
    List < System.Windows.Forms.CheckBox > CheckBoxes = new List < System.Windows.Forms.CheckBox > ();
    for (int i = 0; i <= listGroupCount - 1; i ++) {
        System.Windows.Forms.CheckBox chkbox = new System.Windows.Forms.CheckBox ();
        chkbox.Text = i.ToString ();
        chkbox.Name = "txt" + i.ToString ();
        chkbox.CheckedChanged += new EventHandler (chkbox_CheckedChanged);
        chkbox.CheckStateChanged += new EventHandler (chkbox_CheckStateChanged);
        chkbox.Width = 200;
        chkbox.AutoSize = true;
        this.Controls.Add (chkbox);
        CheckBoxes.Add (chkbox);
        if (i == 0) {
            chkbox.Location = new System.Drawing.Point (5, 10);
        } else {
            chkbox.Location = new System.Drawing.Point (5, (CheckBoxes [i - 1].Top + CheckBoxes [i - 1].Height + 10));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
1
Gpt3D_Clone65_1.cs 1 18
Gpt3D_Clone65_1.cs 19 34
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    StringBuilder bodyText = new StringBuilder();
    while(reader.Peek() > -1)
    {
        bodyText.Append(reader.ReadLine() + Environment.NewLine);
    }
    reader.Close ();
    if (bodyText.Length == 0) {
        return null;
    }
    return JsonValue.Parse (bodyText.ToString());
}
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
0
Gpt3D_Clone664_0.cs 1 16
Gpt3D_Clone664_0.cs 17 34
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X + 1, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 2, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 2);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height - 1));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width - 1, rect.Y), new Point (rect.X + rect.Width - 1, rect.Y + rect.Height - 1));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width - 1, rect.Y + rect.Height - 1), new Point (rect.X, rect.Y + rect.Height - 1));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width) - 1, rect.Y), new Point (rect.X + rect.Width - 1, rect.Y));
    }
}
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width, rect.Y), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y + rect.Height), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
1
Gpt3D_Clone664_1.cs 1 16
Gpt3D_Clone664_1.cs 17 34
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width, rect.Y), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y + rect.Height), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height - 1));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width - 1, rect.Y), new Point (rect.X + rect.Width - 1, rect.Y + rect.Height - 1));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width - 1, rect.Y + rect.Height - 1), new Point (rect.X, rect.Y + rect.Height - 1));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width) - 1, rect.Y), new Point (rect.X + rect.Width - 1, rect.Y));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
665
0
Gpt3D_Clone665_0.cs 1 8
Gpt3D_Clone665_0.cs 9 22
----------------------------------------

[Test] public void TestShouldFindNestedProperty () {
    MockClass mockObject = new MockClass ();
    Assert.IsTrue (mockObject.HasProperty ("Nested"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedId"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedName"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedGetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedSetOnly"));
}
----------------------------------------

[Test] public void TestShouldFindProperty () {
    MockClass mockObject = new MockClass ();
    Assert.IsTrue (mockObject.HasProperty ("Id"));
    Assert.IsTrue (mockObject.HasProperty ("Name"));
    Assert.IsTrue (mockObject.HasProperty ("GetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("SetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("Nested"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedId"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedName"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedGetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedSetOnly"));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
665
1
Gpt3D_Clone665_1.cs 1 7
Gpt3D_Clone665_1.cs 8 21
----------------------------------------

[Test] public void TestShouldFindPropertyVariant3 () {
    MockClass mockObject = new MockClass ();
    Assert.IsTrue (mockObject.HasProperty ("Id"));
    Assert.IsTrue (mockObject.HasProperty ("Name"));
    Assert.IsTrue (mockObject.HasProperty ("GetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("SetOnly"));
}
----------------------------------------

[Test] public void TestShouldFindProperty () {
    MockClass mockObject = new MockClass ();
    Assert.IsTrue (mockObject.HasProperty ("Id"));
    Assert.IsTrue (mockObject.HasProperty ("Name"));
    Assert.IsTrue (mockObject.HasProperty ("GetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("SetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("Nested"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedId"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedName"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedGetOnly"));
    Assert.IsTrue (mockObject.HasProperty ("Nested.NestedSetOnly"));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
666
0
Gpt3D_Clone666_0.cs 1 17
Gpt3D_Clone666_0.cs 18 37
----------------------------------------

public void InputGrade () {
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter ++;
    System.Console.Write ("score " + counter + ":");
    input = Console.ReadLine ();
    while (input != null) {
        grade = Convert.ToInt32 (input);
        total += grade;
        gradeCounter ++;
        IncrementLetterGradeCounter (grade);
        counter ++;
        System.Console.Write ("score " + counter + ":");
        input = Console.ReadLine ();
    }
}
----------------------------------------

public void InputGrade () {
    int grade;
    double input;
    Console.WriteLine ("{0}\n{1}", "Enter the double grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter ++;
    System.Console.Write ("score " + counter + ":");
    input = Convert.ToDouble(Console.ReadLine ());
    while (input != null) {
        grade = (int)input;
        total += grade;
        gradeCounter ++;
        IncrementLetterGradeCounter (grade);
        counter ++;
        System.Console.Write ("score " + counter + ":");
        input = Convert.ToDouble (Console.ReadLine ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
670
0
Gpt3D_Clone670_0.cs 1 13
Gpt3D_Clone670_0.cs 14 28
----------------------------------------

static string FindUserDomainName () {
    string domain = String.Empty;
    try {
        string userDomain = Environment.UserDomainName;
        string machineName = Environment.MachineName;
        if (!machineName.Equals (userDomain, StringComparison.OrdinalIgnoreCase)) {
            domain = userDomain;
        }
    }
    catch {
    }
    return domain;
}
----------------------------------------

static string GetUserDomainName () {
    string domain = String.Empty;
    try {
        domain = Environment.UserDomainName;
        string machineName = Environment.MachineName;
        if (machineName.Equals (domain, StringComparison.OrdinalIgnoreCase)) {
            domain = String.Empty;
        }
    }
    catch {
    }
    return domain;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
0
Gpt3D_Clone672_0.cs 1 19
Gpt3D_Clone672_0.cs 20 38
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            StringBuilder key = new StringBuilder(line.Substring (0, index).Trim ());
            StringBuilder value = new StringBuilder(line.Substring (index + 1).Trim ());
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                int startIndex = value[0] == '"' ? 1 : 0;
                int endIndex = value.Length - 1;
                value.Remove(startIndex, endIndex);
            }
            try {
                list.Add (key.ToString(), value.ToString());
            }
            catch {
            }
        }
    }
}
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
1
Gpt3D_Clone672_1.cs 1 18
Gpt3D_Clone672_1.cs 19 37
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if (value.StartsWith ("\"")) {
                int endIndex = value.LastIndexOf("\"");
                value = value.Substring (1, endIndex );
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
0
Gpt3D_Clone673_0.cs 1 39
Gpt3D_Clone673_0.cs 40 74
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder == 2)
                date = date.AddDays (2);
            else if (remainder == 0)
                date = date.AddDays (3);
            break;
        case DayOfWeek.Thursday :
            if (remainder == 1)
                date = date.AddDays (2);
            else if (remainder == 4)
                date = date.AddDays (3);
            break;
        case DayOfWeek.Friday :
            if (remainder == 0)
                date = date.AddDays (2);
            else if (remainder == 3)
                date = date.AddDays (3);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
0
Gpt3D_Clone674_0.cs 1 22
Gpt3D_Clone674_0.cs 23 41
----------------------------------------

private void OnUnhandledApplicationException (object sender, EventArgs e) {
    StringBuilder message = new StringBuilder ("<html><head><style>body, table { font-size: 12px; font-family: Arial, sans-serif; }\r\n table tr td { padding: 4px; }\r\n .header { font-weight: 900; font-size: 14px; color: #fff; background-color: #2b4e74; }\r\n .header2 { font-weight: 900; background-color: #c0c0c0; }\r\n </style></head><body><table><tr><td class=\"header\"><![CDATA[\r\nUnhandled Exception logged by LogModule.dll: appId=");
    string appId = (string) AppDomain.CurrentDomain.GetData (".appId");
    if (appId != null) {
        message.Append (appId);
    }
    message.Append ("]]></td></tr>");
    HttpServerUtility server = HttpContext.Current.Server;
    Exception currentException = server.GetLastError ();
    if (currentException != null) {
        message.AppendFormat ("<tr><td class=\"header2\"><![CDATA[TYPE]]></td></tr><tr><td>{0}</td></tr><tr><td class=\"header2\"><![CDATA[REQUEST]]></td></tr><tr><td>", currentException.GetType ().FullName);
        if (HttpContext.Current != null)
            message.AppendFormat ("{0}</td></tr>", HttpContext.Current.Request.FilePath);
        else
            message.AppendFormat ("{0}</td></tr>", "n/a");
        message.AppendFormat ("<tr><td class=\"header2\"><![CDATA[MESSAGE]]></td></tr><tr><td>{0}</td></tr><tr><td class=\"header2\"><![CDATA[STACK TRACE]]></td></tr><tr><td>{1}</td></tr>", currentException.Message, currentException.StackTrace);
        server.ClearError ();
    }
    message.Append ("</table></body></html>");
    HttpContext.Current.Response.Write (message.ToString ());
    server.ClearError ();
}
----------------------------------------

private void OnUnhandledApplicationException (object sender, EventArgs e) {
    StringBuilder message = new StringBuilder ("<html><head><style>" + "body, table { font-size: 12px; font-family: Arial, sans-serif; }\r\n" + "table tr td { padding: 4px; }\r\n" + ".header { font-weight: 900; font-size: 14px; color: #fff; background-color: #2b4e74; }\r\n" + ".header2 { font-weight: 900; background-color: #c0c0c0; }\r\n" + "</style></head><body><table><tr><td class=\"header\"><![CDATA[\r\n\r\nUnhandled Exception logged by LogModule.dll:\r\n\r\nappId=");
    string appId = (string) AppDomain.CurrentDomain.GetData (".appId");
    if (appId != null) {
        message.Append (appId);
    }
    message.Append ("</td></tr>");
    HttpServerUtility server = HttpContext.Current.Server;
    Exception currentException = server.GetLastError ();
    if (currentException != null) {
        message.AppendFormat ("<tr><td class=\"header2\"><![CDATA[TYPE</td></tr><tr><td>{0}</td></tr><tr><td class=\"header2\"><![CDATA[REQUEST</td></tr><tr><td>{3}</td></tr><tr><td class=\"header2\"><![CDATA[MESSAGE</td></tr><tr><td>{1}</td></tr><tr><td class=\"header2\"><![CDATA[STACK TRACE</td></tr><tr><td>{2}</td></tr>", currentException.GetType ().FullName, currentException.Message, currentException.StackTrace, HttpContext.Current != null ? HttpContext.Current.Request.FilePath : "n/a");
        server.ClearError ();
    }
    message.Append ("</table></body></html>");
    HttpContext.Current.Response.Write (message.ToString ());
    server.ClearError ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
1
Gpt3D_Clone674_1.cs 1 17
Gpt3D_Clone674_1.cs 18 40
----------------------------------------

private void OnUnhandledApplicationException (object sender, EventArgs e) {
    StringBuilder message = new StringBuilder ("<html><head><style>" + "body, table { font-size: 12px; font-family: Arial, sans-serif; }\r\n" + "table tr td { padding: 4px; }\r\n" + ".header { font-weight: 900; font-size: 14px; color: #fff; background-color: #2b4e74; }\r\n" + ".header2 { font-weight: 900; background-color: #c0c0c0; }\r\n" + "</style></head><body><table><tr><td class=\"header\"><![CDATA[\r\n\r\nUnhandled Exception logged by LogModule.dll:\r\n\r\nappId=");
    string appId = (string) AppDomain.CurrentDomain.GetData (".appId");
    if (appId != null) {
        message.Append (appId);
    }
    message.Append ("</td></tr>");
    HttpServerUtility server = HttpContext.Current.Server;
    Exception currentException = server.GetLastError ();
    if (currentException != null) {
        message.AppendFormat ("<tr><td class=\"header2\"><![CDATA[TYPE</td></tr><tr><td>{0}</td></tr><tr><td class=\"header2\"><![CDATA[REQUEST</td></tr><tr><td>{3}</td></tr><tr><td class=\"header2\"><![CDATA[MESSAGE</td></tr><tr><td>{1}</td></tr><tr><td class=\"header2\"><![CDATA[STACK TRACE</td></tr><tr><td>{2}</td></tr>", currentException.GetType ().FullName, currentException.Message, currentException.StackTrace, HttpContext.Current != null ? HttpContext.Current.Request.FilePath : "n/a");
        server.ClearError ();
    }
    message.Append ("</table></body></html>");
    HttpContext.Current.Response.Write (message.ToString ());
    server.ClearError ();
}
----------------------------------------

private void OnUnhandledApplicationException (object sender, EventArgs e) {
    StringBuilder message = new StringBuilder ("<html><head><style>body, table { font-size: 12px; font-family: Arial, sans-serif; }\r\n table tr td { padding: 4px; }\r\n .header { font-weight: 900; font-size: 14px; color: #fff; background-color: #2b4e74; }\r\n .header2 { font-weight: 900; background-color: #c0c0c0; }\r\n </style></head><body><table><tr><td class=\"header\"> Unhandled Exception logged by LogModule.dll: appId=");
    string appId = (string) AppDomain.CurrentDomain.GetData (".appId");
    if (appId != null) {
        message.Append (appId);
    }
    message.Append ("</td></tr>");
    HttpServerUtility server = HttpContext.Current.Server;
    Exception currentException = server.GetLastError ();
    if (currentException != null) {
        message.AppendFormat ("<tr><td class=\"header2\">TYPE</td></tr><tr><td>{0}</td></tr><tr><td class=\"header2\">REQUEST</td></tr><tr><td>{3}</td></tr><tr><td class=\"header2\">MESSAGE</td></tr><tr><td>{1}</td></tr><tr><td class=\"header2\">STACK TRACE</td></tr><tr><td>{2}</td></tr>", currentException.GetType ().FullName, currentException.Message, currentException.StackTrace);
        if (HttpContext.Current != null)
            message.AppendFormat ("<tr><td>{0}</td></tr>", HttpContext.Current.Request.FilePath);
        else
            message.AppendFormat ("<tr><td>{0}</td></tr>", "n/a");
        server.ClearError ();
    }
    message.Append ("</table></body></html>");
    HttpContext.Current.Response.Write (message.ToString ());
    server.ClearError ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
0
Gpt3D_Clone676_0.cs 1 16
Gpt3D_Clone676_0.cs 17 30
----------------------------------------

public void DoWorkUpdatingRow(object state)
{
    List<DataRow> rowsToWorkOn = (List<DataRow>)state;
    for (int i = 0; i < rowsToWorkOn.Count; i++)
    {
        Monitor.Enter(this);
        try
        {
            rowsToWorkOn[i]["value"] = rowsToWorkOn[i]["id"] + " new value";
        }
        finally
        {
            Monitor.Exit(this);
        }
    }
}
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
1
Gpt3D_Clone676_1.cs 1 11
Gpt3D_Clone676_1.cs 12 25
----------------------------------------

public void DoWorkUpdatingRow (DataTable table) { 
    foreach (DataRow dr in table.Rows) {
        Monitor.Enter (this);
        try {
            dr["value"] = dr["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
3
Gpt3D_Clone676_3.cs 1 11
Gpt3D_Clone676_3.cs 12 25
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            // No guard needed
        }
    }
}
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
0
Gpt3D_Clone678_0.cs 1 17
Gpt3D_Clone678_0.cs 18 36
----------------------------------------

static private string ProcessExecutablePath (Process process) {
    try {
        return process.MainModule.FileName;
    }
    catch {
        string query = "SELECT ExecutablePath, ProcessID FROM Win32_Process";
        ManagementObjectSearcher searcher = new ManagementObjectSearcher (query);
        foreach (ManagementObject item in searcher.Get ()) {
            object id = item ["ProcessID"];
            object path = item ["ExecutablePath"];
            if (path != null && id.ToString () == process.Id.ToString ()) {
                return path.ToString ();
            }
        }
    }
    return "";
}
----------------------------------------

static private string ProcessExecutablePath (Process process) {
    try {
        return process.MainModule.FileName;
    }
    catch {
        SelectQuery query = new SelectQuery("Win32_Process");
        ManagementObjectSearcher searcher = new ManagementObjectSearcher(query);
        foreach (ManagementObject item in searcher.Get())
        {
            if (item["ExecutablePath"] != null && item["ProcessID"].ToString() == process.Id.ToString())
            {
                return item["ExecutablePath"].ToString();
            }
        }
    }
    return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
1
Gpt3D_Clone678_1.cs 1 17
Gpt3D_Clone678_1.cs 18 36
----------------------------------------

static private string ProcessExecutablePath (Process process) {
    try {
        return process.MainModule.FileName;
    }
    catch {
        SelectQuery query = new SelectQuery("Win32_Process");
        ManagementObjectSearcher searcher = new ManagementObjectSearcher(query);
        foreach (ManagementObject item in searcher.Get())
        {
            if (item["ExecutablePath"] != null && process.Id.ToString().Equals(item["ProcessID"].ToString()))
            {
                return item["ExecutablePath"].ToString();
            }
        }
    }
    return "";
}
----------------------------------------

static private string ProcessExecutablePath (Process process) {
    try {
        return process.MainModule.FileName;
    }
    catch {
        string query = "SELECT ExecutablePath, ProcessID FROM Win32_Process";
        ManagementObjectSearcher searcher = new ManagementObjectSearcher (query);
        foreach (ManagementObject item in searcher.Get ()) {
            object id = item ["ProcessID"];
            object path = item ["ExecutablePath"];
            if (path != null && id.ToString () == process.Id.ToString ()) {
                return path.ToString ();
            }
        }
    }
    return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
680
0
Gpt3D_Clone680_0.cs 1 10
Gpt3D_Clone680_0.cs 11 27
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised() {
    Dictionary<string, int> receivedEvents = new Dictionary<string, int>();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += AddReceivedEvent;
    myClass.MyProperty = "testing";
    Assert.IsTrue(receivedEvents.ContainsKey("MyProperty"));
    Assert.AreEqual(1, receivedEvents["MyProperty"]);
    Assert.IsTrue(receivedEvents.ContainsKey("MyOtherProperty"));
    Assert.AreEqual(1, receivedEvents["MyOtherProperty"]);
}
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    Dictionary < string, int > receivedEvents = new Dictionary < string, int > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        if (receivedEvents.ContainsKey (e.PropertyName))
            receivedEvents [e.PropertyName] ++;
        else
            receivedEvents.Add (e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue (receivedEvents.ContainsKey ("MyProperty"));
    Assert.AreEqual (1, receivedEvents ["MyProperty"]);
    Assert.IsTrue (receivedEvents.ContainsKey ("MyOtherProperty"));
    Assert.AreEqual (1, receivedEvents ["MyOtherProperty"]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
0
Gpt3D_Clone683_0.cs 1 22
Gpt3D_Clone683_0.cs 23 45
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    { 
        Dictionary<string, int> fieldIndicesByName = new Dictionary<string, int> ();
        for (int i = 0; i < csv.FieldCount; i ++) { 
            fieldIndicesByName.Add (csv.GetFieldHeader (i), i);
            dt.Columns.Add (csv.GetFieldHeader (i));
        }
        while (csv.ReadNextRecord ()) { 
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldIndicesByName.Count; i ++) { 
                product_codes.Add (csv [fieldIndicesByName [headers [i]]]);
                dr [i] = csv [fieldIndicesByName [headers [i]]];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
0
Gpt3D_Clone687_0.cs 1 34
Gpt3D_Clone687_0.cs 35 67
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int index = last - count;
        if (index < 0)
            index = 0;
        while (index != last) {
            yield return inputList [index];
            index ++;
        }
    } else {
        T [] buffer = new T [count];
        int index = 0;
        int listIndex = 0;
        foreach (T item in input) {
            if (listIndex >= count)
                buffer [index] = item;
            listIndex ++;
            index = (index + 1) % count;
        }
        if (listIndex < count)
            index = 0;
        else
            listIndex = count;
        while (listIndex > 0) {
            yield return buffer [index];
            index = (index + 1) % count;
            listIndex --;
        }
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
1
Gpt3D_Clone687_1.cs 1 25
Gpt3D_Clone687_1.cs 26 58
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        List < T > buffer = new List < T >(count);
        foreach (T item in input) {
            if (buffer.Count < count)
                buffer.Add (item);
            else {
                buffer.RemoveAt (0);
                buffer.Add (item);
            }
        }
        for (int i = 0; i < buffer.Count; i++)
            yield return buffer[i];
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
2
Gpt3D_Clone687_2.cs 1 31
Gpt3D_Clone687_2.cs 32 55
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        List < T > buffer = new List < T >(count);
        foreach (T item in input) {
            buffer.Add (item);
            if (buffer.Count > count)
                buffer.RemoveAt (0);
        }
        for (int i = 0; i < buffer.Count; i++)
            yield return buffer[i];
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
0
Gpt3D_Clone688_0.cs 1 10
Gpt3D_Clone688_0.cs 11 22
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    Dictionary < string, long > dictSizes = new Dictionary < string, long > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            dictSizes.Add (cDirectories [i], size);
        }
    }
}
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
0
Gpt3D_Clone689_0.cs 1 34
Gpt3D_Clone689_0.cs 35 60
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
            if (rule.ComparisonOperator == "equal") {
                if (! (value.CompareTo (limit) == 0))
                    return false;
            } else if (rule.ComparisonOperator == "greater_than") {
                if (! (value.CompareTo (limit) > 0))
                    return false;
            } else {
                throw new InvalidOperationException ("invalid operator");
            }
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
            if (rule.ComparisonOperator == "equal") {
                if (! (value.CompareTo (limit) == 0))
                    return false;
            } else if (rule.ComparisonOperator == "greater_than") {
                if (! (value.CompareTo (limit) > 0))
                    return false;
            } else {
                throw new InvalidOperationException ("invalid operator");
            }
        } else {
            throw new InvalidOperationException ("invalid property");
        }
    }
    return true;
}
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
2
Gpt3D_Clone689_2.cs 1 30
Gpt3D_Clone689_2.cs 31 56
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else {
            throw new InvalidOperationException ("invalid property");
        }
        bool result = false;
        if (rule.ComparisonOperator == "equal") {
            result = value.CompareTo (limit) == 0;
        } else if (rule.ComparisonOperator == "greater_than") {
            result = value.CompareTo (limit) > 0;
        } else {
            throw new InvalidOperationException ("invalid operator");
        }
        if (!result) {
            return false;
        }
    }
    return true;
}
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
68
0
Gpt3D_Clone68_0.cs 1 8
Gpt3D_Clone68_0.cs 9 20
----------------------------------------

private void OnChanged (object sender, FileSystemEventArgs e) {
    string fullFilePath = e.FullPath.ToString ();
    string fullURL = buildTheUrlFromStudyXML (fullFilePath);
    System.Diagnostics.Process.Start ("iexplore.exe", fullURL);
    System.Threading.Timer timer = new System.Threading.Timer();
    ((FileSystemWatcher) sender).Changed -= new FileSystemEventHandler (OnChanged);
    timer.Change (1000, 0, t_Elapsed);
}
----------------------------------------

private void OnChanged (object source, FileSystemEventArgs e) {
    string fullFilePath = e.FullPath.ToString ();
    string fullURL = buildTheUrlFromStudyXML (fullFilePath);
    System.Diagnostics.Process.Start ("iexplore", fullURL);
    Timer timer = new Timer ();
    ((FileSystemWatcher) source).Changed -= new FileSystemEventHandler (OnChanged);
    timer.Interval = 1000;
    timer.Elapsed += new ElapsedEventHandler (t_Elapsed);
    timer.Start ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
0
Gpt3D_Clone690_0.cs 1 15
Gpt3D_Clone690_0.cs 16 28
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    int temp = year;
    for (int digit = 0; digit < 4; ++ digit) {
        int nibble = temp % 10;
        bcd |= nibble << (digit * 4);
        temp /= 10;
    }
    byte [] result = new byte[2];
    result[0] = (byte) ((bcd >> 8) & 0xff);
    result[1] = (byte) (bcd & 0xff);
    return result;
}
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    for (int digit = 0; digit < 4; ++ digit) {
        int nibble = year % 10;
        bcd |= nibble << (digit * 4);
        year /= 10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
2
Gpt3D_Clone690_2.cs 1 11
Gpt3D_Clone690_2.cs 12 24
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    for (int digit = 0; digit < 4; ++ digit) {
        int nibble = year % 10;
        bcd |= nibble << (digit * 4);
        year /= 10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

static byte [] Year2Bcd (short year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    short bcd = 0;
    for (int digit = 0; digit < 4; ++ digit) {
        short nibble = (short) (year % 10);
        bcd |= (short) (nibble << (digit * 4));
        year /= 10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
692
0
Gpt3D_Clone692_0.cs 1 20
Gpt3D_Clone692_0.cs 21 43
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    bool wasEmpty = reader.IsEmptyElement;
    reader.Read ();
    if (wasEmpty)
        return;
    while (reader.NodeType != System.Xml.XmlNodeType.EndElement) {
        reader.ReadStartElement ("item");
        var keySerializer = new XmlSerializer (typeof (TKey));
        var valueSerializer = new XmlSerializer (typeof (TValue));
        var key = (TKey) keySerializer.Deserialize (reader);  
        var value = (TValue) valueSerializer.Deserialize (reader);
        reader.ReadEndElement ();
        this.Add (key, value);
        reader.MoveToContent ();
    }
    reader.ReadEndElement ();
}
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    var keySerializer = new XmlSerializer (typeof (TKey));
    var valueSerializer = new XmlSerializer (typeof (TValue));
    bool wasEmpty = reader.IsEmptyElement;
    reader.Read ();
    if (wasEmpty)
        return;
    while (reader.NodeType != System.Xml.XmlNodeType.EndElement) {
        reader.ReadStartElement ("item");
        reader.ReadStartElement ("key");
        var key = (TKey) keySerializer.Deserialize (reader);
        reader.ReadEndElement ();
        reader.ReadStartElement ("value");
        var value = (TValue) valueSerializer.Deserialize (reader);
        reader.ReadEndElement ();
        this.Add (key, value);
        reader.ReadEndElement ();
        reader.MoveToContent ();
    }
    reader.ReadEndElement ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
0
Gpt3D_Clone693_0.cs 1 41
Gpt3D_Clone693_0.cs 42 75
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    Bitmap tempImage = null;
    bool imageWasCloned = false;
    ImageLockMode lockMode = ImageLockMode.ReadOnly;
    Rectangle imageRectangle = new Rectangle(0, 0, image.Width, image.Height);
    PixelFormat imagePixelFormat = PixelFormat.Format24bppRgb;
    if (image.PixelFormat != imagePixelFormat) {
        tempImage = image.Clone (imageRectangle, imagePixelFormat);
        imageWasCloned = true;
    } else {
        tempImage = image;
    }
    BitmapData bmd = null;
    try {
        bmd = tempImage.LockBits (imageRectangle, lockMode, imagePixelFormat);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            tempImage.UnlockBits (bmd);
        if (imageWasCloned)
            tempImage.Dispose ();
    }
    return histogram;
}
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb) {
        image = image.Clone (new Rectangle (0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try {
        bmd = image.LockBits (new Rectangle (0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            image.UnlockBits (bmd);
        if (imageWasCloned)
            image.Dispose ();
    }
    return histogram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
694
0
Gpt3D_Clone694_0.cs 1 19
Gpt3D_Clone694_0.cs 20 37
----------------------------------------

void IServiceBehavior.ApplyDispatchBehavior (ServiceDescription description, ServiceHostBase serviceHostBase) {
    IErrorHandler errorHandler;
    try {
        errorHandler = (IErrorHandler) Activator.CreateInstance (errorHandlerType);
    }
    catch (MissingMethodException e) {
#====================
#gpt output=============
	    throw new ArgumentException(
	      "The errorHandlerType specified in the ErrorBehaviorAttribute constructor could not be found.",
			e
	    );
    }
    foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers) {
        ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher;
        channelDispatcher.ErrorHandlers.Add (errorHandler);
    }
}
----------------------------------------

void IServiceBehavior.ApplyDispatchBehavior (ServiceDescription description, ServiceHostBase serviceHostBase) {
    IErrorHandler errorHandler;
    try {
        errorHandler = Activator.CreateInstance(errorHandlerType) as ErrorHandler;
    }
    catch (MissingMethodException e) {
	    throw new ArgumentException(
	      "The errorHandlerType specified in the ErrorBehaviorAttribute constructor could not be found.",
			e
	    );
    }
    serviceHostBase?.ChannelDispatchers?.ToList()?.ForEach(dispatcher => {
        ChannelDispatcher channelDispatcher = dispatcher as ChannelDispatcher;
        channelDispatcher?.ErrorHandlers?.Add (errorHandler);
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
0
Gpt3D_Clone697_0.cs 1 12
Gpt3D_Clone697_0.cs 13 26
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetCursorPosition (true);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.scrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.scrollPosition = scrollLoc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
699
0
Gpt3D_Clone699_0.cs 1 19
Gpt3D_Clone699_0.cs 20 36
----------------------------------------

public static void DisplayIPAddresses () {
    StringBuilder sb = new StringBuilder ();
    NetworkInterface [] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces ();
    uint length = (uint)networkInterfaces.Length;
    uint i;
    for (i = 0; i < length; i++) {
        IPInterfaceProperties properties = networkInterfaces[i].GetIPProperties ();
        uint j = 0;
        foreach (IPAddressInformation address in properties.UnicastAddresses){
            if (address.Address.AddressFamily != AddressFamily.InterNetwork)
                continue;
            if (IPAddress.IsLoopback (address.Address))
                continue;
            sb.AppendLine (address.Address.ToString () + " (" + networkInterfaces[i].Name + ")");
            j++;
        }
    }
    MessageBox.Show (sb.ToString ());
}
----------------------------------------

public static void DisplayIPAddresses () {
    StringBuilder sb = new StringBuilder ();
    NetworkInterface [] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces ();
    foreach (NetworkInterface network in networkInterfaces) {
        IPInterfaceProperties properties = network.GetIPProperties ();
        foreach (IPAddressInformation address in properties.UnicastAddresses) {
            if (address.Address.AddressFamily != AddressFamily.InterNetwork)
                continue;
            if (IPAddress.IsLoopback (address.Address))
                continue;
            sb.AppendLine (address.Address.ToString () + " (" + network.Name + ")");
        }
    }
    MessageBox.Show (sb.ToString ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
699
2
Gpt3D_Clone699_2.cs 1 14
Gpt3D_Clone699_2.cs 15 31
----------------------------------------

public static void DisplayIPAddresses () {
    StringBuilder sb = new StringBuilder ();
    NetworkInterface [] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces ();
    foreach (NetworkInterface network in networkInterfaces) {
        IPInterfaceProperties properties = network.GetIPProperties ();
        foreach (IPAddressInformation address in properties.UnicastAddresses) {
            if (address.Address.AddressFamily != AddressFamily.InterNetworkV6 || //Type 4
              IPAddress.IsLoopback (address.Address))
                continue;
            sb.AppendLine (address.Address.ToString () + " (" + network.Name + ")");
        }
    }
    Console.WriteLine (sb.ToString ()); //Type 4
}
----------------------------------------

public static void DisplayIPAddresses () {
    StringBuilder sb = new StringBuilder ();
    NetworkInterface [] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces ();
    foreach (NetworkInterface network in networkInterfaces) {
        IPInterfaceProperties properties = network.GetIPProperties ();
        foreach (IPAddressInformation address in properties.UnicastAddresses) {
            if (address.Address.AddressFamily != AddressFamily.InterNetwork)
                continue;
            if (IPAddress.IsLoopback (address.Address))
                continue;
            sb.AppendLine (address.Address.ToString () + " (" + network.Name + ")");
        }
    }
    MessageBox.Show (sb.ToString ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
0
Gpt3D_Clone700_0.cs 1 22
Gpt3D_Clone700_0.cs 23 40
----------------------------------------

public void Update3 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    for (var i = 1; i < input.Length - 1; i++) {
        var minfo = t.GetProperty (input[i]).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input[input.Length - 1]);
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    try {
        lambda.Compile ().DynamicInvoke (obj, newval);
    }
    catch (Exception ex) {
        Console.WriteLine(ex.Message);
    }
}
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
1
Gpt3D_Clone700_1.cs 1 18
Gpt3D_Clone700_1.cs 19 36
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    int i = 1; 
    while (i < (input.Length - 1)) {
        var minfo = t.GetProperty (input[i]).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
        ++i;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
0
Gpt3D_Clone702_0.cs 1 17
Gpt3D_Clone702_0.cs 18 35
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var messages = new List<string> ();
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            messages.Add (error.ErrorMessage);
            messages.Add (error.Exception.ToString ());
        }
    }
    return Content (string.Join ("<br/>", messages));
}
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
0
Gpt3D_Clone703_0.cs 1 13
Gpt3D_Clone703_0.cs 14 29
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency(a);
    var bFrequency = CalculateFrequency(b);
    var match = true;
    foreach (var key in aFrequency.Keys) {
        if (!bFrequency.ContainsKey(key) || aFrequency[key] != bFrequency[key])
            match = false;
    }
    return match;
}
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
1
Gpt3D_Clone703_1.cs 1 14
Gpt3D_Clone703_1.cs 15 28
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency(a);
    var bFrequency = CalculateFrequency(b);
    foreach (var key in aFrequency.Keys) {
        if (!bFrequency.ContainsKey(key) || aFrequency[key] != bFrequency[key])
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
705
0
Gpt3D_Clone705_0.cs 1 17
Gpt3D_Clone705_0.cs 18 33
----------------------------------------

private void SetBitmapResourcesTransparent () {
    Image img;
    BitmapSource bmpSource;
    System.Drawing.Bitmap bmp;
    foreach (ResourceDictionary resdict in Application.Current.Resources.MergedDictionaries) {
        foreach (DictionaryEntry dictEntry in resdict) {
            if ((img = dictEntry.Value as Image) is Image && (bmpSource = img.Source as BitmapSource) is BitmapSource && (bmp = BitmapFromSource (bmpSource)) != null) {
                // Make the image transparent
                System.Drawing.Color tintColor = System.Drawing.Color.White;
                System.Drawing.Color transparentColor = System.Drawing.Color.FromArgb (1, 0, 0, 0);
                bmp.MakeTransparent (tintColor, transparentColor);
                bmpSource = ConvertBitmap (bmp);
                img.Source = bmpSource;
            }
        }
    }
}
----------------------------------------

private void SetBitmapResourcesTransparent () {
    Image img;
    BitmapSource bmpSource;
    System.Drawing.Bitmap bmp;
    foreach (ResourceDictionary resdict in Application.Current.Resources.MergedDictionaries) {
        foreach (DictionaryEntry dictEntry in resdict) {
            if ((img = dictEntry.Value as Image) is Image && (bmpSource = img.Source as BitmapSource) is BitmapSource && (bmp = BitmapFromSource (bmpSource)) != null) {
                bmp.MakeTransparent (System.Drawing.Color.Magenta);
                bmpSource = ConvertBitmap (bmp);
                img.Source = bmpSource;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
0
Gpt3D_Clone708_0.cs 1 28
Gpt3D_Clone708_0.cs 29 52
----------------------------------------

private static JToken NormalizeToken(JToken token) 
{ 
    JObject o; 
    JArray array; 
    if ((o = token as JObject) != null) { 
        SortedDictionary <string, JProperty> orderedProperties = new SortedDictionary<string, JProperty>(); 
        foreach(JProperty property in o.Properties()) 
        { 
            orderedProperties.Add(property.Name, property); 
        } 
        JObject normalized = new JObject(); 
        foreach (KeyValuePair<string, JProperty> property in orderedProperties) 
        { 
            normalized.Add(property.Key, NormalizeToken(property.Value)); 
        } 
        return normalized; 
    } 
    else if ((array = token as JArray) != null) { 
        for (int i = 0; i < array.Count; i++) 
        { 
            array[i] = NormalizeToken(array[i]); 
        } 
        return array; 
    } 
    else { 
        return token; 
    } 
} 
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
1
Gpt3D_Clone708_1.cs 1 25
Gpt3D_Clone708_1.cs 26 49
----------------------------------------

private static JToken NormalizeToken(JToken token) 
{ 
    JObject o; 
    JArray array; 
    if ((o = token as JObject) != null) 
    { 
        List<JProperty> orderedProperties = new List<JProperty>(o.Properties()); 
        orderedProperties.Sort((x, y) => x.Name.CompareTo(y.Name)); 
        JObject normalized = new JObject(); 
        orderedProperties.ForEach(property => normalized.Add(property.Name, NormalizeToken(property.Value))); 
        return normalized; 
    } 
    else if ((array = token as JArray) != null) 
    { 
        for (int i = 0; i < array.Count; i++) 
        { 
            array[i] = NormalizeToken(array[i]); 
        } 
        return array; 
    } 
    else 
    { 
       return token; 
    } 
}
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
0
Gpt3D_Clone709_0.cs 1 9
Gpt3D_Clone709_0.cs 10 20
----------------------------------------

private static string DictionaryToString (IDictionary<string, object> dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List<string> ();
    foreach (KeyValuePair<string, object> item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
1
Gpt3D_Clone709_1.cs 1 9
Gpt3D_Clone709_1.cs 10 20
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

private static string DictionaryToString (IDictionary<string, string> dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List<string> ();
    foreach (KeyValuePair<string, string> item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
0
Gpt3D_Clone70_0.cs 1 13
Gpt3D_Clone70_0.cs 14 26
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

public void Set (int index) {
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < entries [index].HandlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
1
Gpt3D_Clone70_1.cs 1 11
Gpt3D_Clone70_1.cs 12 26
----------------------------------------

public void Set (int index) {
    int handlerCount;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
    } for (int i = 0; i < handlerCount; i ++)
        entries [index].HandlerList[i] ();
}
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
711
0
Gpt3D_Clone711_0.cs 1 21
Gpt3D_Clone711_0.cs 22 49
----------------------------------------

public static IEnumerable < IEnumerable < T > > Segment < T > (IEnumerable < T > sequence, Func < T, T, int, bool > newSegmentIdentifier) {
    var index = 0;
    using (var iter = sequence.GetEnumerator ())
    {
        var segment = new List < T > ();
        var prevItem = default (T);
        while (iter.MoveNext ()) {
            var isNewSegment = newSegmentIdentifier (iter.Current, prevItem, index);
            ++ index;
            prevItem = iter.Current;
            if (! isNewSegment) {
                segment.Add (iter.Current);
                continue;
            }
            yield return segment;
            segment = new List < T > {iter.Current};
        }
        if (segment.Count > 0)
            yield return segment;
    }
}
----------------------------------------

public static IEnumerable < IEnumerable < T > > Segment < T > (IEnumerable < T > sequence, Func < T, T, int, bool > newSegmentIdentifier) {
    var index = - 1;
    using (var iter = sequence.GetEnumerator ())
    {
        var segment = new List < T > ();
        var prevItem = default (T);
        if (iter.MoveNext ()) {
            ++ index;
            segment.Add (iter.Current);
            prevItem = iter.Current;
        }
        while (iter.MoveNext ()) {
            ++ index;
            var isNewSegment = newSegmentIdentifier (iter.Current, prevItem, index);
            prevItem = iter.Current;
            if (! isNewSegment) {
                segment.Add (iter.Current);
                continue;
            }
            yield return segment;
            segment = new List < T > {iter.Current};
        }
        if (segment.Count > 0)
            yield return segment;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
711
1
Gpt3D_Clone711_1.cs 1 21
Gpt3D_Clone711_1.cs 22 49
----------------------------------------

public static IEnumerable < IEnumerable < T > > Segment < T > (IEnumerable < T > sequence, Func < T, T, int, bool > newSegmentIdentifier) {
    var index = 0;
    using (var iter = sequence.GetEnumerator ())
    {
        var segment = new List < T > ();
        var prevItem = default (T);
        while (iter.MoveNext ()) {
            var isNewSegment = newSegmentIdentifier (iter.Current, prevItem, index);
            ++ index;
            prevItem = iter.Current;
            if (isNewSegment) {
                yield return segment;
                segment = new List < T > {iter.Current};
                continue;
            }
            segment.Add (iter.Current);
        }
        if (segment.Count > 0)
            yield return segment;
    }
}
----------------------------------------

public static IEnumerable < IEnumerable < T > > Segment < T > (IEnumerable < T > sequence, Func < T, T, int, bool > newSegmentIdentifier) {
    var index = - 1;
    using (var iter = sequence.GetEnumerator ())
    {
        var segment = new List < T > ();
        var prevItem = default (T);
        if (iter.MoveNext ()) {
            ++ index;
            segment.Add (iter.Current);
            prevItem = iter.Current;
        }
        while (iter.MoveNext ()) {
            ++ index;
            var isNewSegment = newSegmentIdentifier (iter.Current, prevItem, index);
            prevItem = iter.Current;
            if (! isNewSegment) {
                segment.Add (iter.Current);
                continue;
            }
            yield return segment;
            segment = new List < T > {iter.Current};
        }
        if (segment.Count > 0)
            yield return segment;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
0
Gpt3D_Clone714_0.cs 1 11
Gpt3D_Clone714_0.cs 12 24
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    double end = Math.Sqrt (number);
    for (double i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end == (int)end)
        count ++;
    return count;
}
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
0
Gpt3D_Clone716_0.cs 1 20
Gpt3D_Clone716_0.cs 21 39
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

private static Control FindControlIterativev2 (this Control control, string id) {
    Control ctl = control;
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                ctl = child;
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
0
Gpt3D_Clone719_0.cs 1 16
Gpt3D_Clone719_0.cs 17 27
----------------------------------------

public int Compare (Level x, Level y)
{
    if (object.ReferenceEquals (x, y))
    {
        return 0;
    }
    if (x is null)
    {
        return 1;
    }
    else if (y is null)
    {
        return -1;
    }
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
1
Gpt3D_Clone719_1.cs 1 16
Gpt3D_Clone719_1.cs 17 27
----------------------------------------

public int Compare(Level x, Level y) 
{ 
    if (object.ReferenceEquals(x, y)) 
    { 
        return 0; 
    } 
    if (x == null) 
    { 
        return 1; 
    } 
    else if (y == null) 
    { 
        return -1; 
    } 
    return x.LevelID.CompareTo(y.LevelID); 
}
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
0
Gpt3D_Clone720_0.cs 1 20
Gpt3D_Clone720_0.cs 21 46
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

private static IEnumerable < Enum > GetFlags(Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64(value);
    List < Enum > results = new List < Enum >();
    int i = values.Length - 1;
    while (i>= 0) {
        ulong mask = Convert.ToUInt64(values[i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add(values[i]);
            bits -= mask;
        }
        i--;
    }
    if (bits != 0L) {
        return Enumerable.Empty < Enum > ();
    } else if (Convert.ToUInt64 (value) != 0L) {
        return results.Reverse < Enum > ();
    } else if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L) {
        return values.Take (1);
    } else {
        return Enumerable.Empty < Enum > ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
1
Gpt3D_Clone720_1.cs 1 27
Gpt3D_Clone720_1.cs 28 49
----------------------------------------

private static IEnumerable < Enum > GetFlags(Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64(value);
    List < Enum > results = new List < Enum >();
    for (int i = values.Length - 1; i >= 0; i--) {
        ulong mask = Convert.ToUInt64(values[i]);
        if (i == 0 && mask == 0L) {
            break;
        }
        if ((bits & mask) == mask) {
            results.Add(values[i]);
            bits -= mask;
        }
    }
    if (bits == 0L) {
        if (Convert.ToUInt64(value) != 0L) {
            return results.Reverse<Enum>();
        } else if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L) {
            return values.Take(1);
        }
    }
    return Enumerable.Empty<Enum>();
}
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
725
0
Gpt3D_Clone725_0.cs 1 16
Gpt3D_Clone725_0.cs 17 38
----------------------------------------

[PermissionSetAttribute (SecurityAction.Demand, Name = "FullTrust")] public static WindowsImpersonationContext doImpersonation (string svcUserName, string domainName, string password) {
     int returnValue = LogonUser (svcUserName, domainName, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_WINNT50, ref tokenHandle);
    if (returnValue != NO_ERROR) {
        throw new Exception ("LogonUser failed with error code : " + GetError (returnValue));
    }
    bool retVal = DuplicateToken (tokenHandle, SecurityImpersonation, ref dupeTokenHandle);
    if (!retVal) {
        CloseHandle (tokenHandle);
        throw new Exception ("Exception thrown in trying to duplicate token.");
    } else {
        bool bRetVal = DuplicateToken (tokenHandle, (int) SecurityImpersonation, ref dupeTokenHandle);
        newId = new WindowsIdentity (dupeTokenHandle);
        WindowsImpersonationContext impersonatedUser = newId.Impersonate ();
        return impersonatedUser;
    }
}
----------------------------------------

[PermissionSetAttribute (SecurityAction.Demand, Name = "FullTrust")] public static WindowsImpersonationContext doImpersonation (string svcUserName, string domainName, string password) {
    tokenHandle = IntPtr.Zero;
    dupeTokenHandle = IntPtr.Zero;
    bool returnValue = LogonUser (svcUserName, domainName, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_WINNT50, ref tokenHandle);
    if (returnValue == false) {
        int ret = Marshal.GetLastWin32Error ();
        if (ret != NO_ERROR)
            throw new Exception ("LogonUser failed with error code : " + GetError (ret));
    }
    bool retVal = DuplicateToken (tokenHandle, SecurityImpersonation, ref dupeTokenHandle);
    if (retVal == false) {
        CloseHandle (tokenHandle);
        throw new Exception ("Exception thrown in trying to duplicate token.");
    } else {
        bool bRetVal = DuplicateToken (tokenHandle, (int) SecurityImpersonation, ref dupeTokenHandle);
        newId = new WindowsIdentity (dupeTokenHandle);
        WindowsImpersonationContext impersonatedUser = newId.Impersonate ();
        return impersonatedUser;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
731
0
Gpt3D_Clone731_0.cs 1 14
Gpt3D_Clone731_0.cs 15 31
----------------------------------------

private void txt_miktar_TextChanged (object sender, TextChangedEventArgs e) {
    if ((sender as TextBox).Text.Length < 1) {
        return;
    }
    try {
        int adet = int.Parse ((sender as TextBox).Text);
    }
    catch {
        string s = "";
        s = (sender as TextBox).Text.Substring (0, (sender as TextBox).Text.Length - 1);
        (sender as TextBox).Text = s;
        (sender as TextBox).Select (s.Length, s.Length);
    }
}
----------------------------------------

private void txt_miktar_TextChanged (object sender, TextChangedEventArgs e) {
    if ((sender as TextBox).Text.Length < 1) {
        return;
    }
    try {
        int adet = Convert.ToInt32 ((sender as TextBox).Text);
    }
    catch {
        string s = "";
        s = (sender as TextBox).Text;
        s = s.Substring (0, s.Length - 1);
        (sender as TextBox).Text = s;
        (sender as TextBox).Select (s.Length, s.Length);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
0
Gpt3D_Clone732_0.cs 1 30
Gpt3D_Clone732_0.cs 31 57
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) { 
    int start, end; 
    if (offset < 0) { 
        start = arr.Length + offset; 
    } else { 
        start = offset; 
    } 
    if (start < 0) { 
        start = 0; 
    } else if (start > arr.Length) { 
        start = arr.Length; 
    } 
    if (length < 0) { 
        end = arr.Length + length; 
    } else { 
        end = start + length; 
    } 
    if (end < 0) { 
        end = 0; 
    } 
    if (end > arr.Length) { 
        end = arr.Length; 
    } 
    int len = end - start; 
    T [] result = new T [len]; 
    for (int i = 0; i < len; i++) { 
        result [i] = arr [start + i]; 
    } 
    return result; 
} 
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
1
Gpt3D_Clone735_1.cs 1 9
Gpt3D_Clone735_1.cs 10 20
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName[..index]]);
        AssignValueToProperty (accessor, propertyName[index+1..], value);
    }
}
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
0
Gpt3D_Clone739_0.cs 1 25
Gpt3D_Clone739_0.cs 26 58
----------------------------------------

public void MapearDataReaderListaObjetos < T > (IDataReader dr, List < T > lista) where T : new () {
    Type businessEntityType = typeof (T);
    List < T > entitys = new List < T > ();
    T miObjeto = new T ();
    LoadProperties (miObjeto, businessEntityType);
    List < PropertyInfo > sourcePoperties = Properties [businessEntityType.FullName] as List < PropertyInfo >;
    while (dr.Read ()) {
        T newObject = new T ();
        for (int index = 0; index < dr.FieldCount; index ++) {
            for (int _indice = 0; _indice < sourcePoperties.Count; _indice ++) {
                if (sourcePoperties [_indice].Name.ToUpper () == dr.GetName (index).ToUpper ())
                    ;
                {
                    string _tipoProp = sourcePoperties [_indice].PropertyType.ToString ();
                    PropertyInfo info = sourcePoperties [_indice] as PropertyInfo;
                    if ((info != null) && info.CanWrite) {
                        info.SetValue (newObject, dr.GetValue (index), null);
                    }
                }}
        }
        entitys.Add (newObject);
    }
    dr.Close ();
    lista = entitys;
}
----------------------------------------

public void MapearDataReaderListaObjetos<T>(IDataReader dr, List<T> lista) where T : new()
{
    Type businessEntityType = typeof (T);
    List<T> entitys = new List<T>();
    T miObjeto = new T();
    LoadProperties(miObjeto, businessEntityType);
    List<PropertyInfo> sourcePoperties = Properties[businessEntityType.FullName] as List<PropertyInfo>;
    while (dr.Read())
    {
        T newObject = new T();
        for (int index = 0; index < dr.FieldCount; index++)
        {
            for (int _indice = 0; _indice < sourcePoperties.Count; _indice++)
            {
                if (sourcePoperties[_indice].Name.ToUpper() == dr.GetName(index).ToUpper())
                {
                    string _tipoProp = sourcePoperties[_indice].PropertyType.ToString();
                    PropertyInfo info = sourcePoperties[_indice] as PropertyInfo;
                    if (info != null && info.CanWrite)
                    {
                        var customerValue = dr.GetValue(index);
                        info.SetValue(newObject, customerValue, null);
                    }
                }
            }
        }
        entitys.Add(newObject);
    }
    dr.Close();
    lista = entitys;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
0
Gpt3D_Clone73_0.cs 1 11
Gpt3D_Clone73_0.cs 12 32
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

public T Dequeue() 
{ 
    if (this._size == 0) 
    { 
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue); 
    } 
 
    // Swapping
    int tempIndex = this._head;
    this._head = (this._head + 1) % this._array.Length;
 
    T local = this._array[tempIndex];
 
    this._array[tempIndex] = default (T); 
    this._size--; 
    this._version++; 
 
    return local; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
1
Gpt3D_Clone73_1.cs 1 19
Gpt3D_Clone73_1.cs 20 32
----------------------------------------

public T Dequeue() 
{ 
    if (this._size == 0) 
    { 
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue); 
    } 
 
    // Different index
    int localIndex = (this._head + 1) % this._array.Length;
  
    T local = this._array[localIndex];
    this._array[localIndex] = default (T);
    this._head = localIndex;
    this._size--; 
    this._version++; 
 
    return local; 
}
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
0
Gpt3D_Clone742_0.cs 1 37
Gpt3D_Clone742_0.cs 38 79
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            if (computer == Input.Paper) {
                return Result.Draw;
            } else if (computer == Input.Rock) {
                return Result.Win;
            } else if (computer == Input.Scissors) {
                return Result.Lose;
            } else {
                throw new Exception ("Logic fail.");
            }
    case Input.Rock :
        if (computer == Input.Paper) {
            return Result.Lose;
        } else if (computer == Input.Rock) {
            return Result.Draw;
        } else if (computer == Input.Scissors) {
            return Result.Win;
        } else {
            throw new Exception ("Logic fail.");
        }
    case Input.Scissors :
        if (computer == Input.Paper) {
            return Result.Win;
        } else if (computer == Input.Rock) {
            return Result.Lose;
        } else if (computer == Input.Scissors) {
            return Result.Draw;
        } else {
            throw new Exception ("Logic fail.");
        }
    default :
        throw new Exception ("Logic fail.");
    }
}
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
1
Gpt3D_Clone742_1.cs 1 40
Gpt3D_Clone742_1.cs 41 64
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            if (computer == Input.Paper) return Result.Draw;
            else if (computer == Input.Rock) return Result.Win;
            else if (computer == Input.Scissors) return Result.Lose;
            else throw new Exception ("Logic fail.");
        case Input.Rock :
            if (computer == Input.Paper) return Result.Lose;
            else if (computer == Input.Rock) return Result.Draw;
            else if (computer == Input.Scissors) return Result.Win;
            else throw new Exception ("Logic fail.");
        case Input.Scissors :
            if (computer == Input.Paper) return Result.Win;
            else if (computer == Input.Rock) return Result.Lose;
            else if (computer == Input.Scissors) return Result.Draw;
            else throw new Exception ("Logic fail.");
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
0
Gpt3D_Clone745_0.cs 1 26
Gpt3D_Clone745_0.cs 27 48
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            Monitor.Enter (this);
            try
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            }
            finally
            {
                Monitor.Exit (this);
            }
            if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
1
Gpt3D_Clone745_1.cs 1 20
Gpt3D_Clone745_1.cs 21 42
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

public T GetFromPool () {
    T item = null;
    while(null == item)
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne (TimeSpan.Zero);
            }
        }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
0
Gpt3D_Clone74_0.cs 1 17
Gpt3D_Clone74_0.cs 18 28
----------------------------------------

public static HtmlNode TruncateInnerText (HtmlNode node, int length) {
    if (node == null)
        throw new ArgumentNullException ("node");
    if (node.InnerText.Length < length)
        return node;
    HtmlNode clone = node.CloneNode (false);
    TruncateInnerText (node, clone, clone, length);
    StringBuilder sb = new StringBuilder();
    int i; 
    for (i=0; i<length; i++)
    {
        sb.Append(clone.InnerText[i]);
    }
    clone.InnerText = sb.ToString();
    return clone;
}
----------------------------------------

public static HtmlNode TruncateInnerText (HtmlNode node, int length) {
    if (node == null)
        throw new ArgumentNullException ("node");
    if (node.InnerText.Length < length)
        return node;
    HtmlNode clone = node.CloneNode (false);
    TruncateInnerText (node, clone, clone, length);
    return clone;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
1
Gpt3D_Clone74_1.cs 1 9
Gpt3D_Clone74_1.cs 10 20
----------------------------------------

public static HtmlNode TruncateInnerText (HtmlNode node, int length) {
    if (node == null)
        return node;
    if (node.InnerText.Length < length)
        return node;
    HtmlNode clone = node.CloneNode (true);
    TruncateInnerText (node, clone, clone, length);
    return clone;
}
----------------------------------------

public static HtmlNode TruncateInnerText (HtmlNode node, int length) {
    if (node == null)
        throw new ArgumentNullException ("node");
    if (node.InnerText.Length < length)
        return node;
    HtmlNode clone = node.CloneNode (false);
    TruncateInnerText (node, clone, clone, length);
    return clone;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
1
Gpt3D_Clone753_1.cs 1 19
Gpt3D_Clone753_1.cs 20 41
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        byte [] input = new byte [3 * BytesPerLong];
        input [3] = (byte) (time > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
        input [2] = (byte) (time > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
        input [1] = (byte) (time > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
        input [0] = (byte) (time > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        input [7] = (byte) (interval > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
        input [6] = (byte) (interval > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
        input [5] = (byte) (interval > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
        input [4] = (byte) (interval > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
2
Gpt3D_Clone753_2.cs 1 20
Gpt3D_Clone753_2.cs 21 41
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        ulong[] input = new ulong[]{(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte[] inValue = new byte[input.Length * 4];
        for (int i = 0; i < input.Length; i++) {
            int j = i * 4;
            inValue[j] = (byte)(input[i] >> 24);
            inValue[j + 1] = (byte)(input[i] >> 16);
            inValue[j + 2] = (byte)(input[i] >> 8);
            inValue[j + 3] = (byte)(input[i] >> 0);
        }
        byte[] outValue = BitConverter.GetBytes(0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
3
Gpt3D_Clone753_3.cs 1 19
Gpt3D_Clone753_3.cs 20 40
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        int t1 = (time == 0 || interval == 0) ? 0 : 1;
        byte [] inValue = new byte[3*4];
        for (int i = 0; i < inValue.Length; i += 4) {
            inValue [i + 3] = (byte) ((t1 >> 24) & 0xff);
            inValue [i + 2] = (byte) ((t1 >> 16) & 0xff);
            inValue [i + 1] = (byte) ((t1 >> 8) & 0xff);
            inValue [i + 0] = (byte) ((t1 >> 0) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
0
Gpt3D_Clone754_0.cs 1 14
Gpt3D_Clone754_0.cs 15 32
----------------------------------------

private String genSequence(int n) {
    String s = "";
    int m;
    while (true) {
        m = (n % 26) + 65;
        n /= 26;
        s = (char) m + s;
        if (n > 0) 
            n--;
        else if (n == 0) 
            break;
    }
    return s;
}
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
1
Gpt3D_Clone754_1.cs 1 16
Gpt3D_Clone754_1.cs 17 32
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

private String generateSequence(int num) {
    String str = "";
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) Math.floor(num / 26);
        str = (char) mod + str;
        if (num > 0)
            num--;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
0
Gpt3D_Clone755_0.cs 1 19
Gpt3D_Clone755_0.cs 20 45
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    if (Monitor.TryEnter (gate, 100, ref lockTaken)) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
            }
        }
    }
    return returnMessage;
}
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
0
Gpt3D_Clone756_0.cs 1 17
Gpt3D_Clone756_0.cs 18 31
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock) 
    { 
        if (! this.locks.ContainsKey (key)) { 
            this.locks [key] = locker = new Locker (this, key); 
        }
        else
        { 
            locker = this.locks[key]; 
        }
        locker.WaitCount ++; 
    }
    locker.Enter (); 
    locker.WaitCount --; 
    return locker; 
}
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
0
Gpt3D_Clone757_0.cs 1 16
Gpt3D_Clone757_0.cs 17 33
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
   
    if(context.Request.HttpMethod.ToUpper() == "OPTIONS") {
        SetAllowCrossSiteRequestHeaders (context); 
        SetAllowCrossSiteRequestOrigin (context);
        context.Response.End ();
    }
    else
    {
        context.Response.Headers.Add ("Allow", "OPTIONS");
        context.Response.StatusCode = 405;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
1
Gpt3D_Clone757_1.cs 1 16
Gpt3D_Clone757_1.cs 17 33
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
   
    if(context.Request.HttpMethod.ToUpper() == "OPTIONS") {
        SetAllowCrossSiteRequestHeaders (context); 
        SetAllowCrossSiteRequestOrigin (context);
        context.Response.End ();
    }
    else
    {
        context.Response.Headers.Add ("Allow", "OPTIONS");
        context.Response.SetStatus(405);
    }
    context.ApplicationInstance.FinishRequest ();
}
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
0
Gpt3D_Clone761_0.cs 1 13
Gpt3D_Clone761_0.cs 14 28
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new System.Net.WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = Newtonsoft.Json.JsonConvert.DeserializeObject < IpInfo > (info);
        System.Globalization.RegionInfo myRI1 = new System.Globalization.RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
0
Gpt3D_Clone762_0.cs 1 13
Gpt3D_Clone762_0.cs 14 27
----------------------------------------

static IOperations < T > Create () 
{
    var type = typeof (T);
    switch (Type.GetTypeCode (type)) {
        case TypeCode.Byte :
            return new ByteOperations ();
        case TypeCode.Single :
            return new SingleOperations ();
        default :
            var message = string.Format ("Operations for type {0} is not supported.", type.Name);
            throw new NotSupportedException (message);
    }
}
----------------------------------------

static IOperations < T > Create () {
    var type = typeof (T);
    switch (Type.GetTypeCode (type)) {
        case TypeCode.Byte :
            return (IOperations < T >) new ByteOperations ();
        case TypeCode.Single :
            return (IOperations < T >) new SingleOperations ();
        default :
            var message = String.Format ("Operations for type {0} is not supported.", type.Name);
            throw new NotSupportedException (message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
0
Gpt3D_Clone766_0.cs 1 16
Gpt3D_Clone766_0.cs 17 30
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    StartProcess(@"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe", "ps1.ps1");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
0
Gpt3D_Clone769_0.cs 1 15
Gpt3D_Clone769_0.cs 16 34
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

public static boolean checkStr(String str) {
    Character lastChar = null;
    int i = 1;
    for (int j = 0; j < str.length(); j++) {
        char curChar = str.charAt(j);
        if (curChar == lastChar) {
            i++;
            if (i > 2) {
                return false;
            }
        } else {
            i = 1;
        }
        lastChar = curChar;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
1
Gpt3D_Clone769_1.cs 1 16
Gpt3D_Clone769_1.cs 17 33
----------------------------------------

public static bool CheckString(string input) {
    char? lastChar = null;
    int i = 1;
    foreach (char c in input) {
        if (c == lastChar.GetValueOrDefault()) {
            i++;
            if (i > 2) {
                return false;
            }
        } else {
            i = 1;
        }
        lastChar = c;
    }
    return true;
}
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
773
0
Gpt3D_Clone773_0.cs 1 21
Gpt3D_Clone773_0.cs 22 46
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    decimal policy = 500M;
    decimal Chauffeur = 0.10M;
    decimal Accountant = 0.10M;
    decimal age2125 = 0.20M;
    decimal age2675 = 0.10M;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        policy += policy * Chauffeur;
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        policy -= policy * Accountant;
    }
    DateTime ? birthDate = dpkDOB.SelectedDate;
    if (birthDate != null) {
        if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
            policy += policy * age2125;
        } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
            policy -= policy * age2675;
        }
    }
    txtPolicy.Text = policy.ToString ();
}
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    decimal policy = 500M;
    decimal chauffeur = 0.10M;
    decimal accountant = 0.10M;
    decimal age2125 = 0.20M;
    decimal age2675 = 0.10M;
    string occupation = cmbOccupation.Text;
    if (occupation == Occumpation.Chauffeur.ToString ()) {
        policy += policy * chauffeur;
    } else if (occupation == Occumpation.Accountant.ToString ()) {
        policy -= policy * accountant;
    }
    DateTime ? birthDate = dpkDOB.SelectedDate;
    if (birthDate != null) {
        int age = birthDate.Age ().Years ();
        if (age > 21 && age < 26) {
            policy += policy * age2125;
        } else if (age > 26 && age < 76) {
            policy -= policy * age2675;
        }
    }
    txtPolicy.Text = policy.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
773
1
Gpt3D_Clone773_1.cs 1 21
Gpt3D_Clone773_1.cs 22 44
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    decimal policy = 500M;
    decimal age2125 = 0.20M;
    decimal age2675 = 0.10M;
    string occupation = cmbOccupation.Text;
    if (occupation == Occumpation.Chauffeur.ToString ()) {
        policy += policy * 0.10M;
    } else if (occupation == Occumpation.Accountant.ToString ()) {
        policy -= policy * 0.10M;
    }
    DateTime ? birthDate = dpkDOB.SelectedDate;
    if (birthDate != null) {
        int age = birthDate.Age ().Years ();
        if (age > 21 && age < 26) {
            policy += policy * age2125;
        } else if (age > 26 && age < 76) {
            policy -= policy * age2675;
        }
    }
    txtPolicy.Text = policy.ToString ();
}
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    decimal policy = 500M;
    decimal Chauffeur = 0.10M;
    decimal Accountant = 0.10M;
    decimal age2125 = 0.20M;
    decimal age2675 = 0.10M;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        policy += policy * Chauffeur;
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        policy -= policy * Accountant;
    }
    DateTime ? birthDate = dpkDOB.SelectedDate;
    if (birthDate != null) {
        if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
            policy += policy * age2125;
        } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
            policy -= policy * age2675;
        }
    }
    txtPolicy.Text = policy.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
0
Gpt3D_Clone774_0.cs 1 14
Gpt3D_Clone774_0.cs 15 27
----------------------------------------

public static string Serialize < T > (T obj) {
    string returnVal = "";
    try {
        DataContractJsonSerializer serializer = new DataContractJsonSerializer (obj.GetType ());
        using (MemoryStream ms = new MemoryStream ())
        {
            serializer.WriteObject (ms, obj);
            returnVal = Encoding.Default.GetString (ms.ToArray ());
        }}
    catch (Exception) {
        returnVal = "";
    }
    return returnVal;
}
----------------------------------------

public static string Serialize < T > (T obj) {
    string returnVal = "";
    try {
        JavaScriptSerializer serializer = new JavaScriptSerializer();
        returnVal = serializer.Serialize(obj);       
    }
    catch (Exception) {
        returnVal = "";
    }
    return returnVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
1
Gpt3D_Clone774_1.cs 1 10
Gpt3D_Clone774_1.cs 11 26
----------------------------------------

public static string Serialize < T > (T obj) {
    string returnVal = "";
    try {
        JavaScriptSerializer serializer = new JavaScriptSerializer();
        returnVal = serializer.Serialize(obj);
    } catch (Exception) {
        returnVal = "";
    }
    return returnVal;
}
----------------------------------------

public static string Serialize < T > (T obj) {
    string returnVal = "";
    try {
        DataContractJsonSerializer serializer = new DataContractJsonSerializer (obj.GetType ());
        using (MemoryStream ms = new MemoryStream ())
        {
            serializer.WriteObject (ms, obj);
            returnVal = Encoding.Default.GetString (ms.ToArray ());
        }}
    catch (Exception) {
        returnVal = "";
    }
    return returnVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
776
0
Gpt3D_Clone776_0.cs 1 33
Gpt3D_Clone776_0.cs 34 54
----------------------------------------

public static ManagementObject GetWebServerSettingsByServerComment(string serverComment)
{
    ManagementObject returnValue = null;
    using (ManagementScope iisScope = new ManagementScope(@"\\localhost\root\MicrosoftIISv2", new ConnectionOptions()))
    {
        if (iisScope.IsConnected)
        {
            using (ObjectQuery settingQuery = new ObjectQuery(String.Format("Select * from IIsWebServerSetting where ServerComment = '{0}'", serverComment)))
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(iisScope, settingQuery))
                {
                    using (ManagementObjectCollection results = searcher.Get())
                    {
                        if (results.Count > 0)
                        {
                            foreach (ManagementObject manObj in results)
                            {
                                returnValue = manObj;
                                if (returnValue != null)
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return returnValue;
}
----------------------------------------

public static ManagementObject GetWebServerSettingsByServerComment (string serverComment) {
    ManagementObject returnValue = null;
    ManagementScope iisScope = new ManagementScope (@"\\localhost\root\MicrosoftIISv2", new ConnectionOptions ());
    iisScope.Connect ();
    if (iisScope.IsConnected) {
        ObjectQuery settingQuery = new ObjectQuery (String.Format ("Select * from IIsWebServerSetting where ServerComment = '{0}'", serverComment));
        ManagementObjectSearcher searcher = new ManagementObjectSearcher (iisScope, settingQuery);
        ManagementObjectCollection results = searcher.Get ();
        if (results.Count > 0) {
            foreach (ManagementObject manObj in results) {
                returnValue = manObj;
                if (returnValue != null) {
                    break;
                }
            }
        }
    }
    return returnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
776
1
Gpt3D_Clone776_1.cs 1 21
Gpt3D_Clone776_1.cs 22 42
----------------------------------------

public static ManagementObject GetWebServerSettingsByServerComment (string serverComment) {
    ManagementObject returnValue = null;
    ManagementScope iisScope = new ManagementScope (@"\\localhost\root\MicrosoftIISv2", new ConnectionOptions ());
    iisScope.Connect ();
    if (iisScope.IsConnected) {
        ObjectQuery settingQuery = new ObjectQuery (String.Format ("Select * from IIsWebServerSetting where ServerComment = '{0}'", serverComment));
        using (ManagementObjectSearcher searcher = new ManagementObjectSearcher (iisScope, settingQuery)) {
            using (ManagementObjectCollection results = searcher.Get ()) {
                if (results.Count > 0) {
                    foreach (ManagementObject manObj in results) {
                        returnValue = manObj;
                        if (returnValue != null) {
                            break;
                        }
                    }
                }
            }
        }
    }
    return returnValue;
}
----------------------------------------

public static ManagementObject GetWebServerSettingsByServerComment (string serverComment) {
    ManagementObject returnValue = null;
    ManagementScope iisScope = new ManagementScope (@"\\localhost\root\MicrosoftIISv2", new ConnectionOptions ());
    iisScope.Connect ();
    if (iisScope.IsConnected) {
        ObjectQuery settingQuery = new ObjectQuery (String.Format ("Select * from IIsWebServerSetting where ServerComment = '{0}'", serverComment));
        ManagementObjectSearcher searcher = new ManagementObjectSearcher (iisScope, settingQuery);
        ManagementObjectCollection results = searcher.Get ();
        if (results.Count > 0) {
            foreach (ManagementObject manObj in results) {
                returnValue = manObj;
                if (returnValue != null) {
                    break;
                }
            }
        }
    }
    return returnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
0
Gpt3D_Clone777_0.cs 1 17
Gpt3D_Clone777_0.cs 18 33
----------------------------------------

public static LinkedList<T> SwapPairwise<T>(this LinkedList<T> source) {
    if (source == null)
        throw new ArgumentNullException("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        var tempVal1 = current.Value;
        var tempVal2 = current.Next.Value;
        current.Value = tempVal2;
        current.Next.Value = tempVal1;
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
1
Gpt3D_Clone777_1.cs 1 16
Gpt3D_Clone777_1.cs 17 32
----------------------------------------

public static LinkedList<T> SwapPairwiseV4<T>(this LinkedList<T> source) {
    if (source == null)
        throw new ArgumentNullException("source");
    var current = source.First;
    T temp;
    if (current == null)
        return source;
    while(current != null && current.Next != null) {
        temp = current.Value;
        current.Value = current.Next.Value;
        current.Next.Value = temp;
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
2
Gpt3D_Clone777_2.cs 1 13
Gpt3D_Clone777_2.cs 14 29
----------------------------------------

public static LinkedList<T> SwapPairwiseV3<T>(this LinkedList<T> source) {
    if (source == null)
        throw new ArgumentNullException("source");
    var current = source.First;
    if (current == null)
        return source;
    while(current != null && current.Next != null) {
        current.SwapWith(current.Next);
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
0
Gpt3D_Clone778_0.cs 1 22
Gpt3D_Clone778_0.cs 23 53
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    if (Checked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;
    }
    Size glyphSize = RadioButtonRenderer.GetGlyphSize (pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point (rect.Left + glyphSize.Width, rect.Top);
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, new System.Drawing.Point (0, rect.Height / 2 - glyphSize.Height / 2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    Boolean isChecked;
    if (this.Checked)
        isChecked = true;
    else
        isChecked = false;
    if (isChecked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (this.Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (!this.Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (this.Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (!this.Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;
    }
    Size glyphSize = RadioButtonRenderer.GetGlyphSize (pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point (rect.Left + glyphSize.Width, rect.Top);
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, new System.Drawing.Point (0, rect.Height / 2 - glyphSize.Height / 2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
1
Gpt3D_Clone778_1.cs 1 29
Gpt3D_Clone778_1.cs 30 53
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    Boolean isChecked;
    if (this.Checked == true)
        isChecked = true;
    else
        isChecked = false;
    if (isChecked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (this.Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (this.Enabled == false)
            radioButtonState = RadioButtonState.CheckedDisabled;
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (this.Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (this.Enabled == false)
            radioButtonState = RadioButtonState.UncheckedDisabled;
    }
    Size glyphSize = RadioButtonRenderer.GetGlyphSize (pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point (rect.Left + glyphSize.Width, rect.Top);
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, new System.Drawing.Point (0, rect.Height / 2 - glyphSize.Height / 2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    if (Checked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;
    }
    Size glyphSize = RadioButtonRenderer.GetGlyphSize (pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point (rect.Left + glyphSize.Width, rect.Top);
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, new System.Drawing.Point (0, rect.Height / 2 - glyphSize.Height / 2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
2
Gpt3D_Clone778_2.cs 1 23
Gpt3D_Clone778_2.cs 24 47
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
  CheckBoxRenderer.DrawParentBackground(pevent.Graphics, pevent.ClipRectangle, this);
  RadioButtonState radioButtonState;
  if (this.Checked) {
    radioButtonState = RadioButtonState.CheckedNormal;
    if (this.Focused) 
      radioButtonState = RadioButtonState.CheckedHot;
    if (!this.Enabled)
      radioButtonState = RadioButtonState.CheckedDisabled;
  } else {
    radioButtonState = RadioButtonState.UncheckedNormal;
    if (this.Focused) 
      radioButtonState = RadioButtonState.UncheckedHot;
    if (!this.Enabled) 
      radioButtonState = RadioButtonState.UncheckedDisabled;
  }
  
  System.Drawing.Size glyphSize = RadioButtonRenderer.GetGlyphSize(pevent.Graphics, radioButtonState);
  System.Drawing.Rectangle rect = pevent.ClipRectangle;
  rect.Width -= glyphSize.Width;
  rect.Location = new System.Drawing.Point(rect.Left + glyphSize.Width, rect.Top);
  RadioButtonRenderer.DrawRadioButton(pevent.Graphics, new System.Drawing.Point(0, rect.Height/2 - glyphSize.Height/2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    if (Checked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;
    }
    Size glyphSize = RadioButtonRenderer.GetGlyphSize (pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point (rect.Left + glyphSize.Width, rect.Top);
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, new System.Drawing.Point (0, rect.Height / 2 - glyphSize.Height / 2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
0
Gpt3D_Clone780_0.cs 1 27
Gpt3D_Clone780_0.cs 28 56
----------------------------------------

public static StreamReader LoadWeb (string URL) {
    if (! URL.StartsWith ("http")) {
        URL = "http://" + URL;
    }
    System.Net.HttpWebResponse myResponse = null;
    System.Net.HttpWebRequest myRequest = (System.Net.HttpWebRequest) System.Net.WebRequest.Create (new System.Uri (URL));
    System.IO.Stream myStream = null;
    System.IO.StreamReader myStreamReader = null;
    myRequest.Method = "GET";
    myRequest.Proxy = null;
    myRequest.Timeout = 60000;
    myRequest.KeepAlive = false;
    try {
        myResponse = (System.Net.HttpWebResponse) myRequest.GetResponse ();
    }
    catch (System.Exception ex) {
        System.Windows.Forms.MessageBox.Show ("Error : " + ex.Message);
        return null;
    }
    if (myResponse != null) {
        if (myResponse.StatusCode == System.Net.HttpStatusCode.OK) {
            myStream = myResponse.GetResponseStream ();
            myStreamReader = new System.IO.StreamReader (myStream);
        }
    }
    return myStreamReader;
}
----------------------------------------

public static StreamReader LoadWeb (string URL) {
    if (! URL.StartsWith ("http")) {
        URL = "http://" + URL;
    }
    HttpWebResponse myResponse = null;
    HttpWebRequest myRequest = (HttpWebRequest) WebRequest.Create (new Uri (URL));
    System.IO.Stream myStream = null;
    StreamReader myStreamReader = null;
    myRequest.Method = "GET";
    myRequest.Proxy = null;
    myRequest.Timeout = 60000;
    myRequest.KeepAlive = false;
    try {
        myResponse = (HttpWebResponse) myRequest.GetResponse ();
    }
    catch (Exception ex) {
        System.Windows.Forms.MessageBox.Show ("Error : " + ex.Message);
        return null;
    }
    if (myResponse != null) {
        if (myResponse.StatusCode == System.Net.HttpStatusCode.OK) {
            myStream = myResponse.GetResponseStream ();
            myStreamReader = new StreamReader (myStream);
        }
    }
    return myStreamReader;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
1
Gpt3D_Clone780_1.cs 1 27
Gpt3D_Clone780_1.cs 28 56
----------------------------------------

public static System.IO.StreamReader LoadWeb (System.String URL) {
    if (! URL.StartsWith ("http")) {
        URL = "http://" + URL;
    }
    System.Net.HttpWebResponse myResponse = null;
    System.Net.HttpWebRequest myRequest = (System.Net.HttpWebRequest) System.Net.WebRequest.Create (new System.Uri (URL));
    System.IO.Stream myStream = null;
    System.IO.StreamReader myStreamReader = null;
    myRequest.Method = "GET";
    myRequest.Proxy = null;
    myRequest.Timeout = 60000;
    myRequest.KeepAlive = false;
    try {
        myResponse = (System.Net.HttpWebResponse) myRequest.GetResponse ();
    }
    catch (System.Exception ex) {
        System.Windows.Forms.MessageBox.Show ("Error : " + ex.Message);
        return null;
    }
    if (myResponse != null) {
        if (myResponse.StatusCode == System.Net.HttpStatusCode.OK) {
            myStream = myResponse.GetResponseStream ();
            myStreamReader = new System.IO.StreamReader (myStream);
        }
    }
    return myStreamReader;
}
----------------------------------------

public static StreamReader LoadWeb (string URL) {
    if (! URL.StartsWith ("http")) {
        URL = "http://" + URL;
    }
    HttpWebResponse myResponse = null;
    HttpWebRequest myRequest = (HttpWebRequest) WebRequest.Create (new Uri (URL));
    System.IO.Stream myStream = null;
    StreamReader myStreamReader = null;
    myRequest.Method = "GET";
    myRequest.Proxy = null;
    myRequest.Timeout = 60000;
    myRequest.KeepAlive = false;
    try {
        myResponse = (HttpWebResponse) myRequest.GetResponse ();
    }
    catch (Exception ex) {
        System.Windows.Forms.MessageBox.Show ("Error : " + ex.Message);
        return null;
    }
    if (myResponse != null) {
        if (myResponse.StatusCode == System.Net.HttpStatusCode.OK) {
            myStream = myResponse.GetResponseStream ();
            myStreamReader = new StreamReader (myStream);
        }
    }
    return myStreamReader;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
781
0
Gpt3D_Clone781_0.cs 1 23
Gpt3D_Clone781_0.cs 24 41
----------------------------------------

protected void btnSubmit_Click4 (object sender, EventArgs e) {
    int cnt;
    using (SqlConnection conn = new SqlConnection ("Server; Database; Integrated security = true"))
    using (SqlCommand cmd = new SqlCommand ("Insert into T_TADA_tempform(EMPID,DIVID,DesigID) values(@EMPID,@DIVID,@DesigID)", conn))
    {
        cmd.Parameters.AddWithValue ("@EMPID", ddlname.SelectedValue);
        cmd.Parameters.AddWithValue ("@DIVID", lbldesig.Text);
        cmd.Parameters.AddWithValue ("@DesigID", lbldiv.Text);
        conn.Open ();
        cnt = cmd.ExecuteNonQuery ();
    } if (cnt >= 1) {
        DateTime ReleaseDate = Calendar1.SelectedDate.Date;
        using (SqlConnection conn = new SqlConnection ("Server; Database; Integrated security = true"))
        using (SqlCommand cmd = new SqlCommand ("Insert into T_TADA_tempform(RelaseDate) values(@RelaseDate)", conn))
        {
            cmd.Parameters.AddWithValue ("@RelaseDate", ReleaseDate);
            conn.Open ();
            cnt = cmd.ExecuteNonQuery ();
        }
        Response.Redirect ("form.aspx");
    } else
        Response.Write ("Form has not been submitted,Please Try again!");
}
----------------------------------------

protected void btnSubmit_Click2 (object sender, EventArgs e) {
    string RelaseDate = Calendar1.SelectedDate.Date.ToString ();
    int cnt;
    using (SqlConnection conn = new SqlConnection ("Server; Database; Integrated security = true"))
    using (SqlCommand cmd = new SqlCommand ("Insert into T_TADA_tempform(EMPID,DIVID,DesigID) values(@EMPID,@DIVID,@DesigID)", conn))
    {
        cmd.Parameters.AddWithValue ("@EMPID", ddlname.SelectedValue);
        cmd.Parameters.AddWithValue ("@DIVID", lbldesig.Text);
        cmd.Parameters.AddWithValue ("@DesigID", lbldiv.Text);
        conn.Open ();
        cnt = cmd.ExecuteNonQuery ();
    } if (cnt == 1) {
        Response.Redirect ("form.aspx");
    } else
        Response.Write ("Form has not been submitted,Please Try again!");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
0
Gpt3D_Clone786_0.cs 1 17
Gpt3D_Clone786_0.cs 18 33
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1 || weekOfYear == 2)
    {
        int dayCounter = 0;
        while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday)
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
            dayCounter++;
        }
        return firstDayInWeek;
    }
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
0
Gpt3D_Clone789_0.cs 1 23
Gpt3D_Clone789_0.cs 24 37
----------------------------------------

void OnShapeBrushChanged() 
{
    Brush rtn = null;
    for (int i = 0; i < ShapeChildren.Count; i ++) 
    {
        Shape shape = ShapeChildren[i];
        if (i == 0)
        {
            rtn = shape.Fill;
        }
        else 
        {
            if (rtn != shape.Fill)
            {
                SetValue(FillDifferentProperty, null);
            } 
            else 
            {
                SetValue(FillDifferentProperty, rtn);
            }
        }
    }
}
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
1
Gpt3D_Clone789_1.cs 1 14
Gpt3D_Clone789_1.cs 15 28
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    bool isSameFill = true;
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            isSameFill = false;
            break;
        } 
    }
    SetValue (FillDifferentProperty, isSameFill ? rtn : default (Brush));
}
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
0
Gpt3D_Clone793_0.cs 1 18
Gpt3D_Clone793_0.cs 19 36
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        result.Append(c);
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else {
            if (currentWordLength == maxWordLength) {
                result.Append (' ');
                currentWordLength = 1;
            } else {
                ++ currentWordLength;
            }
        }
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
1
Gpt3D_Clone793_1.cs 1 24
Gpt3D_Clone793_1.cs 25 42
----------------------------------------

public String SplitLongWords(String text, int maxWordLength)
{
    StringBuilder result = new StringBuilder();
    int currentWordLength = 0;
    for(int i=0; i<text.length(); i++)
    {
        char c = text.charAt(i);
        if (Character.isWhitespace(c)) 
        {
            currentWordLength = 0;
        } 
        else if (currentWordLength == maxWordLength)
        {
            currentWordLength = 1;
            result.append(" ");
        } 
        else 
        {
            ++currentWordLength;
        }
        result.append(c);
    }
    return result.toString().trim();
}
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
7
0
Gpt3D_Clone7_0.cs 1 10
Gpt3D_Clone7_0.cs 11 26
----------------------------------------

public Bitmap RotateImage (double angle) {
    SizeF size = CalculateSize (radAngle);
    Bitmap rotatedBmp = new Bitmap ((int) size.Width, (int) size.Height);
    Graphics g = Graphics.FromImage (rotatedBmp);
    g.TranslateTransform (topPoint.X, topPoint.Y);
    g.RotateTransform (GetDegree (radAngle));
    g.DrawImage (image, new RectangleF (0, 0, size.Width, size.Height));
    g.Dispose ();
    return rotatedBmp;
}
----------------------------------------

public Bitmap RotateImage (double angle) {
    SizeF size = CalculateSize (radAngle);
    Bitmap rotatedBmp = new Bitmap ((int) size.Width, (int) size.Height);
    Graphics g = Graphics.FromImage (rotatedBmp);
    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    g.CompositingQuality = CompositingQuality.HighQuality;
    g.SmoothingMode = SmoothingMode.HighQuality;
    g.PixelOffsetMode = PixelOffsetMode.HighQuality;
    g.TranslateTransform (topPoint.X, topPoint.Y);
    g.RotateTransform (GetDegree (radAngle));
    g.DrawImage (image, new RectangleF (0, 0, size.Width, size.Height));
    g.Dispose ();
    return rotatedBmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
7
1
Gpt3D_Clone7_1.cs 1 9
Gpt3D_Clone7_1.cs 10 25
----------------------------------------

public Bitmap RotateImage (double angle) {
    SizeF size = CalculateSize (radAngle);
    Bitmap rotatedBmp = new Bitmap ((int) size.Width, (int) size.Height);
    Graphics g = Graphics.FromImage (rotatedBmp);
    g.TranslateTransform (topPoint.X, topPoint.Y);
    g.RotateTransform (GetDegree (radAngle));
    g.DrawImage (image, new RectangleF (0, 0, size.Width, size.Height));
    return rotatedBmp;
}
----------------------------------------

public Bitmap RotateImage (double angle) {
    SizeF size = CalculateSize (radAngle);
    Bitmap rotatedBmp = new Bitmap ((int) size.Width, (int) size.Height);
    Graphics g = Graphics.FromImage (rotatedBmp);
    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    g.CompositingQuality = CompositingQuality.HighQuality;
    g.SmoothingMode = SmoothingMode.HighQuality;
    g.PixelOffsetMode = PixelOffsetMode.HighQuality;
    g.TranslateTransform (topPoint.X, topPoint.Y);
    g.RotateTransform (GetDegree (radAngle));
    g.DrawImage (image, new RectangleF (0, 0, size.Width, size.Height));
    g.Dispose ();
    return rotatedBmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
0
Gpt3D_Clone805_0.cs 1 10
Gpt3D_Clone805_0.cs 11 22
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length == 0)
        return false;
    long olong = 0;
    foreach (string strOctet in arrOctets)
        if (! long.TryParse (strOctet, out olong))
            return false;
    return true;
}
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
810
0
Gpt3D_Clone810_0.cs 1 20
Gpt3D_Clone810_0.cs 21 42
----------------------------------------

[TestMethod ()] public void SortTest_3 () {
    TupleList < string, int > list = new TupleList < string, int > ();
    list.Add ("cat", 1);
    list.Add ("car", 1);
    list.Add ("dog", 2);
    list.Add ("door",2);
    list.Add ("elephant", 3);
    list.Add ("coconut", 1);
    list.Add ("cab", 1);
    list.Sort ();
    foreach (Tuple < string, int > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item2;
    int last = list.Last ().Item2;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < int, string > list = new TupleList < int, string > ();
    list.Add (1, "cat");
    list.Add (1, "car");
    list.Add (2, "dog");
    list.Add (2, "door");
    list.Add (3, "elephant");
    list.Add (1, "coconut");
    list.Add (1, "cab");
    list.Sort ();
    foreach (Tuple < int, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item1;
    int last = list.Last ().Item1;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
810
2
Gpt3D_Clone810_2.cs 1 20
Gpt3D_Clone810_2.cs 21 42
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < int, string > list = new TupleList < int, string > ();
    list.Add (1, "cat");
    list.Add (1, "car");
    list.Add (2, "dog");
    list.Add (2, "door");
    list.Add (3, "elephant");
    list.Add (1, "coconut");
    list.Add (1, "cab");
    list.Sort ();
    foreach (Tuple < int, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item1;
    int last = list.Last ().Item1;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

[TestMethod ()] public void SortTest () {
   TupleList < string, int > list = new TupleList < string, int > ();
   list.Add ("cat", 1);
   list.Add ("car", 1);
   list.Add ("dog", 2);
   list.Add ("door", 2);
   list.Add ("elephant", 3);
   list.Add ("coconut", 1);
   list.Add ("cab", 1);
   list.Sort ();
   foreach (Tuple < string, int > tuple in list) {
       Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
   }
   int expected_first = 1;
   int expected_last = 3;
   int first = list.First ().Item2;
   int last = list.Last ().Item2;
   Assert.AreEqual (expected_first, first);
   Assert.AreEqual (expected_last, last);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
811
0
Gpt3D_Clone811_0.cs 1 28
Gpt3D_Clone811_0.cs 29 45
----------------------------------------

public static int [] FindMaxArrayEx (int [] srcArray) {
    int [] maxArray = new int [1];
    int maxTotal = int.MinValue;
    int curIndex = 0;
    int tmpTotal = 0;
    List < int > tmpArray = new List < int > ();
    if (srcArray.Length != 1) {
        for (int i = 0; i < srcArray.Length; i ++) {
            tmpTotal = 0;
            curIndex = i;
            tmpArray.Clear ();
            while (curIndex < srcArray.Length) {
                tmpTotal += srcArray [curIndex];
                tmpArray.Add (srcArray [curIndex]);
                if (tmpTotal > maxTotal) {
                    maxTotal = tmpTotal;
                    maxArray = tmpArray.ToArray ();
                }
                curIndex ++;
            }
        }
    } else {
        maxTotal = srcArray [0];
        maxArray = srcArray;
    }
    Console.WriteLine ("FindMaxArrayEx: {0}", maxTotal);
    return maxArray;
}
----------------------------------------

public static int [] FindMaxArrayEx (int [] srcArray) {
    int [] maxArray = new int [1];
    int maxTotal = int.MinValue;
    int curIndex = 0;
    int tmpTotal = 0; 
    List < int > tmpArray = new List < int > ();
    if (srcArray.Length != 1) {
        maxArray = RunWhileLoop (srcArray);
    } else {
        maxTotal = srcArray [0];
        maxArray = srcArray;
    }
    Console.WriteLine ("FindMaxArrayEx: {0}", maxTotal);
    return maxArray;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
0
Gpt3D_Clone814_0.cs 1 16
Gpt3D_Clone814_0.cs 17 41
----------------------------------------

public static MvcHtmlString RequiredLabelFor < TModel, TValue > (this HtmlHelper < TModel > helper, Expression < Func < TModel, TValue > > expression, object htmlAttributes) {
    var metaData = ModelMetadata.FromLambdaExpression (expression, helper.ViewData);
    string htmlFieldName = ExpressionHelper.GetExpressionText (expression);
    string labelText = metaData.DisplayName ?? metaData.PropertyName ?? htmlFieldName.Split ('.').Last ();
    if (metaData.IsRequired)
        labelText += "<span class=\"required\"><![CDATA[*</span>";
    if (String.IsNullOrEmpty (labelText))
        return MvcHtmlString.Empty;
    var label = new TagBuilder ("label");
    label.Attributes.Add ("for", helper.ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldId (htmlFieldName));
    foreach (PropertyDescriptor prop in TypeDescriptor.GetProperties (htmlAttributes)) {
        label.MergeAttribute (prop.Name.Replace ('_', '-'), prop.GetValue (htmlAttributes).ToString (), true);
    }
    label.InnerHtml = labelText;
    return MvcHtmlString.Create (label.ToString ());
}
----------------------------------------

 public static MvcHtmlString RequiredLabelFor<TModel, TValue>(this HtmlHelper<TModel> helper, Expression<Func<TModel, TValue>> expression, object htmlAttributes)
{
    ModelMetadata metaData = ModelMetadata.FromLambdaExpression(expression, helper.ViewData);
    string htmlFieldName = ExpressionHelper.GetExpressionText(expression);
    string labelText = metaData.DisplayName ?? metaData.PropertyName ?? htmlFieldName.Split('.').Last();
    if (metaData.IsRequired)
    {
        labelText += "<span class=\"required\"><![CDATA[*</span>";
    }
    if (String.IsNullOrEmpty(labelText))
    {
        return MvcHtmlString.Empty;
    }
    TagBuilder label = new TagBuilder("label");
    label.Attributes.Add("for", helper.ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldId(htmlFieldName));
    PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(htmlAttributes);
    foreach (PropertyDescriptor prop in properties)
    {
        label.MergeAttribute(prop.Name.Replace('_', '-'), prop.GetValue(htmlAttributes).ToString(), true);
    }
    label.InnerHtml = labelText;
    return MvcHtmlString.Create(label.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
0
Gpt3D_Clone818_0.cs 1 8
Gpt3D_Clone818_0.cs 9 18
----------------------------------------

private static IEnumerable < Type > GetTypeArguments (Type t, IEnumerable < Type > values) {
    if (t.IsGenericType) 
        foreach (Type arg in t.GetGenericArguments ())
            values = UnionTypeArgs (arg, values);
    else
        values = UnionTypes (new[] { t }, values);
    return values;
}
----------------------------------------

private static IEnumerable < Type > GetTypeArguments (Type t, IEnumerable < Type > values) {
    if (t.IsGenericType)
        foreach (var arg in t.GetGenericArguments ())
            values = values.Union (GetTypeArguments (arg, values));
    else
        values = values.Union (new [] {t});
    return values;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
0
Gpt3D_Clone820_0.cs 1 22
Gpt3D_Clone820_0.cs 23 40
----------------------------------------

protected override void OnRender (DrawingContext drawingContext) {
    ensureTextBlock();
    base.OnRender (drawingContext);
    FormattedText formattedText = new FormattedText();
    formattedText.Text = _textBlock.Text;
    formattedText.Culture = CultureInfo.CurrentUICulture;
    formattedText.FlowDirection = _textBlock.FlowDirection;
    formattedText.Typeface = new Typeface (_textBlock.FontFamily, _textBlock.FontStyle, _textBlock.FontWeight, _textBlock.FontStretch);
    formattedText.FontSize = _textBlock.FontSize;
    formattedText.Foreground = Brushes.Black;
    formattedText.TextAlignment = _textBlock.TextAlignment;
    formattedText.Trimming = _textBlock.TextTrimming;
    formattedText.LineHeight = _textBlock.LineHeight;
    formattedText.MaxTextWidth = _textBlock.ActualWidth - _textBlock.Padding.Left - _textBlock.Padding.Right;
    formattedText.MaxTextHeight = _textBlock.ActualHeight - _textBlock.Padding.Top;
    while (formattedText.Extent == double.NegativeInfinity) {
        formattedText.MaxTextHeight ++;
    }
    var _textGeometry = formattedText.BuildGeometry (new Point (_textBlock.Padding.Left, _textBlock.Padding.Top));
    Pen textPen = new Pen (Stroke, StrokeThickness);
    drawingContext.DrawGeometry (Brushes.Transparent, textPen, _textGeometry);
}
----------------------------------------

protected override void OnRender (DrawingContext drawingContext) {
    ensureTextBlock ();
    base.OnRender (drawingContext);
    var formattedText = new FormattedText (_textBlock.Text, CultureInfo.CurrentUICulture, _textBlock.FlowDirection, new Typeface (_textBlock.FontFamily, _textBlock.FontStyle, _textBlock.FontWeight, _textBlock.FontStretch), _textBlock.FontSize, Brushes.Black);
    formattedText.TextAlignment = _textBlock.TextAlignment;
    formattedText.Trimming = _textBlock.TextTrimming;
    formattedText.LineHeight = _textBlock.LineHeight;
    formattedText.MaxTextWidth = _textBlock.ActualWidth - _textBlock.Padding.Left - _textBlock.Padding.Right;
    formattedText.MaxTextHeight = _textBlock.ActualHeight - _textBlock.Padding.Top;
    while (formattedText.Extent == double.NegativeInfinity) {
        formattedText.MaxTextHeight ++;
    }
    var _textGeometry = formattedText.BuildGeometry (new Point (_textBlock.Padding.Left, _textBlock.Padding.Top));
    var textPen = new Pen (Stroke, StrokeThickness);
    drawingContext.DrawGeometry (Brushes.Transparent, textPen, _textGeometry);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
1
Gpt3D_Clone820_1.cs 1 12
Gpt3D_Clone820_1.cs 13 30
----------------------------------------

protected override void OnRender (DrawingContext drawingContext){
    ensureTextBlock();
    base.OnRender (drawingContext);
    var formattedText = new FormattedText(_textBlock.Text, CultureInfo.CurrentUICulture, _textBlock.FlowDirection, new Typeface(_textBlock.FontFamily, _textBlock.FontStyle, _textBlock.FontWeight, _textBlock.FontStretch), _textBlock.FontSize, Brushes.Black);
    formattedText.TextAlignment = _textBlock.TextAlignment;
    formattedText.Trimming = _textBlock.TextTrimming;
    formattedText.LineHeight = _textBlock.LineHeight;
    formattedText.MaxTextWidth = _textBlock.ActualWidth - _textBlock.Padding.Left - _textBlock.Padding.Right;
    formattedText.MaxTextHeight = _textBlock.ActualHeight - _textBlock.Padding.Top;
    var textPen = new Pen (Stroke, StrokeThickness);
    drawingContext.DrawGeometry(Brushes.Transparent, textPen, formattedText.BuildGeometry(new Point(_textBlock.Padding.Left, _textBlock.Padding.Top)));
}
----------------------------------------

protected override void OnRender (DrawingContext drawingContext) {
    ensureTextBlock ();
    base.OnRender (drawingContext);
    var formattedText = new FormattedText (_textBlock.Text, CultureInfo.CurrentUICulture, _textBlock.FlowDirection, new Typeface (_textBlock.FontFamily, _textBlock.FontStyle, _textBlock.FontWeight, _textBlock.FontStretch), _textBlock.FontSize, Brushes.Black);
    formattedText.TextAlignment = _textBlock.TextAlignment;
    formattedText.Trimming = _textBlock.TextTrimming;
    formattedText.LineHeight = _textBlock.LineHeight;
    formattedText.MaxTextWidth = _textBlock.ActualWidth - _textBlock.Padding.Left - _textBlock.Padding.Right;
    formattedText.MaxTextHeight = _textBlock.ActualHeight - _textBlock.Padding.Top;
    while (formattedText.Extent == double.NegativeInfinity) {
        formattedText.MaxTextHeight ++;
    }
    var _textGeometry = formattedText.BuildGeometry (new Point (_textBlock.Padding.Left, _textBlock.Padding.Top));
    var textPen = new Pen (Stroke, StrokeThickness);
    drawingContext.DrawGeometry (Brushes.Transparent, textPen, _textGeometry);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
821
0
Gpt3D_Clone821_0.cs 1 25
Gpt3D_Clone821_0.cs 26 49
----------------------------------------

protected override void WndProc(ref Message m) {
    if (m.Msg == 0x0203) {
        var start = SelectionStart;
        if (start < 1) {
            start = 1;
        }
        var left = -1;
        var right = Text.Length;
        foreach (var c in delimiterList) {
            var pos = Text.LastIndexOf(c, start - 1);
            if (pos > left) {
                left = pos;
            }
            
            pos = Text.IndexOf(c, start);
            if (pos < right && pos != -1) {
                right = pos;
            }
        }
        SelectionStart = left + 1;
        SelectionLength = right - left - 1;
        return;
    }
    base.WndProc(ref m);
}
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x0203) {
        int start = SelectionStart;
        if (start < 1)
            start = 1;
        int left = - 1;
        int right = Text.Length;
        int pos;
        foreach (char c in delimiterList) {
            pos = Text.LastIndexOf (c, start - 1);
            if (pos > left)
                left = pos;
            pos = Text.IndexOf (c, start);
            if (pos < right && pos != - 1)
                right = pos;
        }
        SelectionStart = left + 1;
        SelectionLength = right - left - 1;
        return;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
0
Gpt3D_Clone825_0.cs 1 18
Gpt3D_Clone825_0.cs 19 36
----------------------------------------

public void sendEmail(MyInternalSystemEmailMessage email){
    var mailMessage = new System.Net.Mail.MailMessage();
    mailMessage.From = new System.Net.Mail.MailAddress(email.FromAddress);
    mailMessage.To.Add(email.ToRecipient);
    mailMessage.ReplyToList.Add(email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments)
    {
        mailMessage.Attachments.Add(attachment);
    }
    var message = Encode(mailMessage.ToString());
    var mailAction = new Microsoft.Exchange.WebServices.Data.EmailMessage(m_exchangeService);
    mailAction.Subject = email.Subject;
    mailAction.Body = new Microsoft.Exchange.WebServices.Data.MessageBody(message);
    mailAction.SendAndSaveCopy();
}
----------------------------------------

public void SendEmail (MyInternalSystemEmailMessage email) {
    var mailMessage = new System.Net.Mail.MailMessage ();
    mailMessage.From = new System.Net.Mail.MailAddress (email.FromAddress);
    mailMessage.To.Add (email.ToRecipients);
    mailMessage.ReplyToList.Add (email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments) {
        mailMessage.Attachments.Add (attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage (mailMessage);
    var gmailMessage = new Google.Apis.Gmail.v1.Data.Message {Raw = Encode (mimeMessage.ToString ())};
    Google.Apis.Gmail.v1.UsersResource.MessagesResource.SendRequest request = service.Users.Messages.Send (gmailMessage, ServiceEmail);
    request.Execute ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
1
Gpt3D_Clone825_1.cs 1 16
Gpt3D_Clone825_1.cs 17 34
----------------------------------------

public void SendEmail (MyInternalSystemEmailMessage email) {
    var mailMessage = new System.Net.Mail.MailMessage ();
    mailMessage.From = new System.Net.Mail.MailAddress (email.FromAddress);
    mailMessage.To.Add (email.ToRecipients);
    mailMessage.ReplyToList.Add (email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments) {
        mailMessage.Attachments.Add (attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage (mailMessage);
    var gmailMessage = new Google.Apis.Gmail.v1.Data.Message {Raw = Encode (mimeMessage.ToString ())};
    Google.Apis.Gmail.v1.UsersResource.MessagesResource.SendRequest request = service.Users.Messages.Send (gmailMessage, ServiceEmail);
    request.Execute ();
}
----------------------------------------

public void SendEmail (MyInternalSystemEmailMessage email) {
    var mailMessage = System.Net.Mail.MailMessage ();
    mailMessage.From = new System.Net.Mail.MailAddress (email.FromAddress);
    mailMessage.To.Add (email.ToRecipients);
    mailMessage.ReplyToList.Add (email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments) {
        mailMessage.Attachments.Add (attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage (mailMessage);
    var mailgunMessage = Mailgun.Message.CreateFromMimeMessage (mimeMessage);
    var mailgun = new Mailgun.MailgunClient (ServiceEmail);
    mailgun.SendMessage (mailgunMessage);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
2
Gpt3D_Clone825_2.cs 1 22
Gpt3D_Clone825_2.cs 23 40
----------------------------------------

public void SendEmail(MyInternalSystemEmailMessage email)
{
    var mailMessage = new System.Net.Mail.MailMessage();
    mailMessage.From = new System.Net.Mail.MailAddress(email.FromAddress);
    foreach (var recipient in email.ToRecipients)
    {
        mailMessage.To.Add(recipient);
    }
    mailMessage.ReplyToList.Add(email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments)
    {
        mailMessage.Attachments.Add(attachment);
    }
    var message = Encode(mailMessage.ToString());
    SendGrid.SendGridMessage myMessage = SendGrid.MailHelper.CreateSingleEmailToMultipleRecipients(
        mailMessage.From, email.ToRecipients, mailMessage.Subject, mailMessage.Body, mailMessage.Body
    );
    var response = await m_sendGridClient.SendEmailAsync(myMessage);  
}
----------------------------------------

public void SendEmail (MyInternalSystemEmailMessage email) {
    var mailMessage = new System.Net.Mail.MailMessage ();
    mailMessage.From = new System.Net.Mail.MailAddress (email.FromAddress);
    mailMessage.To.Add (email.ToRecipients);
    mailMessage.ReplyToList.Add (email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments) {
        mailMessage.Attachments.Add (attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage (mailMessage);
    var gmailMessage = new Google.Apis.Gmail.v1.Data.Message {Raw = Encode (mimeMessage.ToString ())};
    Google.Apis.Gmail.v1.UsersResource.MessagesResource.SendRequest request = service.Users.Messages.Send (gmailMessage, ServiceEmail);
    request.Execute ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
2
Gpt3D_Clone826_2.cs 1 10
Gpt3D_Clone826_2.cs 11 21
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize) {
    string chunk = chunkSize.ToString ();
    string pattern = ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
3
Gpt3D_Clone826_3.cs 1 11
Gpt3D_Clone826_3.cs 12 22
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text)) {
        string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    }
    return chunks;
}
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
827
0
Gpt3D_Clone827_0.cs 1 11
Gpt3D_Clone827_0.cs 12 24
----------------------------------------

void webBrowser1_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    foreach (HtmlElement element in webBrowser1.Document.GetElementsByTagName ("button")) {
        if (element.GetAttribute ("ClassName") == "mybtn") {
            Point controlLoc = this.PointToScreen (webBrowser1.Location);
            controlLoc.X = controlLoc.X + element.OffsetRectangle.Left;
            controlLoc.Y = controlLoc.Y + element.OffsetRectangle.Top;
            Cursor.Position = controlLoc;
            MouseSimulator.ClickRightMouseButton ();
        }
    }
}
----------------------------------------

void webBrowser1_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    foreach (HtmlElement element in webBrowser1.Document.GetElementsByTagName ("button")) {
        if (element.GetAttribute ("ClassName") == "mybtn") {
            Point controlLoc = webBrowser1.PointToScreen (webBrowser1.Location);
            controlLoc.X = controlLoc.X + element.OffsetLeft;
            controlLoc.Y = controlLoc.Y + element.OffSetTop;
            Cursor.Position = controlLoc;
            MouseSimulator.RightClick ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
0
Gpt3D_Clone831_0.cs 1 17
Gpt3D_Clone831_0.cs 18 34
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var list = new List < Control > ();
    list.Add (root);
    int i = 0;
    while (i < list.Count) {
        Control item = list[i];
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            list.Add (child);
        }
        i++;
    }
    return null;
}
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var stack = new Stack < Control > ();
    stack.Push (root);
    while (stack.Count > 0) {
        Control item = stack.Pop ();
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            stack.Push (child);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
1
Gpt3D_Clone831_1.cs 1 17
Gpt3D_Clone831_1.cs 18 34
----------------------------------------

public Control FindControl(Control root, string name) {
    if (root == null)
        throw new ArgumentNullException("root");
    List<Control> list = new List<Control>();
    list.Add(root);
    int i = 0;
    while (list.Count > 0) {
        Control item = list[i];
        if (item.Name == name)
            return item;
        list.RemoveAt(i);
        foreach (Control child in item.Controls) {
            list.Add(child);
        }
    }
    return null;
}
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var stack = new Stack < Control > ();
    stack.Push (root);
    while (stack.Count > 0) {
        Control item = stack.Pop ();
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            stack.Push (child);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
0
Gpt3D_Clone836_0.cs 1 31
Gpt3D_Clone836_0.cs 32 49
----------------------------------------

public static DataTable GetWorksheetAsDataTable(ExcelWorksheet worksheet) 
{ 
    var dt = new DataTable(worksheet.Name); 
    var columns = GetDataColumns(worksheet).ToArray(); 
    dt.Columns.AddRange(columns); 
    var headerOffset = 1; 
    var width = dt.Columns.Count; 
    var depth = GetTableDepth(worksheet, headerOffset); 
    for (var i = 1; i <= depth; i++) 
    { 
        var row = dt.NewRow(); 
        for (var j = 1; j <= width; j++) 
        { 
            var value = worksheet.Cells[i + headerOffset, j].Value; 
            if (value != null) 
            { 
                row[j-1] = value.ToString(); 
            } 
            else 
            { 
                row[j-1] = null; 
            } 
        } 
    
        dt.Rows.Add(row); 
    } 
    return dt; 
} 
----------------------------------------

public static DataTable GetWorksheetAsDataTable (ExcelWorksheet worksheet) {
    var dt = new DataTable (worksheet.Name);
    dt.Columns.AddRange (GetDataColumns (worksheet).ToArray ());
    var headerOffset = 1;
    var width = dt.Columns.Count;
    var depth = GetTableDepth (worksheet, headerOffset);
    for (var i = 1; i <= depth; i ++) {
        var row = dt.NewRow ();
        for (var j = 1; j <= width; j ++) {
            var currentValue = worksheet.Cells [i + headerOffset, j].Value;
            row [j - 1] = currentValue == null ? null : currentValue.ToString ();
        }
        dt.Rows.Add (row);
    }
    return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
0
Gpt3D_Clone838_0.cs 1 14
Gpt3D_Clone838_0.cs 15 30
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (int));
        dt.Columns.Add ("IncrementPct", typeof (int));
        dt.Columns.Add ("Period", typeof (int));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = Int32.Parse(TextBox1.Text);
    NewRow [1] = Int32.Parse(TextBox2.Text);
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
1
Gpt3D_Clone838_1.cs 1 9
Gpt3D_Clone838_1.cs 10 25
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = SetupDataTable ();
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
83
1
Gpt3D_Clone83_1.cs 1 20
Gpt3D_Clone83_1.cs 21 42
----------------------------------------

private void OnSizeChanged (object sender, EventArgs e) {
    _offsetX = 0;
    _offsetY = 0;
    while (HitTest (Width / 2, _offsetY).HitArea != HitArea.PrevMonthDate && HitTest (Width / 2, _offsetY).HitArea != HitArea.Date) {
        _offsetY ++;
    }
    while (HitTest (_offsetX, Height / 2).HitArea != HitArea.Date) {
        _offsetX ++;
    }
    _dayBoxWidth = 0;
    DateTime dt1 = HitTest (Width / 2, _offsetY).Time;
    while (HitTest (Width / 2, _offsetY + _dayBoxHeight).Time == dt1) {
        _dayBoxHeight ++;
    }
    _dayBoxWidth = 0;
    DateTime dt2 = HitTest (_offsetX, Height / 2).Time;
    while (HitTest (_offsetX + _dayBoxWidth, Height / 2).Time == dt2) {
        _dayBoxWidth ++;
    }
}
----------------------------------------

private void OnSizeChanged (object sender, EventArgs e) {
    _offsetX = 0;
    _offsetY = 0;
    while (HitTest (Width / 2, _offsetY).HitArea != HitArea.PrevMonthDate && HitTest (Width / 2, _offsetY).HitArea != HitArea.Date) {
        _offsetY += 2;
    }
    while (HitTest (_offsetX, Height / 2).HitArea != HitArea.Date) {
        _offsetX += 2;
    }
    _dayBoxWidth = 0;
    DateTime dt1 = HitTest (Width / 2, _offsetY).Time;
    while (HitTest (Width / 2, _offsetY + _dayBoxHeight).Time == dt1) {
        _dayBoxHeight += 2;
    }
    _dayBoxWidth = 0;
    DateTime dt2 = HitTest (_offsetX, Height / 2).Time;
    while (HitTest (_offsetX + _dayBoxWidth, Height / 2).Time == dt2) {
        _dayBoxWidth += 2;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
0
Gpt3D_Clone842_0.cs 1 40
Gpt3D_Clone842_0.cs 41 65
----------------------------------------

static void LoadDefaultValues () 
{   
    //Get dictionary
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict == null)
        return;
    
    //Get array
    var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
    if (prefSpecifierArray == null)
        return;
        
    //Iterate
    var numItems = (int)prefSpecifierArray.GetItem<NSNumber> ((NSObject)"count");
    for (int i = 0; i < numItems; i++) 
    {
        //Get item
        var prefItem = prefSpecifierArray.GetItem<NSDictionary> (i);
        
        //Get key
        var key = prefItem [(NSString) "Key"] as NSString;
        if (key == null)
            continue;
        
        //Get value
        var value = prefItem [(NSString) "DefaultValue"];
        if (value == null)
            continue;
        
         //Compare key
        switch (key.ToString ()) 
        {
            case API_PATH_KEY :
                ApiPath = value.ToString ();
                break;
            default :
                break;
        }
    }
}
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
1
Gpt3D_Clone842_1.cs 1 28
Gpt3D_Clone842_1.cs 29 53
----------------------------------------

static void LoadDefaultValues()
{
	var settingsDict = new NSDictionary(NSBundle.MainBundle.PathForResource("Settings.bundle/Root.plist", null));
    if (settingsDict != null)
    {
        var prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null)
        {
            for(int i = 0; i < prefSpecifierArray.Length; i++)
            {
                var prefItem = prefSpecifierArray[i] as NSDictionary;
                if (prefItem != null)
                {
                    var key = prefItem[(NSString)"Key"] as NSString;
                    if (key == null)
                        continue;
                    
                    var value = prefItem[(NSString)"DefaultValue"];
                    if (value == null)
                        continue;
                    
                    if (key.ToString() == API_PATH_KEY)
                        ApiPath = value.ToString();
                }
            }
        }
    }
}
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
1
Gpt3D_Clone844_1.cs 1 14
Gpt3D_Clone844_1.cs 15 33
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.Write ("Start Quarter: ");
    console.WriteLine (new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.Write ("End Quarter: ");
    Console.WriteLine (new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: ");
        console.WriteLine (year);
        year = year.GetNextYear ();
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
0
Gpt3D_Clone849_0.cs 1 11
Gpt3D_Clone849_0.cs 12 25
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        return;
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    Type t = Type.GetType (type);
    XmlSerializer serializer = new XmlSerializer (t);
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
0
Gpt3D_Clone85_0.cs 1 11
Gpt3D_Clone85_0.cs 12 24
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    while (choice != "10")
    {
        choice = getChoice ();
    }
    {
        Console.ReadLine ();
    }
}
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
1
Gpt3D_Clone861_1.cs 1 11
Gpt3D_Clone861_1.cs 12 24
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = row.FindControl ("ProductSelector") as CheckBox;
            if (cb != null && cb.Checked) {
                int productID = int.Parse (GridView1.DataKeys [row.RowIndex].Value.ToString ());
                Response.Write ($"Deleting ProductID {productID}<br />");
            }
        }
    }
}
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
2
Gpt3D_Clone861_2.cs 1 11
Gpt3D_Clone861_2.cs 12 24
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = row.FindControl ("ProductSelector") as CheckBox;
            if (cb != null && cb.Checked) {
                int productID = (int) GridView1.DataKeys [row.RowIndex].Value;
                Response.Write (string.Format ("Deleting ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
0
Gpt3D_Clone863_0.cs 1 15
Gpt3D_Clone863_0.cs 16 29
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = null;
    if (listView1.SelectedItems.Count > 0) {
        select = listView1.SelectedItems[0].Text;
    }
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
2
Gpt3D_Clone864_2.cs 1 11
Gpt3D_Clone864_2.cs 12 23
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, object [] values) {
    var output = new StringBuilder (method.Name + " invoked: ");
    ParameterInfo [] parameters = method.GetParameters ();
    int i;
    for (i = 0; i < parameters.Length; i ++) {
        output.AppendFormat ("{0} = {1}", parameters [i].Name, i >= values.Length ? "<empty>" : values [i]);
        if (i < parameters.Length - 1)
            output.Append (", ");
    }
    return output.ToString ();
}
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, params object [] values) {
    var output = new StringBuilder (method.Name + " invoked: ");
    ParameterInfo [] parameters = method.GetParameters ();
    for (int i = 0; i < parameters.Length; i ++) {
        output.AppendFormat ("{0} = {1}", parameters [i].Name, i >= values.Length ? "<empty>" : values [i]);
        if (i < parameters.Length - 1)
            output.Append (", ");
    }
    return output.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
864
3
Gpt3D_Clone864_3.cs 1 10
Gpt3D_Clone864_3.cs 11 22
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, params object [] values) {
    var output = new StringBuilder (method.Name + " invoked: ");
    ParameterInfo [] parameters = method.GetParameters ();
    for (int i = 0; i < parameters.Length; i ++) {
        output.AppendFormat ("{0} = {1}", parameters [i].Name, i >= values.Length ? "<empty>" : values [i]);
        if (i < parameters.Length - 1)
            output.Append (", ");
    }
    return output.ToString ();
}
----------------------------------------

public static string SummarizeMethodCall (MethodBase method, params object [] values) {
    var output = new StringBuilder (string.Format("{0} invoked: ", method.Name));
    ParameterInfo [] parameters = method.GetParameters ();
    for (int i = 0; i < parameters.Length; i ++) {
        output.AppendFormat ("{0} = {1}", parameters [i].Name, i >= values.Length ? "<empty>" : values [i]);
        if (i != parameters.Length - 1)
            output.Append (", ");
    }
    return output.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
0
Gpt3D_Clone868_0.cs 1 11
Gpt3D_Clone868_0.cs 12 26
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = false;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () != "Y";
        } while (shouldContinue == false);
    DisplayPhones (phones);
}
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
1
Gpt3D_Clone868_1.cs 1 13
Gpt3D_Clone868_1.cs 14 25
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = false;
    while (shouldContinue == false) {
        phones.Add (GetPhone ());
        Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
        shouldContinue = Console.ReadLine ().ToUpper () == "Y";
     } 
     DisplayPhones (phones);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
0
Gpt3D_Clone870_0.cs 1 23
Gpt3D_Clone870_0.cs 24 39
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) 
{
    if (VisualTreeHelper.GetChildrenCount(flowDocumentScrollViewer) == 0)
    {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild(flowDocumentScrollViewer,0);
    if (firstChild == null) 
    {
        return null;
    }
    ScrollViewer scrollViewer = firstChild as ScrollViewer;
    if (scrollViewer != null) 
    {
        return scrollViewer;
    }
    Decorator decorator = firstChild as Decorator;
    if (decorator != null) 
    {
        return decorator.Child as ScrollViewer;
    }
    return null;
}
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
1
Gpt3D_Clone870_1.cs 1 23
Gpt3D_Clone870_1.cs 24 39
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) 
{
    if (VisualTreeHelper.GetChildrenCount(flowDocumentScrollViewer) == 0)
    {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild(flowDocumentScrollViewer,0);
    if (firstChild == null) 
    {
        return null;
    }
    Decorator decorator = VisualTreeHelper.GetChild(firstChild,0) as Decorator;
    if (decorator == null) 
    {
        return null;
    }
    ScrollViewer scrollViewer = decorator.Child as ScrollViewer;
    if (scrollViewer == null)
    {
        return null;
    }
    return scrollViewer;
}
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
872
0
Gpt3D_Clone872_0.cs 1 23
Gpt3D_Clone872_0.cs 24 58
----------------------------------------

static IEnumerable < double > TopNSorted (this IEnumerable < double > source, int n) {
    List < double > top = new List < double > (n + 1);
    using (var e = source.GetEnumerator ())
    {
        for (int i = 0; i < n; i ++) {
            if (e.MoveNext ())
                top.Add (e.Current);
            else
                throw new InvalidOperationException ("Not enough elements");
        }
        top.Sort ();
        while (e.MoveNext ()) {
            double c = e.Current;
            int index = top.BinarySearch (c);
            if (index < 0)
                index = ~ index;
            if (index < n) {
                top.Insert (index, c);
                top.RemoveAt (n);
            }
        }
    } return top;
}
----------------------------------------

static IEnumerable < double > TopNSorted (this IEnumerable < double > source, int n) {
    List < double > top = new List < double > (n + 1);
    using (var e = source.GetEnumerator ())
    {
        for (int i = 0; i < n; i ++) {
            if (e.MoveNext ())
                top.Add (e.Current);
            else
                throw new InvalidOperationException ("Not enough elements");
        }
        top.Sort ();
        while (e.MoveNext ()) {
            double c = e.Current;
            int index = -1;
            for (int i = 0; i < top.Count; i++)
            {
                if (top[i] == c)
                {
                    index = i;
                    break;
                }
            }
            if (index == -1)
            {
                index = top.Count;
            }
            if (index < n) {
                top.Insert (index, c);
                top.RemoveAt (n);
            }
        }
    } return top;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
0
Gpt3D_Clone873_0.cs 1 22
Gpt3D_Clone873_0.cs 23 47
----------------------------------------

private static IEnumerable<IEnumerable<T>> ClumpIterator4<T>(IEnumerable<T> source, int size) {
    Debug.Assert (source != null, "source is null.");
    List<T> items = new List<T>();
    int count = 0;
    foreach (var item in source) {
        count ++;
        items.Add(item);
        if (count == size) {
            yield return items;
            items = new List<T>();
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            var tempItems = items.Take(count).ToList();
            yield return tempItems;
        }
    }
}
----------------------------------------

private static IEnumerable < IEnumerable < T > > ClumpIterator < T > (IEnumerable < T > source, int size) {
    Debug.Assert (source != null, "source is null.");
    T [] items = new T [size];
    int count = 0;
    foreach (var item in source) {
        items [count] = item;
        count ++;
        if (count == size) {
            yield return items;
            items = new T [size];
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            T [] tempItems = new T [count];
            Array.Copy (items, tempItems, count);
            yield return tempItems;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
875
0
Gpt3D_Clone875_0.cs 1 40
Gpt3D_Clone875_0.cs 41 58
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    string subject = Request.Params ["subject"];
    string message = Request.Params ["body-plain"];
    using (SqlConnection cn = new SqlConnection (ConfigurationManager.ConnectionStrings ["YOURCONNECTIONSTRING"].ConnectionString))
    {
        cn.Open ();
        using (SqlCommand cm = cn.CreateCommand ())
        {
            cm.CommandType = CommandType.Text;
            cm.CommandText = "INSERT INTO SMS (subject, message, DateTime) VALUES (@Subject, @Message, @Dateandtime);";
            cm.Parameters.Add ("@Subject", SqlDbType.NVarChar).Value = subject;
            cm.Parameters.Add ("@Message", SqlDbType.NVarChar).Value = message;
            cm.Parameters.Add ("@Dateandtime", SqlDbType.DateTime).Value = DateTime.Now.ToString ();
            SqlDataReader dr = cm.ExecuteReader ();
            dr.Dispose ();
            cm.Dispose ();
        }}}
#====================
#gpt output=============
// Type 3 Clone 
protected void Page_Load (object sender, EventArgs e) {
    string subject = Request.Params ["subject"];
    string message = Request.Params ["body-plain"];
    using (SqlConnection connection = new SqlConnection (ConfigurationManager.ConnectionStrings ["YOURCONNECTIONSTRING"].ConnectionString))
    {            
        SqlCommand command = connection.CreateCommand ();
        command.CommandType = CommandType.Text;
        command.CommandText = "INSERT INTO SMS (subject, message, DateTime) VALUES (@Subject, @Message, @Dateandtime);";
        command.Parameters.Add ("@Subject", SqlDbType.NVarChar).Value = subject;
        command.Parameters.Add ("@Message", SqlDbType.NVarChar).Value = message;
        command.Parameters.Add ("@Dateandtime", SqlDbType.DateTime).Value = DateTime.Now.ToString ();
        connection.Open ();
        SqlDataReader reader = command.ExecuteReader ();
        reader.Dispose ();
        command.Dispose ();
    }
}
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    string subject = Request.Params ["subject"];
    string message = Request.Params ["body-plain"];
    SqlConnection connection = new SqlConnection (ConfigurationManager.ConnectionStrings ["YOURCONNECTIONSTRING"].ConnectionString);
    SqlCommand command = connection.CreateCommand ();
    command.CommandType = CommandType.Text;
    command.CommandText = "INSERT INTO SMS (subject, message, DateTime) VALUES (@Subject, @Message, @Dateandtime);";
    command.Parameters.Add ("@Subject", SqlDbType.NVarChar).Value = subject;
    command.Parameters.Add ("@Message", SqlDbType.NVarChar).Value = message;
    command.Parameters.Add ("@Dateandtime", SqlDbType.DateTime).Value = DateTime.Now.ToString ();
    connection.Open ();
    SqlDataReader reader = command.ExecuteReader ();
    reader.Dispose ();
    command.Dispose ();
    connection.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
0
Gpt3D_Clone878_0.cs 1 14
Gpt3D_Clone878_0.cs 15 31
----------------------------------------

static int[,] GetLCSDifferenceMatrix<T>(Collection<T> baseline, Collection<T> revision) {
    int[,] matrix = new int[baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex++) {
            if (baseline[baselineIndex].Equals(revision[revisionIndex])) {
                matrix[baselineIndex + 1, revisionIndex + 1] = Math.Max(matrix[baselineIndex + 1, revisionIndex], matrix[baselineIndex, revisionIndex + 1]) + 1;
            }
            else {
                matrix[baselineIndex + 1, revisionIndex + 1] = Math.Max(matrix[baselineIndex + 1, revisionIndex], matrix[baselineIndex, revisionIndex + 1]);
            }
        }
    }
    return matrix;
}
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
0
Gpt3D_Clone879_0.cs 1 13
Gpt3D_Clone879_0.cs 14 27
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails != null) {
        expandDetails.InvokeMember ("click");
        do {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        } while (expandDetails != null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
1
Gpt3D_Clone879_1.cs 1 11
Gpt3D_Clone879_1.cs 12 26
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails != null) {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
1
Gpt3D_Clone880_1.cs 1 8
Gpt3D_Clone880_1.cs 9 21
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            HandleWindowPosChanging (ref m);
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
2
Gpt3D_Clone880_2.cs 1 11
Gpt3D_Clone880_2.cs 12 21
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46: 
            HandleWindowPosChanging(ref m);
            break;
    }
    base.WndProc(ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
0
Gpt3D_Clone882_0.cs 1 34
Gpt3D_Clone882_0.cs 35 75
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                if (paraItem != null) {
                    Blocker.Blocks.Add (paraItem);
                }
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            paraIsle.Inlines.Add (new Run("     " + j.Isle));
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            paraItem.Inlines.Add (new Run("        [] " + j.Item));
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            paraItem.Inlines.Add (new Run(s + "[] " + j.Item));
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
885
0
Gpt3D_Clone885_0.cs 1 17
Gpt3D_Clone885_0.cs 18 38
----------------------------------------

private static void ComboBox_SelectionChanged (object sender, SelectionChangedEventArgs e) {
    var comboBox = sender as ComboBox;
    if (comboBox != null && ! (bool) comboBox.Tag) {
        var bndExp = comboBox.GetBindingExpression (Selector.SelectedValueProperty);
        var currentItem = (KeyValuePair < int, int >) comboBox.SelectedItem;
        if (currentItem.Key >= 1 && currentItem.Key <= 4 && bndExp != null) {
            var dr = MessageBox.Show ("Want to select a Key of between 1 and 4?", "Please Confirm.", MessageBoxButton.YesNo, MessageBoxImage.Warning);
            if (dr == MessageBoxResult.Yes) {
                bndExp.UpdateSource ();
            } else {
                comboBox.Tag = true;
                bndExp.UpdateTarget ();
                comboBox.Tag = false;
            }
        }
    }
}
----------------------------------------

private static void ComboBox_SelectionChanged (object sender, SelectionChangedEventArgs e) {
    var comboBox = sender as ComboBox;
    if (comboBox != null && ! (bool) comboBox.Tag) {
        var bndExp = comboBox.GetBindingExpression (Selector.SelectedValueProperty);
        var currentItem = (KeyValuePair < int, int >) comboBox.SelectedItem;
        if (currentItem.Key >= 1 && currentItem.Key <= 4 && bndExp != null) {
            var selectDialog = new SelectDialog();
            selectDialog.IsSubmitted += delegate{
               bndExp.UpdateSource();
            };
            selectDialog.Show();
            if (!selectDialog.Submitted) {
                comboBox.Tag = true;
                bndExp.UpdateTarget ();
                comboBox.Tag = false;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
885
1
Gpt3D_Clone885_1.cs 1 19
Gpt3D_Clone885_1.cs 20 38
----------------------------------------

private static void ComboBox_SelectionChanged (object sender, SelectionChangedEventArgs e) {
    var comboBox = sender as ComboBox;
    if (comboBox != null && ! (bool) comboBox.Tag) {
        var bndExp = comboBox.GetBindingExpression (Selector.SelectedValueProperty);
        var currentItem = (KeyValuePair < int, int >) comboBox.SelectedItem;
        if (currentItem.Key >= 1 && currentItem.Key <= 4 && bndExp != null) {
            var confirmChoiceDialog = new ConfirmChoiceDialog();
            confirmChoiceDialog.IsSubmitted += delegate{
               bndExp.UpdateSource();
            };
            confirmChoiceDialog.Show();
            if (!confirmChoiceDialog.Submitted) {
                comboBox.Tag = true;
                bndExp.UpdateTarget ();
                comboBox.Tag = false;
            }
        }
    }
}
----------------------------------------

private static void ComboBox_SelectionChanged (object sender, SelectionChangedEventArgs e) {
    var comboBox = sender as ComboBox;
    if (comboBox != null && ! (bool) comboBox.Tag) {
        var bndExp = comboBox.GetBindingExpression (Selector.SelectedValueProperty);
        var currentItem = (KeyValuePair < int, int >) comboBox.SelectedItem;
        if (currentItem.Key >= 1 && currentItem.Key <= 4 && bndExp != null) {
            var dr = MessageBox.Show ("Want to select a Key of between 1 and 4?", "Please Confirm.", MessageBoxButton.YesNo, MessageBoxImage.Warning);
            if (dr == MessageBoxResult.Yes) {
                bndExp.UpdateSource ();
            } else {
                comboBox.Tag = true;
                bndExp.UpdateTarget ();
                comboBox.Tag = false;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
1
Gpt3D_Clone888_1.cs 1 14
Gpt3D_Clone888_1.cs 15 38
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (Print);
    alpha.ForEach (CheckAndRemove);
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (Print);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
0
Gpt3D_Clone889_0.cs 1 16
Gpt3D_Clone889_0.cs 17 33
----------------------------------------

public static int convertNum (String n1, String n2) {
    int result;
    int num1, num2;
    try {
        num1 = Int32.Parse (n1); 
        num2 = Int32.Parse (n2);
        result = sum (num1, num2);
    }
    catch (FormatException) {
        MessageBox.Show ("Input only numbers.");
        result = 0;
    }
    return result;
}
----------------------------------------

public static int convertNum (String n1, String n2) {
    int num1 = 0;
    int num2 = 0;
    int result = 0;
    try {
        num1 = Int32.Parse (n1);
        num2 = Int32.Parse (n2);
        result = sum (num1, num2);
        return result;
    }
    catch (FormatException) {
        MessageBox.Show ("Input only numbers.");
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
1
Gpt3D_Clone889_1.cs 1 12
Gpt3D_Clone889_1.cs 13 29
----------------------------------------

public static int convertNum (String n1, String n2) {
    int result = 0;
    try {
        result = sum (Int32.Parse (n1), Int32.Parse (n2));
        return result;
    }
    catch (FormatException) {
        MessageBox.Show ("Input only numbers.");
        return result;
    }
}
----------------------------------------

public static int convertNum (String n1, String n2) {
    int num1 = 0;
    int num2 = 0;
    int result = 0;
    try {
        num1 = Int32.Parse (n1);
        num2 = Int32.Parse (n2);
        result = sum (num1, num2);
        return result;
    }
    catch (FormatException) {
        MessageBox.Show ("Input only numbers.");
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
0
Gpt3D_Clone88_0.cs 1 12
Gpt3D_Clone88_0.cs 13 23
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    int i = 0;
    while (i < checkList.Count) {
        if (checklist [i].RegNumber == conRegnumber)
            return 1;   
        i++;
    }
    return 0;
}
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
1
Gpt3D_Clone88_1.cs 1 9
Gpt3D_Clone88_1.cs 10 23
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    int i = 0;
    while (i < checkList.Count) {
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
        i++;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
2
Gpt3D_Clone88_2.cs 1 10
Gpt3D_Clone88_2.cs 11 21
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List<OtherCompany> checklist = getCompanyDetails();
    int count = checklist.Count;
    if (count == 0 || count == 1)
        return 2;
    for (int i = 0; i < count - 1; i++)
        if (checklist[i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
3
Gpt3D_Clone88_3.cs 1 10
Gpt3D_Clone88_3.cs 11 21
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0 || checklist == null)
        return 2;
    foreach (OtherCompany oc in checkList){
        if (oc.RegNumber == conRegnumber)
            return 1;
    }
    return 0;
}
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
892
1
Gpt3D_Clone892_1.cs 1 12
Gpt3D_Clone892_1.cs 13 26
----------------------------------------

protected void btnNext_Click1 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataTable dt = new DataTable ();
    if (txtNextStep.Tag == null)
        dt = eobj.GetTicketFirstUpdate (txtSupportRef.Text);
    else
        dt = eobj.GetNextTicketUpdate (txtSupportRef.Text, (string) txtNextStep.Tag);
    if (dt.Rows.Count != 0) {
        txtNextStep.Text = dt.Rows [0] ["NextStep"].ToString ();
        txtNextStep.Tag = dt.Rows [0] ["Id"].ToString ();
    }
}
----------------------------------------

protected void btnNext_Click2 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataRow dr = new DataRow ();
    if (txtNextStep.Tag == null)
        dr = eobj.GetTicketFirstUpdate (txtSupportRef.Text);
    else
        dr = eobj.GetNextTicketUpdate (txtSupportRef.Text, (string) txtNextStep.Tag);
    if (dr != null) {
        txtNextStep.Text = dr ["NextStep"].ToString ();
        txtNextStep.Tag = dr ["Id"].ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
0
Gpt3D_Clone896_0.cs 1 26
Gpt3D_Clone896_0.cs 27 49
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        char c;
        switch (whichType) {
            case 0 :
                c = (char) (97 + r.Next (0, 26));
                break;
            case 1 :
                c = (char) (65 + r.Next (0, 26));
                break;
            case 2 :
                c = (char) (48 + r.Next (0, 10));
                break;
            default:
                c = '\0';
                break;
        }
        sb.Append(c);
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
1
Gpt3D_Clone896_1.cs 1 23
Gpt3D_Clone896_1.cs 24 46
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    string result = "";
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        char c;
        switch (whichType) {
            case 0 :
                c = (char) (97 + r.Next (0, 26));
                break;
            case 1 :
                c = (char) (65 + r.Next (0, 26));
                break;
            case 2 :
                c = (char) (48 + r.Next (0, 10));
                break;
        }
        result += c;
    }
    Console.WriteLine (result);
    Console.ReadLine ();
}
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
2
Gpt3D_Clone896_2.cs 1 21
Gpt3D_Clone896_2.cs 22 42
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        if (whichType == 0) {
            sb.Append ((char) (97 + r.Next (0, 26)));
        }
        else if (whichType == 1) {
            sb.Append ((char) (65 + r.Next (0, 26)));
        }
        else if (whichType == 2) {
            sb.Append ((char) (48 + r.Next (0, 10)));
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
899
0
Gpt3D_Clone899_0.cs 1 14
Gpt3D_Clone899_0.cs 15 28
----------------------------------------

public static T ThrowIfNull < T > (this T target, params Expression < Func < T, object > > [] exprs) {
    foreach (var e in exprs) {
        var exp = e.Body as MemberExpression;
        if (exp == null) {
            throw new ArgumentException ("Argument 'expr' must be of the form x=>x.variableName");
        }
        var name = exp.Member.Name;
        var compiledExp = e.Compile ();
        object val = compiledExp (target);
        if (val == null)
            throw new ArgumentNullException (name, "Parameter [" + name + "] can not be null");
    }
    return target;
}
----------------------------------------

public static T ThrowIfNull < T > (this T target, params Expression < Func < T, object > > [] exprs) {
    foreach (var e in exprs) {
        var exp = e.Body as MemberExpression;
        if (exp == null) {
            throw new ArgumentException ("Argument 'expr' must be of the form x=>x.variableName");
        }
        var name = exp.Member.Name;
        if (e.Compile () (target) == null)
            throw new ArgumentNullException (name, "Parameter [" + name + "] can not be null");
    }
    return target;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
899
1
Gpt3D_Clone899_1.cs 1 13
Gpt3D_Clone899_1.cs 14 27
----------------------------------------

public static T ThrowIfNull < T > (this T target, params Expression < Func < T, object > > [] exprs) {
    foreach (var e in exprs) {
        MemberExpression memberExp = e.Body as MemberExpression;
        if (memberExp is null) {
            throw new ArgumentException ("Argument 'expr' must be of the form x=>x.variableName");
        }
        string name = memberExp.Member.Name;
        if (e.Compile () (target) == null) {
            throw new ArgumentNullException (name, "Parameter [" + name + "] can not be null");
        }
    }
    return target;
}
----------------------------------------

public static T ThrowIfNull < T > (this T target, params Expression < Func < T, object > > [] exprs) {
    foreach (var e in exprs) {
        var exp = e.Body as MemberExpression;
        if (exp == null) {
            throw new ArgumentException ("Argument 'expr' must be of the form x=>x.variableName");
        }
        var name = exp.Member.Name;
        if (e.Compile () (target) == null)
            throw new ArgumentNullException (name, "Parameter [" + name + "] can not be null");
    }
    return target;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
0
Gpt3D_Clone89_0.cs 1 11
Gpt3D_Clone89_0.cs 12 22
----------------------------------------

protected override void OnStartup(StartupEventArgs e)
{
    string applicationName = "MyAppName";
    bool newlyCreated;
    Mutex oneInstanceMutex = new Mutex(true, applicationName, out newlyCreated);
    if (newlyCreated == false)
    {
        Application.Current.Shutdown();
    }
    base.OnStartup(e);
}
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
0
Gpt3D_Clone905_0.cs 1 24
Gpt3D_Clone905_0.cs 25 53
----------------------------------------

public static bool IsWindowOnAnyScreen(Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle(new WindowInteropHelper(Window).Handle);
    bool leftSideTest = false, topSideTest = false, bottomSideTest = false, rightSideTest = false;
    leftSideTest = (Window.Left >= Screen.WorkingArea.Left);
    topSideTest = (Window.Top >= Screen.WorkingArea.Top);
    bottomSideTest = ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom);
    rightSideTest = ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right);
    if (leftSideTest && topSideTest && bottomSideTest && rightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (!leftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (!topSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (!bottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (!rightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
0
Gpt3D_Clone908_0.cs 1 14
Gpt3D_Clone908_0.cs 15 29
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    XmlReaderSettings settings = new XmlReaderSettings ();
    settings.ConformanceLevel = ConformanceLevel.Fragment;
    using (XmlReader reader = XmlReader.Create (st, settings)) {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
0
Gpt3D_Clone909_0.cs 1 8
Gpt3D_Clone909_0.cs 9 20
----------------------------------------

static void Main (String [] args) {
    checked {
        Int16 [] result = GetShorts (Int32.MaxValue);
        Console.WriteLine ("Senior Int16: {0:x}", result [1]);
        Console.WriteLine ("Junior Int16: {0:x}", result [0]);
        Console.ReadKey ();
    }
}
----------------------------------------

static void Main (String [] args) {
    checked {
        Int32 original = Int32.MaxValue;
        Int16 [] result = GetShorts (original);
        Console.WriteLine ("Original int: {0:x}", original);
        Console.WriteLine ("Senior Int16: {0:x}", result [1]);
        Console.WriteLine ("Junior Int16: {0:x}", result [0]);
        Console.ReadKey ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
1
Gpt3D_Clone909_1.cs 1 8
Gpt3D_Clone909_1.cs 9 20
----------------------------------------

static void Main (String [] args) {
    checked {
        Int32 original = Int32.MaxValue;
        Int16 [] result = GetShorts (original);
        Console.WriteLine ("Original int: {0:x}", original);
        Console.ReadKey ();
    }
}
----------------------------------------

static void Main (String [] args) {
    checked {
        Int32 original = Int32.MaxValue;
        Int16 [] result = GetShorts (original);
        Console.WriteLine ("Original int: {0:x}", original);
        Console.WriteLine ("Senior Int16: {0:x}", result [1]);
        Console.WriteLine ("Junior Int16: {0:x}", result [0]);
        Console.ReadKey ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
90
0
Gpt3D_Clone90_0.cs 1 9
Gpt3D_Clone90_0.cs 10 20
----------------------------------------

static void Main (string [] args) {
    var l = new List < List < double > > () {new List < Double > () {0, 16.0000, 15.0000, 0, 2.7217, 3.7217}, new List < Double > () {0, 0, 15.0000, 15.0000, 5.6904, 5.6904}};
    int i = 1;
    var result = from sublist in l
        select new {min = sublist.Min (), max = sublist.Max (), index = i ++};
    foreach (var r in result)
        Console.WriteLine (String.Format ("Index: {0} Min: {1} Max: {2}", r.index, r.min, r.max));
    Console.ReadKey ();
}
----------------------------------------

static void Main(string[] args, List<List<double>> l, int i)
{
    var result = from sublist in l
        select new {min = sublist.Min (), max = sublist.Max (), index = i ++};
    foreach (var r in result)
        Console.WriteLine (String.Format ("Index: {0} Min: {1} Max: {2}", r.index, r.min, r.max));
    
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
1
Gpt3D_Clone911_1.cs 1 12
Gpt3D_Clone911_1.cs 13 26
----------------------------------------

static int Main (string [] args) {
    try {
        int testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
    }
    catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        return 1;
    }
    Console.WriteLine ("test passed.");
    return 0;
}
----------------------------------------

static int Main(string[] args) {
    int testcase;
    try {
        testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
        Console.WriteLine ("test passed.");
        return 0;
    } catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        return 1;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
0
Gpt3D_Clone914_0.cs 1 16
Gpt3D_Clone914_0.cs 17 33
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    int length = text.Length;
    for (int i = 0; i < length; i ++) {
        result += text [i];
        if (i == length - 1)
            continue;
        int shouldBeInserted = (int) (inserts * (i + 1) / (length - 1.0));
        int insertNow = shouldBeInserted - inserted;
        for (int j = 0; j < insertNow; j ++)
            result += filler;
        inserted += insertNow;
    }
    return result;
}
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
1
Gpt3D_Clone914_1.cs 1 16
Gpt3D_Clone914_1.cs 17 33
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    int length = text.Length;
    for (int i = 0; i < length; i ++) {
        result += text [i];
        if (i == length - 1)
            continue;
        int shouldInsert = (int) (inserts * (i + 1) / (length - 1.0));
        int addedNow = shouldInsert - inserted;
        for (int j = 0; j < addedNow; j ++)
            result += filler;
        inserted += addedNow;
    }
    return result;
}
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
0
Gpt3D_Clone917_0.cs 1 13
Gpt3D_Clone917_0.cs 14 28
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < float > ();
    }
    if (token.Type == JTokenType.String) {
        return float.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (float ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
1
Gpt3D_Clone917_1.cs 1 13
Gpt3D_Clone917_1.cs 14 28
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < double > ();
    }
    if (token.Type == JTokenType.String) {
        return double.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (double ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
1
Gpt3D_Clone921_1.cs 1 11
Gpt3D_Clone921_1.cs 12 24
----------------------------------------

public static IEnumerable < T >  EnumToList < T >() where T: struct {
	Type enumType = typeof (T).BaseType; 
	if (!enumType.Equals(typeof (Enum)))
		throw new ArgumentException("T must be of type System.Enum"); 
	Array enumValArray = Enum.GetValues(enumType);
	List < T > enumValList = new List < T > (enumValArray.Length);
	foreach (T val in enumValArray) {
		enumValList.Add(val.ToString());
	}
	return enumValList; 
}
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
2
Gpt3D_Clone921_2.cs 1 11
Gpt3D_Clone921_2.cs 12 24
----------------------------------------

public static IEnumerable < T > EnumToList4 < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    List < T > enumValList = new List < T > ();
    foreach (object val in Enum.GetValues (enumType)) {
        enumValList.Add ((T)Enum.ToObject (enumType, val));
    }
    return enumValList;
}
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
923
0
Gpt3D_Clone923_0.cs 1 13
Gpt3D_Clone923_0.cs 14 32
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    existingValue = existingValue ?? Activator.CreateInstance (objectType, true);
    var jObject = JObject.Load (reader);
    var properties = objectType.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
    foreach (var property in properties) {
        var jToken = jObject [property.Name];
        if (jToken != null) {
            var value = jToken.ToObject (property.PropertyType);
            property.SetValue (existingValue, value, null);
        }
    }
    return existingValue;
}
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    existingValue = existingValue ?? Activator.CreateInstance (objectType, true);
    var jObject = JObject.Load (reader);
    var properties = objectType.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
    foreach (var property in properties) {
        var jToken = jObject [property.Name];
        if (jToken == null) {
            _nullproperties.Add (property);
            continue;
        }
        var value = jToken.ToObject (property.PropertyType);
        if (ReportDefinedNullTokens && value == null)
            _nullproperties.Add (property);
        property.SetValue (existingValue, value, null);
    }
    return existingValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
924
0
Gpt3D_Clone924_0.cs 1 13
Gpt3D_Clone924_0.cs 14 28
----------------------------------------

public static IEnumerable < IList < T > > ChunkOn < T > (this IEnumerable < T > source, Func < T, bool > startChunk) {
    List<T> list = new List<T>();
    foreach (var item in source) {
        if (startChunk(item) && list.Any()) {
            yield return list;
            list.Clear();
        }
        list.Add(item);
    }
    if (list.Any()) {
        yield return list;
    }
}
----------------------------------------

public static IEnumerable < IList < T > > ChunkOn < T > (this IEnumerable < T > source, Func < T, bool > startChunk) {
    List < T > list = new List < T > ();
    foreach (var item in source) {
        if (startChunk (item) && list.Count > 0) {
            yield return list;
            list = new List < T > ();
        }
        list.Add (item);
    }
    if (list.Count > 0) {
        yield return list;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
0
Gpt3D_Clone927_0.cs 1 31
Gpt3D_Clone927_0.cs 32 63
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (Whitelist.ContainsKey (node.Name)) {
            if (node.HasAttributes) {
                for (int i = node.Attributes.Count - 1; i >= 0; i--) {
                    HtmlAttribute currentAttribute = node.Attributes [i];
                    string [] allowedAttributes = Whitelist [node.Name];
                    if (allowedAttributes != null) {
                        if (!allowedAttributes.Contains (currentAttribute.Name)) {
                            node.Attributes.Remove (currentAttribute);
                        }
                    } else {
                        node.Attributes.Remove (currentAttribute);
                    }
                }
            }
        } else {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
1
Gpt3D_Clone927_1.cs 1 27
Gpt3D_Clone927_1.cs 28 59
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (Whitelist.ContainsKey (node.Name)) {
            if (node.HasAttributes) {
                for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                    HtmlAttribute currentAttribute = node.Attributes [i];
                    string [] allowedAttributes = Whitelist [node.Name];
                    if (allowedAttributes != null) {
                        if (! allowedAttributes.Contains (currentAttribute.Name)) {
                            node.Attributes.Remove (currentAttribute);
                        }
                    } else {
                        node.Attributes.Remove (currentAttribute);
                    }
                }
            }
        } else {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
2
Gpt3D_Clone927_2.cs 1 30
Gpt3D_Clone927_2.cs 31 59
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (Whitelist.ContainsKey(node.Name)) {
            if (node.HasAttributes) {
                for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                    HtmlAttribute currentAttribute = node.Attributes [i];
                    string [] allowedAttributes = Whitelist[node.Name];
                    if (allowedAttributes != null) {
                        if (!allowedAttributes.Contains (currentAttribute.Name)) {
                            node.Attributes.Remove (currentAttribute);
                        }
                    } else {
                        node.Attributes.Remove (currentAttribute);
                    }
                }
            }
        } else {
            if (!DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
3
Gpt3D_Clone927_3.cs 1 23
Gpt3D_Clone927_3.cs 24 55
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
        } else {
            if (node.HasAttributes) {
                for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                    HtmlAttribute currentAttribute = node.Attributes [i];
                    string [] allowedAttributes = Whitelist [node.Name];
                    if (allowedAttributes != null && ! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
0
Gpt3D_Clone928_0.cs 1 25
Gpt3D_Clone928_0.cs 26 51
----------------------------------------

private static string RemoveExcessPeriods(string text)
{
    if (string.IsNullOrEmpty(text)) 
        return string.Empty;
    if (!text.Contains("..")) 
        return text;
    string extension = Path.GetExtension(text);
    string fileName = Path.GetFileNameWithoutExtension(text);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = false;
    bool anyPeriods = false; 
    StringBuilder result = new StringBuilder(text.Length);
    for (int index = 0; index < fileName.Length; index++)
    {
        thisCharacterIsPeriod = fileName.Length == index + 1 || fileName[index + 1] == '.';
        anyPeriods |= thisCharacterIsPeriod;
        if (!thisCharacterIsPeriod)
            result.Append(fileName[index]);
        else if (thisCharacterIsPeriod && !lastCharacterWasPeriod && anyPeriods)
            result.Append('.');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
    }
return result.ToString() + extension;
}
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
0
Gpt3D_Clone92_0.cs 1 18
Gpt3D_Clone92_0.cs 19 37
----------------------------------------

static void Main (string [] args) {
    int n;
    printf ("Enter A Number :");
    scanf ("%d", &n);
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            printf ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        printf ("The number is divisible by 5 but not by 3");
    } else {
        printf ("\nThis Number is Not Divisible by 3 and 5!");
    }
    getchar ();
}
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
1
Gpt3D_Clone92_1.cs 1 16
Gpt3D_Clone92_1.cs 17 35
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0 && n % 5 == 0) {
        Console.WriteLine ("This Number is Divisible by 3 and 5!");
    } else if (n % 3 != 0 && n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else if (n % 3 == 0 && n % 5 != 0) {
        printf ("\nThe number is divisible by 3 but not by 5");
    }
    else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
0
Gpt3D_Clone930_0.cs 1 37
Gpt3D_Clone930_0.cs 38 66
----------------------------------------

public void MethodA () {
    Semaphore semaphore = new Semaphore(1, 1);
    try
    {
        semaphore.WaitOne();
        lock(key)
        {
            while (lockedType != this.GetType())
            {
                if (lockedType == null)
                {
                    lockedType = this.GetType();
                    signal.Set();
                }
                else if (lockedType != this.GetType())
                {
                    signal.WaitOne();
                }
            }
            Interlocked.Increment(ref threadsInMethodA);
        }
        MethodAImplementation();
    }
    finally
    {
        lock(key)
        {
            Thread.MemoryBarrier();
            if (Interlocked.Decrement(ref threadsInMethodA) == 0)
            {
                lockedType = null;
                signal.Reset();
            }
            semaphore.Release();
        }
    }
}
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
0
Gpt3D_Clone933_0.cs 1 11
Gpt3D_Clone933_0.cs 12 23
----------------------------------------

[Test]
public void test3 () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (50));
    }
    Console.WriteLine ();
    foreach (int i in test) {
        Console.WriteLine ("Result: " + i);
    }
}
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
1
Gpt3D_Clone933_1.cs 1 10
Gpt3D_Clone933_1.cs 11 22
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

[Test]
public void test_v2 () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    test.ForEach (i => Console.WriteLine (i));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
0
Gpt3D_Clone935_0.cs 1 23
Gpt3D_Clone935_0.cs 24 52
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = true;
    foreach (var pair in dict) {
        if (dict2.ContainsKey (pair.Key)){
            if (dict2[pair.Key] != pair.Value) {
                equal = false;
                break;
            }
        } else{
            equal = false;
            break;
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
1
Gpt3D_Clone935_1.cs 1 22
Gpt3D_Clone935_1.cs 23 51
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = true;
    foreach (var pair in dict) {
        if (!dict2.ContainsKey (pair.Key)){
            equal = false;
            break;
        }
        if (dict2[pair.Key] != pair.Value) {
            equal = false;
            break;
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
0
Gpt3D_Clone938_0.cs 1 16
Gpt3D_Clone938_0.cs 17 33
----------------------------------------

public int Compare3 (string s1, string s2) {
    int s1Int, s2Int;
    if (int.TryParse (s1, out s1Int) && int.TryParse (s2, out s2Int)) {
        if (s1Int > s2Int)
            return 1;
        if (s1Int < s2Int)
            return - 1;
        if (s1Int == s2Int)
            return 0;
    }
    if (IsNumeric (s1) && ! IsNumeric (s2))
        return 1;
    if (! IsNumeric (s1) && IsNumeric (s2))
        return - 1;
    return string.Compare (s1, s2, false);
}
----------------------------------------

public int Compare (string s1, string s2) {
    if (IsNumeric (s1) && IsNumeric (s2)) {
        if (Convert.ToInt32 (s1) > Convert.ToInt32 (s2))
            return 1;
        if (Convert.ToInt32 (s1) < Convert.ToInt32 (s2))
            return - 1;
        if (Convert.ToInt32 (s1) == Convert.ToInt32 (s2))
            return 0;
    }
    if (IsNumeric (s1) && ! IsNumeric (s2))
        return 1;
    if (! IsNumeric (s1) && IsNumeric (s2))
        return - 1;
    return string.Compare (s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
1
Gpt3D_Clone945_1.cs 1 25
Gpt3D_Clone945_1.cs 26 52
----------------------------------------

public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) {
        if (ctrl is TextBox)
            ((TextBox) ctrl).Enabled = false;
        if (ctrl is Button)
            ((Button) ctrl).Enabled = false;
        else if (ctrl is DropDownList)
            ((DropDownList) ctrl).Enabled = false;
        else if (ctrl is CheckBox)
            ((CheckBox) ctrl).Enabled = false;
        else if (ctrl is RadioButton)
            ((RadioButton) ctrl).Enabled = false;
        else if (ctrl is HtmlInputButton)
            ((HtmlInputButton) ctrl).Disabled = true;
        else if (ctrl is HtmlInputText)
            ((HtmlInputText) ctrl).Disabled = true;
        else if (ctrl is HtmlSelect)
            ((HtmlSelect) ctrl).Disabled = true;
        else if (ctrl is HtmlInputCheckBox)
            ((HtmlInputCheckBox) ctrl).Disabled = true;
        else if (ctrl is HtmlInputRadioButton)
            ((HtmlInputRadioButton) ctrl).Disabled = true;
        DisableForm (ctrl.Controls);
    }
}
----------------------------------------

public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) { 
        if (ctrl is TextBox)
            ctrl.Enabled = false;
        else if (ctrl is Button)
            ctrl.Enabled = false;
        else if (ctrl is DropDownList)
            ctrl.Enabled = false;
        else if (ctrl is CheckBox)
            ctrl.Enabled = false;
        else if (ctrl is RadioButton)
            ctrl.Enabled = false;
        else if (ctrl is HtmlInputButton)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputText)
            ctrl.Disabled = true;
        else if (ctrl is HtmlSelect)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputCheckBox)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputRadioButton)
            ctrl.Disabled = true;
        DisableForm (ctrl.Controls);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
0
Gpt3D_Clone94_0.cs 1 13
Gpt3D_Clone94_0.cs 14 27
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer(typeof(RecaptchaValidationResult));
            MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded")));
            result = (RecaptchaValidationResult) serializer.ReadObject(ms);
        }} return result;
}
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
3
Gpt3D_Clone950_3.cs 1 8
Gpt3D_Clone950_3.cs 9 20
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        TextBox txtBox = this.RetrieveControl ("txt" + TextBoxes [i]) as TextBox;
        if (txtBox != null) {
            txtBox.Text = "";
        }
    }
}
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
951
0
Gpt3D_Clone951_0.cs 1 17
Gpt3D_Clone951_0.cs 18 38
----------------------------------------

private static void SqlCommandPrepareEx (string connectionString) {
    using (SqlConnection connection = new SqlConnection (connectionString))
    {
        connection.Open ();
        SqlCommand command = new SqlCommand (null, connection);
        command.CommandText = "INSERT INTO Region (RegionID,RegionDescription) " + "VALUES (@id, @desc)";
        command.Parameters.Add (new SqlParameter ("@id", SqlDbType.Int, 0));
        command.Parameters.Add (new SqlParameter ("@desc", SqlDbType.Text, 100));
        command.Prepare ();
        command.Parameters [0].Value = 20;
        command.Parameters [1].Value = "First Region";
        command.ExecuteNonQuery ();
        command.Parameters [0].Value = 21;
        command.Parameters [1].Value = "Second Region";
        command.ExecuteNonQuery ();
    }
}
----------------------------------------

private static void SqlCommandPrepareEx (string connectionString) {
    using (SqlConnection connection = new SqlConnection (connectionString))
    {
        connection.Open ();
        SqlCommand command = new SqlCommand (null, connection);
        command.CommandText = "INSERT INTO Region (RegionID, RegionDescription) " + "VALUES (@id, @desc)";
        SqlParameter idParam = new SqlParameter ("@id", SqlDbType.Int, 0);
        SqlParameter descParam = new SqlParameter ("@desc", SqlDbType.Text, 100);
        idParam.Value = 20;
        descParam.Value = "First Region";
        command.Parameters.Add (idParam);
        command.Parameters.Add (descParam);
        command.Prepare ();
        command.ExecuteNonQuery ();
        command.Parameters [0].Value = 21;
        command.Parameters [1].Value = "Second Region";
        command.ExecuteNonQuery ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
0
Gpt3D_Clone953_0.cs 1 13
Gpt3D_Clone953_0.cs 14 26
----------------------------------------

private void btnCheck_Click (object sender, EventArgs e) {
    int userGuess;
    if (!Int32.TryParse (txtGuess.Text, out userGuess))
        userGuess = 8;
    guessCount ++;
    if (userGuess == target) {
        this.BackColor = System.Drawing.Color.DarkOliveGreen;
        lblHowMuch.Text = string.Format ("You guessed the right number it took you {0} guesses", guessCount);
    } else {
        this.BackColor = userGuess < target ? System.Drawing.Color.Yellow : System.Drawing.Color.Red;
    }
    lblCount.Text = string.Format ("You made {0} Guesses", guessCount);
}
----------------------------------------

private void btnCheck_Click (object sender, EventArgs e) {
    int userGuess = int.Parse (txtGuess.Text);
    guessCount ++;
    if (userGuess == target) {
        this.BackColor = System.Drawing.Color.DarkOliveGreen;
        lblHowMuch.Text = String.Format ("You guessed the right number it took you {0} guesses", guessCount);
    } else {
        this.BackColor = userGuess < target ? System.Drawing.Color.Yellow : System.Drawing.Color.Red;
    }
    lblCount.Text = String.Format ("You made {0} Guesses", guessCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
1
Gpt3D_Clone953_1.cs 1 11
Gpt3D_Clone953_1.cs 12 24
----------------------------------------

private void btnCheck_Click (object sender, EventArgs e) {
    int userGuess = int.Parse (txtGuess.Text);
    guessCount ++;
    if (userGuess == target) {
        this.BackColor = System.Drawing.Color.DarkOliveGreen;
        lblHowMuch.Text = String.Format ("You guessed the right number it took you {0} guesses", guessCount);
    } else {
        this.BackColor = userGuess < target ? System.Drawing.Color.Yellow : System.Drawing.Color.Red;
    }
    lblCount.Text = String.Format ("You made {0} Guesses", guessCount);
}
----------------------------------------

private void btnCheck_Click (object sender, EventArgs e) {
    int userGuess = Int32.TryParse (txtGuess.Text, out int result) ? result : -1;
    guessCount ++;
    if (userGuess == target) {
        this.BackColor = System.Drawing.Color.DarkOliveGreen;
        lblHowMuch.Text = string.Format ("You guessed the right number it took you {0} guesses", guessCount);
    } else {
        this.BackColor = userGuess < target ? System.Drawing.Color.Yellow : System.Drawing.Color.Red;
    }
    lblCount.Text = string.Format ("You made {0} Guesses", guessCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
0
Gpt3D_Clone955_0.cs 1 19
Gpt3D_Clone955_0.cs 20 37
----------------------------------------

private Point GetLocationRelativeToForm (Control c) {
    Point controlLocationRelativeToForm1 = new Point ();
    Control currentControl = c;
    while (currentControl.Parent != null) {
        controlLocationRelativeToForm1.Offset (currentControl.Left, currentControl.Top);
        currentControl = currentControl.Parent;
    }
    Point controlScreen = c.PointToScreen (Point.Empty);
    Point formScreen = PointToScreen (Point.Empty);
    Point controlLocationRelativeToForm2 = controlScreen - new Size (formScreen);
    Point locationOnForm = c.FindForm ().PointToClient (c.Parent.PointToScreen (c.Location));
    Debug.Assert (controlLocationRelativeToForm1.X == controlLocationRelativeToForm2.X);
    Debug.Assert (controlLocationRelativeToForm1.Y == controlLocationRelativeToForm2.Y);
    Debug.Assert (locationOnForm.X == controlLocationRelativeToForm1.X);
    Debug.Assert (locationOnForm.Y == controlLocationRelativeToForm1.Y);
    Debug.Assert (locationOnForm.X == controlLocationRelativeToForm2.X);
    Debug.Assert (locationOnForm.Y == controlLocationRelativeToForm2.Y);
    return controlLocationRelativeToForm1;
}
----------------------------------------

private Point GetLocationRelativeToForm (Control c) {
    Point controlLocationRelativeToForm1 = new Point ();
    Control currentControl = c;
    while (currentControl.Parent != null) {
        controlLocationRelativeToForm1.Offset (currentControl.Left, currentControl.Top);
        currentControl = currentControl.Parent;
    }
    Point controlScreenPoint = c.PointToScreen (Point.Empty);
    Point formScreenPoint = PointToScreen (Point.Empty);
    Point controlLocationRelativeToForm2 = controlScreenPoint - new Size (formScreenPoint);
    Point locationOnForm = c.FindForm ().PointToClient (c.Parent.PointToScreen (c.Location));
    Debug.Assert (controlLocationRelativeToForm1 == controlLocationRelativeToForm2);
    Debug.Assert (locationOnForm == controlLocationRelativeToForm1);
    Debug.Assert (locationOnForm == controlLocationRelativeToForm2);
    return controlLocationRelativeToForm1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
0
Gpt3D_Clone957_0.cs 1 12
Gpt3D_Clone957_0.cs 13 32
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (startDate.AddDays(7) <= endDate) {
         returnDict.Add (startDate, startDate + "-" + startDate.AddDays (7));
         startDate = startDate.AddDays (8); 
    } 
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (frequency.Equals ("weekly") ? (startDate.AddDays (7) <= endDate) : (startDate.AddMonths (1) <= endDate)) {
        if (frequency.Equals ("weekly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddDays (7));
            startDate = startDate.AddDays (8);
        }
        if (frequency.Equals ("monthly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddMonths (1));
            startDate = startDate.AddMonths (1).AddDays (1);
        }
    }
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
1
Gpt3D_Clone957_1.cs 1 12
Gpt3D_Clone957_1.cs 13 32
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (startDate.AddMonths (1) <= endDate) {
        returnDict.Add (startDate, startDate + "-" + startDate.AddMonths (1));
        startDate = startDate.AddMonths (1).AddDays (1); 
    } 
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (frequency.Equals ("weekly") ? (startDate.AddDays (7) <= endDate) : (startDate.AddMonths (1) <= endDate)) {
        if (frequency.Equals ("weekly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddDays (7));
            startDate = startDate.AddDays (8);
        }
        if (frequency.Equals ("monthly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddMonths (1));
            startDate = startDate.AddMonths (1).AddDays (1);
        }
    }
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
0
Gpt3D_Clone962_0.cs 1 20
Gpt3D_Clone962_0.cs 21 39
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (n > k) {
        long temp;
        temp = k;
        k = n - k;
        n = temp;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
1
Gpt3D_Clone962_1.cs 1 20
Gpt3D_Clone962_1.cs 21 39
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        long temp;
        temp = k;
        k = n - k;
        n = temp;
    }
    long c = 1;
    while (k > 0) {
        c *= n --;
        c /= k --;
    }
    return c;
}
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
2
Gpt3D_Clone962_2.cs 1 17
Gpt3D_Clone962_2.cs 18 38
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    else if (n == k) {
        return 1;
    }
    else if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    long i = 1;
    while (i <= k) {
        c *= n --;
        c /= i;
        i++;
    }
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
3
Gpt3D_Clone962_3.cs 1 17
Gpt3D_Clone962_3.cs 18 36
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    else if (n == k) {
        return 1;
    }
    else if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = k; i > 0; i--) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
0
Gpt3D_Clone963_0.cs 1 13
Gpt3D_Clone963_0.cs 14 27
----------------------------------------

public static byte [] ReadFully (Stream input) {
    const int bufferSize = 16*1024;
    byte [] buffer = new byte [bufferSize];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, bufferSize)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
1
Gpt3D_Clone963_1.cs 1 12
Gpt3D_Clone963_1.cs 13 26
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        while (true) {
            int read = input.Read (buffer, 0, buffer.Length);
            if (read == 0) return ms.ToArray();
            ms.Write (buffer, 0, read);
        }
    }
}
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
970
0
Gpt3D_Clone970_0.cs 1 19
Gpt3D_Clone970_0.cs 20 39
----------------------------------------

public static Dictionary < int, string > GetListItemsType4 (Type enumType) {
    if (! enumType.IsEnum)
        throw new ApplicationException ("GetListItems does not support non-enum types");
    Dictionary < int, string > list = new Dictionary < int, string > ();
    Array.ForEach(enumType.GetFields (BindingFlags.Static | BindingFlags.GetField | BindingFlags.Public), field=>{
        int value;
        string display;
        value = (int) field.GetValue (null);
        display = Enum.GetName (enumType, value);
        Array.ForEach(field.GetCustomAttributes (true), currAttr=> {
            EnumValueDataAttribute valueAttribute = currAttr as EnumValueDataAttribute;
            if (valueAttribute != null)
                display = valueAttribute.Name;
         });
        if(!list.ContainsKey(value))
            list.Add (value, display);
    });
    return list;
}
----------------------------------------

public static Dictionary < int, string > GetListItems (Type enumType) {
    if (! enumType.IsEnum)
        throw new ApplicationException ("GetListItems does not support non-enum types");
    Dictionary < int, string > list = new Dictionary < int, string > ();
    foreach (FieldInfo field in enumType.GetFields (BindingFlags.Static | BindingFlags.GetField | BindingFlags.Public)) {
        int value;
        string display;
        value = (int) field.GetValue (null);
        display = Enum.GetName (enumType, value);
        foreach (Attribute currAttr in field.GetCustomAttributes (true)) {
            EnumValueDataAttribute valueAttribute = currAttr as EnumValueDataAttribute;
            if (valueAttribute != null)
                display = valueAttribute.Name;
        }
        list.Add (value, display);
    }
    return list;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
971
0
Gpt3D_Clone971_0.cs 1 18
Gpt3D_Clone971_0.cs 19 37
----------------------------------------

private int CountOccurrences (string TestString, string TestPattern) {
    int PatternCount = 0;
    int SearchIndex = 0; 
    if (TestPattern.Length == 0) {
        throw new ApplicationException ("CountOccurrences: Unable to process because TestPattern has zero length.");
    }
    if (TestString.Length == 0) {
        return 0; 
    }
    while ((SearchIndex >= 0) && (SearchIndex < TestString.Length)) {
        SearchIndex = TestString.IndexOf (TestPattern, SearchIndex);
        if (SearchIndex >= 0) {
            ++ PatternCount; 
            SearchIndex += TestPattern.Length; 
        }
    } 
    return PatternCount; 
}
----------------------------------------

private int CountOccurrences (string TestString, string TestPattern) {
    int PatternCount = 0;
    int SearchIndex = 0;
    if (TestPattern.Length == 0)
        throw new ApplicationException ("CountOccurrences: Unable to process because TestPattern has zero length.");
    if (TestString.Length == 0)
        return 0;
    do
        {
            SearchIndex = TestString.IndexOf (TestPattern, SearchIndex);
            if (SearchIndex >= 0) {
                ++ PatternCount;
                SearchIndex += TestPattern.Length;
            }
        } while ((SearchIndex >= 0) && (SearchIndex < TestString.Length));
    return PatternCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
975
0
Gpt3D_Clone975_0.cs 1 35
Gpt3D_Clone975_0.cs 36 55
----------------------------------------

static void Main(string[] args) 
{ 
    string assemblyName = Path.Combine(Path.GetTempPath(), string.Format("temp{0}.dll", Guid.NewGuid())); 
    CSharpCodeProvider codeProvider = new CSharpCodeProvider(); 
    CompilerParameters compilerParameters = new CompilerParameters(new string[] { "System.dll", "Microsoft.CSharp.dll", }, assemblyName); 
    CompilerResults cr = codeProvider.CompileAssemblyFromSource(compilerParameters, File.ReadAllText("Program.cs")); 
    if (cr.Errors.Count > 0) 
    { 
        foreach (CompilerError error in cr.Errors) 
        { 
            Console.WriteLine(error.ErrorText); 
        } 
    } 
    else 
    { 
        AppDomain appDomain = AppDomain.CreateDomain("volatile"); 
        //load the assembly into current application domain
        Assembly asm = Assembly.LoadFrom(assemblyName); 
        //find the type I am going to create 
        Type[] types = asm.GetTypes(); 
        foreach (Type type in types) 
        { 
            Console.WriteLine(type.Name); 
        } 
        //create an instance of that type 
        object myObject = asm.CreateInstance("AssemblyTypeName");  
        //get the method to invoke 
        MethodInfo myMethodInfo = myObject.GetType().GetMethod("ShowTypesStructure"); 
        //invoke the method 
        myMethodInfo.Invoke(myObject, null); 
        AppDomain.Unload(appDomain); 
        File.Delete(assemblyName); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

static void Main (string [] args) {
    string assemblyName = Path.Combine (Path.GetTempPath (), string.Format ("temp{0}.dll", Guid.NewGuid ()));
    CSharpCodeProvider codeProvider = new CSharpCodeProvider ();
    CompilerParameters compilerParameters = new CompilerParameters (new string [] {"System.dll", "Microsoft.CSharp.dll",}, assemblyName);
    CompilerResults cr = codeProvider.CompileAssemblyFromSource (compilerParameters, File.ReadAllText ("Program.cs"));
    if (cr.Errors.Count > 0) {
        foreach (CompilerError error in cr.Errors) {
            Console.WriteLine (error.ErrorText);
        }
    } else {
        AppDomain appDomain = AppDomain.CreateDomain ("volatile");
        Proxy p = (Proxy) appDomain.CreateInstanceAndUnwrap (Assembly.GetExecutingAssembly ().FullName, typeof (Proxy).FullName);
        p.ShowTypesStructure (assemblyName);
        AppDomain.Unload (appDomain);
        File.Delete (assemblyName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
977
1
Gpt3D_Clone977_1.cs 1 10
Gpt3D_Clone977_1.cs 11 27
----------------------------------------

public bool Equals (T left, T right) {
    var leftProp = expr.Invoke (left);
    var rightProp = expr.Invoke (right);
    if (leftProp == null && rightProp == null)
        return true;
    else if (leftProp == null ^ rightProp == null)
        return false;
    else
        return leftProp.Equals (rightProp);
}
----------------------------------------

public bool Equals (T left, T right) {
    var leftProp1 = expr1.Invoke (left);
    var leftProp2 = expr2.Invoke (left);
    var rightProp1 = expr1.Invoke (right);
    var rightProp2 = expr2.Invoke (right);
    if (leftProp1 == null && rightProp1 == null && leftProp2 == null
        && rightProp2 == null)
        return true;
    else if (leftProp1 == null ^ rightProp1 == null 
        || leftProp2 == null ^ rightProp2 == null)
        return false;
    else
        return leftProp1.Equals (rightProp1) 
        && leftProp2.Equals (rightProp2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
0
Gpt3D_Clone978_0.cs 1 35
Gpt3D_Clone978_0.cs 36 74
----------------------------------------

public static int FastPower (int x, int pow) {
    if (pow == 0)
        return 1;
    if (pow == 1)
        return x;
    if (pow == 2)
        return x * x;
    if (pow == 3)
        return x * x * x;
    if (pow == 4)
        return x * x * x * x;
    if (pow == 5)
        return x * x * x * x * x;
    if (pow == 6)
        return x * x * x * x * x * x;
    if (pow == 7)
        return x * x * x * x * x * x * x;
    if (pow == 8)
        return x * x * x * x * x * x * x * x;
    if (pow == 9)
        return x * x * x * x * x * x * x * x * x;
    if (pow == 10)
        return x * x * x * x * x * x * x * x * x * x;
    if (pow == 11)
        return x * x * x * x * x * x * x * x * x * x * x;
    int ret = 1;
    while (pow != 0) {
        if ((pow & 1) == 1)
            ret *= x;
        x *= x;
        pow > >= 1;
    }
    return ret;
}
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
1
Gpt3D_Clone978_1.cs 1 35
Gpt3D_Clone978_1.cs 36 74
----------------------------------------

public static int FastPower (int x, int pow) {
    int ret = 1;
    if (pow == 0)
        return ret;
    if (pow == 1)
        return x;
    if (pow == 2)
        return x * x;
    if (pow == 3)
        return x * x * x;
    if (pow == 4)
        return x * x * x * x;
    if (pow == 5)
        return x * x * x * x * x;
    if (pow == 6)
        return x * x * x * x * x * x;
    if (pow == 7)
        return x * x * x * x * x * x * x;
    if (pow == 8)
        return x * x * x * x * x * x * x * x;
    if (pow == 9)
        return x * x * x * x * x * x * x * x * x;
    if (pow == 10)
        return x * x * x * x * x * x * x * x * x * x;
    if (pow == 11)
        return x * x * x * x * x * x * x * x * x * x * x;
    while (pow != 0) {
        if ((pow & 1) == 1)
            ret *= x;
        x *= x;
        pow > >= 1;
    }
    return ret;
}
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
0
Gpt3D_Clone979_0.cs 1 9
Gpt3D_Clone979_0.cs 10 20
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i - 1 < 0)
        return null;
    return tagList [i - 1].Position;
}
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
1
Gpt3D_Clone982_1.cs 1 33
Gpt3D_Clone982_1.cs 34 54
----------------------------------------

public static string GetWord(string input, int position) {
    char s = input[position];
    int sp1 = 0; 
    int sp2 = input.Length;
    bool foundBreakChar = false;
    //Backwards look
    for (int i = position; i > 0; i--) {
        char ch = input[i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            foundBreakChar = true;
        } 
        if (foundBreakChar) {
            break;
        } 
    }
    //Forward look
    for (int i = position; i < input.Length; i++) {
        char ch = input[i];
        if (ch == ' ' || ch == '\n') { 
            sp2 = i;
            foundBreakChar = true;
        }
        if (foundBreakChar) {
            break;
        }
    }
    return input.Substring(sp1, sp2 - sp1).Replace(char.ConvertFromUtf32(10), "");
}
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
2
Gpt3D_Clone982_2.cs 1 19
Gpt3D_Clone982_2.cs 20 39
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

public static string GetWord (string input, int position) {
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        if (input[i] == ' ' || input[i] == '\n')
        {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        if (input[i] == ' ' || input[i] == '\n')
        {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1,sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
0
Gpt3D_Clone983_0.cs 1 14
Gpt3D_Clone983_0.cs 15 27
----------------------------------------

public static void Main (string [] args) {
    for (int i = 0; i < args.Length; i++) {
        string path = args[i];
        if (FileSystemInfo.Exists (path)) {
            if(File.Exists(path)) {
               ProcessFile (path);
            } else if (Directory.Exists (path)) {
                ProcessDirectory (path);
            } 
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
1
Gpt3D_Clone983_1.cs 1 11
Gpt3D_Clone983_1.cs 12 24
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } 
        if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } 
        Console.WriteLine ("{0} is not a valid file or directory.", path);
    }
}
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
0
Gpt3D_Clone985_0.cs 1 13
Gpt3D_Clone985_0.cs 14 29
----------------------------------------

public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection<T>;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var enumerator = list.GetEnumerator();
    bool result = !enumerator.MoveNext();
    enumerator.Dispose();
    return result;
}
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
1
Gpt3D_Clone985_1.cs 1 14
Gpt3D_Clone985_1.cs 15 29
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection<T>;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    foreach (T element in list) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
986
0
Gpt3D_Clone986_0.cs 1 11
Gpt3D_Clone986_0.cs 12 24
----------------------------------------

public void DrawSquare (int sideLength) {
    for (int row = sideLength; row >= 1; row --) {
        for (int col = 0; col < sideLength; col ++) {
            if (col >= sideLength - row)
                Console.Write ('#');
            else
                Console.Write ('*');
        }
        Console.WriteLine ();
    }
}
----------------------------------------

public void DrawSquare (int sideLength) {
    for (int row = 1; row <= sideLength; row ++) {
        for (int col = 1; col <= sideLength; col ++) {
            if (col <= row)
                Console.Write ('*');
            else
                Console.Write ('#');
        }
        Console.WriteLine ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
987
0
Gpt3D_Clone987_0.cs 1 16
Gpt3D_Clone987_0.cs 17 34
----------------------------------------

public static void Main (string [] args) {
    var t0 = new Stopwatch ();
    int maxNumber = 20;
    long start;
    t0.Start ();
    start = Orig (maxNumber);
    t0.Stop ();
    Console.WriteLine ($"Original | {maxNumber}, {start}");
    Console.WriteLine ($"Original | time elapsed = {t0.Elapsed}.");
    t0.Restart ();
    start = Test (maxNumber);
    t0.Stop ();
    Console.WriteLine ($"Test | {maxNumber}, {start}");
    Console.WriteLine ($"Test | time elapsed = {t0.Elapsed}.");
    Console.ReadLine ();
}
----------------------------------------

public static void Main (string [] args) {
    Stopwatch t0 = new Stopwatch ();
    int maxNumber = 20;
    long start;
    t0.Start ();
    start = Orig (maxNumber);
    t0.Stop ();
    Console.WriteLine ("Original | {0:d}, {1:d}", maxNumber, start);
    Console.WriteLine ("Original | time elapsed = {0}.", t0.Elapsed);
    t0.Restart ();
    start = Test (maxNumber);
    t0.Stop ();
    Console.WriteLine ("Test | {0:d}, {1:d}", maxNumber, start);
    Console.WriteLine ("Test | time elapsed = {0}.", t0.Elapsed);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
987
1
Gpt3D_Clone987_1.cs 1 15
Gpt3D_Clone987_1.cs 16 33
----------------------------------------

public static void Main (string [] args) {
    Stopwatch t0 = new Stopwatch ();
    long start;
    t0.Start ();
    start = Orig (20);
    t0.Stop ();
    Console.WriteLine ("Original | 20, {0:d}", start);
    Console.WriteLine ("Original | time elapsed = {0}.", t0.Elapsed);
    t0.Restart ();
    start = Test (20);
    t0.Stop ();
    Console.WriteLine ("Test | 20, {0:d}", start);
    Console.WriteLine ("Test | time elapsed = {0}.", t0.Elapsed);
    Console.ReadLine ();
}
----------------------------------------

public static void Main (string [] args) {
    Stopwatch t0 = new Stopwatch ();
    int maxNumber = 20;
    long start;
    t0.Start ();
    start = Orig (maxNumber);
    t0.Stop ();
    Console.WriteLine ("Original | {0:d}, {1:d}", maxNumber, start);
    Console.WriteLine ("Original | time elapsed = {0}.", t0.Elapsed);
    t0.Restart ();
    start = Test (maxNumber);
    t0.Stop ();
    Console.WriteLine ("Test | {0:d}, {1:d}", maxNumber, start);
    Console.WriteLine ("Test | time elapsed = {0}.", t0.Elapsed);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
0
Gpt3D_Clone989_0.cs 1 25
Gpt3D_Clone989_0.cs 26 48
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    Double avgX = 0;
    Double avgY = 0;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        avgX += x;
        avgY += y;
        sumX2 += x * x;
        sumY2 += y * y;
        sumXY += x * y;
    }
    sumX = avgX * n;
    sumY = avgY * n;
    Double stdX = Math.Sqrt (sumX2 - avgX * avgX * n);
    Double stdY = Math.Sqrt (sumY2 - avgY * avgY * n);
    Double covariance = (sumXY - avgX * avgY * n);
    return covariance / stdX / stdY;
}
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
990
1
Gpt3D_Clone990_1.cs 1 14
Gpt3D_Clone990_1.cs 15 28
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    if (settings is System.Dynamic.ExpandoObject)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    if (settings is System.Web.Helpers.DynamicJsonObject)
        try {
            object test = settings[name];
            if (test == null) return false;
            else return true;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    if (settings is System.Dynamic.ExpandoObject)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    if (settings is System.Web.Helpers.DynamicJsonObject)
        try {
            return settings [name] != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
990
2
Gpt3D_Clone990_2.cs 1 14
Gpt3D_Clone990_2.cs 15 28
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    System.Dynamic.ExpandoObject expandoObject = settings as System.Dynamic.ExpandoObject;
    if (expandoObject != null)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    System.Web.Helpers.DynamicJsonObject dynamicJsonObject = settings as System.Web.Helpers.DynamicJsonObject;
    if (dynamicJsonObject != null)
        try {
            return dynamicJsonObject[name] != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    if (settings is System.Dynamic.ExpandoObject)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    if (settings is System.Web.Helpers.DynamicJsonObject)
        try {
            return settings [name] != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
990
3
Gpt3D_Clone990_3.cs 1 12
Gpt3D_Clone990_3.cs 13 28
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    if (settings is System.Dynamic.ExpandoObject)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    if (settings is System.Web.Helpers.DynamicJsonObject)
        try {
            return settings [name] != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    Dictionary<string, object> expandoObject = settings as Dictionary<string, object>;
    if (expandoObject != null) 
        return expandoObject.ContainsKey (name);
    TryGetValueJsonObject tryGetValueJsonObject = settings as TryGetValueJsonObject;
    if (tryGetValueJsonObject != null)
        try {
            return tryGetValueJsonObject[name] != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
0
Gpt3D_Clone992_0.cs 1 12
Gpt3D_Clone992_0.cs 13 27
----------------------------------------

private string DoSomething () {
    int max = 10;
    for (int i = 1; i <= max; i ++) {
        Thread.Sleep (_Random.Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            return "Job aborted!";
        }
        AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress ((i * 100) / max);
    }
    return "Job is done.";
}
----------------------------------------

private string DoSomething () {
    int max = 10;
    for (int i = 1; i <= max; i ++) {
        Thread.Sleep (new Random ().Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            return "Job aborted!";
        }
        AddMessage (string.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress (i * 10);
    }
    return "Job is done.";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
995
1
Gpt3D_Clone995_1.cs 1 16
Gpt3D_Clone995_1.cs 17 42
----------------------------------------

void Main3 () {
    string P3 = "00F35DBCD6D4C296D2FE9118B659D02608B76FAC94BB58B10283F20390E2B259BAC602466162E9EF3E6A1590702CAE49B681A75A878E266F1AFAE0FA89DA5CA44A1551B517A3F80A9D6C630F9E7D239B437F7402DF8055069735894CD9D4708F8777B5E4F3E6A8B2D4EEE50DB2C96BA16D3C81FEB923697D649A8B7771B10E5B3F";
    string Q3 = "00B5AF039839043410E04C35BDDB30679969EBAC8B";
    string G3 = "00F300A68E54DE33A09001E28EC09F2ABF5DAF208774F2514D878D5587D870C91C6DE42B4705078C6F4438765050039C2950B6DE85AFC0D12A7A5C521782CB760918DF68F385A7F177DF50AA6BA0284090454106E422FCAE5390ADC00B859A433430019E970BFA614374DE1FB40C600345EF19DC01A122E4676C614DC29D3DC2FE";
    string Y3 = "00A5317849AF22BA6498F1EF973158C8BDA848BEB074CB141E629C927B18F29C8CE99815001BAAB2931F339B5C52A79BC3DCB0C5962C302707BA6FF1807EEB91D751BA723BB7512C20689AC5E67A1B656CDFD1BA2D4F6A44308509486AA8754B47784FC4C03E546897200388656BA5834A2CC0E18E58454FF60C1BA5411D6F50FD";
    int a3 = 6;
    BigInteger p3 = BigInteger.Parse( P3 );
    BigInteger q3 = BigInteger.Parse( Q3 );
    BigInteger g3 = BigInteger.Parse( G3 );
    BigInteger y3 = BigInteger.Parse( Y3 );
    BigInteger current3 = BigInteger.Pow(2, a3);
    
    BigInteger k3 = BigInteger.ModPow( y3 , current3 , p3 );
}
----------------------------------------

void Main () {
    string P = "00F35DBCD6D4C296D2FE9118B659D02608B76FAC94BB58B10283F20390E2B259BAC602466162E9EF3E6A1590702CAE49B681A75A878E266F1AFAE0FA89DA5CA44A1551B517A3F80A9D6C630F9E7D239B437F7402DF8055069735894CD9D4708F8777B5E4F3E6A8B2D4EEE50DB2C96BA16D3C81FEB923697D649A8B7771B10E5B3F";
    string Q = "00B5AF039839043410E04C35BDDB30679969EBAC8B";
    string G = "00F300A68E54DE33A09001E28EC09F2ABF5DAF208774F2514D878D5587D870C91C6DE42B4705078C6F4438765050039C2950B6DE85AFC0D12A7A5C521782CB760918DF68F385A7F177DF50AA6BA0284090454106E422FCAE5390ADC00B859A433430019E970BFA614374DE1FB40C600345EF19DC01A122E4676C614DC29D3DC2FE";
    string Y = "00A5317849AF22BA6498F1EF973158C8BDA848BEB074CB141E629C927B18F29C8CE99815001BAAB2931F339B5C52A79BC3DCB0C5962C302707BA6FF1807EEB91D751BA723BB7512C20689AC5E67A1B656CDFD1BA2D4F6A44308509486AA8754B47784FC4C03E546897200388656BA5834A2CC0E18E58454FF60C1BA5411D6F50FD";
#====================
#gpt output=============
    int a = 6;
    BigInteger p = BigInteger.Parse( P );
    BigInteger q = BigInteger.Parse( Q );
    BigInteger g = BigInteger.Parse( G );
    BigInteger y = BigInteger.Parse( Y );
    BigInteger current = 1;
    BigInteger two = 2;
    for (int i = 0; i < a ; i++)
    {
        current = BigInteger.Multiply( current , two );
    }
    BigInteger k = BigInteger.ModPow( y , current , p );
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
0
Gpt3D_Clone998_0.cs 1 18
Gpt3D_Clone998_0.cs 19 35
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (!IsThis64bitProcess())
        return true;
    
    string moduleName = "";
    try {
        foreach (ProcessModule module in proc.Modules) {
            moduleName = Path.GetFileName (module.FileName).ToLowerInvariant (); 
            if (moduleName.Contains ("wow64")) {
                return true;
            }
        }
    }
    catch {
        // do nothing
    }
    return false;
}
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
1
Gpt3D_Clone998_1.cs 1 26
Gpt3D_Clone998_1.cs 27 43
----------------------------------------

public static bool Is32BitProcess(Process proc)
{
    if (IsThis64bitProcess())
    {
        foreach (ProcessModule oModule in proc.Modules)
        {
            try
            {
                string filename = Path.GetFileName(oModule.FileName).ToLowerInvariant();
                if (oModule.ModuleName == "wow64")
                {
                    return true;
                }
            }
            catch
            {
                    // Do nothing.
            }
        }
    }
    else
    {
        return true;
    }
    return false;
}
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
0
Gpt3D_Clone99_0.cs 1 11
Gpt3D_Clone99_0.cs 12 22
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int count = 0;
    foreach (var name in names) {
        if (count % 4 == 0 && count > 0)
            Console.WriteLine ();
        Console.Write (name + "\t");
        count++;
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
1
Gpt3D_Clone99_1.cs 1 11
Gpt3D_Clone99_1.cs 12 22
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int namesPrinted = 0;
    foreach (var name in names) {
        Console.Write (name + "\t");
        namesPrinted++;
        if (namesPrinted % 4 == 0 && namesPrinted > 0) 
            Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

